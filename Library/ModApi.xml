<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModApi</name>
    </assembly>
    <members>
        <member name="T:ModApi.AssetDatabase">
            <summary>
            A proxy class for using the Unity Editor's AssetDatabase from the Mod API.
            </summary>
        </member>
        <member name="F:ModApi.AssetDatabase._methodFindAssets">
            <summary>
            The method info for the 'FindAssets' method.
            </summary>
        </member>
        <member name="F:ModApi.AssetDatabase._methodFindAssetsInFolders">
            <summary>
            The method info for the 'FindAssets' method (overload that takes the array of paths).
            </summary>
        </member>
        <member name="F:ModApi.AssetDatabase._methodGetAssetPath">
            <summary>
            The method info for the 'GetAssetPath' method.
            </summary>
        </member>
        <member name="F:ModApi.AssetDatabase._methodGuidToAssetPath">
            <summary>
            The method info for the 'GUIDToAssetPath' method.
            </summary>
        </member>
        <member name="F:ModApi.AssetDatabase._methodLoadAssetAtPath">
            <summary>
            The method info for the 'LoadAssetAtPath' method.
            </summary>
        </member>
        <member name="F:ModApi.AssetDatabase._type">
            <summary>
            The AssetDatabase type.
            </summary>
        </member>
        <member name="P:ModApi.AssetDatabase.IsAvailable">
            <summary>
            Gets a value indicating whether the AssetDatabase is available (running from within the Unity Editor).
            </summary>
            <value>
            <c>true</c> if the AssetDatabase is available (running from within the Unity Editor); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.AssetDatabase.Type">
            <summary>
            Gets the type of the AssetDatabase.
            </summary>
            <value>
            The type of the AssetDatabase.
            </value>
            <exception cref="T:System.InvalidOperationException">The AssetDatabase cannot be accessed from outside the Unity Editor.</exception>
        </member>
        <member name="M:ModApi.AssetDatabase.FindAssetGuids(System.String,System.String[])">
            <summary>
            Finds the assets in the asset database (optionally in specific subfolders) that match the search filter.
            </summary>
            <param name="filter">The search filter.</param>
            <param name="searchInFolders">The asset database folder in which to search.</param>
            <returns>The array of GUIDs for the assets that match the search criteria.</returns>
        </member>
        <member name="M:ModApi.AssetDatabase.FindAssets``1(System.String[])">
            <summary>
            Finds the assets in the asset database (optionally in specific subfolders) of the specified type.
            </summary>
            <typeparam name="T">The type of the assets to find.</typeparam>
            <param name="searchInFolders">The asset database folder in which to search.</param>
            <returns>The array of assets that match the search criteria.</returns>
        </member>
        <member name="M:ModApi.AssetDatabase.FindAssets(System.String,System.String[])">
            <summary>
            Finds the assets in the asset database (optionally in specific subfolders) that match the search filter.
            </summary>
            <param name="filter">The search filter.</param>
            <param name="searchInFolders">The asset database folder in which to search.</param>
            <returns>The array of assets that match the search criteria.</returns>
        </member>
        <member name="M:ModApi.AssetDatabase.GetAssetPath(UnityEngine.Object)">
            <summary>
            Gets the path name relative to the project folder where the asset is stored.
            All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".
            </summary>
            <param name="obj">A reference to the asset for which to get the path.</param>
            <returns>The path name relative to the project folder where the asset is stored.</returns>
            <exception cref="T:System.Exception">Could not find the 'GetAssetPath' method via reflection for the AssetDatabase.</exception>
        </member>
        <member name="M:ModApi.AssetDatabase.GetAssetResourcesPath(UnityEngine.Object,System.Boolean)">
            <summary>
            Gets the path name relative to the resources folder where the asset is stored.
            If the asset cannot be found in the resources folder, a <c>null</c> is returned.
            </summary>
            <param name="obj">A reference to the asset for which to get the path.</param>
            <param name="removeExtension">If set to <c>true</c>, the file extension will be removed before returning the path.</param>
            <returns>
            The path name relative to the resources folder where the asset is stored or <c>null</c> if it could not be found.
            </returns>
        </member>
        <member name="M:ModApi.AssetDatabase.GuidToAssetPath(System.String)">
            <summary>
            Converts an asset database GUID to an asset path relative to the project root folder.
            </summary>
            <param name="guid">The GUID to convert.</param>
            <returns>The asset path of the specified asset.</returns>
        </member>
        <member name="M:ModApi.AssetDatabase.LoadAssetAtPath``1(System.String)">
            <summary>
            Loads the asset at the specified path.
            </summary>
            <typeparam name="T">The type of the asset to load.</typeparam>
            <param name="path">The path of the asset.</param>
            <returns>The requested asset.</returns>
        </member>
        <member name="M:ModApi.AssetDatabase.LoadAssetAtPath(System.String,System.Type)">
            <summary>
            Loads the asset at the specified path.
            </summary>
            <param name="path">The path of the asset.</param>
            <param name="type">The type of the asset to load.</param>
            <returns>The requested asset.</returns>
        </member>
        <member name="T:ModApi.Audio.AudioFile">
            <summary>
            Used to represent an audio file to be played in the game.
            </summary>
        </member>
        <member name="M:ModApi.Audio.AudioFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Audio.AudioFile"/> class.
            </summary>
            <param name="resourcePath">The resource path.</param>
        </member>
        <member name="P:ModApi.Audio.AudioFile.AudioClip">
            <summary>
            Gets or sets the audio clip resource.
            </summary>
            <value>
            The audio clip resource.
            </value>
        </member>
        <member name="P:ModApi.Audio.AudioFile.DefaultVolume">
            <summary>
            Gets or sets the default volume.
            </summary>
            <value>
            The default volume.
            </value>
        </member>
        <member name="P:ModApi.Audio.AudioFile.Dopplar">
            <summary>
            Gets or sets the dopplar.
            </summary>
            <value>
            The dopplar.
            </value>
        </member>
        <member name="P:ModApi.Audio.AudioFile.MaxDistance">
            <summary>
            Gets or sets the maximum distance.
            </summary>
            <value>
            The maximum distance.
            </value>
        </member>
        <member name="P:ModApi.Audio.AudioFile.MinDistance">
            <summary>
            Gets or sets the minimum distance.
            </summary>
            <value>
            The minimum distance.
            </value>
        </member>
        <member name="P:ModApi.Audio.AudioFile.ResourcePath">
            <summary>
            Gets or sets the resource path.
            </summary>
            <value>
            The resource path.
            </value>
        </member>
        <member name="T:ModApi.Audio.AudioLibrary">
            <summary>
            Contains pre-defined AudioFile instances.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.ButtonClicked">
            <summary>
            The button clicked sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.LevelFail">
            <summary>
            The sound played when the player fails a level.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.LevelSuccess">
            <summary>
            The sound played when the player completes a level.
            </summary>
        </member>
        <member name="M:ModApi.Audio.AudioLibrary.CreateSound(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Creates the sound.
            </summary>
            <param name="sound">The sound.</param>
            <param name="defaultVolume">The default volume.</param>
            <param name="minDistance">The <see cref="P:UnityEngine.AudioSource.minDistance"/> for the audio.</param>
            <param name="maxDistance">The <see cref="P:UnityEngine.AudioSource.maxDistance"/> for the audio.</param>
            <returns>
            The audio file.
            </returns>
        </member>
        <member name="M:ModApi.Audio.AudioLibrary.CreateUiSound(System.String,System.Single)">
            <summary>
            Creates the UI sound.
            </summary>
            <param name="sound">The sound.</param>
            <param name="defaultVolume">The default volume.</param>
            <returns>
            The audio file.
            </returns>
        </member>
        <member name="T:ModApi.Audio.AudioLibrary.Design">
            <summary>
            Sounds in the designer scene.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.AddPart">
            <summary>
            The designer add part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.ConnectPart">
            <summary>
            The designer connect part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.DeletePart">
            <summary>
            The designer delete part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.DisconnectPart">
            <summary>
            The designer disconnect part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.DropPart">
            <summary>
            The designer drop part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.GizmoFlyout">
            <summary>
            The gizmo flyout sound
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.ResizeSampleLooped">
            <summary>
            The resize sample looped
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.SelectPart">
            <summary>
            The designer select part.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.SprayPaint">
            <summary>
            The designer spray paint sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.StagingDragPart">
            <summary>
            The designer drag part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.StagingDragStage">
            <summary>
            The designer drag stage sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.StagingDropPart">
            <summary>
            The designer drop part sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.StagingDropStage">
            <summary>
            The designer drop stage sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.SuggestConnection">
            <summary>
            The designer suggest connection sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Design.TutorialStep">
            <summary>
            The tutorial step accomplishment sound.
            </summary>
        </member>
        <member name="T:ModApi.Audio.AudioLibrary.Flight">
            <summary>
            Sounds in the flight scene.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.DisconnectPart">
            <summary>
            The part disconnect sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.DockConnect">
            <summary>
            The dock connection sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.DockDisconnect">
            <summary>
            The dock disconnection sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.EvaCollision">
            <summary>
            The audio file for when the EVA character collides w/something.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.EvaJetpack">
            <summary>
            The audio file for when the EVA character uses the jetpack.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.Explosion">
            <summary>
            The explosion sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.FairingSeparation">
            <summary>
            The fairing separation sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.Interstage">
            <summary>
            The interstage disconnection sound
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.LandingGearLocked">
            <summary>
            The LandingGearLocked sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.NavSphereMoved">
            <summary>
            The nav sphere moved sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.NavSpherePressed">
            <summary>
            The nav sphere pressed sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.NavSphereReleased">
            <summary>
            The nav sphere released sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.ParachuteDeployed">
            <summary>
            The parachute deployed
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.PartCollisionGround">
            <summary>
            The part collision with ground sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.Swimming">
            <summary>
            The swimming audio file.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.ThrottleDecreaseClick">
            <summary>
            The throttle decrease click.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Flight.ThrottleIncreaseClick">
            <summary>
            The throttle increase click.
            </summary>
        </member>
        <member name="T:ModApi.Audio.AudioLibrary.Vizzy">
            <summary>
            Sounds in the Vizzy program editor.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Vizzy.ConnectNode">
            <summary>
            The connect node sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Vizzy.DeleteNode">
            <summary>
            The delete node sound
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Vizzy.DisconnectNode">
            <summary>
            The disconnct node sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Vizzy.DropNode">
            <summary>
            The drop node sound.
            </summary>
        </member>
        <member name="F:ModApi.Audio.AudioLibrary.Vizzy.SuggestConnection">
            <summary>
            The suggest connection sound.
            </summary>
        </member>
        <member name="T:ModApi.Audio.IAudioPlayer">
            <summary>
            An interface for a class handling the playing of audio in the game.
            </summary>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.CreateAudioSource(ModApi.Audio.AudioFile,UnityEngine.GameObject,System.Boolean)">
            <summary>
            Creates the audio source and returns it without playing the sound.
            </summary>
            <param name="audioFile">The audio file.</param>
            <param name="gameObjectToApplyAudioSourceTo">The game object to apply audio source to.  Pass null to attach to main camera.</param>
            <param name="userInterfaceSound">if set to <c>true</c> then this is a user interface sound.</param>
            <returns>The audio source that was created.</returns>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.GetGameMixerGroup">
            <summary>
            Gets the audio mixer group for game audio
            </summary>
            <returns>The audio mixer group for game audio</returns>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.GetUiMixerGroup">
            <summary>
            Gets the audio mixer group for user interface audio.
            </summary>
            <returns>The audio mixer group for user interface audio.</returns>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.PlaySound(ModApi.Audio.AudioFile,System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Plays the sound at the given position (unless null, then at the camera) with the sound's default volume.
            </summary>
            <param name="audioFile">The audio file.</param>
            <param name="position">The position.  Optional, if null it is played at the camera position.</param>
            <param name="userInterfaceSound">if set to <c>true</c> then this is a user interface sound.</param>
            <returns>The audio source for the sound.</returns>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.PlaySound(ModApi.Audio.AudioFile,System.Nullable{UnityEngine.Vector3},System.Single,System.Single,System.Boolean)">
            <summary>
            Plays the sound at the given position with the volume supplied.
            </summary>
            <param name="audioFile">The audio file.</param>
            <param name="position">The position.  Optional, if null it is played at the camera position.</param>
            <param name="volume">The volume to play at.</param>
            <param name="delay">The delay.</param>
            <param name="userInterfaceSound">if set to <c>true</c> then this is a user interface sound.</param>
            <returns>
            The audio source for the sound.
            </returns>
            s
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.SetLowpassValues(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Sets the lowpass values.
            </summary>
            <param name="cutoff">The cutoff value, or <c>null</c> to set to default.</param>
            <param name="resonance">The resonance value, or <c>null</c> to set to default.</param>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.SetMasterVolume(System.Single)">
            <summary>
            Sets the master volume.
            </summary>
            <param name="volume">The volume.</param>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.SetMusicVolume(System.Single)">
            <summary>
            Sets the music volume.
            </summary>
            <param name="volume">The volume.</param>
        </member>
        <member name="M:ModApi.Audio.IAudioPlayer.SetSoundVolume(System.Single)">
            <summary>
            Sets the sound volume.
            </summary>
            <param name="volume">The volume.</param>
        </member>
        <member name="T:ModApi.Audio.IMusicPlayer">
            <summary>
            The inteface for the music player.
            </summary>
        </member>
        <member name="P:ModApi.Audio.IMusicPlayer.Intensity">
            <summary>
            Gets the intensity of the music.
            </summary>
            <value>
            The intensity of the music.
            </value>
        </member>
        <member name="P:ModApi.Audio.IMusicPlayer.IsPlaying">
            <summary>
            Gets a value indicating whether the music is playing.
            </summary>
            <value>
              <c>true</c> if the music is playing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Audio.IMusicPlayer.MusicTracks">
            <summary>
            Gets all the available music tracks.
            </summary>
            <value>
            The all the available music tracks.
            </value>
        </member>
        <member name="T:ModApi.Audio.ISingleSound">
            <summary>
            Interface to manage multiple sources playing a single sound. They can combine their positions and
            volumes into one single audio source that is played.
            </summary>
        </member>
        <member name="P:ModApi.Audio.ISingleSound.MaxVolume">
            <summary>
            Gets or sets the maximum volume
            </summary>
        </member>
        <member name="M:ModApi.Audio.ISingleSound.AddPosition(UnityEngine.Vector3,System.Single)">
            <summary>
            Adds the position to the sound for this frame
            </summary>
            <param name="position">The position.</param>
            <param name="volume">The volume.</param>
        </member>
        <member name="M:ModApi.Audio.ISingleSound.NewFrame">
            <summary>
            Marks that a new frame is starting. Clears sounds from the previous frame.
            </summary>
        </member>
        <member name="T:ModApi.Audio.ISingleSoundManager">
            <summary>
            Manages  <see cref="T:ModApi.Audio.ISingleSound" />s.
            </summary>
        </member>
        <member name="M:ModApi.Audio.ISingleSoundManager.GetSingleSound(System.String)">
            <summary>
            Gets the single sound.
            </summary>
            <param name="soundResource">The sound resource.</param>
            <returns>
            The single sound for the sound.
            </returns>
        </member>
        <member name="T:ModApi.Audio.MusicTrack">
            <summary>
            Data about a music track.
            </summary>
        </member>
        <member name="F:ModApi.Audio.MusicTrack._primaryAudioClipName">
            <summary>
            The primary audio clip name.
            </summary>
        </member>
        <member name="F:ModApi.Audio.MusicTrack._secondaryAudioClipName">
            <summary>
            The secondary audio clip name.
            </summary>
        </member>
        <member name="M:ModApi.Audio.MusicTrack.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Audio.MusicTrack"/> class.
            </summary>
            <param name="primaryAudioClipName">Name of the primary audio clip.</param>
            <param name="secondaryAudioClipName">Name of the secondary audio clip.</param>
        </member>
        <member name="P:ModApi.Audio.MusicTrack.PrimaryAudioClipName">
            <summary>
            Gets the name of the primary audio clip.
            </summary>
            <value>
            The name of the primary audio clip.
            </value>
        </member>
        <member name="P:ModApi.Audio.MusicTrack.SecondaryAudioClipName">
            <summary>
            Gets the name of the secondary audio clip.
            </summary>
            <value>
            The name of the secondary audio clip.
            </value>
        </member>
        <member name="T:ModApi.Audio.OneShotAudioScript">
            <summary>
            Used to play a single audio file and then destroy the game object when its done.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Audio.OneShotAudioScript._audioSource">
            <summary>
            The audio source.
            </summary>
        </member>
        <member name="M:ModApi.Audio.OneShotAudioScript.Start">
            <summary>
            Unity Start method.
            </summary>
        </member>
        <member name="M:ModApi.Audio.OneShotAudioScript.Update">
            <summary>
            Unity update method.
            </summary>
        </member>
        <member name="T:ModApi.Automation.IAutoPilot">
            <summary>
            Interface for interacting with auto-pilot functionality.
            </summary>
        </member>
        <member name="P:ModApi.Automation.IAutoPilot.MaxPitchPidRange">
            <summary>
            Gets or sets the maximum pitch pid range. Used to control max values for PID sliders.
            </summary>
            <value>
            The maximum pitch pid range.
            </value>
        </member>
        <member name="P:ModApi.Automation.IAutoPilot.MaxRollPidRange">
            <summary>
            Gets or sets the maximum roll pid range. Used to control max values for PID sliders.
            </summary>
            <value>
            The maximum roll pid range.
            </value>
        </member>
        <member name="P:ModApi.Automation.IAutoPilot.PidGainsGrav">
            <summary>
            Gets or sets gravity alignment (aka leveling) gains.
            </summary>
            <value>
            The gravity alignment (aka leveling) gains.
            </value>
        </member>
        <member name="P:ModApi.Automation.IAutoPilot.PidGainsPitch">
            <summary>
            Gets or sets the pitch PID gains.
            </summary>
            <value>
            The pitch gains.
            </value>
        </member>
        <member name="P:ModApi.Automation.IAutoPilot.PidGainsRoll">
            <summary>
            Gets or sets the roll PID gains.
            </summary>
            <value>
            The roll gains.
            </value>
        </member>
        <member name="M:ModApi.Automation.IAutoPilot.Initialize(ModApi.Craft.Parts.ICommandPodScript)">
            <summary>
            Initializes the auto-pilot.
            </summary>
            <param name="commandPod">The command pod this auto-pilot will control.</param>
        </member>
        <member name="M:ModApi.Automation.IAutoPilot.Initialize(ModApi.Craft.Parts.ICommandPodScript,ModApi.Automation.IAutoPilot)">
            <summary>
            Initializes a new instance of the AutoPilot class.
            </summary>
            <param name="commandPod">The command pod to control.</param>
            <param name="source">The source autopilot to copy PID values from.</param>
        </member>
        <member name="M:ModApi.Automation.IAutoPilot.Update(System.Boolean,ModApi.GameLoop.FlightFrameData)">
            <summary>
            Updates navigation to the target heading, if enabled. This should be called every frame whether auto-pilot is enabled or not, though.
            </summary>
            <param name="enabled"><c>true</c> if auto-pilot is enabled, otherwise; <c>false</c></param>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.Automation.PidController">
            <summary>
            A PID controller: https://en.wikipedia.org/wiki/PID_controller
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidController._autoTunePid">
            <summary>
            The PID used to tune this PID's gain values.
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidController._lastError">
            <summary>
            The last error
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidController._oscillationMonitor">
            <summary>
            Experimental utility to adjust pids based on how much the craft is oscillating.
            </summary>
        </member>
        <member name="M:ModApi.Automation.PidController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Automation.PidController"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Automation.PidController.PidHandler">
            <summary>
            Handler for PID events.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:ModApi.Automation.PidController.AutoResetWhenErrorSignChanges">
            <summary>
            Gets or sets a value indicating whether to automaticly reset the pid controller when the sign of the error changes.  This can be used to prevent oscillations in some circumstances.
            </summary>
            <value>
              <c>true</c> if automaticly reset the pid controller when the sign of the error changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidController.ErrorAccum">
            <summary>
            Gets the accumulated error (integral) over a given period of time. Used by the integral component to correct for accumulated errors.
            </summary>
            <value>
            The accumulated error.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidController.ErrorMaxAccum">
            <summary>
            Gets or sets the maximum accumulatable error (integral) value, or <c>null</c> to not limit the maximum.
            Note: Setting this to <c>null</c> will attempt to "unwind" all accumulated errors.  If, for instance this is used on a helicopter tail and the
            tail blows out, causing the pid to accumulate 2 full circles of error (very extreme case), the PID will attempt to remove all
            2 * 2PI radians...which would not typically be desireable.
            </summary>
            <value>
            The error maximum accum.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidController.PidGains">
            <summary>
            Gets or sets the PID gain values (x=proportional, y=integral, z=derivative).
            </summary>
            <value>
            The pid gain values.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidController.Value">
            <summary>
            Gets the last output value from the PID system.
            </summary>
            <value>
            The last output value from the PID system.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidController.ValueComponents">
            <summary>
            Gets the individual pid value components which make up the final value (x=proportional, y=integral, z=derivative).  Used for debugging/tuning the pid.
            </summary>
            <value>
            The pid value components.
            </value>
        </member>
        <member name="M:ModApi.Automation.PidController.MakeCopy">
            <summary>
            Makes a copy of the Pid Controller.
            </summary>
            <returns>A copy of the Pid Controller.</returns>
        </member>
        <member name="M:ModApi.Automation.PidController.Reset">
            <summary>
            Resets any inter-frame PID system values such as those related to errors. The PID system will operate as if it were newly created, yet with the current PID gain values.
            </summary>
        </member>
        <member name="M:ModApi.Automation.PidController.Update(System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Updates the PID system and returns the value suggested to correct for the supplied error.
            </summary>
            <param name="value">The current value of the item being optimized by the PID controller.</param>
            <param name="target">The desired target value.</param>
            <param name="deltaTime">The delta time.</param>
            <param name="valueRate">An optional substitute value to use for the derivative term.</param>
            <returns>
            The value suggested to correct for the supplied error.
            </returns>
        </member>
        <member name="M:ModApi.Automation.PidController.CalculatePID(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Calculates the PID output given the supplied inputs.
            </summary>
            <param name="pidGains">The PID gains (x=proportional, y=integral, z=derivative).</param>
            <param name="error">The current error.</param>
            <param name="lastError">The last error.</param>
            <param name="deltaTime">The delta time.</param>
            <param name="errorAccum">The accumulated error values.</param>
            <param name="valueRate">An optional substitute value to use for the derivative term.</param>
            <returns>The individual PID value components...should be added together to get the final value.</returns>
        </member>
        <member name="M:ModApi.Automation.PidController.UpdatePID(System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Updates the PID system and returns the value suggested to correct for the supplied error.
            </summary>
            <param name="value">The current value of the item being optimized by the PID controller.</param>
            <param name="target">The desired target value.</param>
            <param name="deltaTime">The delta time.</param>
            <param name="valueRate">An optional substitute value to use for the derivative term.</param>
            <returns>
            The value suggested to correct for the supplied error.
            </returns>
        </member>
        <member name="T:ModApi.Automation.PidControllerOscillationMonitor">
            <summary>
            Utility to determine how much a PID controller is oscillating, and give a recommended scalar to reduce oscillation.
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._elapsedTime">
            <summary>
            The elapsed time
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._lastNonzeroError">
            <summary>
            The last nonzero error
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._maxNegativeError">
            <summary>
            The maximum negative error
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._maxNegativeErrorTime">
            <summary>
            The time when the maximum negative error occurred.
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._maxPositiveError">
            <summary>
            The maximum positive error
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._maxPositiveErrorTime">
            <summary>
            The time when the maximum positive occurred.
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._oscillationFactorAdjustment">
            <summary>
            The final oscillation factor adjustment value.
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._oscillationFactorInstant">
            <summary>
            The instantaneous oscillation factor.
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._oscillationFactorLongTerm">
            <summary>
            The oscillation factor over a long term
            </summary>
        </member>
        <member name="F:ModApi.Automation.PidControllerOscillationMonitor._oscillationFactorShortTerm">
            <summary>
            The oscillation factor over a short term
            </summary>
        </member>
        <member name="P:ModApi.Automation.PidControllerOscillationMonitor.OscillationFrequency">
            <summary>
            Gets the oscillation frequency, in seconds.
            </summary>
            <value>
            The oscillation frequency, in seconds.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidControllerOscillationMonitor.OscillationMagnitude">
            <summary>
            Gets the oscillation magnitude.
            </summary>
            <value>
            The oscillation magnitude.
            </value>
        </member>
        <member name="P:ModApi.Automation.PidControllerOscillationMonitor.RecommendedPidAdjustment">
            <summary>
            Gets the recommended pid adjustment.  Should be multiplied by the base PID value.
            </summary>
            <value>
            The recommended pid adjustment.
            </value>
        </member>
        <member name="M:ModApi.Automation.PidControllerOscillationMonitor.Reset">
            <summary>
            Resets the oscillation monitoring.
            </summary>
        </member>
        <member name="M:ModApi.Automation.PidControllerOscillationMonitor.Update(System.Single,System.Single)">
            <summary>
            Updates the oscillation monitoring.
            </summary>
            <param name="error">The current error.</param>
            <param name="deltaTime">The delta time.</param>
        </member>
        <member name="T:ModApi.Cameras.ISceneCamera">
            <summary>
            An interface for a camera that is responsible for rendering part or all of the game scene.
            </summary>
        </member>
        <member name="P:ModApi.Cameras.ISceneCamera.Camera">
            <summary>
            Gets the camera component.
            </summary>
            <value>
            The camera component.
            </value>
        </member>
        <member name="P:ModApi.Cameras.ISceneCamera.MasterCamera">
            <summary>
            Gets the master camera script.
            </summary>
            <value>
            The master camera script.
            </value>
        </member>
        <member name="P:ModApi.Cameras.ISceneCamera.UseConfigurableFOV">
            <summary>
            Gets a value indicating whether the camera should use the field of view configured in the game settings.
            </summary>
            <value>
              <c>true</c> if the camera should use the field of view configured in the game settings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Cameras.ISceneMasterCamera">
            <summary>
            An interface for the camera that is responsible for managing the rendering of the scene.
            </summary>
        </member>
        <member name="P:ModApi.Cameras.ISceneMasterCamera.Camera">
            <summary>
            Gets the camera component.
            </summary>
            <value>
            The camera component.
            </value>
        </member>
        <member name="P:ModApi.Cameras.ISceneMasterCamera.RenderTextureCraftMask">
            <summary>
            Gets the render texture craft mask (if available).
            </summary>
            <value>
            The render texture craft mask (if available).
            </value>
        </member>
        <member name="P:ModApi.Cameras.ISceneMasterCamera.RenderTextureScene">
            <summary>
            Gets the render texture for the main scene.
            </summary>
            <value>
            The render texture for the main scene.
            </value>
        </member>
        <member name="T:ModApi.CelestialData.CelestialBodyFileData">
            <summary>
            A class containing info about a celestial body file.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialBodyFileData.#ctor(ModApi.CelestialData.CelestialFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialBodyFileData"/> class.
            </summary>
            <param name="file">The celestial file associated with this object.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialBodyFileData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialBodyFileData"/> class.
            </summary>
            <param name="xml">The XML from which to create this object.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.Author">
            <summary>
            Gets the author of the celestial body.
            </summary>
            <value>The author of the celestial body.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.Description">
            <summary>
            Gets the description of the celestial body.
            </summary>
            <value>The description of the celestial body.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.FileId">
            <summary>
            Gets the file identifier.
            </summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.HashReferencesOnly">
            <summary>
            Gets a value indicating whether all file references are hash-based (and not path-based).
            </summary>
            <value><c>true</c> if all file references are hash-based (and not path-based); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.IsLatestVersion">
            <summary>
            Gets or sets a value indicating whether this celestial body is the latest version.
            </summary>
            <value><c>true</c> if this celestial body is the latest version; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.Name">
            <summary>
            Gets the name of the celestial body.
            </summary>
            <value>The name of the celestial body.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.RequiredMods">
            <summary>
            Gets the required mods for the celestial body.
            </summary>
            <value>The required mods for the celestial body.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.SupportFileReferences">
            <summary>
            Gets the support file references, keyed by the reference's local ID.
            </summary>
            <value>The support file references, keyed by the reference's local ID.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.UpgradeVersion">
            <summary>
            Gets or sets the celestial body instance that this instance may be upgraded to (if any).
            </summary>
            <value>The celestial body instance that this instance may be upgraded to (if any).</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.ModApi#CelestialData#ICelestialObjectFileData#UpgradeVersion">
            <summary>
            Gets or sets the celestial object instance that this instance may be upgraded to (if any).
            </summary>
            <value>The celestial object instance that this instance may be upgraded to (if any).</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.Version">
            <summary>
            Gets the version number for the celestial body.
            </summary>
            <value>The version number for the celestial body.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialBodyFileData.VersionTag">
            <summary>
            Gets the version tag for the celestial body.
            </summary>
            <value>The version tag for the celestial body.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialBodyFileData.LoadFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the celestial body data from the specified XML.
            </summary>
            <param name="element">The XML element from which to load the celestial body data.</param>
            <returns>The loaded celestial body data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialBodyFileData.GetHashBasedFileId">
            <summary>
            Gets the hash based file identifier for this celestial body.
            If the body has no support file references or all references are already hash-based, the current file id will be returned.
            </summary>
            <returns>The file id of the celestial body using hashed-based references.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialBodyFileData.GetSupportFile(System.String)">
            <summary>
            Gets the support file with the specified local ID.
            </summary>
            <param name="localId">The local identifier.</param>
            <returns>The requested celestial file or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialBodyFileData.SaveToXml(System.String)">
            <summary>
            Saves the celestial body data to an XML element with the specified name.
            </summary>
            <param name="elementName">The name of the XML element to create.</param>
            <returns>The XML element representing this object.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase">
            <summary>
            The celestial database that tracks and manages files for all planetary systems, celestial bodies, support files, and related stuff.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.CurrentXmlVersion">
            <summary>
            The current XML version.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase._celestialBodyFileDatas">
            <summary>
            The collection of unique celestial bodies loaded in the database, keyed by file ID.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase._filesById">
            <summary>
            The collection of unique files loaded in the database, keyed by file ID.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase._filesByPath">
            <summary>
            The collection of files tracked by the database, keyed by relative file path (automatically converted to lower case).
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase._planetarySystemFileDatas">
            <summary>
            The collection of unique planetary system loaded in the database, keyed by file ID.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase._supportFileDatas">
            <summary>
            The collection of unique support files loaded in the database, keyed by file ID.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase"/> class from being created.
            </summary>
        </member>
        <member name="E:ModApi.CelestialData.CelestialDatabase.Refreshed">
            <summary>
            Occurs when the celestial database is refreshed.
            </summary>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseLogLevel">
            <summary>
            An enumeration defining the different level of logging statements in the celestial database.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseLogLevel.None">
            <summary>
            Log items in this category are alway logged, regardless of the log setting.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseLogLevel.Minimal">
            <summary>
            Indicates log items that should be logged when the log setting is set to minimal or higher.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseLogLevel.Standard">
            <summary>
            Indicates log items that should be logged when the log setting is set to standard or higher.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseLogLevel.Verbose">
            <summary>
            Indicates log items that should only be logged when the log setting is set verbose.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.LogLevel">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialBodies">
            <summary>
            Gets the celestial bodies loaded in the database.
            </summary>
            <value>The celestial bodies loaded in the database.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.DefaultPlanetarySystemId">
            <summary>
            Gets the default planetary system identifier.
            </summary>
            <value>The default planetary system identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.DefaultSunId">
            <summary>
            Gets the default sun identifier.
            </summary>
            <value>The default sun identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.Paths">
            <summary>
            Gets the file and folder paths related to the celestial database.
            </summary>
            <value>The file and folder paths related to the celestial database.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.PlanetarySystems">
            <summary>
            Gets the planetary systems loaded in the database.
            </summary>
            <value>The planetary systems loaded in the database.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.SpecialFiles">
            <summary>
            Gets the list of special files in the celestial database.
            </summary>
            <value>The list of special files in the celestial database.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.StockFileIds">
            <summary>
            Gets the stock file ids.
            </summary>
            <value>The stock file ids.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.SupportFiles">
            <summary>
            Gets the support files loaded in the database.
            </summary>
            <value>The support files loaded in the database.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.StockFiles">
            <summary>
            Gets the list of celestial database stock files.
            </summary>
            <value>The list of celestial database stock files.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.Create">
            <summary>
            Creates and initializes the celestial database instance.
            </summary>
            <returns>The created and initialized celestial database.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.Log(System.String,ModApi.CelestialData.CelestialDatabase.CelestialDatabaseLogLevel)">
            <summary>
            Logs the specified message related to the celestial database.
            </summary>
            <param name="message">The message to log.</param>
            <param name="logLevel">The log level of the message.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LogError(System.String,System.Exception)">
            <summary>
            Logs the specified error message related to the celestial database.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">A related exception to log (<c>null</c> if not applicable).</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddFile(System.String,ModApi.CelestialData.CelestialFileType,System.Boolean,System.String)">
            <summary>
            Adds the specified file to the celestial database.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="type">The file type.</param>
            <param name="isUserData">If set to <c>true</c>, the file will be installed as user data rather than game data.</param>
            <param name="fileName">The name of the file (including the extension) to be added.</param>
            <returns>The ID of the newly added file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddFile(System.Xml.Linq.XDocument,ModApi.CelestialData.CelestialFileType,System.Boolean,System.String)">
            <summary>
            Adds the specified XML file to the celestial database.
            </summary>
            <param name="xml">The XML to add.</param>
            <param name="type">The file type.</param>
            <param name="isUserData">If set to <c>true</c>, the file will be installed as user data rather than game data.</param>
            <param name="fileName">The name of the file (including the extension) to be added.</param>
            <returns>The ID of the newly added file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddFile(System.Xml.Linq.XElement,ModApi.CelestialData.CelestialFileType,System.Boolean,System.String)">
            <summary>
            Adds the specified XML file to the celestial database.
            </summary>
            <param name="xml">The XML to add.</param>
            <param name="type">The file type.</param>
            <param name="isUserData">If set to <c>true</c>, the file will be installed as user data rather than game data.</param>
            <param name="fileName">The name of the file (including the extension) to be added.</param>
            <returns>The ID of the newly added file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddFile(System.Byte[],ModApi.CelestialData.CelestialFileType,System.Boolean,System.String)">
            <summary>
            Adds the specified file to the celestial database.
            </summary>
            <param name="fileData">The file data.</param>
            <param name="type">The file type.</param>
            <param name="isUserData">If set to <c>true</c>, the file will be installed as user data rather than game data.</param>
            <param name="fileName">The name of the file (including the extension) to be added.</param>
            <returns>The ID of the newly added file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddOrUpdateFile(ModApi.CelestialData.CelestialFilePath,System.Boolean)">
            <summary>
            Adds or updates the file in the celestial database.
            </summary>
            <param name="path">The file path.</param>
            <param name="refreshDatabase">If set to <c>true</c>, the celestial database will be refreshed.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddSupportFile(System.String)">
            <summary>
            Adds the specified celestial database support file to the database and returns its reference.
            If the file already exists in the database, the existing reference will be returned.
            </summary>
            <param name="filePath">The file path of the file to add.</param>
            <returns>The celestial file that was added or the existing celestial file if it already existed in the database.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CleanupGeneratedData">
            <summary>
            Cleanups the generated data cache, deleting any data associated with celestial files not currently installed.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ClearGeneratedData(System.Guid)">
            <summary>
            Clears the generated data for the specified file.
            </summary>
            <param name="fileId">The file identifier for which to clean the generated data.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.DeleteFile(ModApi.CelestialData.CelestialFile,System.Boolean)">
            <summary>
            Deletes the specified file from the database.
            </summary>
            <param name="file">The file to delete.</param>
            <param name="refreshDatabase">If set to <c>true</c>, the database will be refreshed.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetAllFiles(System.Boolean,System.Nullable{ModApi.CelestialData.CelestialFileType})">
            <summary>
            Gets a list of all files in the celestial database.
            </summary>
            <param name="includingDuplicates">If set to <c>true</c>, duplicate files (same content, different path) will be included in the list.</param>
            <param name="type">If not <c>null</c>, this will filter the list by the specified file type.</param>
            <returns>The requested list of celestial database files.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetCelestialBody(System.Guid)">
            <summary>
            Gets the celestial body file data for the celestial body with the specified ID.
            </summary>
            <param name="id">The ID of the celestial body to retrieve.</param>
            <returns>The requested celestial body file data or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetFile(System.Guid)">
            <summary>
            Gets the celestial file by its file ID.
            </summary>
            <param name="id">The file ID of the file to retrieve.</param>
            <returns>The requested celestial file or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetFile(ModApi.CelestialData.CelestialFileReference)">
            <summary>
            Gets the celestial file for the specified file reference.
            </summary>
            <param name="fileReference">The file reference.</param>
            <returns>The requested celestial file or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetFile(ModApi.CelestialData.CelestialFilePath)">
            <summary>
            Gets the celestial file by its file path.
            </summary>
            <param name="filePath">The file path of the file to retrieve.</param>
            <returns>The requested celestial file or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetGeneratedData(System.Guid)">
            <summary>
            Gets the generated data object used to save and load data generated at runtime for the specified celestial file.
            </summary>
            <param name="associatedFileId">The associated celestial file ID.</param>
            <returns>The generated data object used to save and load data generated at runtime for the specified celestial file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetPlanetarySystem(System.Guid)">
            <summary>
            Gets the planetary system file data for the planetary system with the specified ID.
            </summary>
            <param name="id">The ID of the planetary system to retrieve.</param>
            <returns>The requested planetary system file data or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetPlanetarySystem(ModApi.CelestialData.CelestialFileReference)">
            <summary>
            Gets the planetary system file data for the specified planetary system file reference.
            </summary>
            <param name="planetarySystemFileReference">The planetary system file reference.</param>
            <returns>The requested planetary system file data or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetSpecialFileId(ModApi.CelestialData.CelestialFilePath)">
            <summary>
            Gets the special file identifier for the file at the specified path or <c>null</c> if the file is not a special file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>The special file identifier for the file at the specified path or <c>null</c> if the file is not a special file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetSupportFile(System.Guid)">
            <summary>
            Gets the support file data for the support file with the specified ID.
            </summary>
            <param name="id">The ID of the support file to retrieve.</param>
            <returns>The requested support file data or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.Initialize">
            <summary>
            Initializes the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.InstallLegacySolarSystem(System.String)">
            <summary>
            Installs the legacy solar system.
            </summary>
            <param name="solarSystemPath">The legacy solar system XML path.</param>
            <returns>The id of the newly installed solar system.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.IsMissingFiles(ModApi.CelestialData.PlanetarySystemFileData)">
            <summary>
            Determines whether the specified planetary system is missing any required files.
            </summary>
            <param name="planetarySystem">The planetary system for which to check for missing files.</param>
            <returns><c>true</c> if the specified planetary system is missing any required files; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.IsMissingFiles(ModApi.CelestialData.CelestialBodyFileData)">
            <summary>
            Determines whether the specified celestial body is missing any required files.
            </summary>
            <param name="celestialBody">The celestial body for which to check for missing files.</param>
            <returns><c>true</c> if the specified celestial body is missing any required files; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.IsMissingFiles(System.Guid)">
            <summary>
            Determines whether the specified celestial file is missing any required files.
            </summary>
            <param name="fileId">The ID of the celestial file for which to check for missing files.</param>
            <returns><c>true</c> if the specified celestial file is missing any required files; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.IsMissingFiles(ModApi.CelestialData.CelestialFile)">
            <summary>
            Determines whether the specified celestial file is missing any required files.
            </summary>
            <param name="file">The celestial file for which to check for missing files.</param>
            <returns><c>true</c> if the specified celestial file is missing any required files; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.IsMissingFiles(ModApi.CelestialData.CelestialFileReference)">
            <summary>
            Determines whether the specified celestial file reference is missing any required files.
            </summary>
            <param name="fileReference">The celestial file reference for which to check for missing files.</param>
            <returns><c>true</c> if the specified celestial file reference is missing any required files; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LogMissingFiles(ModApi.CelestialData.CelestialFileType,ModApi.CelestialData.CelestialFileReference)">
            <summary>
            Logs the missing files for the specified reference (if any).
            </summary>
            <param name="fileType">The type of the file.</param>
            <param name="fileReference">The file reference.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.RefreshDatabase">
            <summary>
            Refreshes the celestial database.
            This will refresh all the database info based off the currently tracked files.
            This will NOT scan for changed/added files.
            This will save the database XML when complete.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ScanAllFiles">
            <summary>
            Scans all folders for celestial files to add to the database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ScanFiles(System.String)">
            <summary>
            Scans the specified folder for any celestial files that need updated or added to the database.
            </summary>
            <param name="directoryPath">The folder path to scan.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.AddFile(System.Guid,ModApi.CelestialData.CelestialFileType,System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            Adds the specified file to the celestial database.
            This adds the file to the file system but does not create or add the CelestialFile object.
            </summary>
            <param name="id">The ID of the file to add.</param>
            <param name="type">The file type.</param>
            <param name="directory">The directory in which to install the file.</param>
            <param name="fileName">The name of the file (including the extension) to be added.</param>
            <param name="fileData">The file data.</param>
            <param name="attempt">The number of attempts to add the file. This is used to alter the filename when a file with the exact path already exists.</param>
            <returns>The path of the newly added file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ClearFileData(System.Guid)">
            <summary>
            Clears the file data for the file with the specified id.
            </summary>
            <param name="id">The identifier of the file for which to clear file data.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ClearUploadTempDirectory">
            <summary>
            Clears the upload temporary directory.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ConfigureLatestVersionsAndUpgrades``1(System.Collections.Generic.List{System.ValueTuple{ModApi.CelestialData.CelestialFile,``0}})">
            <summary>
            Configures the latest versions and upgrades for all items in the list.
            </summary>
            <typeparam name="T">The type of the celestial object file data.</typeparam>
            <param name="items">The items to configure.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.ConfigureSpecialFiles">
            <summary>
            Configures the special files.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CreateAllDirectories">
            <summary>
            Creates all required directories used by the celestial database if they do not already exist.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CreateDirectoryIfMissing(System.String)">
            <summary>
            Creates the specified directory if it does not exist.
            </summary>
            <param name="directoryPath">The directory path.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.DebugLatestVersionsAndUpgrades``1(System.Collections.Generic.List{``0})">
            <summary>
            Outputs some debug log statements to help debug the latest versions and upgrades values.
            </summary>
            <typeparam name="T">The type of celestial file object data.</typeparam>
            <param name="items">The items to debug.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetFileDirectory(ModApi.CelestialData.CelestialFileType,System.Boolean)">
            <summary>
            Gets the celestial database file directory based on the specified data.
            </summary>
            <param name="fileType">The type of the file.</param>
            <param name="isUserData"><c>true</c> to get a user data directory, <c>false</c> to get a game data directory.</param>
            <returns>The requested directory path.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetFlightStateLegacySolarSystemId(System.String)">
            <summary>
            Gets the legacy solar system id from the specified flight state.
            </summary>
            <param name="flightStatePath">The flight state path.</param>
            <returns>The legacy solar system id for the flight state</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.GetLegacySolarSystemId(System.String)">
            <summary>
            Gets the legacy solar system id from the specified legacy solar system XML.
            </summary>
            <param name="legacySolarSystemXmlPath">The legacy solar system XML path.</param>
            <returns>The legacy solar system id for the specified legacy solar system XML.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.InstallStockFiles">
            <summary>
            Installs the stock files.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LoadCelestialBodyFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the celestial body from the specified XML element.
            </summary>
            <param name="celestialBodyXml">The XML representing the celestial body to load.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LoadDatabase">
            <summary>
            Loads the celestial database from the database XML file.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LoadDatabaseFileFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the database file from the specified XML element.
            </summary>
            <param name="fileXml">The XML representing the celestial file.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LoadPlanetarySystemFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the planetary system from the specified XML element.
            </summary>
            <param name="planetarySystemXml">The XML representing the planetary system to load.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.LoadSupportFileDataFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the support file data from the specified XML element.
            </summary>
            <param name="supportFileXml">The XML representing the support file data to load.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.SaveDatabase">
            <summary>
            Saves the database as XML.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.UpdateDefaultFiles">
            <summary>
            Updates the default files.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.UpgradeAllLegacySolarSystems">
            <summary>
            Upgrades all legacy solar systems.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.UpgradeLegacyCommonSolarSystems(System.String[])">
            <summary>
            Upgrades the legacy solar systems that have been installed in the user data solar systems folder.
            </summary>
            <param name="solarSystemPaths">The solar system paths.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.UpgradeLegacyFlightStateSolarSystem(System.String)">
            <summary>
            Upgrades the legacy solar system that sits side-by-side with a flight state (custom downloaded solar system).
            </summary>
            <param name="solarSystemPath">The solar system path.</param>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths">
            <summary>
            File and folder paths related to the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths"/> class.
            </summary>
            <param name="userDataPath">The user data path.</param>
            <param name="gameDataPath">The game data path.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameData">
            <summary>
            Gets the game data paths.
            </summary>
            <value>The game data paths.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.StreamingAssets">
            <summary>
            Gets the streaming asset paths.
            </summary>
            <value>The streaming assets paths.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserData">
            <summary>
            Gets the user data paths.
            </summary>
            <value>The user data paths.</value>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths">
            <summary>
            File and folder paths in the GameData folder related to the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths"/> class.
            </summary>
            <param name="rootPath">The root path.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.CelestialBodies">
            <summary>
            Gets the GameData celestial database celestial bodies path.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.DatabaseXml">
            <summary>
            Gets the celestial database XML file.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.GeneratedData">
            <summary>
            Gets the path of the celestial database generated data folder.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.PlanetarySystems">
            <summary>
            Gets the GameData celestial database planetary systems path.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.Root">
            <summary>
            Gets the root path of celestial database GameData files.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.SupportFiles">
            <summary>
            Gets the GameData celestial database support files path.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths.UploadTemp">
            <summary>
            Gets the temporary upload directory.
            </summary>
            <value>The temporary upload directory.</value>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.StreamingAssetsPaths">
            <summary>
            File and folder paths in the streaming assets folder related to the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.StreamingAssetsPaths.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.StreamingAssetsPaths" /> class.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.StreamingAssetsPaths.Root">
            <summary>
            Gets the root path of celestial database streaming asset files.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.StreamingAssetsPaths.StockFilesXml">
            <summary>
            Gets the stock files XML.
            </summary>
            <value>The stock files XML.</value>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths">
            <summary>
            File and folder paths in the UserData folder related to the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths"/> class.
            </summary>
            <param name="rootPath">The root path.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths.CelestialBodies">
            <summary>
            Gets the UserData celestial database celestial bodies path.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths.PlanetarySystems">
            <summary>
            Gets the UserData celestial database planetary systems path.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths.Root">
            <summary>
            Gets the root path of celestial database UserData files.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.UserDataPaths.SupportFiles">
            <summary>
            Gets the UserData celestial database support files path.
            </summary>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFile">
            <summary>
            A special file definition for the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFile.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFile"/> class.
            </summary>
            <param name="relativePath">The relative path.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFile.Id">
            <summary>
            Gets the file identifier.
            </summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFile.RelativePath">
            <summary>
            Gets the relative file path.
            </summary>
            <value>The relative file path.</value>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles">
            <summary>
            The collection of special file definitions for the celestial database.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles._allFiles">
            <summary>
            All known special files.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles.#ctor(ModApi.CelestialData.CelestialDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles"/> class.
            </summary>
            <param name="database">The celestial database.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles.AllFiles">
            <summary>
            Gets all known special files.
            </summary>
            <value>All known special files.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles.CelestialBodyCubemapModifierTemp">
            <summary>
            Gets the celestial body cubemap modifier temp special file info.
            </summary>
            <value>The celestial body cubemap modifier temp special file info.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles.PlanetStudioCelestialBody">
            <summary>
            Gets the planet studio celestial body special file info.
            </summary>
            <value>The planet studio celestial body special file info.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.CelestialDatabaseSpecialFiles.Create(ModApi.CelestialData.CelestialDatabase,System.Func{ModApi.CelestialData.CelestialDatabase.CelestialDatabasePaths.GameDataPaths,System.String},System.String,System.String)">
            <summary>
            Creates a new special file info object.
            </summary>
            <param name="database">The celestial database.</param>
            <param name="directorySelector">The directory selector.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileId">The file identifier.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.StockFileInfo">
            <summary>
            A class containing info about a celestial database stock file.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.StockFileInfo.#ctor(System.Guid,ModApi.CelestialData.CelestialFileType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.StockFileInfo" /> class.
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="type">The file type.</param>
            <param name="legacyPath">The legacy path.</param>
            <param name="streamingAssetsPath">The streaming assets path.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.StockFileInfo.FileId">
            <summary>
            Gets the file identifier.
            </summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.StockFileInfo.LegacyPath">
            <summary>
            Gets the legacy path.
            </summary>
            <value>The legacy path.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.StockFileInfo.StreamingAssetsPath">
            <summary>
            Gets the streaming assets path.
            </summary>
            <value>The streaming assets path.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.StockFileInfo.Type">
            <summary>
            Gets the file type.
            </summary>
            <value>The file type.</value>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary">
            <summary>
            A dictionary storing celestial files by a relative path key.
            Implements the <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, CelestialFile&gt;&gt;" />
            </summary>
            <seealso cref="!:IEnumerable&lt;KeyValuePair&lt;string, CelestialFile&gt;&gt;" />
        </member>
        <member name="F:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary._dictionary">
            <summary>
            The actual dictionary doing all the work.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary"/> class.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.Count">
            <summary>
            Gets the number of celestial files in the dictionary.
            </summary>
            <value>The number of celestial files in the dictionary.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.Values">
            <summary>
            Gets the celestial file values in the dictionary.
            </summary>
            <value>The celestial file values in the dictionary.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.Add(System.String,ModApi.CelestialData.CelestialFile)">
            <summary>
            Adds the celestial file with the specified relative path key.
            </summary>
            <param name="relativePath">The relative path key.</param>
            <param name="file">The celestial file.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified relative path key.
            </summary>
            <param name="relativePath">The relative path key.</param>
            <returns><c>true</c> if the dictionary contains the specified relative path key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The IEnumerator.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The IEnumerator.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.Remove(System.String)">
            <summary>
            Removes the celestial file associated with the specified relative path key.
            </summary>
            <param name="relativePath">The relative path key.</param>
            <returns><c>true</c> if a celestial file was removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.TryGetValue(System.String,ModApi.CelestialData.CelestialFile@)">
            <summary>
            Tries to get the celestial file associated with the specified relative path key.
            </summary>
            <param name="relativePath">The relative path key.</param>
            <param name="file">The celestial file if found, otherwise <c>null</c>.</param>
            <returns><c>true</c> if the celestial file was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabase.FilesByPathDictionary.ProcessKey(System.String)">
            <summary>
            Processes the key.
            </summary>
            <param name="key">The key.</param>
            <returns>The processed key.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialDatabaseGeneratedData">
            <summary>
            A class for handling data related to celestial files that is generated at runtime.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialDatabaseGeneratedData"/> class.
            </summary>
            <param name="rootPath">The root path for all generated data.</param>
            <param name="associatedFileId">The associated file identifier.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabaseGeneratedData.AssociatedFileId">
            <summary>
            Gets the associated file identifier.
            </summary>
            <value>The associated file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialDatabaseGeneratedData.RootPath">
            <summary>
            Gets the root path where all data is stored for the file associated with this instance.
            </summary>
            <value>The root path where all data is stored for the file associated with this instance.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.GetDirectories(System.String)">
            <summary>
            Gets all the generated data directories.
            </summary>
            <param name="rootPath">The root path where all generated data is stored.</param>
            <returns>A list of directory paths and their associated IDs.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.FileExists(System.String)">
            <summary>
            Determines whether the file with the specified name exists.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns><c>true</c> if the file with the specified name exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.GetFilePath(System.String,System.Boolean)">
            <summary>
            Gets the path of the file with the specified name.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="createDirectory">If set to <c>true</c>, the directory will be created if it doesn't exist.</param>
            <returns>The path of the file with the specified name.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.LoadFile(System.String)">
            <summary>
            Loads the specified file.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>The loaded file data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.LoadFileAsStream(System.String)">
            <summary>
            Loads the specified file as a stream.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>The loaded file stream.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.LoadFileAsText(System.String)">
            <summary>
            Loads the specified file as text.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>The loaded text data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.LoadFileAsXml(System.String)">
            <summary>
            Loads the specified file as xml.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>The loaded XML data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.LoadTexture(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the specified file as a texture.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <param name="mipmaps">If set to <c>true</c>, mipmaps will be generated for the loaded texture.</param>
            <param name="linear">zif set to <c>true</c>, the texture will be loaded as linear data rather than color data.</param>
            <param name="markNonReadable">If set to <c>true</c>, the texture will be marked as non-readable.</param>
            <returns>The loaded texture or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveFile(System.String,System.Byte[])">
            <summary>
            Saves the specified file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="data">The file data to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveFile(System.String,System.IO.Stream)">
            <summary>
            Saves the specified file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="stream">The file data stream to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveFile(System.String,System.String)">
            <summary>
            Saves the specified file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="text">The text data to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveFile(System.String,System.Xml.Linq.XDocument)">
            <summary>
            Saves the specified file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="xml">The xml data to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveFile(System.String,System.Xml.Linq.XElement)">
            <summary>
            Saves the specified file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="xml">The xml data to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveTextureAsExr(System.String,UnityEngine.Texture2D,UnityEngine.Texture2D.EXRFlags)">
            <summary>
            Saves the texture as a EXR file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="texture">The texture to be saved.</param>
            <param name="flags">The EXR flags to use.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveTextureAsJpg(System.String,UnityEngine.Texture2D,System.Int32)">
            <summary>
            Saves the texture as a JPG file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="texture">The texture to be saved.</param>
            <param name="quality">The quality of the JPG.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveTextureAsPng(System.String,UnityEngine.Texture2D)">
            <summary>
            Saves the texture as a PNG file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="texture">The texture to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialDatabaseGeneratedData.SaveTextureAsTga(System.String,UnityEngine.Texture2D)">
            <summary>
            Saves the texture as a TGA file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="texture">The texture to be saved.</param>
            <returns>The path of the saved file.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialFile">
            <summary>
            A class representing a file tracked by the celestial database.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFile._md5">
            <summary>
            The MD5 crypto service provider.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.CelestialData.CelestialFile"/> class.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.#ctor(ModApi.CelestialData.CelestialFilePath,System.Guid,System.DateTime,ModApi.CelestialData.CelestialFileType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialFile"/> class.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="id">The unique ID of the file.</param>
            <param name="lastModified">The last modified date/time of the file.</param>
            <param name="type">The type of the file.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFile.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.CelestialData.CelestialFile"/> is exists.
            </summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFile.Id">
            <summary>
            Gets the unique id of the file.
            </summary>
            <value>The unique id of the file.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFile.LastModified">
            <summary>
            Gets the last modified date/time of the file.
            </summary>
            <value>The last modified date/time of the file.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFile.Path">
            <summary>
            Gets the file path of the celestial file.
            </summary>
            <value>The file path of the celestial file.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFile.Type">
            <summary>
            Gets the type of the file.
            </summary>
            <value>The type of the file.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.Create(ModApi.CelestialData.CelestialFilePath,System.Nullable{System.Guid})">
            <summary>
            Creates a celestial file object for the file at the specified path.
            </summary>
            <param name="path">The file path.</param>
            <param name="id">The file ID if it has already been calculated. If unknown, use <c>null</c> and it will be calculated.</param>
            <returns>The requested celestial file object.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.DetectFileType(ModApi.CelestialData.CelestialFilePath)">
            <summary>
            Detects the type of the file at the specified path.
            </summary>
            <param name="path">The file path.</param>
            <returns>The type of the file at the specified path.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.LoadFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the file info from the specified XML element.
            </summary>
            <param name="element">The element from which to load the file info.</param>
            <returns>The file represented by the specified XML.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.LoadFile">
            <summary>
            Loads the file as a byte array.
            </summary>
            <returns>The loaded file data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.LoadFileAsStream">
            <summary>
            Loads the file as a stream.
            </summary>
            <returns>The loaded file stream.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.LoadFileAsText">
            <summary>
            Loads the file as text.
            </summary>
            <returns>The loaded text data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.LoadFileAsXml">
            <summary>
            Loads the file as XML.
            </summary>
            <returns>The loaded XML data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.LoadTexture(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the file as a texture.
            </summary>
            <param name="mipmaps">If set to <c>true</c>, mipmaps will be generated for the loaded texture.</param>
            <param name="linear">zif set to <c>true</c>, the texture will be loaded as linear data rather than color data.</param>
            <param name="markNonReadable">If set to <c>true</c>, the texture will be marked as non-readable.</param>
            <returns>The loaded texture or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFile.SaveToXml(System.String)">
            <summary>
            Saves the file info to an XML element with the specified name.
            </summary>
            <param name="elementName">The name of the XML element to which to save the file info.</param>
            <returns>The XML element representing this object.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialFileIdGenerator">
            <summary>
            A class used for generating IDs for celestial files.
            NOTE: This is NOT thread safe.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileIdGenerator._byteOrderMark">
            <summary>
            The byte order mark for UTF8 encoding.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileIdGenerator._encoding">
            <summary>
            The encoding to use when normalizing text content.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileIdGenerator._inputCharBuffer">
            <summary>
            The input character buffer for normalizing text content.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileIdGenerator._md5">
            <summary>
            The MD5 crypto service provider.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileIdGenerator._streamWriter">
            <summary>
            The cached stream writer used for normalizing text content.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateId(System.IO.Stream,System.Boolean)">
            <summary>
            Generates the unique identifier of the celestial file content.
            </summary>
            <param name="stream">The stream for which to generate a unique identifier.</param>
            <param name="normalizeTextContent">If set to <c>true</c>, text content will be normalized before generating the unique identifier.
            This should never be used on non-text content.</param>
            <returns>The unique identifier for the data in the stream.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateId(System.Byte[],System.Boolean)">
            <summary>
            Generates the unique identifier of the celestial file content.
            </summary>
            <param name="data">The data for which to generate a unique identifier.</param>
            <param name="normalizeTextContent">If set to <c>true</c>, text content will be normalized before generating the unique identifier.
            This should never be used on non-text content.</param>
            <returns>The unique identifier for the data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateId(System.IO.Stream,ModApi.CelestialData.CelestialFileType)">
            <summary>
            Generates the unique identifier of the celestial file content.
            </summary>
            <param name="stream">The stream for which to generate a unique identifier.</param>
            <param name="type">The celestial file type for which the unique identifier is being generated.</param>
            <returns>The unique identifier for the data in the stream.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateId(System.Byte[],ModApi.CelestialData.CelestialFileType)">
            <summary>
            Generates the unique identifier of the celestial file content.
            </summary>
            <param name="data">The data for which to generate a unique identifier.</param>
            <param name="type">The celestial file type for which the unique identifier is being generated.</param>
            <returns>The unique identifier for the data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateId(ModApi.CelestialData.CelestialFilePath,ModApi.CelestialData.CelestialFileType)">
            <summary>
            Generates the unique identifier of the celestial file content.
            </summary>
            <param name="path">The path of the file for which to generate a unique identifier.</param>
            <param name="type">The celestial file type for which the unique identifier is being generated.</param>
            <returns>The unique identifier for the file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateId(ModApi.CelestialData.CelestialFilePath,System.Boolean)">
            <summary>
            Generates the unique identifier of the celestial file content.
            </summary>
            <param name="path">The path of the file for which to generate a unique identifier.</param>
            <param name="normalizeTextContent">If set to <c>true</c>, text content will be normalized before generating the unique identifier.
            This should never be used on non-text content.</param>
            <returns>The unique identifier for the file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GenerateIdWithNormalizedText(System.IO.StreamReader)">
            <summary>
            Generates the unique identifier for the content after normalizing text content
            This should never be used with non-text content.
            </summary>
            <param name="inputStream">The input stream.</param>
            <returns>The unique identifier of the content.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.GetStreamWriter">
            <summary>
            Gets the stream writer, preparing it to be used for normalizing text content.
            </summary>
            <returns>The stream writer used for normalizing text content.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileIdGenerator.ShouldNormalizeTextContent(ModApi.CelestialData.CelestialFileType)">
            <summary>
            Gets a value indicating whether text content should be normalized before calculating a unique identifier for the specified file type.
            </summary>
            <param name="celestialFileType">The type of the celestial file.</param>
            <returns><c>true</c> if text content should be normalized before calculating a unique identifier, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialFileNameUtility">
            <summary>
            A utility class for working with file names in the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileNameUtility.ToDatabaseFileName(ModApi.CelestialData.CelestialFilePath,System.Guid,ModApi.CelestialData.CelestialFileType,System.Int32)">
            <summary>
            Converts the specified file name to its celestial database file name equivalent.
            This should also return the same name if the filename is already in its celestial database format.
            </summary>
            <param name="filePath">The file path to convert.</param>
            <param name="fileId">The file ID of the file represented by this file name.</param>
            <param name="fileType">The type of the file represented by this file name.</param>
            <param name="counter">The integer counter included in the file name (if non-zero) to help differentiate files with identical names.</param>
            <returns>The requested file name.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileNameUtility.ToDatabaseFileName(System.String,System.Guid,ModApi.CelestialData.CelestialFileType,System.Int32)">
            <summary>
            Converts the specified file name to its celestial database file name equivalent.
            This should also return the same name if the filename is already in its celestial database format.
            </summary>
            <param name="fileName">The file name to convert.</param>
            <param name="fileId">The file ID of the file represented by this file name.</param>
            <param name="fileType">The type of the file represented by this file name.</param>
            <param name="counter">The integer counter included in the file name (if non-zero) to help differentiate files with identical names.</param>
            <returns>The requested file name.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileNameUtility.ToFriendlyFileName(ModApi.CelestialData.CelestialFilePath,System.Boolean)">
            <summary>
            Converts the specified celestial database file name to its friendly file name equivalent.
            This should also return the same name if the filename is not in its celestial database format.
            </summary>
            <param name="filePath">The file to convert.</param>
            <param name="includeExtension">If set to <c>true</c>, the file extension will be included in the result (if known).</param>
            <returns>The requested file name.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileNameUtility.ToFriendlyFileName(System.String,System.Boolean)">
            <summary>
            Converts the specified celestial database file name to its friendly file name equivalent.
            This should also return the same name if the filename is not in its celestial database format.
            </summary>
            <param name="fileName">The file name to convert.</param>
            <param name="includeExtension">If set to <c>true</c>, the file extension will be included in the result (if known).</param>
            <returns>The requested file name.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialFilePath">
            <summary>
            A class representing the file path of a celestial database file.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFilePath._rootPathString">
            <summary>
            The string for the root path for all persistent data.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFilePath._rootPathUri">
            <summary>
            The URI for the root path for all persistent data.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFilePath._fullPath">
            <summary>
            The full path of the file as its known to the operating system.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFilePath._relativePath">
            <summary>
            The relative path of the file as its known to the celestial database.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFilePath.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.CelestialData.CelestialFilePath"/> class.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFilePath.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialFilePath"/> class.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="isRelative"><c>true</c> if the specified path is a celestial database relative path; <c>false</c> if its a full operating system path.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFilePath.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFilePath.FullPath">
            <summary>
            Gets the full path of the file as its known to the operating system.
            </summary>
            <value>The full path of the file as its known to the operating system.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFilePath.InGameData">
            <summary>
            Gets a value indicating whether this file path is located somewhere in the game data folder.
            </summary>
            <value><c>true</c> if this file path is located somewhere in the game data folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFilePath.InUserData">
            <summary>
            Gets a value indicating whether this file path is located somewhere in the user data folder.
            </summary>
            <value><c>true</c> if this file path is located somewhere in the user data folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFilePath.RelativePath">
            <summary>
            Gets the relative path of the file as its known to the celestial database.
            </summary>
            <value>The relative path of the file as its known to the celestial database.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFilePath.FromFullPath(System.String)">
            <summary>
            Creates the celestial file path object from the specified the relative file path.
            </summary>
            <param name="fullPath">The full path of the file as its known to the operating system.</param>
            <returns>The file path object (or <c>null</c> if the path is <c>null</c>).</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFilePath.FromRelativePath(System.String)">
            <summary>
            Creates the celestial file path object from the specified the relative file path.
            </summary>
            <param name="relativePath">The relative path of the file as its known to the celestial database.</param>
            <returns>The file path object (or <c>null</c> if the path is <c>null</c>).</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFilePath.GetFullFilePath(System.String)">
            <summary>
            Converts the specified celestial database root file path into a full file path.
            </summary>
            <param name="relativeFilePath">The relative file path.</param>
            <returns>The full file path represented by the specified relative path.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFilePath.GetRelativeFilePath(System.String)">
            <summary>
            Converts the specified file path into a relative path that can be used by the celestial database.
            </summary>
            <param name="fullFilePath">The full file path to convert.</param>
            <returns>A relative path that can be used by the celestial database.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialFileReference">
            <summary>
            A class representing a celestial file reference.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialFileReference"/> class.
            </summary>
            <param name="xml">The XML from which to create the object.</param>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.#ctor(System.String,System.Nullable{System.Guid},ModApi.CelestialData.CelestialFilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.CelestialFileReference"/> class.
            </summary>
            <param name="localId">The local ID of the referenced file.</param>
            <param name="fileId">The ID of the referenced file.</param>
            <param name="filePath">The path of the referenced file.</param>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFileReference.FileId">
            <summary>
            Gets the ID of the referenced file (or <c>null</c> if referenced based on <c>FilePath</c>).
            </summary>
            <value>The ID of the referenced file (or <c>null</c> if referenced based on <c>FilePath</c>).</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFileReference.FilePath">
            <summary>
            Gets the path of the referenced file (or <c>null</c> if referenced based on <c>FileId</c>).
            </summary>
            <value>The path of the referenced file (or <c>null</c> if referenced based on <c>FileId</c>).</value>
        </member>
        <member name="P:ModApi.CelestialData.CelestialFileReference.LocalId">
            <summary>
            Gets the local ID of the referenced file.
            </summary>
            <value>The local ID of the referenced file.</value>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.CreateWithFileId(System.String,ModApi.CelestialData.CelestialFile)">
            <summary>
            Creates the celestial file reference based on the file ID of the specified file.
            </summary>
            <param name="localId">The local ID for the file reference.</param>
            <param name="file">The file for which to create the reference.</param>
            <returns>The requested celestial file reference.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.CreateWithFileId(System.String,System.Guid)">
            <summary>
            Creates the celestial file reference based on the specified file ID.
            </summary>
            <param name="localId">The local ID for the file reference.</param>
            <param name="fileId">The file id for which to create the reference.</param>
            <returns>The requested celestial file reference.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.CreateWithFilePath(System.String,ModApi.CelestialData.CelestialFile)">
            <summary>
            Creates the celestial file reference based on the file path of the specified file.
            </summary>
            <param name="localId">The local ID for the file reference.</param>
            <param name="file">The file for which to create the reference.</param>
            <returns>The requested celestial file reference.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.CreateWithFilePath(System.String,ModApi.CelestialData.CelestialFilePath)">
            <summary>
            Creates the celestial file reference based on the specified file path.
            </summary>
            <param name="localId">The local ID for the file reference.</param>
            <param name="filePath">The file path for which to create the reference.</param>
            <returns>The requested celestial file reference.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.LoadFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads a file reference from the specified XML.
            </summary>
            <param name="element">The XML element from which to load the file reference.</param>
            <returns>The file reference object loaded from the XML.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.SaveToXml(System.String)">
            <summary>
            Saves the reference to an XML element with the specified name.
            </summary>
            <param name="elementName">The name of the XML element to create.</param>
            <returns>An XML element representing this object.</returns>
        </member>
        <member name="M:ModApi.CelestialData.CelestialFileReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:ModApi.CelestialData.CelestialFileType">
            <summary>
            An enumeration defining the different celestial file types.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileType.Unknown">
            <summary>
            An unknown file type.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileType.PlanetarySystem">
            <summary>
            A planetary system file.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileType.CelestialBody">
            <summary>
            A celestial body file.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.CelestialFileType.SupportFile">
            <summary>
            A support file.
            </summary>
        </member>
        <member name="T:ModApi.CelestialData.ICelestialObjectFileData">
            <summary>
            An interface for celestial object file data.
            </summary>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.Author">
            <summary>
            Gets the author of the celestial object.
            </summary>
            <value>The author of the celestial object.</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.Description">
            <summary>
            Gets the description of the celestial object.
            </summary>
            <value>The description of the celestial object.</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.FileId">
            <summary>
            Gets the file identifier.
            </summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.IsLatestVersion">
            <summary>
            Gets or sets a value indicating whether this celestial object is the latest version.
            </summary>
            <value><c>true</c> if this celestial object is the latest version; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.Name">
            <summary>
            Gets the name of the celestial object.
            </summary>
            <value>The name of the celestial object.</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.UpgradeVersion">
            <summary>
            Gets or sets the celestial object instance that this instance may be upgraded to (if any).
            </summary>
            <value>The celestial object instance that this instance may be upgraded to (if any).</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.Version">
            <summary>
            Gets the version number for the celestial object.
            </summary>
            <value>The version number for the celestial object.</value>
        </member>
        <member name="P:ModApi.CelestialData.ICelestialObjectFileData.VersionTag">
            <summary>
            Gets the version tag for the celestial object.
            </summary>
            <value>The version tag for the celestial object.</value>
        </member>
        <member name="T:ModApi.CelestialData.PlanetarySystemFileData">
            <summary>
            A class containing info about a planetary system file.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.#ctor(ModApi.CelestialData.CelestialFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.PlanetarySystemFileData"/> class.
            </summary>
            <param name="file">The celestial file associated with this object.</param>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.PlanetarySystemFileData"/> class.
            </summary>
            <param name="xml">The XML from which to create this object.</param>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.#ctor(System.Xml.Linq.XElement,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.PlanetarySystemFileData" /> class.
            </summary>
            <param name="xml">The XML from which to create this object.</param>
            <param name="fileId">The file identifier.</param>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.AllFileReferences">
            <summary>
            Gets all file references, keyed by the reference's local ID.
            </summary>
            <value>All file references, keyed by the reference's local ID.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.Author">
            <summary>
            Gets the author of the planetary system.
            </summary>
            <value>The author of the planetary system.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.CelestialBodyFileReferences">
            <summary>
            Gets the celestial body file references, keyed by the reference's local ID.
            </summary>
            <value>The celestial body file references, keyed by the reference's local ID.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.Description">
            <summary>
            Gets the description of the planetary system.
            </summary>
            <value>The description of the planetary system.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.FileId">
            <summary>
            Gets the file identifier.
            </summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.HashReferencesOnly">
            <summary>
            Gets a value indicating whether all file references are hash-based (and not path-based).
            </summary>
            <value><c>true</c> if all file references are hash-based (and not path-based); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.IsLatestVersion">
            <summary>
            Gets or sets a value indicating whether this planetary system is the latest version.
            </summary>
            <value><c>true</c> if this planetary system is the latest version; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.Name">
            <summary>
            Gets the name of the planetary system.
            </summary>
            <value>The name of the planetary system.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.RequiredMods">
            <summary>
            Gets the required mods for the planetary system.
            </summary>
            <value>The required mods for the planetary system.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.SupportFileReferences">
            <summary>
            Gets the support file references, keyed by the reference's local ID.
            </summary>
            <value>The support file references, keyed by the reference's local ID.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.UpgradeVersion">
            <summary>
            Gets or sets the planetary system instance that this instance may be upgraded to (if any).
            </summary>
            <value>The planetary system instance that this instance may be upgraded to (if any).</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.ModApi#CelestialData#ICelestialObjectFileData#UpgradeVersion">
            <summary>
            Gets or sets the celestial object instance that this instance may be upgraded to (if any).
            </summary>
            <value>The celestial object instance that this instance may be upgraded to (if any).</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.Version">
            <summary>
            Gets the version number for the planetary system.
            </summary>
            <value>The version number for the planetary system.</value>
        </member>
        <member name="P:ModApi.CelestialData.PlanetarySystemFileData.VersionTag">
            <summary>
            Gets the version tag for the planetary system.
            </summary>
            <value>The version tag for the planetary system.</value>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.LoadFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the planetary system data from the specified XML.
            </summary>
            <param name="element">The XML element from which to load the planetary system data.</param>
            <returns>The loaded planetary system data.</returns>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.GetAllCelestialBodyFileData">
            <summary>
            Gets the list of file data for all celestial bodies included in this planetary system.
            </summary>
            <returns>The list of file data for all celestial bodies included in this planetary system.</returns>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.GetCelestialBodyFile(System.String)">
            <summary>
            Gets the celestial body file with the specified local ID.
            </summary>
            <param name="localId">The local identifier.</param>
            <returns>The requested celestial file or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.GetCelestialBodyFileData(System.String)">
            <summary>
            Gets the celestial body file data with the specified local ID.
            </summary>
            <param name="localId">The local identifier.</param>
            <returns>The requested celestial file data or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.GetHashBasedFileId">
            <summary>
            Gets the hash based file identifier for this planetary system.
            This may need to also calculate the hash-based file identifiers for all celestial bodies and referenced files as they affect the planetary system's hash.
            If the system has no celestial bodies, no other referenced files, or all references are already hash-based, the current file id will be returned.
            </summary>
            <returns>The file id of the planetary system using hashed-based references.</returns>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.GetReferencedFile(System.String)">
            <summary>
            Gets the referenced file with the specified local ID.
            </summary>
            <param name="localId">The local identifier.</param>
            <returns>The requested celestial file or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.CelestialData.PlanetarySystemFileData.SaveToXml(System.String)">
            <summary>
            Saves the planetary system data to an XML element with the specified name.
            </summary>
            <param name="elementName">The name of the XML element to create.</param>
            <returns>The XML element representing this object.</returns>
        </member>
        <member name="T:ModApi.CelestialData.SupportFileData">
            <summary>
            A class containing info about a celestial database support file.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.#ctor(ModApi.CelestialData.CelestialFile,ModApi.CelestialData.CelestialDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.SupportFileData"/> class.
            </summary>
            <param name="file">The celestial file associated with this object.</param>
            <param name="database">The celestial database.</param>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.SupportFileData"/> class.
            </summary>
            <param name="xml">The XML from which to create this object.</param>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileData.FileId">
            <summary>
            Gets the file identifier.
            </summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileData.FriendlyName">
            <summary>
            Gets the friendly name of the support file (if available).
            </summary>
            <value>The friendly name of the support file (if available).</value>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileData.TextureInfo">
            <summary>
            Gets the texture information for this file if the support file type is a texture (<c>null</c> otherwise).
            </summary>
            <value>The texture information for this file if the support file type is a texture (<c>null</c> otherwise).</value>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileData.Type">
            <summary>
            Gets the type of the support file.
            </summary>
            <value>The type of the support file.</value>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.SaveToXml(System.String)">
            <summary>
            Saves the support file data to an XML element with the specified name.
            </summary>
            <param name="elementName">The name of the XML element to create.</param>
            <returns>The XML element representing this object.</returns>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.GenerateThumbnail(UnityEngine.Texture2D,System.Int32,ModApi.CelestialData.CelestialDatabaseGeneratedData)">
            <summary>
            Generates a thumbnail for the specified texture with the target size.
            The thumbnail is stored as generated data in the celestial database.
            WARNING: This permanently modifies the size of the specified texture.
            </summary>
            <param name="texture">The texture for which to generate the thumbnail.</param>
            <param name="targetSize">The target size of the thumbnail.</param>
            <param name="data">The generated data object used to save the thumbnail in the celestial database.</param>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.GetThumbnailSize(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Gets the size of the thumbnail given a texture and a target size.
            A texture will downscaled to fit the target size but will not be upscaled if smaller.
            The aspect ratio will be maintained.
            </summary>
            <param name="texture">The texture.</param>
            <param name="targetSize">The target size of the thumbnail.</param>
            <returns>The width and height values for the thumbnail.</returns>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.DetectAndInitializeType(ModApi.CelestialData.CelestialFile,ModApi.CelestialData.CelestialDatabase)">
            <summary>
            Attempts to automatically detect the type of the support file and performs any one-time initialization that may be needed (such as generating thumbnails).
            </summary>
            <param name="file">The file to detect and initialize.</param>
            <param name="database">The celestial database.</param>
            <returns>The detected type of the support file.</returns>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileData.TryInitializeAsTexture(ModApi.CelestialData.CelestialFile,ModApi.CelestialData.CelestialDatabase)">
            <summary>
            Tries to initialize the support file as a texture (by loading it).
            If successful, the texture info will be read and thumbnails will be generated.
            </summary>
            <param name="file">The file to try and initialize as a texture.</param>
            <param name="database">The celestial database.</param>
            <returns><c>true</c> if the file was successfully initialized as a texture, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.CelestialData.SupportFileDataTextureInfo">
            <summary>
            A class containing texture information for a texture support file.
            </summary>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileDataTextureInfo.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.SupportFileDataTextureInfo"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileDataTextureInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.CelestialData.SupportFileDataTextureInfo"/> class.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileDataTextureInfo.Format">
            <summary>
            Gets the texture format.
            </summary>
            <value>The texture format.</value>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileDataTextureInfo.Height">
            <summary>
            Gets the texture height.
            </summary>
            <value>The texture height.</value>
        </member>
        <member name="P:ModApi.CelestialData.SupportFileDataTextureInfo.Width">
            <summary>
            Gets the texture width.
            </summary>
            <value>The texture width.</value>
        </member>
        <member name="M:ModApi.CelestialData.SupportFileDataTextureInfo.SaveToXml(System.String)">
            <summary>
            Saves the texture info to an XML element with the specified name.
            </summary>
            <param name="elementName">The name of the XML element to create.</param>
            <returns>The XML element representing this object.</returns>
        </member>
        <member name="T:ModApi.CelestialData.SupportFileType">
            <summary>
            An enumeration defining the different known types of celestial database support files.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.SupportFileType.Unknown">
            <summary>
            An unknown support file type.
            </summary>
        </member>
        <member name="F:ModApi.CelestialData.SupportFileType.Texture">
            <summary>
            A texture support file.
            </summary>
        </member>
        <member name="T:ModApi.Common.Animation.AnimationCurveSampler">
            <summary>
            A class used for sampling animation curves that can be used from background threads.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler._curveSamples">
            <summary>
            The animation curve samples.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler._curveSamplesCount">
            <summary>
            The number of samples taken from the animation curve. More samples mean better accuracy.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler._curveSamplesMax">
            <summary>
            The curve samples maximum value;
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler._sampleRange">
            <summary>
            The sample range.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler._stepSize">
            <summary>
            The step size per sample.
            </summary>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveSampler.#ctor(UnityEngine.AnimationCurve,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Animation.AnimationCurveSampler" /> class.
            </summary>
            <param name="animationCurve">The animation curve.</param>
            <param name="sampleCount">The number of samples taken from the animation curve. More samples mean better accuracy.</param>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler.AnimationCurve">
            <summary>
            Gets the animation curve.
            </summary>
            <value>
            The animation curve.
            </value>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler.SampleRangeMaxValue">
            <summary>
            Gets the sample range maximum value.
            </summary>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler.SampleRangeMinValue">
            <summary>
            Gets the sample range minimum value.
            </summary>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveSampler.Sample(System.Single)">
            <summary>
            Samples the animation curve with the specified input.
            </summary>
            <param name="input">The input at which to sample the animation curve.</param>
            <returns>The result of the animation curve given the specified input.</returns>
        </member>
        <member name="T:ModApi.Common.Animation.AnimationCurveSampler01">
            <summary>
            A class used for sampling animation curves that can be used from background threads.
            This class assumes the animation curve runs between zero and one.
            When sampling the curve, the input value must be clamped between zero and one prior to the sample call.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler01._curveSamples">
            <summary>
            The animation curve samples.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler01._curveSamplesCount">
            <summary>
            The number of samples taken from the animation curve. More samples mean better accuracy.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler01._curveSamplesMax">
            <summary>
            The curve samples maximum value;
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveSampler01._stepSize">
            <summary>
            The step size per sample.
            </summary>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveSampler01.#ctor(UnityEngine.AnimationCurve,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Animation.AnimationCurveSampler01" /> class.
            </summary>
            <param name="animationCurve">The animation curve.</param>
            <param name="sampleCount">The number of samples taken from the animation curve. More samples mean better accuracy.</param>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler01.AnimationCurve">
            <summary>
            Gets the animation curve.
            </summary>
            <value>
            The animation curve.
            </value>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler01.MaxValue">
            <summary>
            Gets the maximum value on the curve.
            </summary>
            <value>
            The maximum value on the curve.
            </value>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler01.MinValue">
            <summary>
            Gets the minimum value on the curve.
            </summary>
            <value>
            The minimum value on the curve.
            </value>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler01.ValueAtMax">
            <summary>
            Gets the sample value at time of one.
            </summary>
        </member>
        <member name="P:ModApi.Common.Animation.AnimationCurveSampler01.ValueAtMin">
            <summary>
            Gets the sample value at time of zero.
            </summary>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveSampler01.Sample(System.Single)">
            <summary>
            Samples the animation curve with the specified input.
            </summary>
            <param name="input">The input at which to sample the animation curve.</param>
            <returns>The result of the animation curve given the specified input.</returns>
        </member>
        <member name="T:ModApi.Common.Animation.AnimationCurveTangentMode">
            <summary>
            An enumeration defining the different tangent modes supported by animation curves.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveTangentMode.Free">
            <summary>
            The tangent can be freely set by dragging the tangent handle.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveTangentMode.Auto">
            <summary>
            The tangents are automatically set to make the curve go smoothly through the key.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveTangentMode.Linear">
            <summary>
            The tangent points towards the neighboring key.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveTangentMode.Constant">
            <summary>
            The curve retains a constant value between two keys.
            </summary>
        </member>
        <member name="F:ModApi.Common.Animation.AnimationCurveTangentMode.ClampedAuto">
            <summary>
            The tangents are automatically set to make the curve go smoothly through the key and prevent overshooting.
            </summary>
        </member>
        <member name="T:ModApi.Common.Animation.AnimationCurveUtility">
            <summary>
            A utility class for <see cref="T:UnityEngine.AnimationCurve"/> objects.
            </summary>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangents(UnityEngine.AnimationCurve,ModApi.Common.Animation.AnimationCurveTangentMode)">
            <summary>
            Updates the tangents of all keyframes of the animation curve based on the specified tangent mode.
            </summary>
            <param name="animationCurve">The animation curve to update.</param>
            <param name="tangentMode">The tangent mode to use.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsAuto(UnityEngine.AnimationCurve)">
            <summary>
            Updates the tangents of all keyframes of the animation curve using the 'Auto' tangents mode.
            </summary>
            <param name="curve">The animation curve to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsAuto(UnityEngine.Keyframe[])">
            <summary>
            Updates the tangents of all keyframes using the 'Auto' tangents mode.
            </summary>
            <param name="keys">The keyframes to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsClampedAuto(UnityEngine.AnimationCurve)">
            <summary>
            Updates the tangents of all keyframes of the animation curve using the 'ClampedAuto' tangents mode.
            </summary>
            <param name="curve">The animation curve to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsClampedAuto(UnityEngine.Keyframe[])">
            <summary>
            Updates the tangents of all keyframes using the 'ClampedAuto' tangents mode.
            </summary>
            <param name="keys">The keyframes to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsConstant(UnityEngine.AnimationCurve)">
            <summary>
            Updates the tangents of all keyframes of the animation curve using the 'Constant' tangents mode.
            </summary>
            <param name="curve">The animation curve to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsConstant(UnityEngine.Keyframe[])">
            <summary>
            Updates the tangents of all keyframes using the 'Constant' tangents mode.
            </summary>
            <param name="keys">The keyframes to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsLinear(UnityEngine.AnimationCurve)">
            <summary>
            Updates the tangents of all keyframes of the animation curve using the 'Linear' tangents mode.
            </summary>
            <param name="curve">The animation curve to update.</param>
        </member>
        <member name="M:ModApi.Common.Animation.AnimationCurveUtility.SetTangentsLinear(UnityEngine.Keyframe[])">
            <summary>
            Updates the tangents of all keyframes using the 'Linear' tangents mode.
            </summary>
            <param name="keys">The keyframes to update.</param>
        </member>
        <member name="T:ModApi.Common.Attributes.DisplayNameAttribute">
            <summary>
            An attribute for decorating fields or properties with display names.s
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:ModApi.Common.Attributes.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Attributes.DisplayNameAttribute"/> class.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:ModApi.Common.Attributes.DisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="T:ModApi.Common.Attributes.EnumFlagButtonsAttribute">
            <summary>
            An attribute used to draw enum flag fields as toggle buttons in the Unity inspector.
            </summary>
            <seealso cref="T:UnityEngine.PropertyAttribute" />
        </member>
        <member name="M:ModApi.Common.Attributes.EnumFlagButtonsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Attributes.EnumFlagButtonsAttribute"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Common.Attributes.EnumFlagButtonsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Attributes.EnumFlagButtonsAttribute"/> class.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:ModApi.Common.Attributes.EnumFlagButtonsAttribute.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="T:ModApi.Common.Attributes.MinMaxValueAttribute">
            <summary>
            An attribute applied to a property so that the Unity inspector
            represents it with a minimum/maximum range slider.
            </summary>
            <seealso cref="T:UnityEngine.PropertyAttribute" />
        </member>
        <member name="M:ModApi.Common.Attributes.MinMaxValueAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Attributes.MinMaxValueAttribute"/> class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="P:ModApi.Common.Attributes.MinMaxValueAttribute.MaxValue">
            <summary>
            Gets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:ModApi.Common.Attributes.MinMaxValueAttribute.MinValue">
            <summary>
            Gets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="T:ModApi.Common.Attributes.ReadOnlyInInspectorAttribute">
            <summary>
            An attribute used to specify that a field should be displayed as read only in the inspector.
            </summary>
            <seealso cref="T:UnityEngine.PropertyAttribute" />
        </member>
        <member name="T:ModApi.Common.Attributes.UiVisibility">
            <summary>
            Defines the visibility types.
            </summary>
        </member>
        <member name="F:ModApi.Common.Attributes.UiVisibility.Visible">
            <summary>
            The UI element should be visible.
            </summary>
        </member>
        <member name="F:ModApi.Common.Attributes.UiVisibility.Hidden">
            <summary>
            The UI element should be hidden.
            </summary>
        </member>
        <member name="F:ModApi.Common.Attributes.UiVisibility.DebugOnly">
            <summary>
            The UI element should be visible in debug builds only.
            </summary>
        </member>
        <member name="T:ModApi.Common.Attributes.UiVisibilityAttribute">
            <summary>
            An attribute for decorating fields or properties to identify their static UI visibility.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:ModApi.Common.Attributes.UiVisibilityAttribute.#ctor(ModApi.Common.Attributes.UiVisibility)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Attributes.UiVisibilityAttribute"/> class.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="P:ModApi.Common.Attributes.UiVisibilityAttribute.Visibility">
            <summary>
            Gets the visibility.
            </summary>
            <value>
            The visibility.
            </value>
        </member>
        <member name="T:ModApi.Common.Collections.CircularList`1">
            <summary>
            Wraps a list and provides methods to access the next value in a list and wrap around to the beginning of the list when the end is reached.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="F:ModApi.Common.Collections.CircularList`1._list">
            <summary>
            The list of items.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.CircularList`1"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Common.Collections.CircularList`1.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
            <value>
            The number of elements contained in the list.
            </value>
        </member>
        <member name="P:ModApi.Common.Collections.CircularList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:&lt;T&gt;"/> at the specified index.
            </summary>
            <value>
            The <see cref="!:&lt;T&gt;"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The list item at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.Clear">
            <summary>
            Clears all elements in the list.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.Contains(`0)">
            <summary>
            Determines whether the list contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the list contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.GetIndexOfValue(`0)">
            <summary>
            Gets the index of value.
            </summary>
            <param name="v">The value to get the index for.</param>
            <returns>
            The index of the value, or -1 if it does not exist.
            </returns>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.NextValue(`0)">
            <summary>
            Gets the next value.
            </summary>
            <param name="currentValue">The current value.</param>
            <returns>The next value.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.PreviousValue(`0)">
            <summary>
            Gets the previous value.
            </summary>
            <param name="currentValue">The current value.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.Remove(`0)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ModApi.Common.Collections.CircularList`1.Compare(`0,`0)">
            <summary>
            Compares the two values.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <returns><c>true</c> if the values are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.GameObjectCollection">
            <summary>
            Provides a collection of game objects and utility methods that can operate on that collection.
            </summary>
        </member>
        <member name="F:ModApi.Common.Collections.GameObjectCollection._maps">
            <summary>
            The maps
            </summary>
        </member>
        <member name="P:ModApi.Common.Collections.GameObjectCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:ModApi.Common.Collections.GameObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.Add(UnityEngine.GameObject)">
            <summary>
            Adds the specified game object.
            </summary>
            <param name="gameObject">The game object.</param>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Func{``0,UnityEngine.GameObject})">
            <summary>
            Adds a range of GameObjects from the supplied collection, using the converter to access the GameObject.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="collection">The collection.</param>
            <param name="convertToGameObject">The function to convert from T to GameObject.</param>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.Clear">
            <summary>
            Clears the game objects from the collection.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.Contains(UnityEngine.GameObject)">
            <summary>
            Determines whether the collection contains the specified game object.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the collection contains the specified game object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.CopyTo(UnityEngine.GameObject[],System.Int32)">
            <summary>
            Copies to the array starting at the specified arrayIndex.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.Remove(UnityEngine.GameObject)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item was removed. Otherwise false.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.RestoreLayers">
            <summary>
            Restores the layers of the game objects after they have been assigned to a temporary layer.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.GameObjectCollection.SetTemporaryLayer(System.Int32)">
            <summary>
            Sets the layer of all game objects in the collection to a temporary layer.
            </summary>
            <param name="temporaryLayer">The temporary layer.</param>
        </member>
        <member name="T:ModApi.Common.Collections.GameObjectCollection.GameObjectMap">
            <summary>
            Maps a game object to a layer.
            </summary>
        </member>
        <member name="P:ModApi.Common.Collections.GameObjectCollection.GameObjectMap.GameObject">
            <summary>
            Gets or sets the game object.
            </summary>
            <value>
            The game object.
            </value>
        </member>
        <member name="P:ModApi.Common.Collections.GameObjectCollection.GameObjectMap.Layer">
            <summary>
            Gets or sets the layer.
            </summary>
            <value>
            The layer.
            </value>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32">
            <summary>
            A wrapper class for a NativeArray that casts different format color elements to <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/>.
            </summary>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Create(UnityEngine.Texture2D)">
            <summary>
            Creates a wrapper for the raw texture data of the specified texture.
            </summary>
            <param name="texture">The texture for which to get the data.</param>
            <returns>The requested wrapper.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the texture format is not supported.</exception>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:UnityEngine.Color32"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.Color32Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorARGB32Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperARGB32.ColorRGB24Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24">
            <summary>
            A wrapper class for a NativeArray that casts different format color elements to <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/>.
            </summary>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Create(UnityEngine.Texture2D)">
            <summary>
            Creates a wrapper for the raw texture data of the specified texture.
            </summary>
            <param name="texture">The texture for which to get the data.</param>
            <returns>The requested wrapper.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the texture format is not supported.</exception>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:UnityEngine.Color32"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.Color32Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorARGB32Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGB24.ColorRGB24Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32">
            <summary>
            A wrapper class for a NativeArray that casts different format color elements to <see cref="T:UnityEngine.Color32"/>.
            </summary>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Create(UnityEngine.Texture2D)">
            <summary>
            Creates a wrapper for the raw texture data of the specified texture.
            </summary>
            <param name="texture">The texture for which to get the data.</param>
            <returns>The requested wrapper.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the texture format is not supported.</exception>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:UnityEngine.Color32"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.Color32Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorARGB32Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper">
            <summary>
            The wrapper for texture data in the <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/> format.
            Implements the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32" />
            </summary>
            <seealso cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32" />
        </member>
        <member name="F:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper._array">
            <summary>
            The native array.
            </summary>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper.Item(System.Int32)">
            <summary>
            Gets or sets the color at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The color at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper.Alpha(System.Int32)">
            <summary>
            Gets the alpha color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper.Blue(System.Int32)">
            <summary>
            Gets the blue color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper.Green(System.Int32)">
            <summary>
            Gets the green color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="M:ModApi.Common.Collections.RawTextureDataWrapperRGBA32.ColorRGB24Wrapper.Red(System.Int32)">
            <summary>
            Gets the red color value at the specified index.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>The red color value at the specified index.</returns>
        </member>
        <member name="T:ModApi.Common.Coroutines.RunOnceOnNextUpdate">
            <summary>
            A helper class that wraps the functionality necessary to queue an action to run once on the next update cycle.
            The action will execute immediately after all the update methods have executed.
            </summary>
        </member>
        <member name="F:ModApi.Common.Coroutines.RunOnceOnNextUpdate._manager">
            <summary>
            The manager object. This is the true MonoBehaviour on which the coroutine is run.
            </summary>
        </member>
        <member name="F:ModApi.Common.Coroutines.RunOnceOnNextUpdate._action">
            <summary>
            The action to be executed.
            </summary>
        </member>
        <member name="F:ModApi.Common.Coroutines.RunOnceOnNextUpdate._monoBehaviour">
            <summary>
            The MonoBehaviour on which we are logically invoking the coroutine.
            </summary>
        </member>
        <member name="F:ModApi.Common.Coroutines.RunOnceOnNextUpdate._queued">
            <summary>
            A value indicating whether or not the action is currently queued.
            </summary>
        </member>
        <member name="M:ModApi.Common.Coroutines.RunOnceOnNextUpdate.#ctor(UnityEngine.MonoBehaviour,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Coroutines.RunOnceOnNextUpdate"/> class.
            </summary>
            <param name="monoBehaviour">The mono behavior on which the coroutine should run.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ModApi.Common.Coroutines.RunOnceOnNextUpdate.Queue">
            <summary>
            Queues the action to run on the next update unless it has already been queued.
            </summary>
        </member>
        <member name="M:ModApi.Common.Coroutines.RunOnceOnNextUpdate.GetManager">
            <summary>
            Gets the manager object.
            This is the true MonoBehaviour on which the coroutine is run.
            </summary>
            <returns>The manager object.</returns>
        </member>
        <member name="M:ModApi.Common.Coroutines.RunOnceOnNextUpdate.Coroutine">
            <summary>
            The actual coroutine to execute.
            </summary>
            <returns>The enumerator for the coroutine</returns>
        </member>
        <member name="T:ModApi.Common.Coroutines.RunOnceOnNextUpdate.RunOnceOnNextUpdateManager">
            <summary>
            The MonoBehaviour responsible for managing the active coroutines.
            It just needs to sit and look pretty and not be destroyed or disabled.
            </summary>
        </member>
        <member name="T:ModApi.Common.Cryptography.Hash">
            <summary>
            A utility class for working with hashing algorithms.
            </summary>
        </member>
        <member name="F:ModApi.Common.Cryptography.Hash._byteToHexLookup">
            <summary>
            The byte to hexadecimal lookup table.
            </summary>
        </member>
        <member name="M:ModApi.Common.Cryptography.Hash.MD5(System.String,System.Text.Encoding)">
            <summary>
            Creates an MD5 hash from the specified string value.
            </summary>
            <param name="value">The string from which to create a hash.</param>
            <param name="encoding">The encoding of the string. (<c>null</c> to use default encoding)</param>
            <returns>The hexadecimal string representing the MD5 hash of the input.</returns>
        </member>
        <member name="M:ModApi.Common.Cryptography.Hash.MD5(System.Xml.Linq.XNode,System.Text.Encoding)">
            <summary>
            Creates an MD5 hash from the specified XML element.
            </summary>
            <param name="xml">The XML from which to create a hash.</param>
            <param name="encoding">The encoding of the XML. (<c>null</c> to use UT8 encoding)</param>
            <returns>The hexadecimal string representing the MD5 hash of the input.</returns>
        </member>
        <member name="M:ModApi.Common.Cryptography.Hash.MD5(System.Byte[])">
            <summary>
            Creates an MD5 hash from the specified data.
            </summary>
            <param name="bytes">The data from which to create a hash.</param>
            <returns>The hexadecimal string representing the MD5 hash of the data.</returns>
        </member>
        <member name="M:ModApi.Common.Cryptography.Hash.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Computes the hash of the specified data using the specified hashing algorithm, formatting the result as hexadecimal string.
            </summary>
            <param name="algorithm">The hash algorithm.</param>
            <param name="bytes">The data from which to create a hash.</param>
            <returns>The hexadecimal string representing the hash of the data.</returns>
        </member>
        <member name="T:ModApi.Common.DebugUtils.DebugUtility">
            <summary>
            A utility class containing methods used in debugging.
            </summary>
        </member>
        <member name="M:ModApi.Common.DebugUtils.DebugUtility.AddReferenceObject(UnityEngine.GameObject,System.String,UnityEngine.GameObject)">
            <summary>
            Adds a script to a game object that contains a reference to another game object.
            </summary>
            <param name="gameObject">The game object to which to add the reference script.</param>
            <param name="referenceName">Name of the reference.</param>
            <param name="referencedObject">The game object being referenced.</param>
        </member>
        <member name="M:ModApi.Common.DebugUtils.DebugUtility.CreateGameObject(System.String,UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            Creates a game object.
            </summary>
            <param name="name">The name of the game object to create.</param>
            <param name="parent">The parent of the object (use <c>null</c> for a root object).</param>
            <param name="localPosition">The local position of the object.</param>
            <returns>The created game object.</returns>
        </member>
        <member name="M:ModApi.Common.DebugUtils.DebugUtility.CreateGameObjectWithReference(System.String,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Creates a game object with a object reference script.
            </summary>
            <param name="name">The name of the game object to create.</param>
            <param name="parent">The parent of the object (use <c>null</c> for a root object).</param>
            <param name="localPosition">The local position of the object.</param>
            <param name="referencedObject">The referenced game object.</param>
            <returns>The created game object.</returns>
        </member>
        <member name="M:ModApi.Common.DebugUtils.DebugUtility.CreatePrimitive(System.String,UnityEngine.PrimitiveType,UnityEngine.Color,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates a primitive game object.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="type">The type of the primitive.</param>
            <param name="color">The color of the primitive.</param>
            <param name="localPosition">The local position of the object.</param>
            <param name="parent">The parent of the object (use <c>null</c> for a root object).</param>
            <param name="colliderEnabled">If set to <c>true</c>, the collider on the primitive will be enabled; otherwise it will be disabled.</param>
            <returns>The game object that was created.</returns>
        </member>
        <member name="M:ModApi.Common.DebugUtils.DebugUtility.FocusInEditor(UnityEngine.GameObject)">
            <summary>
            Locks focus on the specified game object in the editor.
            </summary>
            <param name="obj">The object on which to lock focus.</param>
        </member>
        <member name="M:ModApi.Common.DebugUtils.DebugUtility.PauseEditor(System.Boolean)">
            <summary>
            Sets the current pause state of the editor.
            </summary>
            <param name="pause">The new pause state of the editor.</param>
        </member>
        <member name="T:ModApi.Common.DebugUtils.GameObjectReferencesScript">
            <summary>
            A debugging utility script to slap on a game object so that other game objects in the hierarchy can be referenced.
            </summary>
        </member>
        <member name="F:ModApi.Common.DebugUtils.GameObjectReferencesScript._references">
            <summary>
            The game object references.
            </summary>
        </member>
        <member name="P:ModApi.Common.DebugUtils.GameObjectReferencesScript.References">
            <summary>
            Gets or sets the game object references.
            </summary>
            <value>
            The game object references.
            </value>
        </member>
        <member name="T:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference">
            <summary>
            A simple class used create a named reference to a game object.
            </summary>
        </member>
        <member name="F:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference._name">
            <summary>
            The name of the reference.
            </summary>
        </member>
        <member name="F:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference._object">
            <summary>
            The referenced game object.
            </summary>
        </member>
        <member name="M:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference.#ctor(System.String,UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference"/> class.
            </summary>
            <param name="name">The name of the reference.</param>
            <param name="obj">The referenced game object.</param>
        </member>
        <member name="P:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference.Name">
            <summary>
            Gets or sets the name of the reference.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Common.DebugUtils.GameObjectReferencesScript.GameObjectReference.Object">
            <summary>
            Gets or sets the referenced game object.
            </summary>
            <value>
            The referenced game object.
            </value>
        </member>
        <member name="T:ModApi.Common.Events.ApplicationEventNotifier">
            <summary>
            A class used for subscribing to application level events.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:ModApi.Common.Events.ApplicationEventNotifier.ApplicationFocusStateChangedDelegate">
            <summary>
            A delegate used for events when the application focus state changes.
            </summary>
            <param name="focusState">The focus state of the application.</param>
        </member>
        <member name="T:ModApi.Common.Events.ApplicationEventNotifier.ApplicationPauseStateChangedDelegate">
            <summary>
            A delegate used for events when the application pause state changes.
            </summary>
            <param name="pauseState">The pause state of the application.</param>
        </member>
        <member name="T:ModApi.Common.Events.ApplicationEventNotifier.ApplicationQuitDelegate">
            <summary>
            A delegate used for events when the application quits.
            </summary>
        </member>
        <member name="E:ModApi.Common.Events.ApplicationEventNotifier.Focused">
            <summary>
            Occurs when the application focused state changes.
            </summary>
        </member>
        <member name="E:ModApi.Common.Events.ApplicationEventNotifier.Paused">
            <summary>
            Occurs when the application pause state changes.
            </summary>
        </member>
        <member name="E:ModApi.Common.Events.ApplicationEventNotifier.Quit">
            <summary>
            Occurs right before the application quits.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.ApplicationEventNotifier.OnApplicationFocus(System.Boolean)">
            <summary>
            Called when the application focus changes.
            </summary>
            <param name="focus">The focus state of the application.</param>
        </member>
        <member name="M:ModApi.Common.Events.ApplicationEventNotifier.OnApplicationPause(System.Boolean)">
            <summary>
            Called when the application pause state changes.
            </summary>
            <param name="pause">The pause state of the application.</param>
        </member>
        <member name="M:ModApi.Common.Events.ApplicationEventNotifier.OnApplicationQuit">
            <summary>
            Called right before the application exits.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.EventMigrator`1">
            <summary>
            Class to facilitate subscribing to a "migrating" event.
            Example use-case: "As a gizmo, I want to subscribe to a parts's <see cref="P:ModApi.Craft.ICraftScript.ActiveCommandPod" />'s <see cref="E:ModApi.Craft.Parts.ICommandPod.ActivationGroupChanged"/> event."
            Normally this is a big pain because you are subscribing to a specific command pod's events instead of the idea of "this part's craft nodes's active command pod". The
            active command pod may change, and the part may also be moved to another craft/node entirely.
            In this case you'd setup migration triggers for <see cref="E:ModApi.Craft.ICraftScript.ActiveCommandPodChanged"/> and <see cref="E:ModApi.Craft.Parts.IPartScript.MovedToNewCraft"/>,
            which will automatically rewire the events when either of those triggers occur to keep subscribers getting notified properly.
            </summary>
            <typeparam name="TEventObjectType">The class type which contains the migrating event to be tracked.</typeparam>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._actionOnMigration">
            <summary>
            The (optional) action to perform when an even migration occurs.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._getEventObject">
            <summary>
            The action to get the object on which the event resides.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._migrationTriggers">
            <summary>
            The migration trigger data.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._objSubscribedTo">
            <summary>
            The object which containes the event subscribed to.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._subscribe">
            <summary>
            The subscribe
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._unsubscribe">
            <summary>
            The unsubscribe
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.EventMigrator`1._updateEventData">
            <summary>
            The handler data
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Events.EventMigrator`1" /> class.
            </summary>
            <param name="getEventObject">A function which returns the object on which the event to subscribe to resides.</param>
            <param name="subscribe">An action used to subscribe to the event on the supplied object.</param>
            <param name="unsubscribe">An action used to unsubscribe to the event on the supplied object.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Events.EventMigrator`1" /> class.
            </summary>
            <param name="getEventObject">A function which returns the object on which the event to subscribe to resides.</param>
            <param name="subscribe">An action used to subscribe to the event on the supplied object.</param>
            <param name="unsubscribe">An action used to unsubscribe to the event on the supplied object.</param>
            <param name="actionOnMigration">The action to perform when an even migration occurs, or <c>null</c> if no action should be performed.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.AddMigrationTrigger``1(System.Func{``0},System.Action{ModApi.Common.Events.EventMigrator{`0},``0},System.Action{ModApi.Common.Events.EventMigrator{`0},``0})">
            <summary>
            Adds a migration trigger.  When the migration trigger event occurs, it will cause the primary event to be unsubscribed from and
            re-subscribed using an updated target object.
            </summary>
            <typeparam name="TMigrateEventObjectType">The type containing the migration event trigger.</typeparam>
            <param name="getEventObject">A function which returns the object on which the event to subscribe to resides.</param>
            <param name="subscribeToMigrationTriggerEvent">An action which subscribes to the migration trigger event.</param>
            <param name="unsubscribeFromMigrationTrigger">An action which unscribes to the migration trigger event and is supplied an object reference to unsubscribe from.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.Dispose">
            <summary>
            Unsubscribes from all events and performs any other necessary cleanup.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.MigrateEvent">
            <summary>
            Wire this method up to events which will trigger an event migration to occur when called.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.MigrateEvent(System.Object)">
            <summary>
            Wire this method up to events which will trigger an event migration to occur when called.
            </summary>
            <param name="ignored1">Event params are ignored.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.MigrateEvent(System.Object,System.Object)">
            <summary>
            Wire this method up to events which will trigger an event migration to occur when called.
            </summary>
            <param name="ignored1">Event params are ignored.</param>
            <param name="ignored2">Event params are ignored2.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.MigrateEvent(System.Object,System.Object,System.Object)">
            <summary>
            Wire this method up to events which will trigger an event migration to occur when called.
            </summary>
            <param name="ignored1">Event params are ignored.</param>
            <param name="ignored2">Event params are ignored2.</param>
            <param name="ignored3">Event params are ignored3.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.MigrateEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Wire this method up to events which will trigger an event migration to occur when called.
            </summary>
            <param name="ignored1">Event params are ignored.</param>
            <param name="ignored2">Event params are ignored2.</param>
            <param name="ignored3">Event params are ignored3.</param>
            <param name="ignored4">Event params are ignored4.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.Unsubscribe">
            <summary>
            Unsubscribes from the migrating event and all migration trigger events.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.Initialize(System.Func{`0},System.Action{`0},System.Action{`0},System.Action)">
            <summary>
            Initializes the specified subscribe.
            </summary>
            <param name="getEventObject">A function which returns the object on which the event to subscribe to resides.</param>
            <param name="subscribe">An action used to subscribe to the event on the supplied object.</param>
            <param name="unsubscribe">An action used to unsubscribe to the event on the supplied object.</param>
            <param name="actionOnMigration">An action to perform when an even migration occurs, or <c>null</c> if no action should be performed.</param>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.Migrate">
            <summary>
            Handles the change.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.EventMigrator`1.RewireEvents">
            <summary>
            Rewires the events.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.LifeCycleEventsNotifier">
            <summary>
            Use to be notified when another GameObject's "lifecycle" events have occurred.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:ModApi.Common.Events.LifeCycleEventsNotifier.Destroyed">
            <summary>
            Gets the OnDestroy event.
            </summary>
            <value>
            The OnDestroy event.
            </value>
        </member>
        <member name="P:ModApi.Common.Events.LifeCycleEventsNotifier.Disabled">
            <summary>
            Gets the OnDisable event.
            </summary>
            <value>
            The OnDisable event.
            </value>
        </member>
        <member name="P:ModApi.Common.Events.LifeCycleEventsNotifier.Enabled">
            <summary>
            Gets the OnEnable event.
            </summary>
            <value>
            The OnEnable event.
            </value>
        </member>
        <member name="M:ModApi.Common.Events.LifeCycleEventsNotifier.RemoveAllListeners">
            <summary>
            Removes all listeners.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.LifeCycleEventsNotifier.OnDestroy">
            <summary>
            Called when the object has been destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.LifeCycleEventsNotifier.OnDisable">
            <summary>
            Called when the object has been disabled.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.LifeCycleEventsNotifier.OnEnable">
            <summary>
            Called when the object has been enabled.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.LifeCycleEventsNotifier.LifeCycleEvent">
            <summary>
            A collision event.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.SimpleNotificationDelegate">
            <summary>
            Notification delegate w/no args.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.UnityEventDispatcher">
            <summary>
            Class to allow non-MonoBehaviours (or static methods) to be called on the same cadence as unity events (Update, FixedUpdate, LateUpdate, etc.)
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher._instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher._fixedUpdateActions">
            <summary>
            The update actions
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher._lateUpdateActions">
            <summary>
            The update actions
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher._updateActions">
            <summary>
            The update actions
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.UnityEventDispatcher.EventType">
            <summary>
            The type of update to execute on.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher.EventType.Update">
            <summary>
            The update
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher.EventType.FixedUpdate">
            <summary>
            The fixed update
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher.EventType.LateUpdate">
            <summary>
            The late update
            </summary>
        </member>
        <member name="P:ModApi.Common.Events.UnityEventDispatcher.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteCustomYield(System.Func{System.Boolean},System.Action)">
            <summary>
            Yields while the predicate returns true, then executes the action.
            </summary>
            <param name="predicate">Indicates if coroutine should be kept suspended.</param>
            <param name="action">The action to perform after yielding.</param>
            <returns>The Coroutine</returns>
            <example>
              <code>
            UnityEventDispatcher.Instance.ExecuteCustomYield (()=&gt; { return this._keepWaiting; }, () =&gt; Debug.Log("We're ready."));
            </code>
            </example>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteWaitForSeconds(System.Action,System.Single)">
            <summary>
            Yields for the specified seconds, then executes the action.
            </summary>
            <param name="action">The action to perform after yielding for seconds.</param>
            <param name="seconds">The seconds wait before performing the action.</param>
            <returns>The Coroutine</returns>
            <example>
              <code>
            UnityEventDispatcher.Instance.ExecuteWaitForSeconds(() =&gt; Debug.Log("Its been 10 seconds."), 10);
            </code>
            </example>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteYield``1(System.Action)">
            <summary>
            Yields on the specified instruction, then executes the action.
            </summary>
            <typeparam name="T">The type of instruction to yield for.</typeparam>
            <param name="action">The action to perform after yielding.</param>
            <returns>The Coroutine</returns>
            <example>
              <code>
            UnityEventDispatcher.Instance.ExecuteYield&lt;WaitForEndOfFrame&gt; (() =&gt; Debug.Log("Its the end of the frame."));
            </code>
            </example>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteYield``1(System.Action{System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            Yields on the specified instruction, then executes the action.  Repeats the yield repeatCount number of times, or indefinitely if <c>null</c> is passed.
            </summary>
            <typeparam name="T">The type of instruction to yield for.</typeparam>
            <param name="action">The action to perform after yielding.  The int? param is the number of remaining executions after the current one finishes.</param>
            <param name="executeCount">The number of times to execute the yield, or indefinitely if <c>null</c>.</param>
            <returns>The Coroutine</returns>
            <example>
              <code>
            UnityEventDispatcher.Instance.ExecuteYield&lt;WaitForEndOfFrame&gt; (() =&gt; Debug.Log("Its the end of the frame."));
            </code>
            </example>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteYield``1(System.Func{System.Boolean})">
            <summary>
            Executes and repeats the yield until the action returns false.
            </summary>
            <typeparam name="T">The type of instruction to yield for.</typeparam>
            <param name="action">The action to perform after yielding.</param>
            <returns>The Coroutine</returns>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.IsActionRegistered(System.Action,ModApi.Common.Events.UnityEventDispatcher.EventType)">
            <summary>
            Determines whether the specificed action has been registered for the given action type.
            </summary>
            <param name="action">The action to determine if whether it has been registered for the given type.</param>
            <param name="type">The action type.</param>
            <returns>
              <c>true</c> if specificed action has been registered for the given action type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.Register(System.Action,ModApi.Common.Events.UnityEventDispatcher.EventType)">
            <summary>
            Registers the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="type">The type.</param>
            <example>
            <code>
                ModApi.UnityEventDispatcher.Instance.Register(() => { myObject.Method(); }, ModApi.UnityEventDispatcher.EventType.Update);
            </code>
            </example>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.UnRegister(System.Action,ModApi.Common.Events.UnityEventDispatcher.EventType,System.Boolean)">
            <summary>
            Unregisters the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="type">The type.</param>
            <param name="suppressActionDoesntExistWarning">If set to <c>true</c> no warning will be displayed if the action does not exist.</param>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.UnRegisterAll">
            <summary>
            Unregisters all actions.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.UnRegisterAll(ModApi.Common.Events.UnityEventDispatcher.EventType)">
            <summary>
            Unregisters all actions of the given type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.FixedUpdate">
            <summary>
            Fixed Updates this instance.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.LateUpdate">
            <summary>
            Fixed Updates this instance.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.RegisterAction(System.Action,System.Collections.Generic.List{System.Action})">
            <summary>
            Registers the action.
            </summary>
            <param name="newAction">The new action.</param>
            <param name="actionList">The action list.</param>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.UnRegisterAction(System.Action,System.Collections.Generic.List{System.Action},System.Boolean)">
            <summary>
            Unregisters the action.
            </summary>
            <param name="action">The action to remove.</param>
            <param name="actionlist">The action list.</param>
            <param name="suppressActionDoesntExistWarning">If set to <c>true</c> no warning will be displayed if the action does not exist.</param>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteCustomYieldCoroutine(System.Func{System.Boolean},System.Action)">
            <summary>
            Yields while the predicate returns true, then executes the action.
            </summary>
            <param name="predicate">Indicates if coroutine should be kept suspended.</param>
            <param name="action">The action to perform after yielding.</param>
            <returns>The coroutine enumerator.</returns>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteWaitForSecondsCoroutine(System.Action,System.Single)">
            <summary>
            Yields for the specified seconds, then executes the action.
            </summary>
            <param name="action">The action to perform after yielding for seconds.</param>
            <param name="seconds">The seconds wait before performing the action.</param>
            <returns>The coroutine enumerator.</returns>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.ExecuteYieldCoroutine``1(System.Action)">
            <summary>
            Yields on the specified instruction, then executes the action.
            </summary>
            <typeparam name="T">The type of instruction to yield for.</typeparam>
            <param name="action">The action to perform after yielding.</param>
            <returns>The coroutine enumerator.</returns>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.GetActionList(ModApi.Common.Events.UnityEventDispatcher.EventType)">
            <summary>
            Gets the action list associated with the type.
            </summary>
            <param name="type">The type of action.</param>
            <returns>The actions associated with the type.</returns>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.PerformUnityEventActions(System.Collections.Generic.List{System.Action})">
            <summary>
            Performs the unity event action (Update, LateUpdate, FixedUpdate, etc.)
            </summary>
            <param name="actionList">The action list.</param>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.Remove(System.Action[]@,System.Int32)">
            <summary>
            Removes the specified index.
            </summary>
            <param name="list">The list.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:ModApi.Common.Events.UnityEventDispatcher.WaitWhile">
            <summary>
            Custom yield instruction.
            </summary>
            <seealso cref="T:UnityEngine.CustomYieldInstruction" />
        </member>
        <member name="F:ModApi.Common.Events.UnityEventDispatcher.WaitWhile._predicate">
            <summary>
            The predicate function...indicates if coroutine should be kept suspended.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.UnityEventDispatcher.WaitWhile.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Events.UnityEventDispatcher.WaitWhile"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:ModApi.Common.Events.UnityEventDispatcher.WaitWhile.keepWaiting">
            <summary>
            Gets a value indicating whether the coroutine should be kept suspended.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.WeakEventHandler">
            <summary>
            A utility class for creating weak event handlers.
            </summary>
        </member>
        <member name="T:ModApi.Common.Events.WeakEventHandler.WeakEventUnregisterCallback`1">
            <summary>
            A delegate for a callback function to unregister an event.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="T:ModApi.Common.Events.WeakEventHandler.IWeakEventHandler`1">
            <summary>
            An interface exposing information related to a weak event handler.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
        </member>
        <member name="P:ModApi.Common.Events.WeakEventHandler.IWeakEventHandler`1.Handler">
            <summary>
            Gets the weak event handler.
            </summary>
            <value>
            The weak event handler.
            </value>
        </member>
        <member name="P:ModApi.Common.Events.WeakEventHandler.IWeakEventHandler`1.Method">
            <summary>
            Gets the target method of the weak event handler.
            </summary>
            <value>
            The target method of the weak event handler.
            </value>
        </member>
        <member name="P:ModApi.Common.Events.WeakEventHandler.IWeakEventHandler`1.Target">
            <summary>
            Gets the target of the weak event handler.
            </summary>
            <value>
            The target of the weak event handler.
            </value>
        </member>
        <member name="M:ModApi.Common.Events.WeakEventHandler.Create``1(System.EventHandler{``0},ModApi.Common.Events.WeakEventHandler.WeakEventUnregisterCallback{``0})">
            <summary>
            Creates a weak event handler for the specified event handler.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="eventHandler">The real event handler for which to create the weak event handler.</param>
            <param name="unregisterCallback">The callback function to unregister the event.</param>
            <returns>The weak event handler.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the event handler is <c>null</c>.</exception>
        </member>
        <member name="M:ModApi.Common.Events.WeakEventHandler.FindUnregisterHandler``1(System.EventHandler{``0},System.EventHandler{``0})">
            <summary>
            Finds the specified event handler in the source handler to be used for unregistering the event.
            This will return the specified handler unless a matching weak event handler can be found in the invocation list of the source.
            If a matching weak event handler is found, it is returned instead.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="source">The source event handler to be searched.</param>
            <param name="value">The event handler to look for in the source.</param>
            <returns>The specified event handler or a matching weak event handler found in the source handler.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the event handler to find is <c>null</c>.</exception>
        </member>
        <member name="T:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2">
            <summary>
            A class wrapping a real event handler to provide a weak event handler
            </summary>
            <typeparam name="THandler">The type of the event handler.</typeparam>
            <typeparam name="TArgs">The type of the event arguments.</typeparam>
        </member>
        <member name="F:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2._handler">
            <summary>
            The event handler object representing this wrapper used for subscribing to an event.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2._openHandler">
            <summary>
            The instance of the delegate used to invoke the weak event handler.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2._target">
            <summary>
            The weak reference pointing to the target of the event handler.
            </summary>
        </member>
        <member name="F:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2._unregisterCallback">
            <summary>
            The callback action used to unsubscribe from the event.
            </summary>
        </member>
        <member name="M:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.#ctor(System.EventHandler{`1},ModApi.Common.Events.WeakEventHandler.WeakEventUnregisterCallback{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2"/> class.
            </summary>
            <param name="eventHandler">The real event handler.</param>
            <param name="unregister">The unregister callback used to unsubscribe from the event.</param>
        </member>
        <member name="T:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.OpenEventHandler">
            <summary>
            The delegate used to invoke the weak event handler.
            </summary>
            <param name="target">The target of the event handler.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.Handler">
            <summary>
            Gets the weak event handler.
            </summary>
            <value>
            The weak event handler.
            </value>
        </member>
        <member name="P:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.Method">
            <summary>
            Gets the target method of the weak event handler.
            </summary>
            <value>
            The target method of the weak event handler.
            </value>
        </member>
        <member name="P:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.Target">
            <summary>
            Gets the target of the weak event handler.
            </summary>
            <value>
            The target of the weak event handler.
            </value>
        </member>
        <member name="M:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.op_Implicit(ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper{`0,`1})~System.EventHandler{`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2"/> to <see cref="T:System.EventHandler`1"/>.
            </summary>
            <param name="weakEventHandler">The weak event handler.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.Events.WeakEventHandler.WeakEventHandlerWrapper`2.Invoke(System.Object,`1)">
            <summary>
            The invocation method used for invoking the weak event handler.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ModApi.Common.Extensions.AudioSourceExtensions">
            <summary>
            Extension Methods for AudioSource.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.AudioSourceExtensions.AddHighPassCutoff(UnityEngine.AudioSource,System.Single)">
            <summary>
            Adds the high pass cutoff.
            </summary>
            <param name="audioSource">The audio source.</param>
            <param name="cutoff">The cutoff in hz. 10 to 22000.</param>
            <returns>The audioSource.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.AudioSourceExtensions.AddLowpassCutoff(UnityEngine.AudioSource,System.Single)">
            <summary>
            Adds the lowpass cutoff.
            </summary>
            <param name="audioSource">The audio source.</param>
            <param name="cutoff">The cutoff in hz. 10 to 22000.</param>
            <returns>The audioSource.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.AudioSourceExtensions.SetPitch(UnityEngine.AudioSource,System.Single)">
            <summary>
            Sets the pitch.
            </summary>
            <param name="audioSource">The audio source.</param>
            <param name="pitch">The pitch.</param>
            <returns>The audioSource.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.DoubleExtensions">
            <summary>
            Extensions for double.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.DoubleExtensions.AsNegativePIToPI(System.Double)">
            <summary>
            Gets the current value in the negative pi to pi range.
            </summary>
            <param name="value">The value.</param>
            <returns>The current value in the negative pi to pi range.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.DoubleExtensions.AsZeroTo2PI(System.Double)">
            <summary>
            Gets the current value in the zero to 2pi range.
            </summary>
            <param name="value">The value.</param>
            <returns>The current value in the zero to 2pi range.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.EnumExtensions">
            <summary>
            A class containing enumeration extension methods.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.EnumExtensions.DisplayName(System.Enum)">
            <summary>
            Gets the display name of the enumeration value by looking at the <see cref="T:ModApi.Common.Attributes.DisplayNameAttribute"/>.
            This will be the string version of the enumeration if the attribute is not defined for the value.
            </summary>
            <param name="value">The enumeration value for which to get the display name.</param>
            <returns>The display name of the enumeration value.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.GameObjectExtensions">
            <summary>
            A set of extension methods for Unity game objects.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.AddMissingComponent``1(UnityEngine.GameObject)">
            <summary>
            Adds the component if there is not one already on the game object, otherwise returns the existing component.
            </summary>
            <typeparam name="T">Component type to add (or get)</typeparam>
            <param name="obj">The object.</param>
            <returns>The <typeparamref name="T"/> which was added (or already existed) on the game object/></returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.LocalPosition(UnityEngine.GameObject,UnityEngine.Vector3)">
            <summary>
            Sets the local position of the game object.
            </summary>
            <param name="obj">The game object.</param>
            <param name="position">The local position.</param>
            <returns>The game object that was updated.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.LocalRotation(UnityEngine.GameObject,UnityEngine.Quaternion)">
            <summary>
            Sets the local rotation of the game object.
            </summary>
            <param name="obj">The game object.</param>
            <param name="rotation">The local rotation.</param>
            <returns>The game object that was updated.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.Name(UnityEngine.GameObject,System.String,System.Object[])">
            <summary>
            Sets the name of the game object.
            </summary>
            <param name="obj">The game object.</param>
            <param name="name">The game object name.</param>
            <param name="args">The game object name format arguments.</param>
            <returns>The game object that was updated.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.Position(UnityEngine.GameObject,UnityEngine.Vector3)">
            <summary>
            Sets the position of the game object.
            </summary>
            <param name="obj">The game object.</param>
            <param name="position">The position.</param>
            <returns>The game object that was updated.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.Rotation(UnityEngine.GameObject,UnityEngine.Quaternion)">
            <summary>
            Sets the rotation of the game object.
            </summary>
            <param name="obj">The game object.</param>
            <param name="rotation">The rotation.</param>
            <returns>The game object that was updated.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.Rotation(UnityEngine.GameObject,UnityEngine.Vector3)">
            <summary>
            Sets the local scale of the game object.
            </summary>
            <param name="obj">The game object.</param>
            <param name="scale">The local scale.</param>
            <returns>The game object that was updated.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.GameObjectExtensions.SetLayer(UnityEngine.GameObject,System.Int32)">
            <summary>
            Sets the layer for the GameObject and all children.
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="T:ModApi.Common.Extensions.GradientExtensions">
            <summary>
            A class containing extension methods for color gradients.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.GradientExtensions.ToLinear(UnityEngine.Gradient)">
            <summary>
            Converts the RGB values of the color gradient to linear color space.
            </summary>
            <param name="gradient">The color gradient.</param>
            <returns>A new color gradient in linear color space.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.IEnumerableExtensions">
            <summary>
            A set of extension methods for enumerable collections.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.IEnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the distinct set of items based on the specified key.
            https://stackoverflow.com/a/1300116/207183
            </summary>
            <typeparam name="TSource">The type of the source data.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source data.</param>
            <param name="keySelector">The key selector.</param>
            <returns>The requested set of distinct items.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.IEnumerableExtensions.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the action on each item in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="items">The collection of items over which to iterate.</param>
            <param name="action">The action to be performed for each item.</param>
            <returns>The original item collection.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.IEnumerableExtensions.GetUniqueDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets the unique duplicate values in the enumerable set.
            </summary>
            <typeparam name="TSource">The type of the enumerable source.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>The list of unique values that were found as duplicates in the enumerable set.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.IEnumerableExtensions.GetUniqueDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Gets the unique duplicate values in the enumerable set.
            </summary>
            <typeparam name="TSource">The type of the enumerable source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="selector">The key selector.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>The list of unique values that were found as duplicates in the enumerable set.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.IEnumerableExtensions.HasDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the enumerable set contains any duplicate values.
            </summary>
            <typeparam name="TSource">The type of the enumerable set.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="comparer">The comparer to use.</param>
            <returns><c>true</c> if the enumerable set has duplicates; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether the enumerable set contains any duplicate values.
            </summary>
            <typeparam name="TSource">The type of the enumerable set.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="selector">The key selector.</param>
            <param name="comparer">The comparer to use.</param>
            <returns><c>true</c> if the enumerable set has duplicates; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.LinkedListExtensions">
            <summary>
            A set of extension methods for LinkedList.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.LinkedListExtensions.Remove``1(System.Collections.Generic.LinkedList{``0},``0,System.Boolean)">
            <summary>
            Removes the specified value.
            </summary>
            <typeparam name="T">The LinkedList type.</typeparam>
            <param name="list">The LinkedList to act upon.</param>
            <param name="value">The value to remove from the LinkedList</param>
            <param name="removeChildren">if set to <c>true</c> also removes children.</param>
            <returns>
              <c>true</c> if the element containing value is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if value was not found in the original LinkedList.
            </returns>
        </member>
        <member name="M:ModApi.Common.Extensions.LinkedListExtensions.Remove``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Boolean,System.Action{System.Collections.Generic.LinkedListNode{``0}},System.Action)">
            <summary>
            Removes the specified value from the list and optionally its children.
            </summary>
            <typeparam name="T">The LinkedList type.</typeparam>
            <param name="list">The LinkedList to act upon.</param>
            <param name="nodeToDelete">The value to remove from the LinkedList</param>
            <param name="removeChildren">if set to <c>true</c> also removes children.</param>
            <param name="beforeAction">The action to perform on the item before it is removed, or <c>null</c> for no action.</param>
            <param name="afterAction">The action to perform after it is removed, or <c>null</c> for no action.</param>
        </member>
        <member name="T:ModApi.Common.Extensions.ListExtensions">
            <summary>
            A set of extension methods for lists.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.ListExtensions.Resize``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Resizes the list.
            </summary>
            <typeparam name="T">The type of the list.</typeparam>
            <param name="list">The list to resize.</param>
            <param name="size">The new size of the list.</param>
            <param name="element">The element to populate the list with if the list size needs to grow.</param>
        </member>
        <member name="T:ModApi.Common.Extensions.MonoBehaviourExtensions">
            <summary>
            A set of extension methods for <see cref="T:UnityEngine.MonoBehaviour"/>.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.MonoBehaviourExtensions.StartThrowingCoroutine(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Action{System.Exception})">
            <summary>
            Starts a coroutine that will invoke a callback when an exception occurs.
            http://JacksonDunstan.com/articles/3718
            </summary>
            <param name="monoBehaviour">The MonoBehaviour on which to start the coroutine.</param>
            <param name="enumerator">The iterator function to run as the coroutine</param>
            <param name="onException">A callback that fires when an exception occurs.</param>
            <returns>The coroutine.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.MonoBehaviourExtensions.RunThrowingIteratorWithNesting(System.Collections.IEnumerator,System.Action{System.Exception})">
            <summary>
            Runs an iterator function that will invoke a callback when an exception occurs.
            This should support nested iterators.
            https://jacksondunstan.com/articles/3718#comment-698215
            </summary>
            <param name="enumerator">The iterator function to run.</param>
            <param name="onException">A callback that fires when an exception occurs.</param>
            <returns>An enumerator that runs the given enumerator.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.ObjectExtensions">
            <summary>
            A class for unity object extensions
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.Log(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the specified debug message.
            </summary>
            <param name="obj">The object context.</param>
            <param name="message">The message to be logged.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.LogError(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the specified error message.
            </summary>
            <param name="obj">The object context.</param>
            <param name="message">The message to be logged.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.LogException(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the specified exception message.
            </summary>
            <param name="obj">The object context.</param>
            <param name="message">The message to be logged.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.LogException(UnityEngine.Object,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception message.
            </summary>
            <param name="obj">The object context.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message to be logged.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.LogException(UnityEngine.Object,System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="obj">The object context.</param>
            <param name="exception">The exception to be logged.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.LogVerbose(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a verbose debug message that only works in a debug build or through the editor.
            </summary>
            <param name="obj">The object context.</param>
            <param name="message">The message to be logged.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.ObjectExtensions.LogWarning(UnityEngine.Object,System.String,System.Object[])">
            <summary>
            Logs the specified warning message.
            </summary>
            <param name="obj">The object context.</param>
            <param name="message">The message to be logged.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="T:ModApi.Common.Extensions.OrderedDictionaryExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Specialized.OrderedDictionary"/>
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.OrderedDictionaryExtensions.IndexOf(System.Collections.Specialized.OrderedDictionary,System.Object)">
            <summary>
            Gets the index of the specified value within the dictionary.
            </summary>
            <param name="dictionary">The ordered dictionary to search.</param>
            <param name="value">The value to find the index of.</param>
            <returns>The index of the specified value within the dictionary.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.OrderedDictionaryExtensions.IndexOfKey(System.Collections.Specialized.OrderedDictionary,System.Object)">
            <summary>
            Gets the index of the specified key
            </summary>
            <param name="dictionary">The ordered dictionary to search.</param>
            <param name="key">The key to find the index of.</param>
            <returns>The index of the specified key within the dictionary.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.StringExtensions">
            <summary>
            A class containing extension methods for string.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.StringExtensions.Replace(System.String,System.String)">
            <summary>
            Replaces the specified old value with an empty string.
            </summary>
            <param name="value">The string on which to operate.</param>
            <param name="oldValue">The old value to be replaced.</param>
            <returns>The string with the old value replaced with an empty string.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.TransformExtensions">
            <summary>
            A static class containing extension methods for the Transform class.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.TransformExtensions.SetLocal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Sets the local position and rotation of the transform.
            </summary>
            <param name="transform">The transform to update.</param>
            <param name="localPosition">The local position.</param>
            <param name="localRotation">The local rotation.</param>
            <returns>The transform.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.TransformExtensions.SetLocal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Sets the local position, rotation, and scale of the transform.
            </summary>
            <param name="transform">The transform to update.</param>
            <param name="localPosition">The local position.</param>
            <param name="localRotation">The local rotation.</param>
            <param name="scale">The scale.</param>
            <returns>The transform.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.TransformExtensions.SetLocal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Transform)">
            <summary>
            Sets the local position and parent of the transform.
            </summary>
            <param name="transform">The transform to update.</param>
            <param name="localPosition">The local position.</param>
            <param name="parent">The parent transform.</param>
            <returns>The transform.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.TransformExtensions.SetLocal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Sets the local position, rotation, and parent of the transform.
            </summary>
            <param name="transform">The transform to update.</param>
            <param name="localPosition">The local position.</param>
            <param name="localRotation">The local rotation.</param>
            <param name="parent">The parent transform.</param>
            <returns>The transform.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.TransformExtensions.SetLocal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform)">
            <summary>
            Sets the local position, rotation, scale, and parent of the transform.
            </summary>
            <param name="transform">The transform to update.</param>
            <param name="localPosition">The local position.</param>
            <param name="localRotation">The local rotation.</param>
            <param name="scale">The scale.</param>
            <param name="parent">The parent transform.</param>
            <returns>The transform.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.Vector2Extensions">
            <summary>
            Extensions for Vector2.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector2Extensions.Clamp(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Clamps each component of the vector between the specified min and max values.
            </summary>
            <param name="v">The vector to clamp.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector2Extensions.YX(UnityEngine.Vector2)">
            <summary>
            Creates a new vector, swapping the x and y components of the original vector.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.Vector3Extensions">
            <summary>
            Extensions for Vector3.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.Clamp(UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Clamps each component of the vector between the specified min and max values.
            </summary>
            <param name="v">The vector to clamp.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.Clamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Clamps each component of the vector between the components of the specified min and max vectors.
            </summary>
            <param name="v">The vector to clamp.</param>
            <param name="minValues">The minimum values vector.</param>
            <param name="maxValues">The maximum values vector.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.SetX(UnityEngine.Vector3,System.Single)">
            <summary>
            Sets the X component of the vector.
            </summary>
            <param name="v">The vector to update.</param>
            <param name="x">The new value for the X component.</param>
            <returns>The updated vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.SetY(UnityEngine.Vector3,System.Single)">
            <summary>
            Sets the Y component of the vector.
            </summary>
            <param name="v">The vector to update.</param>
            <param name="y">The new value for the Y component.</param>
            <returns>The updated vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.SetZ(UnityEngine.Vector3,System.Single)">
            <summary>
            Sets the Z component of the vector.
            </summary>
            <param name="v">The vector to update.</param>
            <param name="z">The new value for the Z component.</param>
            <returns>The updated vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.XY(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.XZ(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.XZY(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y, and z components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.YX(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.YXZ(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y, and z components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.YZ(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.YZX(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y, and z components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.ZX(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.ZXY(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y, and z components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.ZY(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.Vector3Extensions.ZYX(UnityEngine.Vector3)">
            <summary>
            Creates a new vector using the specified order for the new x, y, and z components.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.VectorExtensions">
            <summary>
            A class containing extension methods for vectors.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector2d)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector2i)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector2)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector3d)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector3i)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector3)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector4d)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.VectorExtensions.XAttributeValue(UnityEngine.Vector4)">
            <summary>
            Converts the vector to its string representation used for storage in an XAttribute.
            </summary>
            <param name="v">The vector to convert.</param>
            <returns>The string representation of the vector used for storage in an XAttribute.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.WWWFormExtensions">
            <summary>
            A class containing extension methods for the <see cref="T:UnityEngine.WWWForm"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.WWWFormExtensions.AddField(UnityEngine.WWWForm,System.String,System.Object,System.Text.Encoding)">
            <summary>
            Adds the specified field to the form data.
            </summary>
            <param name="form">The form to which to add the field.</param>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field (will be converted to a string via ToString()).</param>
            <param name="encoding">The encoding to use (or <c>null</c> for default).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is <c>null</c>.</exception>
        </member>
        <member name="M:ModApi.Common.Extensions.WWWFormExtensions.AddOptionalField(UnityEngine.WWWForm,System.String,System.Object,System.Text.Encoding)">
            <summary>
            Adds the specified field to the form data.
            If the field value is <c>null</c>, the field will not be added to the form.
            </summary>
            <param name="form">The form to which to add the field.</param>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field (will be converted to a string via ToString()).</param>
            <param name="encoding">The encoding to use (or <c>null</c> for default).</param>
        </member>
        <member name="T:ModApi.Common.Extensions.XDocumentExtensions">
            <summary>
            A class containing extension methods for the <see cref="T:System.Xml.Linq.XDocument"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.XDocumentExtensions.SaveAsBytes(System.Xml.Linq.XDocument)">
            <summary>
            Saves the XML document as an array of bytes in UTF-8 encoding.
            This will write out the XML encoding tag as if saving directly to a file.
            </summary>
            <param name="xml">The XML document.</param>
            <returns>The byte array representing the XML.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XDocumentExtensions.SaveAsBytes(System.Xml.Linq.XDocument,System.Xml.Linq.SaveOptions)">
            <summary>
            Saves the XML document as an array of bytes in UTF-8 encoding.
            This will write out the XML encoding tag as if saving directly to a file.
            </summary>
            <param name="xml">The XML document.</param>
            <param name="options">The save options.</param>
            <returns>The byte array representing the XML.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XDocumentExtensions.SaveAsString(System.Xml.Linq.XDocument)">
            <summary>
            Saves the XML document as a string with a UTF-8 encoding tag.
            This will write out the XML encoding tag as if saving directly to a file.
            </summary>
            <param name="xml">The XML document.</param>
            <returns>The string representing the XML.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XDocumentExtensions.SaveAsString(System.Xml.Linq.XDocument,System.Xml.Linq.SaveOptions)">
            <summary>
            Saves the XML document as a string with a UTF-8 encoding tag.
            This will write out the XML encoding tag as if saving directly to a file.
            </summary>
            <param name="xml">The XML document.</param>
            <param name="options">The save options.</param>
            <returns>The string representing the XML.</returns>
        </member>
        <member name="T:ModApi.Common.Extensions.XElementExtensions">
            <summary>
            A collection of extension methods for XElement objects.
            </summary>
        </member>
        <member name="F:ModApi.Common.Extensions.XElementExtensions._stringSplitBar">
            <summary>
            A string split array for bar separators.
            </summary>
        </member>
        <member name="F:ModApi.Common.Extensions.XElementExtensions._stringSplitComma">
            <summary>
            A string split array for comma separators.
            </summary>
        </member>
        <member name="F:ModApi.Common.Extensions.XElementExtensions._stringSplitDoubleBar">
            <summary>
            A string split array for double bar separators.
            </summary>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetBoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Gets the boolean attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetBoolAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the boolean attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetColorAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the color attribute value, which must be in the form #RRGGBB or #RRGGBBAA.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or the defaultValue if it does not exist, or if it is not valid.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetColorAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Color)">
            <summary>
            Gets the color attribute value, which must be in the form #RRGGBB or #RRGGBBAA.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the defaultValue if it does not exist, or if it is not valid.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetDateTimeAttribute(System.Xml.Linq.XElement,System.String,System.DateTime)">
            <summary>
            Gets the date time attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetDateTimeAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the date time attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetDoubleAttribute(System.Xml.Linq.XElement,System.String,System.Double)">
            <summary>
            Gets the double attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetDoubleAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the double attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetEnumAttribute``1(System.Xml.Linq.XElement,System.String,``0,``0[])">
            <summary>
            Gets an enumeration value from an XML element.
            If the options argument is specified, the value read from the XML will be returned if it is in the list of options.
            If the value is not in the list of options, the default value will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="xml">The XML element from which to read the value.</param>
            <param name="attributeName">The name of the XML attribute containing the value to be read.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <param name="options">The available options that can be read from the XML (otherwise the default value is returned).</param>
            <returns>The value read from the XML or the default value.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetEnumAttributeOrNull``1(System.Xml.Linq.XElement,System.String,``0[])">
            <summary>
            Gets an enumeration value from an XML element or returns <c>null</c> if it does not exist.
            If the options argument is specified, this will return <c>null</c> if the enumeration value is not in the array of available options.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="xml">The XML element from which to read the value.</param>
            <param name="attributeName">The name of the XML attribute containing the value to be read.</param>
            <param name="options">The available options that can be read from the XML (otherwise a <c>null</c> is returned).</param>
            <returns>The value read from the XML or <c>null</c>.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetFloatAttribute(System.Xml.Linq.XElement,System.String,System.Single)">
            <summary>
            Gets the float attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetFloatAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the float attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetGradientAttribute(System.Xml.Linq.XElement,System.String,System.Boolean,UnityEngine.Gradient)">
            <summary>
            Gets the gradient attribute.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="includeAlphaKeys">If set to <c>true</c>, both color and alpha keys will be loaded; otherwise only the color keys are loaded.</param>
            <param name="defaultValue">The default value if the attribute could not be found. (note, this is cloned and not passed in</param>
            <returns>The requested attribute value or the specified default if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetGuidAttribute(System.Xml.Linq.XElement,System.String,System.Guid)">
            <summary>
            Gets the GUID attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetGuidAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the GUID attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetIntAttribute(System.Xml.Linq.XElement,System.String,System.Int32)">
            <summary>
            Gets the integer attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetIntAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the integer attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetLongAttribute(System.Xml.Linq.XElement,System.String,System.Int64)">
            <summary>
            Gets the long attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetLongAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the long attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetOrCreateAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the specified attribute of the element or creates it if it does not already exist.
            </summary>
            <param name="element">The element from which to get the attribute.</param>
            <param name="attributeName">The name of the attribute to get or create.</param>
            <returns>The specified attribute of the element or creates it if it does not already exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetOrCreateElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the specified child element of the element or creates it if it does not already exist.
            </summary>
            <param name="element">The element from which to get the child element.</param>
            <param name="elementName">The name of the element to get or create.</param>
            <returns>The specified child element of the element or creates it if it does not already exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetQuaternionAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Quaternion)">
            <summary>
            Gets the quaternion attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetQuaternionAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the quaternion attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetQuaterniondAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Quaterniond)">
            <summary>
            Gets the Quaterniond attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetQuaterniondAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Quaterniond attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Gets the string attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringAttributeOrNullIfEmpty(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string attribute value.
            If the string is <c>null</c> or empty, this will return <c>null</c>.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist or is <c>null</c> or empty.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringAttributeOrNullIfWhitespace(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string attribute value.
            If the string is <c>null</c>, empty, or whitespace, this will return <c>null</c>.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist or is <c>null</c>, empty or whitespace.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringElement(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Gets the string element value.
            </summary>
            <param name="element">The element containing the value.</param>
            <param name="childElementName">The name of the child element for which to get the value.</param>
            <param name="defaultValue">The default value to return if the element does not exist or have a value.</param>
            <returns>The requested element value or <c>null</c> if it does not exist or have a value.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string element value.
            </summary>
            <param name="element">The element containing the value.</param>
            <param name="defaultValue">The default value to return if the element does not exist or have a value.</param>
            <returns>The requested element value or <c>null</c> if it does not exist or have a value.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringElementOrNullIfEmpty(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string element value.
            If the string is <c>null</c> or empty, this will return <c>null</c>.
            </summary>
            <param name="element">The element containing the value.</param>
            <param name="childElementName">The name of the child element for which to get the value.</param>
            <returns>The requested element value or <c>null</c> if it does not exist or is <c>null</c> or empty.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringElementOrNullIfEmpty(System.Xml.Linq.XElement)">
            <summary>
            Gets the string element value.
            If the string is <c>null</c> or empty, this will return <c>null</c>.
            </summary>
            <param name="element">The element containing the value.</param>
            <returns>The requested element value or <c>null</c> if it does not exist or is <c>null</c> or empty.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringElementOrNullIfWhitespace(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string element value.
            If the string is <c>null</c>, empty, or whitespace, this will return <c>null</c>.
            </summary>
            <param name="element">The element containing the value.</param>
            <param name="childElementName">The name of the child element for which to get the value.</param>
            <returns>The requested element value or <c>null</c> if it does not exist or is <c>null</c>, empty, or whitespace.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetStringElementOrNullIfWhitespace(System.Xml.Linq.XElement)">
            <summary>
            Gets the string element value.
            If the string is <c>null</c>, empty, or whitespace, this will return <c>null</c>.
            </summary>
            <param name="element">The element containing the value.</param>
            <returns>The requested element value or <c>null</c> if it does not exist or is <c>null</c>, empty, or whitespace.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector2Attribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector2)">
            <summary>
            Gets the Vector2 attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector2AttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Vector2 attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector2dAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector2d)">
            <summary>
            Gets the Vector2d attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector2dAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Vector2d attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector3Attribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector3)">
            <summary>
            Gets the Vector3 attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector3AttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Vector3 attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector3dAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector3d)">
            <summary>
            Gets the Vector3d attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector3dAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Vector3d attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector4Attribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector4)">
            <summary>
            Gets the Vector4 attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector4AttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Vector4 attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector4dAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector4d)">
            <summary>
            Gets the Vector4d attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or the default value if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVector4dAttributeOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the Vector4d attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.GetVersionAttribute(System.Xml.Linq.XElement,System.String,System.Version)">
            <summary>
            Gets the version attribute value.
            </summary>
            <param name="element">The element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value to return if the attribute does not exist.</param>
            <returns>The requested attribute value or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Gradient,System.Boolean)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
            <param name="includeAlphaKeys">If set to <c>true</c>, both color and alpha keys will be saved; otherwise only the color keys are saved.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector3)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector4)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector3d)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector4d)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Quaternion)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Quaterniond)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector2)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Common.Extensions.XElementExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector2d)">
            <summary>
            Sets the specified attribute's value to the specified value.
            </summary>
            <param name="element">The element on which to set the attribute value.</param>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="T:ModApi.Common.Game">
            <summary>
            Singleton class which provides various functions to the game.
            </summary>
            <remarks>
            This class exists as a hacky convenience.
            Most of our code can use Game.cs without a namespace or using statement.
            Modders and other code must use 'Common' namespace.
            </remarks>
        </member>
        <member name="F:ModApi.Common.Game._getVersionField">
            <summary>
            The function used to retreive the version field value.
            </summary>
        </member>
        <member name="F:ModApi.Common.Game._instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="F:ModApi.Common.Game._loop">
            <summary>
            The registrar for the game loop.
            </summary>
        </member>
        <member name="P:ModApi.Common.Game.InDesignerScene">
            <summary>
            Gets a value indicating whether the game is currently in the designer scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the designer scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.InFlightScene">
            <summary>
            Gets a value indicating whether the game is currently in the flight scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the flight scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.InMenuScene">
            <summary>
            Gets a value indicating whether the game is currently in the menu scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the menu scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.InPlanetStudioScene">
            <summary>
            Gets a value indicating whether the game is currently in the planet studio scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the planet studio scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>
            The singleton instance.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.Loop">
            <summary>
            Gets the registrar for the game loop.
            </summary>
            <value>
            The registrar for the game loop.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.PersistentDataPath">
            <summary>
            Gets the persistent data path.
            </summary>
            <value>
            The persistent data path.
            </value>
        </member>
        <member name="P:ModApi.Common.Game.Version">
            <summary>
            Gets the version of the game.
            </summary>
            <value>
            The version of the game.
            </value>
        </member>
        <member name="M:ModApi.Common.Game.LoadGameLoopRegistrar(System.Type)">
            <summary>
            Loads the game loop registrar static property from the main game assembly via reflection.
            </summary>
            <param name="gameType">The type of the Game object.</param>
        </member>
        <member name="M:ModApi.Common.Game.LoadInstance">
            <summary>
            Loads the singleton instance from the main game assembly via reflection.
            </summary>
            <returns>The singleton instance.</returns>
        </member>
        <member name="T:ModApi.Common.Meshes.MeshTangentGenerator">
            <summary>
            A utility class used to generate tangents for mesh data.
            https://answers.unity.com/questions/7789/calculating-tangents-vector4.html
            </summary>
        </member>
        <member name="M:ModApi.Common.Meshes.MeshTangentGenerator.CalculateTangents(System.Int32[],UnityEngine.Vector3[],UnityEngine.Vector2[],UnityEngine.Vector3[],UnityEngine.Vector3[],UnityEngine.Vector3[],UnityEngine.Vector4[])">
            <summary>
            Calculates the tangents for the specified mesh data.
            </summary>
            <param name="triangles">The triangles for the mesh.</param>
            <param name="vertices">The vertices for the mesh.</param>
            <param name="uvs">The UVs for the mesh.</param>
            <param name="normals">The normals for the mesh.</param>
            <param name="tempTangents1">The first temporary list used to store tangent data during calculations.</param>
            <param name="tempTangents2">The second temporary list used to store tangent data during calculations.</param>
            <param name="results">The tangent results.</param>
        </member>
        <member name="M:ModApi.Common.Meshes.MeshTangentGenerator.CalculateTangents(UnityEngine.Mesh)">
            <summary>
            Calculates the tangents for the specified mesh.
            </summary>
            <param name="mesh">The mesh for which to calculate tangents.</param>
            <returns>The calculated set of tangents for the mesh.</returns>
        </member>
        <member name="M:ModApi.Common.Meshes.MeshTangentGenerator.UpdateTangents(UnityEngine.Mesh)">
            <summary>
            Calculates and updates the tangents for the specified mesh.
            </summary>
            <param name="mesh">The mesh for which to update tangents.</param>
        </member>
        <member name="T:ModApi.Common.MinMaxValue">
            <summary>
            A struct containing a minimum and maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Common.MinMaxValue.MaxValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Common.MinMaxValue.MinValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="M:ModApi.Common.MinMaxValue.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.MinMaxValue"/> struct.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="M:ModApi.Common.MinMaxValue.op_Explicit(System.Xml.Linq.XAttribute)~ModApi.Common.MinMaxValue">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Xml.Linq.XAttribute"/> to <see cref="T:ModApi.Common.MinMaxValue"/>.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>
            The result of the conversion.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the attribute argument is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">The expected format of the MinMaxValue should be \"float,float\".</exception>
        </member>
        <member name="M:ModApi.Common.MinMaxValue.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{ModApi.Common.MinMaxValue}">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Xml.Linq.XAttribute"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>
            The result of the conversion.
            </returns>
            <exception cref="T:System.FormatException">The expected format of the MinMaxValue should be \"float,float\".</exception>
        </member>
        <member name="M:ModApi.Common.MinMaxValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ModApi.Common.Physics.CollisionNotifier">
            <summary>
            Use to be notified when another GameObject's colliders have collision events.
            </summary>
        </member>
        <member name="F:ModApi.Common.Physics.CollisionNotifier._collisionEnter">
            <summary>
            The collision enter event.
            </summary>
        </member>
        <member name="F:ModApi.Common.Physics.CollisionNotifier._collisionExit">
            <summary>
            The collision exit event.
            </summary>
        </member>
        <member name="F:ModApi.Common.Physics.CollisionNotifier._collisionStay">
            <summary>
            The collision stay event.
            </summary>
        </member>
        <member name="P:ModApi.Common.Physics.CollisionNotifier.CollisionEnter">
            <summary>
            Gets the collision enter event.
            </summary>
        </member>
        <member name="P:ModApi.Common.Physics.CollisionNotifier.CollisionExit">
            <summary>
            Gets the collision exit event.
            </summary>
        </member>
        <member name="P:ModApi.Common.Physics.CollisionNotifier.CollisionStay">
            <summary>
            Gets the collision stay event.
            </summary>
        </member>
        <member name="M:ModApi.Common.Physics.CollisionNotifier.OnCollisionEnter(UnityEngine.Collision)">
            <summary>
            Called when the collision enter event occurs.
            </summary>
            <param name="collision">The collision.</param>
        </member>
        <member name="M:ModApi.Common.Physics.CollisionNotifier.OnCollisionExit(UnityEngine.Collision)">
            <summary>
            Called when the collision exit event occurs.
            </summary>
            <param name="collision">The collision.</param>
        </member>
        <member name="M:ModApi.Common.Physics.CollisionNotifier.OnCollisionStay(UnityEngine.Collision)">
            <summary>
            Called when the collision stay event occurs.
            </summary>
            <param name="collision">The collision.</param>
        </member>
        <member name="T:ModApi.Common.Physics.CollisionNotifier.CollisionEvent">
            <summary>
            A collision event.
            </summary>
        </member>
        <member name="T:ModApi.Common.ResourceRequestWrapper`1">
            <summary>
            A wrapper for a resource request that provides strong typing and error logging.
            </summary>
            <typeparam name="T">The type of the requested resource.</typeparam>
        </member>
        <member name="F:ModApi.Common.ResourceRequestWrapper`1._logErrors">
            <summary>
            A value indicating whether errors should be logged.
            </summary>
        </member>
        <member name="M:ModApi.Common.ResourceRequestWrapper`1.#ctor(UnityEngine.ResourceRequest,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.ResourceRequestWrapper`1"/> class.
            </summary>
            <param name="request">The original resourced request.</param>
            <param name="path">The resource request path.</param>
            <param name="logErrors">If set to <c>true</c>, an error will be logged if the resource could not be found.</param>
        </member>
        <member name="P:ModApi.Common.ResourceRequestWrapper`1.Asset">
            <summary>
            Gets the requested asset once it has been loaded.
            </summary>
            <value>
            The requested asset once it has been loaded.
            </value>
        </member>
        <member name="P:ModApi.Common.ResourceRequestWrapper`1.Path">
            <summary>
            Gets the resource request path.
            </summary>
            <value>
            The resource request path.
            </value>
        </member>
        <member name="P:ModApi.Common.ResourceRequestWrapper`1.Request">
            <summary>
            Gets the original resource request.
            </summary>
            <value>
            The original resource request.
            </value>
        </member>
        <member name="T:ModApi.Common.ResourceUtils.ResourceData">
            <summary>
            A simple class that contains a resource path and a mod reference
            indicating the mod (if any) in which the resource can be found.
            </summary>
        </member>
        <member name="M:ModApi.Common.ResourceUtils.ResourceData.#ctor(System.String,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.ResourceUtils.ResourceData"/> class.
            </summary>
            <param name="path">The path of the resource.</param>
            <param name="mod">The mod (if any) in which the resource can be found.</param>
        </member>
        <member name="P:ModApi.Common.ResourceUtils.ResourceData.Mod">
            <summary>
            Gets or sets the mod (if any) in which the resource can be found.
            </summary>
            <value>
            The mod (if any) in which the resource can be found.
            </value>
        </member>
        <member name="P:ModApi.Common.ResourceUtils.ResourceData.Path">
            <summary>
            Gets or sets the path of the resource.
            </summary>
            <value>
            The path of the resource.
            </value>
        </member>
        <member name="T:ModApi.Common.ResourceUtils.ResourceDataScript">
            <summary>
            A simple script that contains a resource path and a mod reference
            indicating the mod (if any) in which the resource can be found.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:ModApi.Common.ResourceUtils.ResourceDataScript.Data">
            <summary>
            Gets or sets the resource data object.
            </summary>
            <value>
            The resource data object.
            </value>
        </member>
        <member name="M:ModApi.Common.ResourceUtils.ResourceDataScript.Add(UnityEngine.GameObject,ModApi.Common.ResourceUtils.ResourceData)">
            <summary>
            Adds the script to specified object with the specified resource data.
            </summary>
            <param name="obj">The object to which to add the script.</param>
            <param name="data">The resource data associated with the script.</param>
            <returns>The added script.</returns>
        </member>
        <member name="T:ModApi.Common.SimpleTypes.ColorARGB32">
            <summary>
            A simple color structure matching the format of ARGB32 texture data.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorARGB32.a">
            <summary>
            The alpha color value.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorARGB32.r">
            <summary>
            The red color value.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorARGB32.g">
            <summary>
            The green color value.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorARGB32.b">
            <summary>
            The blue color value.
            </summary>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorARGB32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/> struct.
            </summary>
            <param name="a">The alpha color value.</param>
            <param name="r">The red color value.</param>
            <param name="g">The green color value.</param>
            <param name="b">The blue color value.</param>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorARGB32.op_Implicit(ModApi.Common.SimpleTypes.ColorARGB32)~UnityEngine.Color32">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/> to <see cref="T:UnityEngine.Color32"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorARGB32.op_Implicit(UnityEngine.Color32)~ModApi.Common.SimpleTypes.ColorARGB32">
            <summary>
            Performs an implicit conversion from <see cref="T:UnityEngine.Color32"/> to <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorARGB32.op_Implicit(ModApi.Common.SimpleTypes.ColorRGB24)~ModApi.Common.SimpleTypes.ColorARGB32">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/> to <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorARGB32.ToString">
            <summary>
            Returns a <see cref="!:System.string" /> that represents this instance.
            </summary>
            <returns>A <see cref="!:System.string" /> that represents this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorARGB32.ToString(System.String)">
            <summary>
            Returns a <see cref="!:System.string" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="!:System.string" /> that represents this instance.</returns>
        </member>
        <member name="T:ModApi.Common.SimpleTypes.ColorRGB24">
            <summary>
            A color structure representing a 24-bit RGB color value with 8 bits per channel and no alpha channel.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorRGB24.r">
            <summary>
            The red color value.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorRGB24.g">
            <summary>
            The green color value.
            </summary>
        </member>
        <member name="F:ModApi.Common.SimpleTypes.ColorRGB24.b">
            <summary>
            The blue color value.
            </summary>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/> struct.
            </summary>
            <param name="r">The red color value.</param>
            <param name="g">The green color value.</param>
            <param name="b">The blue color value.</param>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.op_Explicit(UnityEngine.Color32)~ModApi.Common.SimpleTypes.ColorRGB24">
            <summary>
            Performs an explicit conversion from <see cref="T:UnityEngine.Color32"/> to <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.op_Explicit(ModApi.Common.SimpleTypes.ColorARGB32)~ModApi.Common.SimpleTypes.ColorRGB24">
            <summary>
            Performs an explicit conversion from <see cref="T:ModApi.Common.SimpleTypes.ColorARGB32"/> to <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.op_Implicit(ModApi.Common.SimpleTypes.ColorRGB24)~UnityEngine.Color32">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Common.SimpleTypes.ColorRGB24"/> to <see cref="T:UnityEngine.Color32"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.Lerp(ModApi.Common.SimpleTypes.ColorRGB24,ModApi.Common.SimpleTypes.ColorRGB24,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">The interpolate from value.</param>
            <param name="b">The interpolate to value.</param>
            <param name="t">The interpolation parameter.</param>
            <returns>The linear interpolation result.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.LerpUnclamped(ModApi.Common.SimpleTypes.ColorRGB24,ModApi.Common.SimpleTypes.ColorRGB24,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by an unclamped t.
            </summary>
            <param name="a">The interpolate from value.</param>
            <param name="b">The interpolate to value.</param>
            <param name="t">The interpolation parameter.</param>
            <returns>The linear interpolation result.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.ToString">
            <summary>
            Returns a <see cref="!:System.string" /> that represents this instance.
            </summary>
            <returns>A <see cref="!:System.string" /> that represents this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.ColorRGB24.ToString(System.String)">
            <summary>
            Returns a <see cref="!:System.string" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="!:System.string" /> that represents this instance.</returns>
        </member>
        <member name="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper">
            <summary>
            A simple value type that wraps a string.
            </summary>
            <seealso cref="T:System.IComparable" />
            <seealso cref="T:System.ICloneable" />
            <seealso cref="T:System.IConvertible" />
            <seealso cref="T:System.Collections.IEnumerable" />
            <seealso cref="!:System.IComparable&lt;string&gt;" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;char&gt;" />
            <seealso cref="!:System.IEquatable&lt;string&gt;" />
            <seealso cref="!:System.IComparable&lt;ModApi.Common.SimpleTypes.StringValueTypeWrapper&gt;" />
            <seealso cref="!:System.IEquatable&lt;ModApi.Common.SimpleTypes.StringValueTypeWrapper&gt;" />
        </member>
        <member name="F:ModApi.Common.SimpleTypes.StringValueTypeWrapper.Value">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper"/> struct.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.op_Implicit(ModApi.Common.SimpleTypes.StringValueTypeWrapper)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.op_Implicit(System.String)~ModApi.Common.SimpleTypes.StringValueTypeWrapper">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.op_Inequality(ModApi.Common.SimpleTypes.StringValueTypeWrapper,ModApi.Common.SimpleTypes.StringValueTypeWrapper)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The left hand side.</param>
            <param name="rhs">The right hand side.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.op_Equality(ModApi.Common.SimpleTypes.StringValueTypeWrapper,ModApi.Common.SimpleTypes.StringValueTypeWrapper)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The left hand side.</param>
            <param name="rhs">The right hand side.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.Clone">
            <summary>
            Returns a reference to this instance of <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper" />.
            </summary>
            <returns>
            This instance of <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper" />.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.
            </summary>
            <param name="other">An object that evaluates to a <see cref="T:System.String" />. </param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="other" /> parameter.Value Condition Less than zero This instance precedes <paramref name="other" />. Zero This instance has the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" />.-or- <paramref name="other" /> is null.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="other" /> is not a <see cref="T:System.String" /> or <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper" />.</exception>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.CompareTo(System.String)">
            <summary>
            Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.String" />.
            </summary>
            <param name="other">The string to compare with this instance. </param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="other" /> parameter. Value Condition Less than zero This instance precedes <paramref name="other" />. Zero This instance has the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" />.-or- <paramref name="other" /> is null.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.CompareTo(ModApi.Common.SimpleTypes.StringValueTypeWrapper)">
            <summary>
            Compares this instance with a specified <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper" />.
            </summary>
            <param name="other">The other string wrapper to compare with this instance. </param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="other" /> parameter. Value Condition Less than zero This instance precedes <paramref name="other" />. Zero This instance has the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" />.-or- <paramref name="other" /> is null.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.Equals(System.String)">
            <summary>
            Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.
            </summary>
            <param name="other">The string to compare to this instance.</param>
            <returns>
            true if the value of the <paramref name="other" /> parameter is the same as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.Equals(ModApi.Common.SimpleTypes.StringValueTypeWrapper)">
            <summary>
            Determines whether this instance and another specified <see cref="T:ModApi.Common.SimpleTypes.StringValueTypeWrapper" /> object have the same value.
            </summary>
            <param name="value">The value to compare to this instance.</param>
            <returns>
            true if the value of the <paramref name="value" /> parameter is the same as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual characters in this string.
            </summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual characters in this string.
            </summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.String" />.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>
            An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:ModApi.Common.SimpleTypes.StringValueTypeWrapper.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="T:ModApi.Common.Textures.Screenshots">
            <summary>
            Functionality related to taking screen-shots.
            </summary>
        </member>
        <member name="M:ModApi.Common.Textures.Screenshots.GetScreenShotSampleRect(System.Single)">
            <summary>
            Gets a rect identifying where from the current screen to obtain a screen-shot of the desired aspect ratio.
            If the aspect ratio is different than the current resolution, some clipping will occur.
            </summary>
            <param name="aspectRatio">The desired aspect ratio.</param>
            <returns>
            A rect identifying where from the current screen to obtain a screen-shot of the desired aspect ratio.
            </returns>
        </member>
        <member name="M:ModApi.Common.Textures.Screenshots.TakeScreenShot(UnityEngine.Vector2i,System.Action{UnityEngine.Texture2D})">
            <summary>
            Takes a screen-shot of the screen's current contents.  The final image will be at the specified resolution.
            Cropping will occur if the specified resolution's aspect ratio is different from the current one.
            </summary>
            <param name="resolution">The final resolution of the screen-shot.</param>
            <param name="onScreenshotComplete">Action to call when the screen-shot has been captured..</param>
            <remarks>
            screenSampleRect and resolution must have the same aspect ratio, or the final image will be skewed. It does not have to match the current resolution, however.
            </remarks>
        </member>
        <member name="M:ModApi.Common.Textures.Screenshots.TakeScreenShot(UnityEngine.Rect,UnityEngine.Vector2i,System.Action{UnityEngine.Texture2D})">
            <summary>
            Takes a screen-shot of the current screen's contents.
            The final image will consist of whatever is inside the screenSampleRect, and at the specified resolution.
            Cropping will occur if the specified resolution's aspect ratio is different from the current one.
            </summary>
            <param name="screenSampleRect">The location within the current screen to capture a screen-shot.</param>
            <param name="resolution">The final resolution of the screen-shot.</param>
            <param name="onScreenshotComplete">Action to call when the screen-shot has been captured..</param>
            <remarks>screenSampleRect and resolution must have the same aspect ratio, or the final image will be skewed. It does not have to match the current resolution, however.</remarks>
        </member>
        <member name="M:ModApi.Common.Textures.Screenshots.CaptureScreenshot(System.String,System.Int32)">
            <summary>
            Captures the screenshot.
            </summary>
            <param name="fileName">Name of the screenshot file.</param>
            <param name="superSize">Factor by which to increase resolution.</param>
            <returns>The path to the screenshot file.</returns>
        </member>
        <member name="T:ModApi.Common.Textures.TextureSampler">
            <summary>
            A class that replicates the functionality of Texture2D.GetPixelBilinear that is usable by other threads.
            http://wiki.unity3d.com/index.php?title=TextureSampler
            </summary>
        </member>
        <member name="F:ModApi.Common.Textures.TextureSampler._data">
            <summary>
            The texture data.
            </summary>
        </member>
        <member name="F:ModApi.Common.Textures.TextureSampler._height">
            <summary>
            The height of the texture.
            </summary>
        </member>
        <member name="F:ModApi.Common.Textures.TextureSampler._width">
            <summary>
            The width of the texture.
            </summary>
        </member>
        <member name="M:ModApi.Common.Textures.TextureSampler.#ctor(UnityEngine.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Common.Textures.TextureSampler"/> class.
            </summary>
            <param name="source">The source texture.</param>
        </member>
        <member name="M:ModApi.Common.Textures.TextureSampler.GetPixel(System.Single,System.Single)">
            <summary>
            Gets the pixel color at the specified pixel coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the specified pixel.</returns>
        </member>
        <member name="M:ModApi.Common.Textures.TextureSampler.GetPixelBilinear(System.Single,System.Single)">
            <summary>
            Returns filtered pixel color at normalized coordinates (u, v).
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <returns>The filtered pixel color at normalized coordinates (u, v).</returns>
        </member>
        <member name="M:ModApi.Common.Textures.TextureSampler.Mod(System.Single,System.Single)">
            <summary>
            Performs a modulus operation on the two specified floats.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The result of the modulus operation.</returns>
        </member>
        <member name="M:ModApi.Common.Textures.TextureSampler.WrapBetween(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the value between the two specified values.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The value that has been wrapped between the two specified values.</returns>
        </member>
        <member name="T:ModApi.Common.UI.NonDrawingGraphic">
            <summary>
            A concrete subclass of the Unity UI `Graphic` class that just skips drawing.
            Useful for providing a raycast target without actually drawing anything.
            </summary>
            <seealso cref="T:UnityEngine.UI.Graphic" />
        </member>
        <member name="M:ModApi.Common.UI.NonDrawingGraphic.SetMaterialDirty">
            <summary>
            Mark the Material as dirty.
            </summary>
        </member>
        <member name="M:ModApi.Common.UI.NonDrawingGraphic.SetVerticesDirty">
            <summary>
            Mark the vertices as dirty.
            </summary>
        </member>
        <member name="M:ModApi.Common.UI.NonDrawingGraphic.OnPopulateMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            Callback function when a UI element needs to generate vertices.
            Probably not necessary since the chain of calls
            `Rebuild()`-&gt;`UpdateGeometry()`-&gt;`DoMeshGeneration()`-&gt;`OnPopulateMesh()`
            won't happen; so here really just as a fail-safe.
            </summary>
            <param name="vh">VertexHelper utility.</param>
        </member>
        <member name="T:ModApi.Constants">
            <summary>
            Constants used in the project.
            </summary>
        </member>
        <member name="F:ModApi.Constants.AtmosphereRenderingScale">
            <summary>
            The visual for the atmosphere has to be 2.5% of the planet's radius for the
            O'Neil formulas to work, so we ignore the planet's actual atmosphere height.
            (16.4.2 Eliminating the Other Dimension) - https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html
            </summary>
        </member>
        <member name="F:ModApi.Constants.AttachPointOverlapSphereRadius">
            <summary>
            The attach point overlap sphere radius, used when checking if an attach point should be connected to
            another attach point.
            </summary>
        </member>
        <member name="F:ModApi.Constants.AttachPointRadius">
            <summary>
            The attach point radius.
            </summary>
        </member>
        <member name="F:ModApi.Constants.CustomThemeName">
            <summary>
            The custom theme.
            </summary>
        </member>
        <member name="F:ModApi.Constants.DefaultCompanyName">
            <summary>
            The default company name
            </summary>
        </member>
        <member name="F:ModApi.Constants.DefaultDopplarLevel">
            <summary>
            The default dopplar level
            </summary>
        </member>
        <member name="F:ModApi.Constants.DefaultLegacySolarSystemId">
            <summary>
            The default legacy solar system ID.
            </summary>
        </member>
        <member name="F:ModApi.Constants.DegreeSymbol">
            <summary>
            The degree symbol. I don't know how many times I've googled this to copy/paste it into our code.
            </summary>
        </member>
        <member name="F:ModApi.Constants.DoubleClickTime">
            <summary>
            The length of time between clicks to register a double click time.
            </summary>
        </member>
        <member name="F:ModApi.Constants.DragForceScale">
            <summary>
            The drag force scale.
            </summary>
        </member>
        <member name="F:ModApi.Constants.EarthGravity">
            <summary>
            Standard Earth gravity in m/s2.
            Reference: https://en.wikipedia.org/wiki/Standard_gravity
            </summary>
        </member>
        <member name="F:ModApi.Constants.FuelEpsilon">
            <summary>
            The epsilon for comparing fuel amounts.
            </summary>
        </member>
        <member name="F:ModApi.Constants.GravitationConstant">
            <summary>
            The gravitation constant.
            </summary>
        </member>
        <member name="F:ModApi.Constants.GridUnit">
            <summary>
            The size of one unit of grid in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Constants.HomePlanetName">
            <summary>
            The home planet name
            </summary>
        </member>
        <member name="F:ModApi.Constants.InitialRigidBodyAngularDrag">
            <summary>
            The initial angular drag for a rigid body.
            </summary>
        </member>
        <member name="F:ModApi.Constants.MassScale">
            <summary>
            The mass scale.
            </summary>
        </member>
        <member name="F:ModApi.Constants.MaxActivationGroups">
            <summary>
            The maximum number of activation groups
            </summary>
        </member>
        <member name="F:ModApi.Constants.MaxRaycastDistance">
            <summary>
            The maximum raycast distance that should be used when using Physics.Raycast. It might be tempting
            to use float.MaxValue or float.PositiveInfinity, but those can cause glitchy results.
            </summary>
        </member>
        <member name="F:ModApi.Constants.MaxStages">
            <summary>
            The maximum number of stages possible to create in the game.
            </summary>
        </member>
        <member name="F:ModApi.Constants.MaxUndoSteps">
            <summary>
            The maximum undo steps.
            </summary>
        </member>
        <member name="F:ModApi.Constants.MinBodyMass">
            <summary>
            The minimum allowable mass for a rigid body.
            </summary>
        </member>
        <member name="F:ModApi.Constants.NumActivationGroups">
            <summary>
            The default number activation groups.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PartTemperature">
            <summary>
            The temperature that parts attempt to maintain, in Kelvin.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PhysicsDistance">
            <summary>
            The physics distance
            </summary>
        </member>
        <member name="F:ModApi.Constants.RenderQueueBeforeDepthMask">
            <summary>
            The render queue before the depth mask.
            </summary>
        </member>
        <member name="F:ModApi.Constants.ScaledSpaceScale">
            <summary>
            The scale used in scaled space.
            </summary>
        </member>
        <member name="F:ModApi.Constants.SpaceTemperature">
            <summary>
            The temperature of empty space, in Kelvin.
            </summary>
        </member>
        <member name="F:ModApi.Constants.UiSoundVolume">
            <summary>
            The default UI sound volume.
            </summary>
        </member>
        <member name="F:ModApi.Constants.UnifiedAtomicMassToKg">
            <summary>
            The unified atomic mass to kg
            </summary>
        </member>
        <member name="F:ModApi.Constants.WaterDensity">
            <summary>
            The water density in kg/m3.
            </summary>
        </member>
        <member name="F:ModApi.Constants.WingThickness">
            <summary>
            Gets or sets the wing thickness.
            </summary>
            <value>
            The wing thickness.
            </value>
        </member>
        <member name="T:ModApi.Constants.Colors">
            <summary>
            Common colors used in the game.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Colors.Complementary">
            <summary>
            The complementary color.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Colors.Primary">
            <summary>
            The primary color.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Colors.Selected">
            <summary>
            The selected color.
            </summary>
        </member>
        <member name="T:ModApi.Constants.Colors.CommonColor">
            <summary>
            A wrapper class for a common color in the application.
            </summary>
        </member>
        <member name="M:ModApi.Constants.Colors.CommonColor.#ctor(UnityEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Constants.Colors.CommonColor"/> class.
            </summary>
            <param name="color">The color in gamma color space.</param>
        </member>
        <member name="P:ModApi.Constants.Colors.CommonColor.Gamma">
            <summary>
            Gets the color in gamma color space.
            </summary>
            <value>
            The color in gamma color space.
            </value>
        </member>
        <member name="P:ModApi.Constants.Colors.CommonColor.Gamma32">
            <summary>
            Gets the color32 in gamma color space.
            </summary>
            <value>
            The color32 in gamma color space.
            </value>
        </member>
        <member name="P:ModApi.Constants.Colors.CommonColor.Linear">
            <summary>
            Gets the color in linear color space.
            </summary>
            <value>
            The color in linear color space.
            </value>
        </member>
        <member name="P:ModApi.Constants.Colors.CommonColor.Linear32">
            <summary>
            Gets the color32 in linear color space.
            </summary>
            <value>
            The color32 in linear color space.
            </value>
        </member>
        <member name="M:ModApi.Constants.Colors.CommonColor.SetWithGamma(UnityEngine.Color)">
            <summary>
            Sets the color using gamma color space.
            </summary>
            <param name="color">The gamma space color.</param>
        </member>
        <member name="M:ModApi.Constants.Colors.CommonColor.SetWithLinear(UnityEngine.Color)">
            <summary>
            Sets the color using linear color space.
            </summary>
            <param name="color">The linear space color.</param>
        </member>
        <member name="T:ModApi.Constants.ControlAxisNames">
            <summary>
            Names of all control axes in the game.
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Brake">
            <summary>
            The brake
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.CycleTargetingMode">
            <summary>
            The cycle targeting mode
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.FireGuns">
            <summary>
            The fire guns
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.FireWeapons">
            <summary>
            The fire weapons
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.LandingGear">
            <summary>
            The landing gear
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.NextTarget">
            <summary>
            The next target
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.NextWeapon">
            <summary>
            The next weapon
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Pitch">
            <summary>
            The pitch
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.PreviousTarget">
            <summary>
            The previous target
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.PreviousWeapon">
            <summary>
            The previous weapon
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Roll">
            <summary>
            The roll
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Slider1">
            <summary>
            The slider  1 input
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Slider2">
            <summary>
            The slider 2 input
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Throttle">
            <summary>
            The throttle
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.ToggleActivationPanel">
            <summary>
            The toggle activation panel
            </summary>
        </member>
        <member name="F:ModApi.Constants.ControlAxisNames.Yaw">
            <summary>
            The yaw
            </summary>
        </member>
        <member name="T:ModApi.Constants.PartStyles">
            <summary>
            Part styles related constants.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PartStyles.MaxSubmeshCount">
            <summary>
            The maximum submesh count supported for a single part mesh renderer.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PartStyles.MaxSubpartCount">
            <summary>
            The maximum number of subpart supported for a single part.
            </summary>
        </member>
        <member name="T:ModApi.Constants.Paths">
            <summary>
            Commonly used paths.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.FlightStatesFolder">
            <summary>
            The flight states folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.GameDataFolder">
            <summary>
            The folder for game data installed on the user's device.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.GameStatesFolder">
            <summary>
            The game states folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.LegacySolarSystemsGameDataFolder">
            <summary>
            The legacy solar systems folder under game data.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.LegacySolarSystemsUserDataFolder">
            <summary>
            The legacy solar systems folder under user data.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.LevelFolder">
            <summary>
            The levels folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.LevelScoresFolder">
            <summary>
            The level scores folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.PartIconFolder">
            <summary>
            The resources folder in local storage (under LocalLow).
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.PhotoLibraryFolder">
            <summary>
            The photo library folder
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.UserCraftDesignsFolder">
            <summary>
            The user craft designs folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.UserDataFolder">
            <summary>
            The folder for user data installed on the user's device.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.UserFlightProgramsFolder">
            <summary>
            The user flight programs folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.UserSubassembliesFolder">
            <summary>
            The user subassemblies folder.
            </summary>
        </member>
        <member name="T:ModApi.Constants.Paths.Resources">
            <summary>
            Paths for files and folders contained in the main resource bundle.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.CraftFolder">
            <summary>
            The craft folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.CraftThemesFile">
            <summary>
            The craft themes file.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.LevelsFolder">
            <summary>
            The levels resources folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.PartsFolder">
            <summary>
            The craft part folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.PropulsionDataFile">
            <summary>
            The propulsion data file.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.SoundsFolder">
            <summary>
            The sound folder.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Paths.Resources.VizzyToolboxFile">
            <summary>
            The Vizzy toolbox file.
            </summary>
        </member>
        <member name="T:ModApi.Constants.PlanetCubemapSize">
            <summary>
            Constants defining the size of different quality planet cubemaps.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PlanetCubemapSize.High">
            <summary>
            The high quality planet cubemap size.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PlanetCubemapSize.Low">
            <summary>
            The low quality planet cubemap size.
            </summary>
        </member>
        <member name="F:ModApi.Constants.PlanetCubemapSize.Medium">
            <summary>
            The medium quality planet cubemap size.
            </summary>
        </member>
        <member name="T:ModApi.Constants.Rendering">
            <summary>
            Constants for rendering related stuff.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Rendering.TransparentRenderQueue">
            <summary>
            The transparent render queue.
            </summary>
        </member>
        <member name="F:ModApi.Constants.Rendering.AmbientLightInSpace">
            <summary>
            The default ambient light in space.
            </summary>
        </member>
        <member name="T:ModApi.Constants.UI">
            <summary>
            Ui-related constants
            </summary>
        </member>
        <member name="P:ModApi.Constants.UI.ReferenceResolution">
            <summary>
            Gets the reference resolution for canvas scalers.
            </summary>
            <value>
            The reference resolution for canvas scalers.
            </value>
        </member>
        <member name="T:ModApi.Craft.Assembly">
            <summary>
            Contains a group of parts and connections and provides methods to save and load them.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Assembly._bodies">
            <summary>
            The bodies.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Assembly._partCollisions">
            <summary>
            The part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Assembly._partConnections">
            <summary>
            The part connections.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Assembly._partDictionary">
            <summary>
            The part dictionary.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Assembly._parts">
            <summary>
            The parts.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Assembly.#ctor(System.Xml.Linq.XElement,System.Int32,ModApi.Craft.Parts.PartTypeList)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Assembly" /> class.
            </summary>
            <param name="assemblyElement">The assembly element.</param>
            <param name="craftXmlVersion">The craft XML version.</param>
            <param name="partTypes">The part types.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Assembly"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Assembly.Bodies">
            <summary>
            Gets the bodies.
            </summary>
            <value>
            The bodies.
            </value>
        </member>
        <member name="P:ModApi.Craft.Assembly.LoadModifierFailures">
            <summary>
            Gets the list of modifier load failures.
            </summary>
            <value>
            The list of modifier load failures.
            </value>
        </member>
        <member name="P:ModApi.Craft.Assembly.MissingParts">
            <summary>
            Gets the missing parts.
            </summary>
            <value>
            The missing parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Assembly.PartCollisions">
            <summary>
            Gets the part collisions.
            </summary>
            <value>
            The part collisions.
            </value>
        </member>
        <member name="P:ModApi.Craft.Assembly.PartConnections">
            <summary>
            Gets the part connections.
            </summary>
            <value>
            The part connections.
            </value>
        </member>
        <member name="P:ModApi.Craft.Assembly.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="M:ModApi.Craft.Assembly.CreateAssemblyFromParts(System.Collections.Generic.List{ModApi.Craft.Parts.PartData})">
            <summary>
            Creates the assembly from the parts. Does not change their IDs.
            </summary>
            <param name="parts">The parts.</param>
            <returns>The newly created assembly.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.Absorb(ModApi.Craft.Assembly)">
            <summary>
            Absorbs the specified assembly. All parts from the specified assembly will be moved into this assembly and
            their IDs will be updated to be unique inside this assembly.
            </summary>
            <param name="assembly">The assembly to absorb.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.AddBody(ModApi.Craft.BodyData)">
            <summary>
            Adds the body and updates its ID to be unique inside of this assembly.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.AddPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Adds the part and updates its ID to be unique inside of this assembly.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.AddPartCollision(ModApi.Craft.Parts.PartCollision)">
            <summary>
            Adds the part collision.
            </summary>
            <param name="partCollision">The part collision.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.AddPartConnection(ModApi.Craft.Parts.PartConnection)">
            <summary>
            Adds the part connection.
            </summary>
            <param name="partConnection">The part connection.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.ContainsPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Determines whether the assembly contains the specified part.
            </summary>
            <param name="part">The part.</param>
            <returns>
              <c>true</c> if the specified part contains part; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GenerateXml(UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Generates the XML.
            </summary>
            <param name="craftTransform">The craft transform.</param>
            <param name="subAssembly">If set to <c>true</c>, the XML is being generated for a subassembly.</param>
            <param name="optimizeXml">If set to <c>true</c>, the generated XML will be optimized where possible.</param>
            <returns>
            The XML element.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetBodyById(System.Int32)">
            <summary>
            Gets the body by identifier.
            </summary>
            <param name="bodyId">The body identifier.</param>
            <returns>The body data with the ID.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetBodyByPartId(System.Int32)">
            <summary>
            Gets the body which contains a part with the specified part identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The body which contains a part with the specified part identifier.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetModifiers``1">
            <summary>
            Gets a list of the modifiers in the assembly of the given type.
            </summary>
            <typeparam name="T">The modifier type.</typeparam>
            <returns>A list of the modifiers in the assembly of the given type</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetPartById(System.Int32)">
            <summary>
            Gets the part by identifier, or null if it does not exist.
            </summary>
            <param name="partId">The part identifier.</param>
            <returns>The part with the specified ID.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetPartByName(System.String)">
            <summary>
            Gets the part by name, or <c>null</c> if it does not exist.
            </summary>
            <param name="partName">The part name.</param>
            <returns>The part with the specified name.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetPartCollisions(ModApi.Craft.Parts.PartData)">
            <summary>
            Gets the part collisions in which the specified part is involved.
            </summary>
            <param name="part">The part for which to get collisions.</param>
            <returns>The part collisions in which the specified part is involved.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemoveAllBodies">
            <summary>
            Removes all bodies from the assembly.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemoveBody(ModApi.Craft.BodyData)">
            <summary>
            Removes the body and all parts associated with that body.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemovePart(ModApi.Craft.Parts.PartData)">
            <summary>
            Removes the part.
            </summary>
            <param name="part">The part to remove.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemovePartCollision(ModApi.Craft.Parts.PartCollision)">
            <summary>
            Removes the specified part collision.
            </summary>
            <param name="partCollision">The part collision.</param>
            <returns><c>true</c> if the collision was removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemovePartCollisions(ModApi.Craft.Parts.PartData)">
            <summary>
            Removes the part collisions involving the specified part.
            </summary>
            <param name="part">The part for which to remove collisions.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemovePartCollisions(System.Boolean)">
            <summary>
            Removes all the part collisions.
            </summary>
            <param name="autoGeneratedOnly">If set to <c>true</c>, only automatically generated collisions will be removed.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.RemovePartConnection(ModApi.Craft.Parts.PartConnection)">
            <summary>
            Removes the part connection.
            </summary>
            <param name="partConnection">The part connection.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.AddPartToLookup(ModApi.Craft.Parts.PartData)">
            <summary>
            Adds the part to the lookup table.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetUniqueBodyId">
            <summary>
            Gets the next body ID that does not conflict with any ID's currently used by the assembly.
            </summary>
            <returns>The unique part id.</returns>
        </member>
        <member name="M:ModApi.Craft.Assembly.GetUniquePartId">
            <summary>
            Gets the next part ID that does not conflict with any ID's currently used by the assembly.
            </summary>
            <returns>The unique part id.</returns>
        </member>
        <member name="T:ModApi.Craft.AssemblyXmlVersionUpdater">
            <summary>
            A class used for upgrading assembly XML from previous XML versions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.AssemblyXmlVersionUpdater._upgradeActions">
            <summary>
            The upgrade actions, one for each XML version (plus the dummy action at index zero).
            </summary>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.Upgrade(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Upgrades the assembly XML to the latest version.
            </summary>
            <param name="xml">The assembly XML to upgrade.</param>
            <param name="version">The version of the XML being upgraded.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion10(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 10.
            Input controller inputs have changed for advanced modifier referencing scenarios.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion11(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 11.
            Adding CrewCompartment to any part which has a command pod modifier.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion2(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 2.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion3(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 3.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion4(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 4.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion5(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 5.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion6(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 6.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion7(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 7.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion8(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 8. The fuel type IDs have changed and need to be updated.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="M:ModApi.Craft.AssemblyXmlVersionUpdater.UpgradeToVersion9(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 9. The FuelSource modifier has been removed, but its fuel
            type must be copied over to the engine modifiers before it is removed.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="T:ModApi.Craft.BodyData">
            <summary>
            Contains a collection of parts that make up a single body.
            </summary>
        </member>
        <member name="M:ModApi.Craft.BodyData.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.BodyData" /> class.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
            <param name="mass">The mass.</param>
        </member>
        <member name="M:ModApi.Craft.BodyData.#ctor(System.Xml.Linq.XElement,ModApi.Craft.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.BodyData"/> class.
            </summary>
            <param name="xml">The body element XML.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="P:ModApi.Craft.BodyData.BodyScript">
            <summary>
            Gets or sets the body script.
            </summary>
            <value>
            The body script.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.CenterOfMass">
            <summary>
            Gets or sets the center of mass, in local coordinates relative to the center of the body.
            </summary>
            <value>
            The center of mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
              <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.Mass">
            <summary>
            Gets or sets the mass. Once the body script is created this property will become out of
            sync, unless Synchronize is called.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.Position">
            <summary>
            Gets the position of the body relative to the craft. Once the body script is created this property will become out of
            sync, unless Synchronize is called.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyData.Rotation">
            <summary>
            Gets the rotation of the body relative to the craft. Once the body script is created this property will become out of
            sync, unless Synchronize is called.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="M:ModApi.Craft.BodyData.GenerateXml(UnityEngine.Transform)">
            <summary>
            Generates the XElement to fully describe this object for serialization purposes.
            </summary>
            <param name="craftTransform">The craft transform.</param>
            <returns>
            The XElement to fully describe this object for serialization purposes.
            </returns>
        </member>
        <member name="M:ModApi.Craft.BodyData.OnBodyDestroyed">
            <summary>
            Called when the body is destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.BodyData.Synchronize(UnityEngine.Transform)">
            <summary>
            Synchronizes the position, rotation with the body's script, relative to the craft transform.
            </summary>
            <param name="craftTransform">The craft transform.</param>
        </member>
        <member name="T:ModApi.Craft.BodyJointData">
            <summary>
            Contains information about how a body connects to another body.
            </summary>
        </member>
        <member name="M:ModApi.Craft.BodyJointData.#ctor(ModApi.Craft.Parts.PartConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.BodyJointData" /> class.
            </summary>
            <param name="partConnection">The part connection.</param>
        </member>
        <member name="M:ModApi.Craft.BodyJointData.#ctor(System.Xml.Linq.XElement,ModApi.Craft.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.BodyJointData" /> class.
            </summary>
            <param name="xml">The body element XML.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:ModApi.Craft.BodyJointData.BodyJointType">
            <summary>
            The body joint types.
            </summary>
        </member>
        <member name="F:ModApi.Craft.BodyJointData.BodyJointType.Normal">
            <summary>
            The normal joint type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.BodyJointData.BodyJointType.Hinge">
            <summary>
            The hinge joint type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.BodyJointData.BodyJointType.Docking">
            <summary>
            The docking joint type.
            </summary>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.Axis">
            <summary>
            Gets or sets the axis.
            </summary>
            <value>
            The axis.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.Body">
            <summary>
            Gets or sets the body a.
            </summary>
            <value>
            The body a.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.BreakForce">
            <summary>
            Gets or sets the break force.
            </summary>
            <value>
            The break force.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.BreakTorque">
            <summary>
            Gets or sets the break torque.
            </summary>
            <value>
            The break torque.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.ConnectedBody">
            <summary>
            Gets or sets the connected body.
            </summary>
            <value>
            The body b.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.ConnectedBodyNeutralPosition">
            <summary>
            Gets or sets the connected body's neutral joint position in coordinates local to <see cref="P:ModApi.Craft.BodyJointData.Body"/>, or <c>null</c> if the current position is its neutral position.
            This value defines the position where the joint tries to bring the connected body back to...ie, the neutral position.  It prevent joints from being "welded" into
            place when they're saved while they're bent, and could also be used to pre-tension joints for use in things like sling-shots.
            </summary>
            <value>
            The connected body's neutral joint position, local to <see cref="P:ModApi.Craft.BodyJointData.Body"/>.
            </value>
            <remarks>If the value from xml is <c>null</c>, this property will be updated with the current position upon initial joint creation.</remarks>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.ConnectedBodyNeutralRotation">
            <summary>
            Gets or sets the...see <see cref="P:ModApi.Craft.BodyJointData.ConnectedBodyNeutralPosition"/> for more info.
            </summary>
            <value>
            see <see cref="P:ModApi.Craft.BodyJointData.ConnectedBodyNeutralPosition"/>
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.ConnectedPosition">
            <summary>
            Gets or sets the connected position. This is in the connected body's local space.
            </summary>
            <value>
            The connected position.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.JointType">
            <summary>
            Gets or sets the type of the joint.
            </summary>
            <value>
            The type of the joint.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.PartConnection">
            <summary>
            Gets the part connection.
            </summary>
            <value>
            The part connection.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.Position">
            <summary>
            Gets or sets the position. This is in local space relative to the body owning the joint.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:ModApi.Craft.BodyJointData.SecondaryAxis">
            <summary>
            Gets or sets the secondary axis.
            </summary>
            <value>
            The secondary axis.
            </value>
        </member>
        <member name="M:ModApi.Craft.BodyJointData.GenerateXml">
            <summary>
            Generates the XElement to fully describe this object for serialization purposes.
            </summary>
            <returns>
            The XElement to fully describe this object for serialization purposes.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Parts.BodyPhysicsJoint">
            <summary>
            Physics joint used by Body Joints.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.BodyPhysicsJoint.#ctor(UnityEngine.ConfigurableJoint,ModApi.Craft.Parts.AttachPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.BodyPhysicsJoint"/> class.
            </summary>
            <param name="joint">The joint.</param>
            <param name="attachPoint">The attach point.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.BodyPhysicsJoint.AttachPoint">
            <summary>
            Gets the attach point.
            </summary>
            <value>
            The attach point.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.BodyPhysicsJoint.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
              <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.BodyPhysicsJoint.Joint">
            <summary>
            Gets the joint. Note: this may be null if the joint is destroyed.
            </summary>
            <value>
            The joint.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.AttachPoint">
            <summary>
            An attach point where a part can connect to another part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._allowInvertedConnection">
            <summary>
            A value indicating whether this attach point can connect to another attach point with its
            normal pointing in the wrong direction. This requieres that the attach point also supports AllowRotation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._allowRotation">
            <summary>
            A value indicating whether the attach point allows rotation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._canReceive">
            <summary>
            A value indicating whether this attach point can receive attachments.  This will usually be true.
            An example of an attach point which would be false is the auto-rotating fuselage attach point.
            That attach point is used to attach the fuselage to other pieces, but we don't want pieces attaching
            themselves to that point...other pieces attach to the fuselage via its surface attach point.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._canSeek">
            <summary>
            A value indicating whether this attach point can cast rays looking for connections when its part is being moved in the designer.
            This is usually true, but for surface attach points and in some special cases this can be false.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._connectionType">
            <summary>
            The attach point's connection type, which determines what attach points this attach point can connect to.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._disableJointCollisions">
            <summary>
            A value indicating whether to disable collisions for a physics joint created at this attach point.
            This only applies if the attach point is not a Fused type. If this flag is different between the two
            attach points making up a joint, then the physics joint will be created with collisions disabled.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._displayName">
            <summary>
            The display name
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._enabled">
            <summary>
            The enabled state.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._fuelLine">
            <summary>
            A value indicating whether this attach point can carry fuel.
            Used when automatically identifying fuel tanks connected to a fuel source modifier.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._ignoreSurfaces">
            <summary>
            A value indicating whether to ignore connections with surface attach points.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._jointType">
            <summary>
            The type of the joint created by this attach point.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._localJointAxis">
            <summary>
            The local joint axis.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._radius">
            <summary>
            The radius, which is used by adaptive fuselage meshes to automatically adapt to the radius of the attach point.
            If the radius is zero, then the fuselage meshes will not attempt
            to auto-adapt to this attach point.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._rayCastFromCursor">
            <summary>
            A value indicating whether to cast the ray from the cursor instead of from the attach point.
            Some parts that auto-rotate are easier to use if the ray cast is from the cursor, such as the fuel tank.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._requiresPhysicsJoint">
            <summary>
            A value indicating whether this attach point requires the physics joint to be on the rigid body containing this part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._surfaceCollider">
            <summary>
            The surface collider, if one is used for this attach point.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._surfaceColliderName">
            <summary>
            The surface collider name, if one is used for this attach point.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPoint._tag">
            <summary>
            The attach point's tag.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPoint.#ctor(System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.AttachPoint"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="element">The attach point element.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPoint.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.AttachPoint"/> class from being created.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.AttachPoint.AttachPointDelegate">
            <summary>
            The delegate for attach point events.
            </summary>
            <param name="attachPoint">The attach point.</param>
        </member>
        <member name="E:ModApi.Craft.Parts.AttachPoint.EnabledChanged">
            <summary>
            Occurs when the enabled state has changed.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.AllowInvertedConnection">
            <summary>
            Gets a value indicating whether this attach point can connect to another attach point with its
            normal pointing in the wrong direction. This requieres that the attach point also supports AllowRotation.
            </summary>
            <value>
              <c>true</c> if inverted connection is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.AllowRotation">
            <summary>
            Gets a value indicating whether the attach point allows rotation.
            </summary>
            <value>
              <c>true</c> if the attach point allows rotation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.AllowSymmetry">
            <summary>
            Gets a value indicating whether this part allows parts to connect to it using
            symmetry mode.
            </summary>
            <value>
              <c>true</c> if [allow symmetry]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.AttachPointScript">
            <summary>
            Gets or sets the attach point script.
            </summary>
            <value>
            The attach point script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.CanReceive">
            <summary>
            Gets a value indicating whether this attach point can receive attachments.  This will usually be true.  An example of an attach point which would be false is the auto-rotating fuselage attach point.
            That attach point is used to attach the fuselage to other pieces, but we don't want pieces attaching themselves to that point...other pieces attach to the fuselage via its surface attach point.
            </summary>
            <value>
              <c>true</c> this attach point can receive attachments; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.CanSeek">
            <summary>
            Gets a value indicating whether this attach point can cast rays looking for connections when its part is being moved in the designer. This is usually true,
            but for surface attach points and in some special cases this can be false.
            </summary>
            <value>
              <c>true</c> if this instance can seek connections; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.ConnectionType">
            <summary>
            Gets the attach point's connection type, which determines what attach points this
            attach point can connect to.
            </summary>
            <value>
            The attach point's connection type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.DisableJointCollisions">
            <summary>
            Gets a value indicating whether to disable collisions for a physics joint created at this attach
            point. This only applies if the attach point is not a Fused type. If this flag is different between
            the two attach points making up a joint, then the physics joint will be created with collisions disabled.
            </summary>
            <value>
              <c>true</c> if collisions should be disabled for this attach point's physics joint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.DisplayName">
            <summary>
            Gets a display name that can be used in the user interface to identify this attach point.
            </summary>
            <value>
            The display name of the attach point.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.Parts.AttachPoint"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.FuelLine">
            <summary>
            Gets a value indicating whether this attach point can carry fuel. Used when automatically
            identifying fuel tanks connected to a fuel source modifier.
            </summary>
            <value>
              <c>true</c> if [fuel line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Id">
            <summary>
            Gets the identifier of this attach point. Attach point IDs are unique within the part,
            but not unique against attach points in other parts.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.IgnoreSurfaces">
            <summary>
            Gets a value indicating whether to ignore connections with surface attach points.
            </summary>
            <value>
              <c>true</c> if connections with surface attach points should be ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.IsAvailable">
            <summary>
            Gets a value indicating whether the attach point is available.
            </summary>
            <value>
              <c>true</c> if the attach point is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.IsAvailableForManualConnection">
            <summary>
            Gets a value indicating whether the attach point is available for manually connection.
            </summary>
            <value>
              <c>true</c> if the attach point is available for a manual connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.IsCustomized">
            <summary>
            Gets or sets a value indicating whether the attach point has been customized at the part level.
            </summary>
            <value>
              <c>true</c> if this attach point is customized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.IsSurfaceAttachPoint">
            <summary>
            Gets a value indicating whether this attach point is a surface attach point.
            </summary>
            <value>
            <c>true</c> if this attach point is a surface attach point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.JointPosition">
            <summary>
            Gets the joint position.
            </summary>
            <value>
            The joint position.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.JointType">
            <summary>
            Gets the type of the joint.
            </summary>
            <value>
            The type of the joint.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.LocalJointAxis">
            <summary>
            Gets the local joint axis.
            </summary>
            <value>
            The local joint axis.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.MirrorId">
            <summary>
            Gets or sets the ID to use for this attach point when the part is in a mirrored state. Some
            parts, such as a cube, may need to swap attach points when deciding how to connect during part
            synchronization in symmetry mode.
            </summary>
            <value>
            The mirror identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Name">
            <summary>
            Gets the name of the attach point.
            </summary>
            <value>
            The attach point's name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.NumPartConnections">
            <summary>
            Gets the number part connections.
            </summary>
            <value>
            The number part connections.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.PartConnections">
            <summary>
            Gets the part connections.
            </summary>
            <value>
            The part connections.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Radius">
            <summary>
            Gets or sets the radius, which is used by adaptive fuselage meshes to automatically adapt to the
            radius of the attach point. If the radius is zero, then the fuselage meshes will not attempt
            to auto-adapt to this attach point.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.RayCastFromCursor">
            <summary>
            Gets a value indicating whether to cast the ray from the cursor instead of from the attach point. Some parts that
            auto-rotate are easier to use if the ray cast is from the cursor, such as the fuel tank.
            </summary>
            <value>
              <c>true</c> if the should be cast from the cursor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.RequiresPhysicsJoint">
            <summary>
            Gets a value indicating whether this attach point requires the physics joint to be on the rigid body containing this part.
            </summary>
            <value>
            <c>true</c> if this attach point requires the physics joint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Rotation">
            <summary>
            Gets or sets the rotation in euler angles.
            </summary>
            <value>
            The rotation of the attach point.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Surface">
            <summary>
            Gets or sets the surface collider, or empty string if this is not a surface attach point.
            </summary>
            <value>
            The surface collider.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPoint.Tag">
            <summary>
            Gets the attach point's tag.
            </summary>
            <value>
            The attach point's tag.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPoint.GenerateXml(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Generates the XML that describes the attach point.
            </summary>
            <param name="attachPointGameObject">The attach point game object representing the attach point for which XML is being generated.</param>
            <param name="prefab">The part prefab resource associated with the attach points.</param>
            <returns>The XML that describes the attach point.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPoint.RemoveConnection(ModApi.Craft.Parts.PartConnection)">
            <summary>
            Removes the connection.
            </summary>
            <param name="partConnection">The part connection.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.AttachPointScript">
            <summary>
            The script used for defining attach points in the Unity3D editor.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointScript._color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointScript._flipVisuals">
            <summary>
            The flip visuals flag.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointScript._material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointScript._meshRenderer">
            <summary>
            The mesh renderer
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointScript._visible">
            <summary>
            The visible flag.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.AttachPointScript"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.AttachPoint">
            <summary>
            Gets the attach point.
            </summary>
            <value>
            The attach point.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.ConnectToLayer">
            <summary>
            Gets the layer that this attach point can connect to.
            </summary>
            <value>
            The connect to layer.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.FlipVisuals">
            <summary>
            Gets or sets a value indicating whether to flip the visuals for this attach point.
            </summary>
            <value>
              <c>true</c> if visuals should be flipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.PartScript">
            <summary>
            Gets the part script.
            </summary>
            <value>
            The part script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.Parts.AttachPointScript"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.WorldJointAxis">
            <summary>
            Gets the joint axis in world coordinates.
            </summary>
            <value>
            The joint axis in world coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.WorldNormal">
            <summary>
            Gets the attach point's normal in world coordinates.
            </summary>
            <value>
            The world normal.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.AttachPointScript.WorldSecondaryJointAxis">
            <summary>
            Gets the secondary joint axis in world coordinates.
            </summary>
            <value>
            The secondary joint axis in world coordinates.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.Initialize(ModApi.Craft.Parts.AttachPoint,ModApi.Craft.Parts.IPartScript,UnityEngine.Color)">
            <summary>
            Initializes the specified attach point.
            </summary>
            <param name="attachPoint">The attach point.</param>
            <param name="partScript">The part script.</param>
            <param name="color">The color to use for this attach point.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.RestoreColor">
            <summary>
            Restores the color to its initial value.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.SetColor(UnityEngine.Color)">
            <summary>
            Sets the color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.UpdateLayer">
            <summary>
            Updates the layer based on the attach point's normal.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.Start">
            <summary>
            Unity Start method.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.OnAttachPointEnabledChanged(ModApi.Craft.Parts.AttachPoint)">
            <summary>
            Called when the attach point enabled state has changed.
            </summary>
            <param name="attachPoint">The attach point.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.AttachPointScript.UpdateEnabledState">
            <summary>
            Updates the state of the attach point.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute">
            <summary>
            An attribute applied to part modifier classes used to specify designer related information.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute" /> class.
            </summary>
            <param name="headerText">The designer header text for the part modifier.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute" /> class.
            </summary>
            <param name="headerText">The designer header text for the part modifier.</param>
            <param name="designerPartPropertiesType">The type that is used to display the designer part properties for the part modifier to which the attribute is affixed.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute.DesignerPartPropertiesType">
            <summary>
            Gets or sets the type that is used to display the designer part properties for the part modifier to which the attribute is affixed.
            </summary>
            <value>
            The type that is used to display the designer part properties for the part modifier to which the attribute is affixed.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute.HeaderCollapsed">
            <summary>
            Gets or sets a value indicating whether to start with the header collapsed.
            </summary>
            <value>
              <c>true</c> if header collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute.HeaderText">
            <summary>
            Gets the designer header text for the part modifier.
            </summary>
            <value>
            The designer header text for the part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute.PanelOrder">
            <summary>
            Gets or sets the order in which to display this panel in the part properties panel.
            The higher the number, the lower it will appear in the UI panel.
            The default value is 1000.
            </summary>
            <value>
            The order in which to display this panel in the part properties panel.
            The higher the number, the lower it will appear in the UI panel.
            The default value is 1000.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute">
            <summary>
            A base class for attributes used to configure modifiable properties on part modifiers in the designer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.Header">
            <summary>
            Gets or sets the optional header text to use above this property.
            </summary>
            <value>
            The header text for this property.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.HeaderCollapsed">
            <summary>
            Gets or sets a value indicating whether the header should start in a collapsed state.
            </summary>
            <value>
              <c>true</c> if the header should start collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.IsHidden">
            <summary>
            Gets or sets a value indicating whether this property is hidden by default in the designer.
            </summary>
            <value>
              <c>true</c> if this property is hidden by default in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.Label">
            <summary>
            Gets or sets the label text for the property.
            </summary>
            <value>
            The label text for the property.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.Order">
            <summary>
            Gets or sets the order of the property.
            Properties with lower orders will appear above properties with higher orders.
            The default order for properties is 100.
            </summary>
            <value>
            The order of the property.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyAttribute.Tooltip">
            <summary>
            Gets or sets the tooltip for the property.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertyCenterButtonAttribute">
            <summary>
            An attribute used to flag a part modifier's field as being displayed as a centered button in the designer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertyCenterButtonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertyCenterButtonAttribute"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute">
            <summary>
            An attribute used to flag a part modifier's color field as being modifiable in the designer via slider controls.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute"/> class.
            </summary>
            <param name="showAlpha">A value indicating whether the slider for the alpha channel will be shown.</param>
            <param name="alphaLabel">The label for the alpha channel slider.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute.AlphaLabel">
            <summary>
            Gets or sets the label for the alpha channel slider.
            </summary>
            <value>
            The label for the alpha channel slider.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertyColorSlidersAttribute.ShowAlpha">
            <summary>
            Gets or sets a value indicating whether the slider for the alpha channel will be shown.
            </summary>
            <value>
              <c>true</c> if the slider for the alpha channel will be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertyLabelAttribute">
            <summary>
            An attribute used to flag a part modifier's field as being displayed as a label in the designer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertyLabelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertyLabelAttribute" /> class.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute">
            <summary>
            An attribute used to flag a part modifier's field as being modifiable in the designer via a slider control.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute"/> class.
            This will provider values between 0 and 1 using increments of 0.1 for each step.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute"/> class.
            </summary>
            <param name="min">The minimum value for the slider.</param>
            <param name="max">The maximum value for the slider.</param>
            <param name="numberOfSteps">The number of steps for the slider.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value for the slider.
            </summary>
            <value>
            The maximum value for the slider.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute.MinValue">
            <summary>
            Gets or sets the minimum value for the slider.
            </summary>
            <value>
            The minimum value for the slider.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySliderAttribute.NumberOfSteps">
            <summary>
            Gets or sets the number of steps for the slider.
            </summary>
            <value>
            The number of steps for the slider.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerTextFormat">
            <summary>
            An enumeration defining text format styles for labels of a designer part property spinner.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerTextFormat.Default">
            <summary>
            The default text format style (no extra formatting).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerTextFormat.Auto">
            <summary>
            The automatic format style which inserts spaces between words indicated by capitalizing their first characters.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerTextFormat.InputAuto">
            <summary>
            The automatic format style, specifically for input controllers, which inserts spaces between words indicated by capitalizing their first characters.
            The automatic formatting only applies to input values targeting specific classes used as input providers.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute">
            <summary>
            An attribute used to flag a part modifier's field as being modifiable in the designer via a spinner control.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            </summary>
            <param name="min">The minimum value of the spinner control.</param>
            <param name="max">The maximum value of the spinner control.</param>
            <param name="stepSize">The size of each step (i.e. the amount added or subtracted each time the user activates a spinner button).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            </summary>
            <param name="min">The minimum value of the spinner control.</param>
            <param name="max">The maximum value of the spinner control.</param>
            <param name="stepSize">The size of each step (i.e. the amount added or subtracted each time the user activates a spinner button).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            </summary>
            <param name="min">The minimum value of the spinner control.</param>
            <param name="max">The maximum value of the spinner control.</param>
            <param name="stepSize">The size of each step (i.e. the amount added or subtracted each time the user activates a spinner button).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            If associated with a string field, values must be specified in the constructor.
            If associated with an enumeration, all the enumaration values will automatically be included as options.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            If associated with a string field, values must be specified in the constructor.
            If associated with an enumeration, the string value of each option must exactly match an enumeration option's name.
            </summary>
            <param name="values">The list of values to be cycled through each time the user activates the button.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            If associated with a string field, values must be specified in the constructor.
            If associated with an enumeration, the string value of each option must exactly match an enumeration option's name.
            </summary>
            <param name="values">The list of values to be cycled through each time the user activates the button.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.#ctor(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute"/> class.
            </summary>
            <param name="min">The minimum value of the spinner control.</param>
            <param name="max">The maximum value of the spinner control.</param>
            <param name="stepSize">The size of each step (i.e. the amount added or subtracted each time the user activates a spinner button).</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.AllowManualInput">
            <summary>
            Gets or sets a value indicating whether manual inputs are allowed.
            </summary>
            <value>
              <c>true</c> if manual inputs are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.IsTextSpinner">
            <summary>
            Gets a value indicating whether this instance is text spinner.
            </summary>
            <value>
              <c>true</c> if this instance is text spinner; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.StepSize">
            <summary>
            Gets or sets the size of each step (i.e. the amount added or subtracted each time the user activates a spinner button).
            </summary>
            <value>
            The size of each step (i.e. the amount added or subtracted each time the user activates a spinner button).
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.TextFormat">
            <summary>
            Gets or sets the text format style to use for the spinner label.
            </summary>
            <value>
            The text format style to use for the spinner label.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.ValidateManualInput">
            <summary>
            Gets or sets a value indicating whether manual inputs are validated (min/max values enforced or text values must be defined options).
            </summary>
            <value>
              <c>true</c> if manual inputs are validated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.DesignerPropertySpinnerAttribute.Values">
            <summary>
            Gets or sets the list of possible values to be cycled through.
            </summary>
            <value>
            The list of possible values to be cycled through.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertyTextInputAttribute">
            <summary>
            An attribute used to flag a part modifier's field as being displayed as a text input in the designer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.DesignerPropertyTextInputAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.DesignerPropertyTextInputAttribute" /> class.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.DesignerPropertyToggleButtonAttribute">
            <summary>
            An attribute used to flag a part modifier's field as being modifiable in the designer via a toggle button control.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.PartModifierTypeIdAttribute">
            <summary>
            An attribute used to map a part modifier type ID to a specific part modifier class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.PartModifierTypeIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.PartModifierTypeIdAttribute"/> class.
            </summary>
            <param name="typeId">The type identifier for the part modifier.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.PartModifierTypeIdAttribute.Id">
            <summary>
            Gets the type identifier for the part modifier.
            </summary>
            <value>
            The type identifier for the part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.PartModifierTypeIdAttribute.IsLegacyId">
            <summary>
            Gets or sets a value indicating whether this ID is a legacy type identifier.
            </summary>
            <value>
            <c>true</c> if this ID is a legacy type identifier; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.PartModifierPropertyStatePreservationMode">
            <summary>
            An enumeration defining the different modes of preserving the state of a part modifier property.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Attributes.PartModifierPropertyStatePreservationMode.Default">
            <summary>
            The default mode will preserve the state of a property if configured to do so.
            The XML state will be optimized away if it matches the default value for the property.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Attributes.PartModifierPropertyStatePreservationMode.SaveAlwaysIfNonEmpty">
            <summary>
            This mode will preserve the state of a property if configured to do so.
            It will not optimize away the XML state if the value is a non-null, non-empty value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Attributes.PartModifierPropertyStatePreservationMode.SaveAlways">
            <summary>
            This mode will preserve the state of a property if configured to do so.
            It will never optimize away the XML state, regardless of value.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Attributes.PartModifierPropertyAttribute">
            <summary>
            An attribute used to configure part modifier properties.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Attributes.PartModifierPropertyAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Attributes.PartModifierPropertyAttribute"/> class.
            </summary>
            <param name="preserveState">
            A value indicating whether the state of the property should be preserved
            when saving a craft and then later restored when the craft is loaded.
            </param>
            <param name="neverSerialize">
            A value indicating whether the property should be automatically serialized when saving craft or part data.
            This is typically used for designer only properties or properties that are manually serialized.
            </param>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.PartModifierPropertyAttribute.NeverSerialize">
            <summary>
            Gets or sets a value indicating whether the property should be automatically serialized when saving craft or part data.
            This is typically used for designer only properties or properties that are manually serialized.
            </summary>
            <value>
            <c>true</c> if the property should never be automatically serialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.PartModifierPropertyAttribute.PreserveState">
            <summary>
            Gets or sets a value indicating whether the state of the property should be preserved
            when saving a craft and then later restored when the craft is loaded.
            </summary>
            <value>
            <c>true</c> if the state of the property should be preserved when saving a craft
            and then later restored when the craft is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Attributes.PartModifierPropertyAttribute.PreserveStateMode">
            <summary>
            Gets or sets the state preservation mode.
            </summary>
            <value>
            The state preservation mode.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPart">
            <summary>
            Contains information about a part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._activationGroup">
            <summary>
            The default activation group for the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._category">
            <summary>
            The category to which the part belongs.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._description">
            <summary>
            The description of the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._displayOrder">
            <summary>
            The order to display this part in the part list.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._iconPath">
            <summary>
            This is the path to the designer part icon image.
            For auto-generated icons, this is unnecessary, however it may still be specified for manual control of the file name.
            For 'File' type icons, this is the path (relative to the part icon folder) where the part icon image is located.
            For both cases if left blank, the name of the designer part will be used.
            For 'Resource' type icons, this is a required field and should point to the asset path in the mod where the icon image can be loaded.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._iconSprite">
            <summary>
            The designer part icon sprite.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._iconTexture">
            <summary>
            The designer part icon texture.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._iconType">
            <summary>
            The method used for obtaining a part icon for the designer part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._name">
            <summary>
            The display name of the part in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._partTypeOverrides">
            <summary>
            The part type overrides, which are used to set attributes on the part's XML that override the part type
            when the part definition is being saved.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._position">
            <summary>
            The default position of the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._rotation">
            <summary>
            The default rotation of the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._showInDesigner">
            <summary>
            A value indicating whether or not the part will be shown in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._snapshotDistanceScaler">
            <summary>
            The adjustment for distance to the camera when taking a picture for this part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._snapshotPartOffset">
            <summary>
            The offset of the part from the default position to be used when taking a part icon snapshot.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._snapshotPartRotation">
            <summary>
            The rotation of the part from the default position to be used when taking a part icon snapshot.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart._snapshotRotation">
            <summary>
            The rotation of the camera from the default position to be used when taking a part icon snapshot.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.DesignerPart"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.DesignerPart"/> class.
            </summary>
            <param name="xml">The designer part XML.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.AssemblyElement">
            <summary>
            Gets or sets the assembly element.
            </summary>
            <value>
            The part element.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Category">
            <summary>
            Gets or sets the category to which the part belongs.
            </summary>
            <value>
            The category to which the part belongs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Description">
            <summary>
            Gets or sets the description of the part.
            </summary>
            <value>
            The description of the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.DisplayOrder">
            <summary>
            Gets or sets the display order in the part list.
            </summary>
            <value>
            The display order in the part list.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Engine">
            <summary>
            Gets or sets the engine details for the part if this is an engine part.
            </summary>
            <value>
            The engine details for the part if this is an engine part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.IconPath">
            <summary>
            Gets or sets the icon path.
            </summary>
            <value>
            This is the path to the designer part icon image.
            For auto-generated icons, this is unnecessary, however it may still be specified for manual control of the file name.
            For 'File' type icons, this is the path (relative to the part icon folder) where the part icon image is located.
            For both cases if left blank, the name of the designer part will be used.
            For 'Resource' type icons, this is a required field and should point to the asset path in the mod where the icon image can be loaded.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.IconType">
            <summary>
            Gets or sets the method used for obtaining a part icon for the designer part.
            </summary>
            <value>
            The method used for obtaining a part icon for the designer part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.IsSubassembly">
            <summary>
            Gets a value indicating whether this part is a subassembly.
            </summary>
            <value>
              <c>true</c> if this part is a subassembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Mass">
            <summary>
            Gets or sets the mass of the part in kilograms.
            Note: This mass has been scaled by Constants.MassScale.
            </summary>
            <value>
            The mass of the part in kilograms.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Mod">
            <summary>
            Gets or sets the mod to which the part belongs.
            </summary>
            <value>
            The mod to which the part belongs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Name">
            <summary>
            Gets or sets the name of the part.
            </summary>
            <value>
            The name of the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.PartTypeOverrides">
            <summary>
            Gets the part type overrides, which are used to set attributes on the part's XML that override the part type
            when the part definition is being saved.
            </summary>
            <value>
            The part type overrides.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.PartTypes">
            <summary>
            Gets or sets the collection of unique part types contained within this designer part.
            </summary>
            <value>
            The collection of unique part types contained within this designer part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.Price">
            <summary>
            Gets or sets the price of the part.
            </summary>
            <value>
            The price of the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.ShowInDesigner">
            <summary>
            Gets or sets a value indicating whether the part should be shown in the designer.
            </summary>
            <value>
              <c>true</c> if part should be shown in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.SnapshotDistanceScaler">
            <summary>
            Gets or sets the adjustment for distance to the camera when taking a picture for this part.
            </summary>
            <value>
            The adjustment for distance to the camera when taking a picture for this part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.SnapshotPartOffset">
            <summary>
            Gets or sets the snapshot part offset.
            </summary>
            <value>
            The snapshot part offset.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.SnapshotPartRotation">
            <summary>
            Gets or sets the rotation of the part from the default position to be used when taking a part icon snapshot.
            </summary>
            <value>
            The rotation of the part from the default position to be used when taking a part icon snapshot.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.SnapshotRotation">
            <summary>
            Gets or sets the rotation of the camera from the default position to be used when taking a part icon snapshot.
            </summary>
            <value>
            The rotation of the camera from the default position to be used when taking a part icon snapshot.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.SubassemblyFilePath">
            <summary>
            Gets or sets the path of the file from which this subassembly was loaded.
            This is null for non-subassembly parts.
            </summary>
            <value>
            The path of the file from which this subassembly was loaded.
            This is null for non-subassembly parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.VariableProperties">
            <summary>
            Gets or sets a value indicating whether the part's properties can vary with size/part properties/etc..
            </summary>
            <value>
              <c>true</c> if the part has variable properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.CreateEditorScript(UnityEngine.GameObject,System.String)">
            <summary>
            Creates a designer part editor script attached to the specified game object.
            </summary>
            <param name="obj">The object to which to attach the script.</param>
            <param name="partName">The part name.</param>
            <returns>The attached designer part editor script.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.GenerateDesignerPartXml(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Generates the designer part XML.
            </summary>
            <param name="partTypeId">The ID of the part type associated with this designer part.</param>
            <param name="modifiersXml">The XML for the part modifiers for this designer part.</param>
            <returns>
            The XML representing the designer part.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The generated XML.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.GetIcon">
            <summary>
            Gets the icon for the designer part.
            </summary>
            <returns>The icon for the designer part or <c>null</c> if it could not be loaded.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.UnloadIcon">
            <summary>
            Unloads the icon if necessary.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPart.LoadIcon">
            <summary>
            Loads the designer part icon.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPart.XmlAttribute">
            <summary>
            Contains information about an XML attribute.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart.XmlAttribute.Name">
            <summary>
            The attribute name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPart.XmlAttribute.Value">
            <summary>
            The attribute value.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPart.EngineDetails">
            <summary>
            The engine details.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.EngineDetails.FuelType">
            <summary>
            Gets or sets the type of the fuel.
            </summary>
            <value>
            The type of the fuel.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.EngineDetails.IspSeaLevel">
            <summary>
            Gets or sets the isp sea level.
            </summary>
            <value>
            The isp sea level.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.EngineDetails.IspVacuum">
            <summary>
            Gets or sets the isp vacuum.
            </summary>
            <value>
            The isp vacuum.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.EngineDetails.PowerUsage">
            <summary>
            Gets or sets the power usage.
            </summary>
            <value>
            The power usage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPart.EngineDetails.Thrust">
            <summary>
            Gets or sets the thrust.
            </summary>
            <value>
            The thrust.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPartCategories">
            <summary>
            The collection of designer part categories.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories.DefaultDisplayOrder">
            <summary>
            The default display order for part categories that do not have an explicit display order defined.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories._instance">
            <summary>
            The 'singleton' instance.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories._categories">
            <summary>
            The collection of designer part categories.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategories.Categories">
            <summary>
            Gets the collection of designer part categories.
            </summary>
            <value>
            The collection of designer part categories.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategories.Instance">
            <summary>
            Gets the 'singleton' instance of the part categories object.
            </summary>
            <value>
            The 'singleton' instance of the part categories object.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPartCategories.GetCategory(System.String,System.Boolean)">
            <summary>
            Gets the designer part category with the specified ID.
            </summary>
            <param name="id">The identifier of the category.</param>
            <param name="create">If set to <c>true</c> and the part category could not be found, a new categore will be created.</param>
            <returns>The requested category or <c>null</c> if the category could not be found or created.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPartCategories.Register(ModApi.Craft.Parts.DesignerPartCategory)">
            <summary>
            Registers the specified designer part category.
            </summary>
            <param name="category">The category to register.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPartCategories.ReplaceCategories(System.Collections.Generic.IEnumerable{ModApi.Craft.Parts.DesignerPartCategory})">
            <summary>
            Replaces the categories list with the specified list.
            </summary>
            <param name="categories">The new list of categories.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPartCategories.Initialize">
            <summary>
            Initializes the designer part categories.
            </summary>
            <returns>The designer part categories instance.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPartCategories.StockCategoryIds">
            <summary>
            The collection of stock designer part category ids.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories.StockCategoryIds.Descent">
            <summary>
            The descent category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories.StockCategoryIds.Gizmos">
            <summary>
            The gizmos category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories.StockCategoryIds.Propulsion">
            <summary>
            The propulsion category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories.StockCategoryIds.Structural">
            <summary>
            The structural category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategories.StockCategoryIds.Subassemblies">
            <summary>
            The subassemblies category.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPartCategory">
            <summary>
            An object containing information about a category for parts in the designer.
            </summary>
            <seealso cref="T:UnityEngine.ScriptableObject" />
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategory._id">
            <summary>
            The identifier of the category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategory._displayName">
            <summary>
            The display name of the category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategory._displayOrder">
            <summary>
            The display order of the category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategory._icon">
            <summary>
            The icon for the category.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartCategory._tooltip">
            <summary>
            The tooltip for the category.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategory.DisplayName">
            <summary>
            Gets the display name of the category.
            </summary>
            <value>
            The display name of the category.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategory.DisplayOrder">
            <summary>
            Gets the display order of the category.
            </summary>
            <value>
            The display order of the category.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategory.Icon">
            <summary>
            Gets the icon for the category.
            </summary>
            <value>
            The icon for the category.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategory.IconPath">
            <summary>
            Gets the path of the part category icon in the UI system.
            </summary>
            <value>
            The path of the part category icon in the UI system.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategory.Id">
            <summary>
            Gets the identifier of the category.
            </summary>
            <value>
            The identifier of the category.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.DesignerPartCategory.Tooltip">
            <summary>
            Gets the tooltip for the category.
            </summary>
            <value>
            The tooltip for the category.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.DesignerPartCategory.Create(System.String,System.String,System.Int32,System.String,UnityEngine.Sprite)">
            <summary>
            Creates the specified designer part category.
            </summary>
            <param name="id">The identifier of the category</param>
            <param name="displayName">The display name of the category.</param>
            <param name="displayOrder">The display order of the category.</param>
            <param name="tooltip">The tooltip for the category.</param>
            <param name="icon">The icon for the category.</param>
            <returns>The newly created designer part category.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.DesignerPartIconType">
            <summary>
            An enumeration defining the different approaches to obtaining an icon for a designer part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartIconType.Auto">
            <summary>
            The part icon will be automatically generated by taking an in-game snapshot of the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartIconType.File">
            <summary>
            The part icon should be loaded from a file in the part icon directory.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.DesignerPartIconType.Resource">
            <summary>
            The part icon should be loaded from a resource included in with the game or mod.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.AttachPointEditorScript">
            <summary>
            The part attach point editor script.
            </summary>
            <seealso cref="!:ModApi.Craft.Parts.Editor.PartEditorScriptBase&lt;ModApi.Craft.Parts.AttachPoint&gt;" />
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute">
            <summary>
            An attribute used on fields to show in the Unity inspector that are related to part prefab objects.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute"/> class.
            </summary>
            <param name="order">The display order of the field.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute.Header">
            <summary>
            Gets or sets the header for the field.
            </summary>
            <value>
            The header for the field.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute.HeaderTooltip">
            <summary>
            Gets or sets the header tooltip for the field.
            </summary>
            <value>
            The header tooltip for the field.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute.Label">
            <summary>
            Gets or sets the label for the field.
            </summary>
            <value>
            The label for the field.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute.Order">
            <summary>
            Gets the display order of the field.
            </summary>
            <value>
            The display order of the field.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.Attributes.UnityInspectorPartAttribute.Space">
            <summary>
            Gets or sets the ammount of space to display above the field.
            </summary>
            <value>
            The ammount of space to display above the field.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.DesignerPartEditorScript">
            <summary>
            The designer part editor script.
            </summary>
            <seealso cref="!:ModApi.Craft.Parts.Editor.PartEditorScriptBase&lt;ModApi.Craft.Parts.DesignerPart&gt;" />
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.DesignerPartEditorScript.Validate">
            <summary>
            Validates the data logging any warnings or errors found.
            </summary>
            <returns>
            <c>true</c> if the validation was successful or resulted in warnings. <c>false</c> if there were validation errors.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartDefinition">
            <summary>
            A class representing the definition of a part.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartDefinitionCamera">
            <summary>
            A component representing an the camera used to take the part's picture for the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartDefinitionCamera._cameraFocusTransform">
            <summary>
            The camera focus point for this part definition camera.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.PartDefinitionCamera.Camera">
            <summary>
            Gets the camera.
            </summary>
            <value>
            The camera.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.PartDefinitionCamera.CameraFocusTransform">
            <summary>
            Gets or sets the camera focus point for this part definition camera.
            </summary>
            <value>
            The camera focus point for this part definition camera.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartDefinitionExcludeFromPrefab">
            <summary>
            A component used to identify items in the part definition that should not be saved in the part's prefab.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartDefinitionPrefabReference">
            <summary>
            A component that links to an existing part prefab in the game.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartDefinitionPrefabReference._prefabPath">
            <summary>
            The prefab path.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Editor.PartDefinitionPrefabReference.PrefabPath">
            <summary>
            Gets or sets the prefab path.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartEditorScriptBase">
            <summary>
            A base class for part related editor scripts.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartEditorScriptBase.Validate">
            <summary>
            Validates the data logging any warnings or errors found.
            </summary>
            <returns><c>true</c> if the validation was successful or resulted in warnings. <c>false</c> if there were validation errors.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartEditorScriptBase`1">
            <summary>
            A generic version of the base class for part related editor scripts.
            </summary>
            <typeparam name="T">The type of the data to display in the editor.</typeparam>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartEditorScriptBase`1.Data">
            <summary>
            The data to display in the editor.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartEditorScriptBase`1.Validate">
            <summary>
            Validates the data logging any warnings or errors found.
            </summary>
            <returns>
              <c>true</c> if the validation was successful or resulted in warnings. <c>false</c> if there were validation errors.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartManager">
            <summary>
            A scriptable object used for performing part related actions in the Unity editor.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartModifierEditorScript">
            <summary>
            A base class for part modifier data editor scripts.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartModifierEditorScript.GetPartModifier">
            <summary>
            Gets the part modifier data.
            </summary>
            <returns>
            The part modifier data.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartModifierEditorScript.SetPartModifier(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Sets the part modifier data.
            </summary>
            <param name="partModifier">The part modifier data.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartModifierEditorScript`1">
            <summary>
            A generic base class for part modifier data editor scripts.
            </summary>
            <typeparam name="T">The type of the part modifier.</typeparam>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartModifierEditorScript`1.Data">
            <summary>
            The part modifier data to display in the editor.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartModifierEditorScript`1.GetPartModifier">
            <summary>
            Gets the part modifier data.
            </summary>
            <returns>
            The part modifier data.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartModifierEditorScript`1.SetPartModifier(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Sets the part modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartModifierEditorScript`1.Validate">
            <summary>
            Validates the data logging any warnings or errors found.
            </summary>
            <returns>
            <c>true</c> if the validation was successful or resulted in warnings. <c>false</c> if there were validation errors.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartPaths">
            <summary>
            A collection of constants containing asset/resource paths related to parts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.DesignerCategoriesContentPath">
            <summary>
            The designer part categories content path.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.DesignerPartCategoriesResourceLoadPath">
            <summary>
            The asset resources path (relative to the resources directory) to the designer part categories asset.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.DesignerPartCategoriesResourceProjectPath">
            <summary>
            The asset resources path (relative to the project root) to the designer part categories asset.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.DetailTexturesContentPath">
            <summary>
            The asset content path where the detail textures for parts reside. (used for mod textures)
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.DetailTexturesResourceLoadPath">
            <summary>
            The asset resources path (relative to the resources directory) where the detail textures for parts reside. (used for stock textures)
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.DetailTexturesResourceProjectPath">
            <summary>
            The asset resources path (relative to the project root) where the detail textures for parts reside. (used for stock textures)
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.NormalMapTexturesContentPath">
            <summary>
            The asset content path where the normal map textures for parts reside. (used for mod textures)
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.NormalMapTexturesResourceLoadPath">
            <summary>
            The asset resources path (relative to the resources directory) where the normal map textures for parts reside. (used for stock textures)
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.NormalMapTexturesResourceProjectPath">
            <summary>
            The asset resources path (relative to the project root) where the normal map textures for parts reside. (used for stock textures)
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.PartStyleExtensionsContentPath">
            <summary>
            The root content path to the part style extension assets.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.PartStyleExtensionsXmlResourceProjectPath">
            <summary>
            The part style extensions XML resource path (relative to the project root).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.TextureAtlasesResourceLoadPath">
            <summary>
            The texture atlases resource path (relative to the resources directory).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.TextureAtlasesResourceProjectPath">
            <summary>
            The texture atlases resource path (relative to the project root).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.TextureStylesContentPath">
            <summary>
            The root content path to the texture style assets.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.TextureStylesXmlResourceLoadPath">
            <summary>
            The part texture styles XML resource path (relative to the resources directory).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Editor.PartPaths.TextureStylesXmlResourceProjectPath">
            <summary>
            The part texture styles XML resource path (relative to the project root).
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Editor.PartTypeEditorScript">
            <summary>
            The part type editor script.
            </summary>
            <seealso cref="!:ModApi.Craft.Parts.Editor.PartEditorScriptBase&lt;ModApi.Craft.Parts.PartType&gt;" />
        </member>
        <member name="M:ModApi.Craft.Parts.Editor.PartTypeEditorScript.Validate">
            <summary>
            Validates the data logging any warnings or errors found.
            </summary>
            <returns>
            <c>true</c> if the validation was successful or resulted in warnings. <c>false</c> if there were validation errors.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Parts.EnabledScript">
            <summary>
            Script that lets game objects be enabled in either runtime or designer, but not both.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Craft.Parts.EnabledScript._enabledOnlyInDesigner">
            <summary>
            If true, then this game object is enabled in the designer and disabled in runtime.
            If false, then this game object is disabled in the designer and enabled in runtime.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.EnabledScript.EnabledOnlyInDesigner">
            <summary>
            Gets a value indicating whether this game object is only enabled in the designer.
            </summary>
            <value>
              <c>true</c> if [enabled in designer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.EnabledScript.EnabledOnlyInFlight">
            <summary>
            Gets a value indicating whether this game object is only enabled in flight.
            </summary>
            <value>
              <c>true</c> if [enabled in flight]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.AttachPointConnectionType">
            <summary>
            List of the types of connections an attach point can be.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointConnectionType.Legacy">
            <summary>
            Used when an attach point is longer used, but crafts are still using it, so we
            can't delete it without causing issues with those crafts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointConnectionType.Normal">
            <summary>
            The normal attach point.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointConnectionType.Shell">
            <summary>
            The shell attach point type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointConnectionType.Fairing">
            <summary>
            The fairing attach point type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.AttachPointConnectionType.Eva">
            <summary>
            The EVA attach point type.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.JointType">
            <summary>
            Types of joints available.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.JointType.Fused">
            <summary>
            The fused joint, which if connected to another fused joint will result in both
            parts sharing the same rigid body.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.JointType.Hinge">
            <summary>
            The hinge joint which can rotate around one axis. Parts will not share a rigid
            body.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.JointType.Rigid">
            <summary>
            The rigid joint which is fixed and does not allow movement. Parts will not share
            a rigid body.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.StageActivationType">
            <summary>
            Gets the stage activation types.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.StageActivationType.None">
            <summary>
            No stage activation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.StageActivationType.Engine">
            <summary>
            The engine activation type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.StageActivationType.Detacher">
            <summary>
            The detacher activation type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.StageActivationType.Fairing">
            <summary>
            The fairing activation type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.StageActivationType.LandingLeg">
            <summary>
            The landing leg activation type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.StageActivationType.Parachute">
            <summary>
            The parachute activation type.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatedPartEventArgs">
            <summary>
            Event args for an event that fires after the creation of a part.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatedPartEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatedPartEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartEventArgs.Part">
            <summary>
            Gets the part data that was created.
            </summary>
            <value>
            The part data that was created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartEventArgs.PartType">
            <summary>
            Gets the part type of the created part data.
            </summary>
            <value>
            The part type of the created part data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartEventArgs.PartXml">
            <summary>
            Gets the part XML of the part data that was created.
            </summary>
            <value>
            The part XML of the part data that was created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartEventArgs.PartXmlVersion">
            <summary>
            Gets the part XML version.
            </summary>
            <value>
            The part XML version.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatedPartEventArgs},ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartType,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler to raise.</param>
            <param name="part">The part data that was created.</param>
            <param name="partType">The part type of the created part data.</param>
            <param name="partXml">The part XML of the part data that was created.</param>
            <param name="partXmlVersion">The part XML version.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs">
            <summary>
            Event args for an event that fires after the creation of a part modifier data object.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.Part">
            <summary>
            Gets the part to which the modifier belongs.
            </summary>
            <value>
            The part to which the modifier belongs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.PartModifier">
            <summary>
            Gets the part modifier.
            </summary>
            <value>
            The part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.PartModifierStateXml">
            <summary>
            Gets the part modifier state XML.
            </summary>
            <value>
            The part modifier state XML.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.PartModifierXml">
            <summary>
            Gets the part modifier XML.
            </summary>
            <value>
            The part modifier XML.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.PartModifierXmlVersion">
            <summary>
            Gets the part modifier XML version.
            </summary>
            <value>
            The part modifier XML version.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatedPartModifierDataEventArgs},System.Xml.Linq.XElement,System.Xml.Linq.XElement,ModApi.Craft.Parts.PartData,System.Int32,ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="partModifierXml">The part modifier XML.</param>
            <param name="partModifierStateXml">The part modifier state XML.</param>
            <param name="part">The part to which the modifier belongs.</param>
            <param name="partModifierXmlVersion">The part modifier XML version.</param>
            <param name="partModifier">The part modifier.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs">
            <summary>
            Event args for an event that fires after the creation of a part modifier script.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs.PartModifier">
            <summary>
            Gets the part modifier.
            </summary>
            <value>
            The part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs.PartModifierScript">
            <summary>
            Gets the part modifier script.
            </summary>
            <value>
            The part modifier script.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatedPartModifierScriptEventArgs},ModApi.Craft.Parts.PartModifierData,ModApi.Craft.Parts.PartModifierScript)">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="partModifier">The part modifier.</param>
            <param name="partModifierScript">The part modifier script.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs">
            <summary>
            Event args for an event that fires after the creation of part modifiers for a part.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.Part">
            <summary>
            Gets the part for which part modifiers have been created.
            </summary>
            <value>
            The part for which part modifiers have been created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.PartModifiers">
            <summary>
            Gets the part modifiers that were created.
            </summary>
            <value>
            The part modifiers that were created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.PartType">
            <summary>
            Gets the part type for which part modifiers have been created.
            </summary>
            <value>
            The part type for which part modifiers have been created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.PartXml">
            <summary>
            Gets the part XML for which part modifiers have been created.
            </summary>
            <value>
            The part XML for which part modifiers have been created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.PartXmlVersion">
            <summary>
            Gets the part XML version.
            </summary>
            <value>
            The part XML version.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatedPartModifiersEventArgs},ModApi.Craft.Parts.PartType,ModApi.Craft.Parts.PartData,System.Xml.Linq.XElement,System.Int32,System.Collections.Generic.IReadOnlyList{ModApi.Craft.Parts.PartModifierData})">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler to raise.</param>
            <param name="partType">The part type for which part modifiers have been created.</param>
            <param name="part">The part for which part modifiers have been created.</param>
            <param name="partXml">The part XML for which part modifiers have been created.</param>
            <param name="partXmlVersion">The part XML version.</param>
            <param name="partModifiers">The part modifiers that have been created.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatingPartEventArgs">
            <summary>
            Event args for an event that fires prior to the creation of a part.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatingPartEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatingPartEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatingPartEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartEventArgs.Part">
            <summary>
            Gets the part data being created.
            </summary>
            <value>
            The part data being created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartEventArgs.PartType">
            <summary>
            Gets the part type of the part being created.
            </summary>
            <value>
            The part type of the part being created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartEventArgs.PartXml">
            <summary>
            Gets the part XML of the part being created.
            </summary>
            <value>
            The part XML of the part being created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartEventArgs.PartXmlVersion">
            <summary>
            Gets the part XML version.
            </summary>
            <value>
            The part XML version.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatingPartEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatingPartEventArgs},ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartType,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler to raise.</param>
            <param name="part">The part data being created.</param>
            <param name="partType">The part type of the part being created.</param>
            <param name="partXml">The part XML of the part being created.</param>
            <param name="partXmlVersion">The part XML version.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs">
            <summary>
            Event args for an event that fires prior to the creation of a part modifier data object.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs.Part">
            <summary>
            Gets the part to which the modifier belongs.
            </summary>
            <value>
            The part to which the modifier belongs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs.PartModifierStateXml">
            <summary>
            Gets the part modifier state XML.
            </summary>
            <value>
            The part modifier state XML.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs.PartModifierXml">
            <summary>
            Gets the part modifier XML.
            </summary>
            <value>
            The part modifier XML.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs.PartModifierXmlVersion">
            <summary>
            Gets the part modifier XML version.
            </summary>
            <value>
            The part modifier XML version.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatingPartModifierDataEventArgs},System.Xml.Linq.XElement,System.Xml.Linq.XElement,ModApi.Craft.Parts.PartData,System.Int32)">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="partModifierXml">The part modifier XML.</param>
            <param name="partModifierStateXml">The part modifier state XML.</param>
            <param name="part">The part to which the modifier belongs.</param>
            <param name="partModifierXmlVersion">The part modifier XML version.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs">
            <summary>
            Event args for an event that fires prior to the creation of part modifiers for a part.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs._static">
            <summary>
            The static event args.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs.Part">
            <summary>
            Gets the part for which part modifiers are being created.
            </summary>
            <value>
            The part for which part modifiers are being created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs.PartType">
            <summary>
            Gets the part type for which part modifiers are being created.
            </summary>
            <value>
            The part type for which part modifiers are being created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs.PartXml">
            <summary>
            Gets the part XML for which part modifiers are being created.
            </summary>
            <value>
            The part XML for which part modifiers are being created.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs.PartXmlVersion">
            <summary>
            Gets the part XML version.
            </summary>
            <value>
            The part XML version.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs.RaiseStaticEvent(System.EventHandler{ModApi.Craft.Parts.Events.CreatingPartModifiersEventArgs},ModApi.Craft.Parts.PartType,ModApi.Craft.Parts.PartData,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Raises the static event.
            </summary>
            <param name="eventHandler">The event handler to raise.</param>
            <param name="partType">The part type for which part modifiers are being created.</param>
            <param name="part">The part for which part modifiers are being created.</param>
            <param name="partXml">The part XML for which part modifiers are being created.</param>
            <param name="partXmlVersion">The part XML version.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.ActivationGroupChangedHandler">
            <summary>
            Handler for activation group changing events.
            </summary>
            <param name="source">The source.</param>
            <param name="activationGroup">The activation group.</param>
            <param name="state">if set to <c>true</c> [state].</param>
        </member>
        <member name="T:ModApi.Craft.Parts.CommandPodIsPlayerControlledHandler">
            <summary>
            Handler for the <see cref="P:ModApi.Craft.Parts.ICommandPod.IsPlayerControlled"/> event.
            </summary>
            <param name="isPlayer">If set to <c>true</c> the source command pod is now player-controlled.</param>
            <param name="source">The command pod which fired the event.</param>
            <param name="other">Either the new player-controlled command pod, or the old one (depending on wether source is now player-controlled).</param>
        </member>
        <member name="T:ModApi.Craft.Parts.ControlsChangedHandler">
            <summary>
            Hanler for events related to the command pod's controls changing.
            </summary>
            <param name="source">The source.</param>
            <param name="adjustControlsToCom">If set to <c>true</c> then the controls should be adjusted to the craft's CoM.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.StageActivatedHandler">
            <summary>
            Hanler for <see cref="E:ModApi.Craft.Parts.ICommandPod.StageActivated" />
            </summary>
            <param name="source">The command pod which activated the stage.</param>
            <param name="stagesActivated">If set to <c>true</c> a stage was activated, otherwise <c>false</c> if there were no-more stages to activate.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.ICommandPod">
            <summary>
            Interface for a command pod.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.ICommandPod.ActivationGroupChanged">
            <summary>
            Occurs when an activation group has changed for this <see cref="T:ModApi.Craft.Parts.ICommandPod"/> instance.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.ICommandPod.ControlsChanged">
            <summary>
            Occurs when the command pod's controls have changed.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.ICommandPod.IsPlayerControlledChanged">
            <summary>
            Occurs when our <see cref="P:ModApi.Craft.Parts.ICommandPod.IsPlayerControlled"/> value changes.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.ICommandPod.StageActivated">
            <summary>
            Occurs when <see cref="M:ModApi.Craft.Parts.ICommandPod.ActivateStage"/> is called.  The event fires even if the command pod had no stages to activate.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.ActivationGroupNames">
            <summary>
            Gets the activation group names.
            </summary>
            <value>
            The activation group names.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.AutoPilot">
            <summary>
            Gets the auto-pilot controller.
            </summary>
            <value>
            The auto-pilot controller.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.AutoRecalculateStages">
            <summary>
            Gets or sets a value indicating whether to automatically recalculate stages in the designer when the
            craft's structure changes.
            </summary>
            <value>
              <c>true</c> if stages should be automatically recalculated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.BatteryFuelSource">
            <summary>
            Gets the battery fuel source.
            </summary>
            <value>
            The battery fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.Controls">
            <summary>
            Gets the controls.
            </summary>
            <value>
            The controls.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.CraftConfiguration">
            <summary>
            Gets the craft configuration associated with this command pod.
            </summary>
            <value>
            The craft configuration.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.CurrentStage">
            <summary>
            Gets the current stage number. This is the stage index + 1. A value of zero indicates no
            stages have activated yet.
            </summary>
            <value>
            The current stage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.EvaScript">
            <summary>
            Gets the eva script associated with this command pod, or <c>null</c> if there is none.
            </summary>
            <value>
            The eva script associated with this command pod, or <c>null</c> if there is none.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.IsEva">
            <summary>
            Gets a value indicating whether this command pod is contained within an EVA character.
            </summary>
            <value>
              <c>true</c> if this instance contained within an EVA character; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.IsPlayerControlled">
            <summary>
            Gets a value indicating whether this command pod is the current player-controlled command pod.
            </summary>
            <value>
              <c>true</c> if this command pod is the current player-controlled command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.JetFuelSource">
            <summary>
            Gets the jet fuel source.
            </summary>
            <value>
            The jet fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.MonoFuelSource">
            <summary>
            Gets the mono fuel source.
            </summary>
            <value>
            The mono fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.NumStages">
            <summary>
            Gets the number stages.
            </summary>
            <value>
            The number stages.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.Part">
            <summary>
            Gets the part.
            </summary>
            <value>
            The part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.PilotSeatOrientation">
            <summary>
            Gets the pilot seat transform.  Up axis pointing in the upwards direction of the craft, which is the roll axis.
            Right is the pitch axis. Forward is the yaw axis.
            </summary>
            <value>
            The center of mass transform.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.ReplicateControls">
            <summary>
            Gets or sets a value indicating whether this command pod will replicate inputs from the active pod when this command pod isn't active.
            </summary>
            <value>
              <c>true</c> if this command pod will replicate inputs from the active command pod when this pod isn't active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.ReplicateStageActivations">
            <summary>
            Gets or sets a value indicating whether this command pod will replicate stage activations from the active pod when this command pod isn't active.
            </summary>
            <value>
              <c>true</c> if this command pod will replicate stage activations from the active command pod when this pod isn't active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPod.SupressSwitchedToCraftMessage">
            <summary>
            Gets or sets a value indicating whether to suppress the UI message when switching to this command pod.
            </summary>
            <value>
              <c>true</c> if  the UI message when switching to this command pod should be suppressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.ICommandPod.ActivateStage">
            <summary>
            Activates the current stage.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.ICommandPod.GetActivationGroupState(System.Int32)">
            <summary>
            Gets the activation group state.
            </summary>
            <param name="activationGroup">The activation group.</param>
            <returns>The state of the activation group. True indicates the group is active.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.ICommandPod.SetActivationGroupState(System.Int32,System.Boolean)">
            <summary>
            Sets the activation group state.
            </summary>
            <param name="activationGroup">The activation group.</param>
            <param name="state">if set to <c>true</c> then activate the group. Otherwise deactivate the group.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.ICommandPod.SetAutopilotEmulation(ModApi.Craft.Parts.ICommandPod)">
            <summary>
            When auto-pilot emulation is enabled, it will make our command pod handle the same as
            the specified command pod would with respect to auto pilot and the nav-sphere. Set to <c>null</c> to disable.
            </summary>
            <param name="commandPodToEmulate">The command pod we want to to emulate auto-pilot/nav-sphere functionality for.  Set to <c>null</c> to clear any override.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.ICommandPod.SetPilotSeatRotation(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Sets the pilot seat rotation.
            </summary>
            <param name="eulerAngles">The world euler angles.</param>
            <param name="updatePartData">If set to <c>true</c> CommandPodData.PilotSeatRotation will be updated.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.ICommandPodScript">
            <summary>
            Interface for a command pod script.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.ICommandPodScript.ActivationGroupChanged">
            <summary>
            Occurs when an activation group has changed for this <see cref="T:ModApi.Craft.Parts.ICommandPod" /> instance.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.ICommandPodScript.ControlsChanged">
            <summary>
            Occurs when the command pod's controls have changed.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.ActivationGroupNames">
            <summary>
            Gets the activation group names.
            </summary>
            <value>
            The activation group names.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.AutoPilot">
            <summary>
            Gets the auto-pilot controller.
            </summary>
            <value>
            The auto-pilot controller.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.BatteryFuelSource">
            <summary>
            Gets or sets the battery fuel source.
            </summary>
            <value>
            The battery fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.Controls">
            <summary>
            Gets the controls.
            </summary>
            <value>
            The controls.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.CraftConfiguration">
            <summary>
            Gets the controls.
            </summary>
            <value>
            The controls.
            </value>
            <summary>
            Gets the craft configuration associated with this command pod.
            </summary>
            <value>
            The craft configuration.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.CurrentStage">
            <summary>
            Gets the current stage number. This is the stage index + 1. A value of zero indicates no
            stages have activated yet.
            </summary>
            <value>
            The current stage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.GetStageActivationPermission">
            <summary>
            Gets or sets an optional function that the command pod will use to check if it can
            advance to the next stage. This can be used to limit the stage activation for
            whatever reason, such as in the flight tutorial where we don't want the player running
            through stage activations before they're ready. In normal circumstances, this should be
            null.
            The function must return a true to allow stage activation, or false to prevent it.
            The int parameter is the stage that is requesting activation.
            </summary>
            <value>
            The anonymous function.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.JetFuelSource">
            <summary>
            Gets or sets the jet fuel source.
            </summary>
            <value>
            The jet fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.MonoFuelSource">
            <summary>
            Gets or sets the mono fuel source.
            </summary>
            <value>
            The mono fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.NumStages">
            <summary>
            Gets the number stages.
            </summary>
            <value>
            The number stages.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.Part">
            <summary>
            Gets the part.
            </summary>
            <value>
            The part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.ICommandPodScript.PilotSeatOrientation">
            <summary>
            Gets the pilot seat transform.  Up axis pointing in the upwards direction of the craft, which is the roll axis.
            Right is the pitch axis. Forward is the yaw axis.
            </summary>
            <value>
            The center of mass transform.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.PartCollisionResponseType">
            <summary>
            Enumerates the way a part can respond to a collision.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionResponseType.None">
            <summary>
            The part will not disconnect or explode as a response to a collision.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionResponseType.DisconnectOnly">
            <summary>
            The part cannot explode. It can only disconnect in response to a collision.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionResponseType.Default">
            <summary>
            The part is capable of exploding or disconnecting as a response to a collision.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.IConfigData">
            <summary>
            Interface for the ConfigData modifier that exists in the main project that provides additional
            configuration information for a part.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.AutoActivateIfNoStageOrActivationGroup">
            <summary>
            Gets a value indicating whether to automatically activate this part if it doesn't belong to a stage or activation group.
            </summary>
            <value>
              <c>true</c> if this part will automatically activate if it doesn't belong to a stage or activation group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.BuoyancyBaseScale">
            <summary>
            Gets the base value to scale this part's buoyancy by.
            </summary>
            <value>
            The base value to scale this part's buoyancy by.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.BuoyancyUserScale">
            <summary>
            Gets the user-configurable value to scale buoyancy by.
            </summary>
            <value>
            The value to scale this part's buoyancy by.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CanExplode">
            <summary>
            Gets a value indicating whether this part can explode.
            </summary>
            <value>
              <c>true</c> if this part can explode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CenterOfMass">
            <summary>
            Gets or sets the center of mass.
            </summary>
            <value>
            The center of mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CollisionDisconnectImpulse">
            <summary>
            Gets the maximum impulse this part can absorb from a collision before it disconnects.
            </summary>
            <value>
            The collision impulse in scaled Newton seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CollisionDisconnectVelocity">
            <summary>
            Gets the maximum velocity this part can absorb from a collision before it disconnects.
            </summary>
            <value>
            The collision velocity in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CollisionExplodeImpulse">
            <summary>
            Gets the maximum impulse this part can absorb from a collision before it explodes.
            </summary>
            <value>
            The collision impulse in scaled Newton seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CollisionExplodeVelocity">
            <summary>
            Gets the maximum velocity this part can absorb from a collision before it explodes.
            </summary>
            <value>
            The collision velocity in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CollisionPreventExternalDisconnections">
            <summary>
            Gets a value indicating whether this part wants to prevent other parts from disconnecting from it.  This is distinct
            from <see cref="F:ModApi.Craft.Parts.PartCollisionResponseType.None" /> since that only deals with "us" initiating the disconnection.
            This property deals with other parts initiating a disconnect from us.
            </summary>
            <value>
              <c>true</c> if this part wants to prevent other parts from disconnecting from this part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.CollisionVelocityMode">
            <summary>
            Gets the collision velocity mode, which is used to determine how to use the velocity in
            a collision when calculating if the part should disconnect/explode.
            </summary>
            <value>
            The collision velocity mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.DragScale">
            <summary>
            Gets the drag scale, which can be used to increase or decrease the amount of drag the
            part receives.
            </summary>
            <value>
            The drag scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.FuelLineOverride">
            <summary>
            Gets a value indicating whether this part has a fuel line override enabled.
            This will allow fuel to pass through any attach points on this part.
            </summary>
            <value>
              <c>true</c> if fuel line override is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.HeatShield">
            <summary>
            Gets or sets the heat shield for this part.
            </summary>
            <value>
            The heat shield.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.IncludeInDrag">
            <summary>
            Gets a value indicating whether to include this part in the drag calculation. If this is false
            then the part will not be included and parts that would otherwise be occluded by this part will
            start to receive drag.
            </summary>
            <value>
              <c>true</c> if include this part is included in the drag calculation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.InertiaTensorBaseScale">
            <summary>
            Gets the inertia tensor base scale, which is multiplied by the body's inertia tensor containing
            this part. This can be used to increase stability for wobbly parts.
            </summary>
            <value>
            The inertia tensor scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.InertiaTensorMin">
            <summary>
            Gets the inertia tensor minimum, which is the minimum amount of inertia tensor to use
            in a body that contains this part.
            </summary>
            <value>
            The inertia tensor minimum.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.InertiaTensorUserScale">
            <summary>
            Gets the user-defined inertia tensor scale.
            part
            </summary>
            <value>
            The user-defined inertia tensor scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.MassScale">
            <summary>
            Gets the mass scale, which can be used to manipulate the mass of a part.
            Normally, this this is set to 1.0.
            </summary>
            <value>
            The mass scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.MaxDamage">
            <summary>
            Gets the maximum damage the part can take before exploding.
            </summary>
            <value>
            The maximum damage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.MaxTemperature">
            <summary>
            Gets the maximum temperature, in Kelvin, that a part can withstand. Anything above this
            begins damaging the part.
            </summary>
            <value>
            The maximum temperature.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.PartCollisionHandling">
            <summary>
            Gets the part collision handling method. If this is default, then it will fall back
            to the collision method defined on the PartType.
            </summary>
            <value>
            The part collision handling method.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.PartCollisionResponse">
            <summary>
            Gets the type of the part collision response type.
            </summary>
            <value>
            The type of the part collision response.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.PartScale">
            <summary>
            Gets the part scale.
            </summary>
            <value>
            The part scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.PartThermalMassRatio">
            <summary>
            Gets the thermal mass ratio, which is the percentage of the part's mass that should be used
            when calculating its thermal qualities, such as temperature.
            </summary>
            <value>
            The thermal mass ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.PreventDebris">
            <summary>
            Gets or sets a value indicating whether to prevent this part (and any connected parts) from being
            considered debris if it separates from the player craft.
            </summary>
            <value>
              <c>true</c> if this part should not be considered debris on separation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.RaiseWaterEventsEvenIfNotBuoyant">
            <summary>
            Gets a value indicating whether to raise water events even if the part is not buoyant.
            </summary>
            <value>
              <c>true</c> if water events should be raised even if the part is not buoyant; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.StageActivationType">
            <summary>
            Gets the stage activation type for this part.
            </summary>
            <value>
            The stage activation type for this part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IConfigData.SupportsActivation">
            <summary>
            Gets a value indicating whether this part can be activated.
            </summary>
            <value>
              <c>true</c> if the part can be activated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.ActiveWhileInCrewCompartmentChangedHandler">
            <summary>
            Delegate for <see cref="E:ModApi.Craft.Parts.IEvaScript.ActiveWhileInCrewCompartmentChanged"/>.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.EvaControlSchemeType">
            <summary>
            The control mode type that the astronaut is requesting.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.EvaControlSchemeType.Eva">
            <summary>
            The astronaut-specific controls.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.EvaControlSchemeType.EvaInChair">
            <summary>
            The control-scheme when in a chair.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.EvaControlSchemeType.FlightNormal">
            <summary>
            The normal flight controls.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.IEvaScript">
            <summary>
            Interface for interacting with an EvaScript.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.IEvaScript.ActiveWhileInCrewCompartmentChanged">
            <summary>
            Occurs when <see cref="P:ModApi.Craft.Parts.IEvaScript.ActiveWhileInCrewCompartment"/> changes.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.ActiveWhileInCrewCompartment">
            <summary>
            Gets a value indicating whether we're the active command pod while inside a crew compartment (like in a chair).
            </summary>
            <value>
              <c>true</c> if  we're the active command pod while inside a crew compartment (like in a chair); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.EvaActive">
            <summary>
            Gets a value indicating whether the astronaut is currently on an EVA.
            </summary>
            <value>
              <c>true</c> if the astronaut is currently on an EVA; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.EvaControlScheme">
            <summary>
            Gets the control mode type that the astronaut is requesting.  When we've taken control of an astronaut who is inside a crew compartment, but
            still active (such as in a chair), we want to be able to control the craft instead of the astronaut's movement (since he can't move).
            </summary>
            <value>
            The UI mode type that the astronaut is requesting.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.GrapplingHookEnabled">
            <summary>
            Gets a value indicating whether the grappling hook is enabled.
            </summary>
            <value>
              <c>true</c> if the grappling hook is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.InAtmosphere">
            <summary>
            Gets a value indicating whether we're in an atmosphere.
            </summary>
            <value>
              <c>true</c> if we're in an atmosphere; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsAtWaterSurface">
            <summary>
            Gets a value indicating whether the astronaut is at the water's surface.
            </summary>
            <value>
              <c>true</c> if the astronaut is at the water's surface; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsFpsActive">
            <summary>
            Gets a value indicating whether the FPS camera is currently active.
            </summary>
            <value>
              <c>true</c> if the FPS camera is currently active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsGrounded">
            <summary>
            Gets a value indicating whether this instance is touchinig any collider (not necessarily the terrain).
            </summary>
            <value>
              <c>true</c> if this instance is grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsGroundedOnRigidBody">
            <summary>
            Gets a value indicating whether this instance is grounded on rigid body.
            </summary>
            <value>
              <c>true</c> if this instance is grounded on rigid body; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsGroundedTerrain">
            <summary>
            Gets a value indicating whether this instance is grounded on the terrain.
            </summary>
            <value>
              <c>true</c> if this instance is grounded terrain; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsInWater">
            <summary>
            Gets a value indicating whether the astronaut is touching any water.
            </summary>
            <value>
              <c>true</c> if this instance is in water; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsPlayerCraft">
            <summary>
            Gets a value indicating whether the player is actively controlling this character.
            </summary>
            <value>
              <c>true</c> if the player is actively controlling this character; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsSwimmingEnabled">
            <summary>
            Gets a value indicating whether the astronaut is submerged in water sufficiently to allow swimming.
            </summary>
            <value>
              <c>true</c> if we're sufficiently submerged to allow swimming; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.IsWalking">
            <summary>
            Gets a value indicating whether the astronaut is walking.
            </summary>
            <value>
              <c>true</c> if the astronaut is walking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IEvaScript.TetherAdjustLengthEnabled">
            <summary>
            Gets a value indicating whether the grappling hook's tether length can currently be adjusted.
            </summary>
            <value>
              <c>true</c> if the grappling hook's tether length can currently be adjusted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.FuelTransferMode">
            <summary>
            The fuel transfer modes.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.FuelTransferMode.None">
            <summary>
            The none mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.FuelTransferMode.Drain">
            <summary>
            The fuel source is available to be drained during fuel transfer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.FuelTransferMode.Fill">
            <summary>
            The fuel source is available to be filled during fuel transfer.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.IFuelSource">
            <summary>
            Interface for a fuel source.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.FuelTransferMode">
            <summary>
            Gets or sets the fuel transfer mode.
            </summary>
            <value>
            The fuel transfer mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.FuelType">
            <summary>
            Gets the type of the fuel.
            </summary>
            <value>
            The type of the fuel.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
              <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.Position">
            <summary>
            Gets the position of the fuel source in the reference frame.
            </summary>
            <value>
            The position of the fuel source in the reference frame.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.Priority">
            <summary>
            Gets the priority of the fuel source.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.SubPriority">
            <summary>
            Gets the sub-priority of the fuel source.
            </summary>
            <value>
            The sub-priority.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.SupportsFuelTransfer">
            <summary>
            Gets a value indicating whether the fuel source supports fuel transfer.
            </summary>
            <value>
              <c>true</c> if the fuel source supports fuel transfer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.TotalCapacity">
            <summary>
            Gets the maximum fuel capacity of the fuel source.
            </summary>
            <value>
            The maximum fuel capacity of the fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IFuelSource.TotalFuel">
            <summary>
            Gets the amount of fuel remaining in the fuel source.
            </summary>
            <value>
            The amount of fuel remaining.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.IFuelSource.AddFuel(System.Double)">
            <summary>
            Adds the specified amount of fuel.
            </summary>
            <param name="amount">The amount of fuel to add.</param>
            <returns>
            The amount of fuel added. This will be the same as amount unless the fuel source
            was too full to accommodate the requested amount without overflowing.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IFuelSource.RemoveFuel(System.Double)">
            <summary>
            Removes the specified amount of fuel.
            </summary>
            <param name="amount">The amount of fuel to remove.</param>
            <returns>
            The amount of fuel removed. This will be the same as the amount argument unless the fuel
            source had less fuel than the requested amount.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartFlightCollision">
            <summary>
            Contains information a collision involving a part in the flight scene.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.Collision">
            <summary>
            Gets the Unity collision object.
            </summary>
            <value>
            The Unity collision object.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.Contact">
            <summary>
            Gets the Unity collision contact.
            </summary>
            <value>
            The Unity collision contact.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.Impulse">
            <summary>
            Gets the impulse of the collision. This impulse is scaled down when relative velocity is very low. Check
            the Collision.impulse for the original impulse.
            </summary>
            <value>
            The impulse in Newton seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.IsGroundCollision">
            <summary>
            Gets a value indicating whether this is a collision with the ground.
            </summary>
            <value>
              <c>true</c> if this is a ground collision; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.NormalVelocity">
            <summary>
            Gets the magnitude of the velocity that is aligned with the collision normal.
            </summary>
            <value>
            The normal velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.OtherColliderLayer">
            <summary>
            Gets the other collider's layer.
            </summary>
            <value>
            The other collider layer.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.OtherPartScript">
            <summary>
            Gets the other part this part is colliding with or null if it is not colliding with another part.
            </summary>
            <value>
            The other part script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.PartScript">
            <summary>
            Gets the part script owning the Contact.thisCollider.
            </summary>
            <value>
            The part script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.RelativeVelocity">
            <summary>
            Gets the relative velocity between the colliders.
            </summary>
            <value>
            The relative velocity in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartFlightCollision.RelativeVelocityMagnitude">
            <summary>
            Gets the magnitude of the relative velocity between the colliders.
            </summary>
            <value>
            The relative velocity in m/s.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.PartGroupDisconnectedHandler">
            <summary>
            Handler for part group disconnection events.
            </summary>
            <param name="source">The source part group.</param>
            <param name="isExploding">If set to <c>true</c> the part group is being disconnected because it is exploding.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartGroupScript">
            <summary>
            Interface for a part group.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.IPartGroupScript.Disconnected">
            <summary>
            Occurs when this part group is being disconnected.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartGroupScript.BodyScript">
            <summary>
            Gets the body script.
            </summary>
            <value>
            The body script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartGroupScript.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartGroupScript.GameObject">
            <summary>
            Gets the game object.
            </summary>
            <value>
            The game object.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartGroupScript.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartGroupScript.PartGroupRenderer">
            <summary>
            Gets the part group renderer for the part group's combined mesh (if any).
            </summary>
            <value>
            The part group renderer for the part group's combined mesh (if any).
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartGroupScript.OnBeingDisconnected(System.Boolean)">
            <summary>
            Method to notify this <see cref="T:ModApi.Craft.Parts.IPartGroupScript"/> when it is being disconnected.
            </summary>
            <param name="isExploding">if set to <c>true</c> the part group is exploding.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartGroupScript.RemovePart(ModApi.Craft.Parts.PartData)">
            <summary>
            Removes the part.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartHighlighter">
            <summary>
            An interface for interacting with the part highlighter component.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartHighlighter.HighlightColor">
            <summary>
            Gets or sets the color of the highlight.
            </summary>
            <value>
            The color of the highlight.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartHighlighter.OutlineColor">
            <summary>
            Gets or sets the color of the outline.
            </summary>
            <value>
            The color of the outline.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartHighlighter.AddPartHighlight(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Adds the specified part to list of parts to be highlighted.
            </summary>
            <param name="part">The part to be highlighted.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartHighlighter.AddPartOutline(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Adds the specified part to list of parts to be outlined.
            </summary>
            <param name="part">The part to be outlined.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartHighlighter.RemovePartHighlight(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Removes the specified part from list of parts to be highlighted.
            </summary>
            <param name="part">The part to be removed.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartHighlighter.RemovePartOutline(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Removes the specified part from list of parts to be outlined.
            </summary>
            <param name="part">The part to be removed.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartMaterialScript">
            <summary>
            Interface for a part material script.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.FoundAttachPoint">
            <summary>
            Gets or sets a value indicating whether the part has found an attach point while dragging in the designer.
            </summary>
            <value>
            <c>true</c> if the part has found an attach point while dragging in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.IsCollidingInDesigner">
            <summary>
            Gets or sets a value indicating whether this part is colliding in the designer.
            </summary>
            <value>
            <c>true</c> if this part is colliding in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this instance is disabled.
            </summary>
            <value>
            <c>true</c> if this instance is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.IsDisconnected">
            <summary>
            Gets or sets a value indicating whether part is disconnected.
            </summary>
            <value>
            <c>true</c> if disconnected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.IsHighlighted">
            <summary>
            Gets or sets a value indicating whether this part is highlighted.
            </summary>
            <value>
            <c>true</c> if this part is highlighted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.IsSelected">
            <summary>
            Gets or sets a value indicating whether this part is selected.
            </summary>
            <value>
            <c>true</c> if this part is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.IsVisible">
            <summary>
            Gets or sets a value indicating whether this part material is visible.
            </summary>
            <value>
            <c>true</c> if the part is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.MaterialIndexPrimary">
            <summary>
            Gets the primary material index.
            </summary>
            <value>
            The primary material index.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.MaterialIndexSecondary">
            <summary>
            Gets the secondary material index.
            </summary>
            <value>
            The secondary material index.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.OverrideMaterials">
            <summary>
            Gets or sets the override materials.
            </summary>
            <value>
            The override materials.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.PartGroup">
            <summary>
            Gets the part group to which this part belongs.
            </summary>
            <value>
            The part group to which this part belongs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartMaterialScript.RendererMaps">
            <summary>
            Gets the renderer maps for the part.
            </summary>
            <value>
            The renderer maps part.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartMaterialScript.AddRenderer(UnityEngine.Renderer,System.Nullable{System.Boolean},System.Nullable{System.Boolean},UnityEngine.Material[])">
            <summary>
            Adds the renderer to the list of renderers for this part.
            </summary>
            <param name="renderer">The renderer to add.</param>
            <param name="excludeFromCombine">If set to <c>true</c>, the renderer will be excluded from mesh combining.</param>
            <param name="excludeFromDrag">If set to <c>true</c>, the renderer will be excluded from the drag model (unless the mesh is combined).</param>
            <param name="originalMaterials">The original materials.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartMaterialScript.RemoveRenderer(UnityEngine.Renderer)">
            <summary>
            Removes the renderer.
            </summary>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartMaterialScript.SetMaterial(System.Int32,System.Int32)">
            <summary>
            Sets the material for the specified level.
            </summary>
            <param name="material">The id of the material to set.</param>
            <param name="level">The level at which the material is being set.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartMaterialScript.UpdateRenderers">
            <summary>
            Clears all known renderers for this part and then adds all renderers that can be found for this part.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartMaterialScript.UpdateTextureData">
            <summary>
            Updates the texture data for all renderers.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.CommandPodChangedHandler">
            <summary>
            Handler for when the part's command pod has changed.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartMovedToNewCraftDelegate">
            <summary>
            Delegate used for when a part is moved to a new craft.
            </summary>
            <param name="oldCraft">The old craft.</param>
            <param name="newCraft">The new craft.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartScriptConnectedDelegate">
            <summary>
            Delegate for part connection events.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartScriptDestroyedDelegate">
            <summary>
            Delegate used for the part destroyed event.
            </summary>
            <param name="partScript">The part script.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartDesignerInteractionMode">
            <summary>
            Available options for the mode of interaction of a part in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartDesignerInteractionMode.Normal">
            <summary>
            The part is visible and its colliders and attach points are enabled.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartDesignerInteractionMode.Disabled">
            <summary>
            The part's mesh is transparent and its colliders and attach points are disabled.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartScript">
            <summary>
            Interface for a part script.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="E:ModApi.Craft.Parts.IPartScript.CommandPodChanged">
            <summary>
            Occurs when the part's command pod has changed.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.IPartScript.ConnectedToPart">
            <summary>
            Occurs when the part is connected to another part.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.IPartScript.MovedToNewCraft">
            <summary>
            Occurs when this part is moved to a new craft.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.IPartScript.PartDestroyed">
            <summary>
            Occurs when the part is destroyed.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.AttachPointScripts">
            <summary>
            Gets the attach point scripts, which are only created and used in the designer.
            </summary>
            <value>
            The attach point scripts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.AttachPointsEnabled">
            <summary>
            Gets a value indicating whether attach points are enabled for this part.  Only usable in designer.
            </summary>
            <value>
              <c>true</c> if attach points are enabled for this part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.BatteryFuelSource">
            <summary>
            Gets the battery fuel for the part. The battery source exists on the part's command pod. If
            the part does not have a command pod it will return an empty fuel source. This property is
            for convenience so the caller does not need to check for null command pods or a null fuel source.
            </summary>
            <value>
            The battery fuel source for the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.BodyScript">
            <summary>
            Gets the body script.
            </summary>
            <value>
            The body script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.Colliders">
            <summary>
            Gets the collection of colliders used for the part.
            </summary>
            <value>
            The collection of colliders used for the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.CollisionSoundsEnabled">
            <summary>
            Gets or sets a value indicating whether collision sounds are enabled for this part.
            </summary>
            <value>
              <c>true</c> if collision sounds are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.CommandPod">
            <summary>
            Gets the command pod currently controlling this part.
            </summary>
            <value>
            The command pod.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.CraftScript">
            <summary>
            Gets the craft script that this part belongs to.
            </summary>
            <value>
            The craft script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.Data">
            <summary>
            Gets the part data.
            </summary>
            <value>
            The part data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.DesignerInteractionMode">
            <summary>
            Gets or sets the interaction mode for this part in the designer.
            </summary>
            <value>
            The designer interaction mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.Disconnected">
            <summary>
            Gets a value indicating whether this part is disconnected from the craft.
            </summary>
            <value>
              <c>true</c> if disconnected from the craft; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.FluidDisplacementVolume">
            <summary>
            Gets the volume of fluid which would be displaced by this part if it were fully submerged.  This may just be the collider's volume, or something less for porous objects.
            </summary>
            <value>
            The volume of fluid which would be displaced by this part if it were fully submerged.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.GameObject">
            <summary>
            Gets the game object.
            </summary>
            <value>
            The game object.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.HasFlightProgram">
            <summary>
            Gets a value indicating whether this part has a flight program modifier.
            </summary>
            <value>
              <c>true</c> if this instance has a flight program modifier; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.Modifiers">
            <summary>
            Gets the list of modifier scripts.
            </summary>
            <value>
            The list of modifier scripts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.PartGroup">
            <summary>
            Gets the part group script.
            </summary>
            <value>
            The part group script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.PartMaterialScript">
            <summary>
            Gets the part material script.
            </summary>
            <value>
            The part material script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.PrimaryCollider">
            <summary>
            Gets the primary collider for the part.
            </summary>
            <value>
            The primary collider for the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.ReEntryEffectStrength">
            <summary>
            Gets the get re entry effect strength. Values are typically between 0...1 and may go above 1 for extreme drag.
            </summary>
            <value>
            The visual effect strength.  Values are typically between 0...1 and may go above 1 for extreme drag.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.SymmetrySlice">
            <summary>
            Gets or sets the symmetry slice, which will only be set in the Design scene.
            </summary>
            <value>
            The symmetry slice.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.Temperature">
            <summary>
            Gets the current temperature, in Kelvin.
            </summary>
            <value>
            The part's current temperature.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.VaporTrailStrength">
            <summary>
            Gets the vapor trail strength.
            </summary>
            <value>
            The vapor trail strength.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartScript.WaterPhysics">
            <summary>
            Gets the water physics for this part.
            </summary>
            <value>
            The water physics for this part.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.AcceptConnection(ModApi.Craft.Parts.AttachPointScript,ModApi.Craft.Parts.AttachPointScript)">
            <summary>
            Determines whether the connection should be accepted.
            </summary>
            <param name="ourAttachPoint">Our attach point.</param>
            <param name="targetAttachPoint">The target attach point.</param>
            <returns><c>true</c> if the connection should be accepted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.Activate">
            <summary>
            Called when the part is activated.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.CalculateBounds">
            <summary>
            Calculates the bounds of the part.
            </summary>
            <returns>The bounds.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.Deactivate">
            <summary>
            Called when a part is deactivated.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.GenerateInspectorModel">
            <summary>
            Generates an inspector model for this part.
            </summary>
            <returns>The inspector model.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.GetModifier``1">
            <summary>
            Gets the modifier script of the specified type, or null if it does not exist.
            </summary>
            <typeparam name="T">The modifier type.</typeparam>
            <returns>The modifier script, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.GetModifiers``1">
            <summary>
            Gets the modifiers of the type.
            </summary>
            <typeparam name="T">The modifier type.</typeparam>
            <returns>The list of modifiers of the type.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.GetModifiersWithInterface``1">
            <summary>
            Gets the modifier scripts which implement the specified interface.
            </summary>
            <typeparam name="T">The interface to get.</typeparam>
            <returns>The modifier scripts which implement <typeparamref name="T"/>, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.GetModifierWithInterface``1">
            <summary>
            Gets a modifier script which implements the specified interface.
            </summary>
            <typeparam name="T">The interface to get.</typeparam>
            <returns>The modifier script which implements <typeparamref name="T"/>, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.InitializeColliders">
            <summary>
            Initializes (or re-initializes) the colliders for a part.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.OnCommandPodChanged">
            <summary>
            Called when the command pod has changed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.OnCraftStructureChanged">
            <summary>
            Called when the craft structure has changed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.OnModifiersCreated">
            <summary>
            Called after a part's modifiers have been created.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.ToggleActivationState">
            <summary>
            Toggles the activation state of the part if it supports activation.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IPartScript.UpdateAttachPoints">
            <summary>
            Updates the attach points.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartStateColors">
            <summary>
            An interface providing coloring information for various part states.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartStateColors.Attached">
            <summary>
            Gets the attached color for parts.
            </summary>
            <value>
            The attached color for parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartStateColors.Colliding">
            <summary>
            Gets the colliding color for parts.
            </summary>
            <value>
            The colliding color for parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartStateColors.DisconnectedPrimary">
            <summary>
            Gets the primary disconnected color for parts.
            </summary>
            <value>
            The primary disconnected color for parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartStateColors.DisconnectedSecondary">
            <summary>
            Gets the secondary disconnected color for parts.
            </summary>
            <value>
            The secondary disconnected color for parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartStateColors.Highlighted">
            <summary>
            Gets the highlighted color for parts.
            </summary>
            <value>
            The highlighted color for parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartStateColors.Selected">
            <summary>
            Gets the selected color for parts.
            </summary>
            <value>
            The selected color for parts.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.IPartWaterPhysics">
            <summary>
            Part script's water physics.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartWaterPhysics.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.Parts.IPartWaterPhysics"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IPartWaterPhysics.PartScript">
            <summary>
            Gets the part script.
            </summary>
            <value>
            The part script.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.IRendererMaterialMap">
            <summary>
            An interface for a interacting with a mesh renderer for a craft part.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.EmissiveOverride">
            <summary>
            Gets or sets the emissive override value.
            If negative, the renderer will use the part material's emissive value.
            If positive, that value will be used for the emissive-ness of the renderer.
            </summary>
            <value>
            The emissive override value.
            If negative, the renderer will use the part material's emissive value.
            If positive, that value will be used for the emissive-ness of the renderer.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.ExcludeFromDragModel">
            <summary>
            Gets a value indicating whether to exclude this renderer from the drag model.
            </summary>
            <value>
              <c>true</c> if the renderer should be excluded from the drag model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.ExcludeFromMeshCombine">
            <summary>
            Gets or sets a value indicating whether the renderer should be excluding from mesh combining.
            </summary>
            <value>
            <c>true</c> if the renderer should be excluding from mesh combining; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.HasCustomMaterial">
            <summary>
            Gets a value indicating whether this renderer has one or more custom materials.
            </summary>
            <value>
            <c>true</c> if this renderer has one or more custom materials; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.Mesh">
            <summary>
            Gets the mesh component.
            </summary>
            <value>
            The mesh component.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.OriginalMaterials">
            <summary>
            Gets the original materials.
            </summary>
            <value>
            The original materials.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.PartMaterialScript">
            <summary>
            Gets the part material script.
            </summary>
            <value>
            The part material script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.RenderBeforeDepthMask">
            <summary>
            Gets a value indicating whether to render before the depth mask.
            </summary>
            <value>
              <c>true</c> if the mesh should render before the depth mask; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.Renderer">
            <summary>
            Gets the renderer component.
            </summary>
            <value>
            The renderer component.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.IRendererMaterialMap.UsesEmissiveOverride">
            <summary>
            Gets or sets a value indicating whether this mesh should be used when overriding the emissive-ness of the part material.
            This is only used as an indicator flag to some modifiers and ultimately,
            has no actual bearing on whether or not the emissive override value is used.
            </summary>
            <value>
              <c>true</c> if this mesh is used when overriding the emissive-ness of the part material; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.ApplyEmissiveOverride">
            <summary>
            Immediately applies the renderer's emissive override value to the renderer via a material property block.
            This method is not supported in the flight scene as the emissive override is applied automatically at the part group level.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.Destroy">
            <summary>
            Destroys the renderer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.EndTempRender">
            <summary>
            Ends the current temporary render process (if any).
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.ReplaceOriginalMaterials(UnityEngine.Material,System.Boolean)">
            <summary>
            Replaces the original materials with the specified material.
            </summary>
            <param name="material">The material for which to replace the original materials.</param>
            <param name="setAsCurrent">If set to <c>true</c>, the new material will be set as the current active material.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.SetRendererMaterial(UnityEngine.Material[])">
            <summary>
            Sets the renderer material.
            </summary>
            <param name="materials">The materials.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.SetRendererMaterial(UnityEngine.Material)">
            <summary>
            Sets the renderer material.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.IRendererMaterialMap.StartTempRender(System.Int32,UnityEngine.Material)">
            <summary>
            Tells the renderer to prepare for a temporary render using the specified layer and material.
            This is used to temporarily change the layer and material of a part renderer, allowing it to
            easily return to its prior state with a call to EndTempRender().
            </summary>
            <param name="layer">The layer in to which to move the renderer's game object.</param>
            <param name="material">The material to use for the temporary render.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Input.DummyInputController">
            <summary>
            A dummy input controller that is never active and always returns a zero value.
            </summary>
            <seealso cref="T:ModApi.Craft.Parts.Input.IInputController" />
        </member>
        <member name="M:ModApi.Craft.Parts.Input.DummyInputController.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Input.DummyInputController"/> class.
            </summary>
            <param name="id">The input identifier.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.DummyInputController.Active">
            <summary>
            Gets a value indicating whether the control associated with the input controller is currently active.
            </summary>
            <value>
              <c>true</c> if the control associated with the input controller is currently active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.DummyInputController.InputId">
            <summary>
            Gets the input identifier.
            </summary>
            <value>
            The input identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.DummyInputController.Value">
            <summary>
            Gets the current value of the control associated with the input controller.
            </summary>
            <value>
            The current value of the control associated with the input controller.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Input.IInputController">
            <summary>
            An interface for an input controller modifier script placed on a part.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.IInputController.Active">
            <summary>
            Gets a value indicating whether the control associated with the input controller is currently active.
            </summary>
            <value>
              <c>true</c> if the control associated with the input controller is currently active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.IInputController.InputId">
            <summary>
            Gets the input identifier.
            </summary>
            <value>
            The input identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.IInputController.Value">
            <summary>
            Gets the current value of the control associated with the input controller.
            </summary>
            <value>
            The current value of the control associated with the input controller.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Input.IInputControllerInput">
            <summary>
            In interface for a wrapper class that wraps an input used by an input controller.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.IInputControllerInput.Enabled">
            <summary>
            Gets a value indicating whether this input is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.IInputControllerInput.Value">
            <summary>
            Gets the value of the input.
            </summary>
            <value>
            The value of the input.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Input.SimpleInputController">
            <summary>
            A basic light-weight input controller that gets its input directly from the craft controls of its command pod.
            </summary>
            <seealso cref="T:ModApi.Craft.Parts.Input.IInputController" />
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputController._deactivatedValue">
            <summary>
            The value of the input controller when it is deactivated.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputController._getValue">
            <summary>
            The delegate used to get the input value from the craft controls.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputController._partData">
            <summary>
            The part data for the part modifier that uses this input controller.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputController._partScript">
            <summary>
            The part script for the part modifier that uses this input controller.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputController._value">
            <summary>
            The current value of the input controller.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Input.SimpleInputController.#ctor(System.String,ModApi.Craft.Parts.PartModifierScript,System.Func{ModApi.Craft.CraftControls,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Input.SimpleInputController"/> class.
            </summary>
            <param name="id">The input identifier.</param>
            <param name="partModifier">The part modifier that uses this input controller.</param>
            <param name="getValue">The delegate used to get the input value from the craft controls.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Input.SimpleInputController.#ctor(System.String,ModApi.Craft.Parts.PartModifierScript,System.Func{ModApi.Craft.CraftControls,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Input.SimpleInputController"/> class.
            </summary>
            <param name="id">The input identifier.</param>
            <param name="partModifier">The part modifier that uses this input controller.</param>
            <param name="getValue">The delegate used to get the input value from the craft controls.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.SimpleInputController.Active">
            <summary>
            Gets a value indicating whether the control associated with the input controller is currently active.
            </summary>
            <value>
              <c>true</c> if the control associated with the input controller is currently active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.SimpleInputController.InputId">
            <summary>
            Gets the input identifier.
            </summary>
            <value>
            The input identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.SimpleInputController.Value">
            <summary>
            Gets the current value of the control associated with the input controller.
            </summary>
            <value>
            The current value of the control associated with the input controller.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1">
            <summary>
            A basic light-weight input controller that gets its input directly from a delegate with a strongly typed part modifier.
            </summary>
            <typeparam name="T">The type of the part modifier.</typeparam>
            <seealso cref="T:ModApi.Craft.Parts.Input.IInputController" />
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1._deactivatedValue">
            <summary>
            The value of the input controller when it is deactivated.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1._getValue">
            <summary>
            The delegate used to get the input value from the part modifier.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1._partData">
            <summary>
            The part data for the part modifier that uses this input controller.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1._partModifier">
            <summary>
            The part modifier that uses this input controller.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1._partScript">
            <summary>
            The part script for the part modifier that uses this input controller.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1._value">
            <summary>
            The current value of the input controller.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1.#ctor(System.String,`0,System.Func{`0,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1"/> class.
            </summary>
            <param name="id">The input identifier.</param>
            <param name="partModifier">The part modifier that uses this input controller.</param>
            <param name="getValue">The delegate used to get the input value from the part modifier.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1.Active">
            <summary>
            Gets a value indicating whether the control associated with the input controller is currently active.
            </summary>
            <value>
              <c>true</c> if the control associated with the input controller is currently active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1.InputId">
            <summary>
            Gets the input identifier.
            </summary>
            <value>
            The input identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Input.SimpleInputControllerGeneric`1.Value">
            <summary>
            Gets the current value of the control associated with the input controller.
            </summary>
            <value>
            The current value of the control associated with the input controller.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Modifiers.ConfigData">
            <summary>
            Part modifier for general data about a part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._addFlightProgramButton">
            <summary>
            The add flight program button.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._autoActivateIfNoStageOrActivationGroup">
            <summary>
            Indicates whether to automatically activate this part if it doesn't belong to a stage or activation group.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._buoyancyBaseScale">
            <summary>
            The buoyancy base scale
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._buoyancyUserScale">
            <summary>
            The buoyancy user scale
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._centerOfMass">
            <summary>
            The center of mass
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._changeCommandPod">
            <summary>
            The change command pod button.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._collisionDisconnectImpulse">
            <summary>
            The collision disconnect impulse
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._collisionDisconnectVelocity">
            <summary>
            The collision disconnect velocity
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._collisionExplodeImpulse">
            <summary>
            The collision explode impulse
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._collisionExplodeVelocity">
            <summary>
            The collision explode velocity
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._collisionPreventExternalDisconnections">
            <summary>
            The collision prevent external disconnections
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._collisionVelocityMode">
            <summary>
            The collision velocity mode
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._descriptionLabel">
            <summary>
            The debug label
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._dragScale">
            <summary>
            The drag scale for the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._fuelLine">
            <summary>
            The fuel line override
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._heatShield">
            <summary>
            The heat shield
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._includeInDrag">
            <summary>
            The include in drag flag.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._inertiaTensorBaseScale">
            <summary>
            The inertia tensor base scale
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._inertiaTensorMin">
            <summary>
            The inertia tensor minimum
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._inertiaTensorUserScale">
            <summary>
            The inertia tensor user scale
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._massScale">
            <summary>
            The mass scale
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._maxDamage">
            <summary>
            The maximum damage
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._maxTemperature">
            <summary>
            The maximum temperature
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._partCollisionHandling">
            <summary>
            The part collision handling
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._partCollisionResponse">
            <summary>
            The part collision response
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._partIdLabel">
            <summary>
            The part identifier label
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._partScale">
            <summary>
            The part scale
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._partScaleMagnitude">
            <summary>
            The part scale magnitude
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._preventDebris">
            <summary>
            The prevent debris flag if true the part should not be considered debris on separation
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._raiseWaterEventsEvenIfNotBuoyant">
            <summary>
            The raise water events even if not buoyant
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._showHiddenPartProperties">
            <summary>
            A value indicating whether hidden part properties should be shown.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._stageActivationType">
            <summary>
            The stage activation type
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._supportsActivation">
            <summary>
            The supports activation
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._thermalMassRatio">
            <summary>
            The thermal mass ratio
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._tinkerPanelEnabled">
            <summary>
            The tinker panel enabled
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigData._viewCommandPod">
            <summary>
            The view command pod button.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.AutoActivateIfNoStageOrActivationGroup">
            <summary>
            Gets a value indicating whether to automatically activate this part if it doesn't belong to a stage or activation group.
            </summary>
            <value>
              <c>true</c> if this part will automatically activate if it doesn't belong to a stage or activation group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.BuoyancyBaseScale">
            <summary>
            Gets the base value to scale this part's buoyancy by.
            </summary>
            <value>
            The base value to scale this part's buoyancy by.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.BuoyancyUserScale">
            <summary>
            Gets the user-configurable value to scale buoyancy by.
            </summary>
            <value>
            The value to scale this part's buoyancy by.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CanExplode">
            <summary>
            Gets a value indicating whether this part can explode.
            </summary>
            <value>
              <c>true</c> if this part can explode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CenterOfMass">
            <summary>
            Gets or sets the center of mass.
            </summary>
            <value>
            The center of mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CollisionDisconnectImpulse">
            <summary>
            Gets the maximum impulse this part can absorb from a collision before it disconnects.
            </summary>
            <value>
            The collision impulse in scaled Newton seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CollisionDisconnectVelocity">
            <summary>
            Gets the maximum velocity this part can absorb from a collision before it disconnects.
            </summary>
            <value>
            The collision velocity in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CollisionExplodeImpulse">
            <summary>
            Gets the maximum impulse this part can absorb from a collision before it explodes.
            </summary>
            <value>
            The collision impulse in scaled Newton seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CollisionExplodeVelocity">
            <summary>
            Gets the maximum velocity this part can absorb from a collision before it explodes.
            </summary>
            <value>
            The collision velocity in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CollisionPreventExternalDisconnections">
            <summary>
            Gets a value indicating whether this part wants to prevent other parts from disconnecting from it.  This is distinct
            from <see cref="F:ModApi.Craft.Parts.PartCollisionResponseType.None" /> since that only deals with "us" initiating the disconnection.
            This property deals with other parts initiating a disconnect from us.
            </summary>
            <value>
              <c>true</c> if this part wants to prevent other parts from disconnecting from this part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.CollisionVelocityMode">
            <summary>
            Gets the collision velocity mode, which is used to determine how to use the velocity in
            a collision when calculating if the part should disconnect/explode.
            </summary>
            <value>
            The collision velocity mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.DragScale">
            <summary>
            Gets the drag scale, which can be used to increase or decrease the amount of drag the
            part receives.
            </summary>
            <value>
            The drag scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.FuelLineOverride">
            <summary>
            Gets a value indicating whether this part has a fuel line override enabled.
            This will allow fuel to pass through any attach points on this part.
            </summary>
            <value>
            <c>true</c> if fuel line override is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.HeatShield">
            <summary>
            Gets or sets the heat shield for this part.
            </summary>
            <value>
            The heat shield.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.IncludeInDrag">
            <summary>
            Gets a value indicating whether to include this part in the drag calculation. If this is false
            then the part will not be included and parts that would otherwise be occluded by this part will
            start to receive drag.
            </summary>
            <value>
              <c>true</c> if include this part is included in the drag calculation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.InertiaTensorBaseScale">
            <summary>
            Gets the inertia tensor base scale, which is multiplied by the body's inertia tensor containing
            this part. This can be used to increase stability for wobbly parts.
            part
            </summary>
            <value>
            The inertia tensor scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.InertiaTensorMin">
            <summary>
            Gets the inertia tensor minimum, which is the minimum amount of inertia tensor to use
            in a body that contains this part.
            </summary>
            <value>
            The inertia tensor minimum.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.InertiaTensorUserScale">
            <summary>
            Gets the user-defined inertia tensor scale.
            part
            </summary>
            <value>
            The user-defined inertia tensor scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.MassScale">
            <summary>
            Gets the mass scale, which can be used to manipulate the mass of a part.
            Normally, this this is set to 1.0.
            </summary>
            <value>
            The mass scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.MaxDamage">
            <summary>
            Gets the maximum damage the part can take before exploding.
            </summary>
            <value>
            The maximum damage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.MaxTemperature">
            <summary>
            Gets the maximum temperature, in Kelvin, that a part can withstand. Anything above this
            begins damaging the part.
            </summary>
            <value>
            The maximum temperature.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.PartCollisionHandling">
            <summary>
            Gets the part collision handling method. If this is default, then it will fall back
            to the collision method defined on the PartType.
            </summary>
            <value>
            The part collision handling method.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.PartCollisionResponse">
            <summary>
            Gets the part collision response.
            </summary>
            <value>
            The part collision response.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.PartScale">
            <summary>
            Gets the part scale.
            </summary>
            <value>
            The part scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.PartThermalMassRatio">
            <summary>
            Gets the thermal mass ratio, which is the percentage of the part's mass that should be used
            when calculating its thermal qualities, such as temperature.
            </summary>
            <value>
            The thermal mass ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.PreventDebris">
            <summary>
            Gets or sets a value indicating whether to prevent this part (and any connected parts) from being
            considered debris if it separates from the player craft.
            </summary>
            <value>
              <c>true</c> if this part should not be considered debris on separation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.RaiseWaterEventsEvenIfNotBuoyant">
            <summary>
            Gets a value indicating whether to raise water events even if the part is not buoyant.
            </summary>
            <value>
              <c>true</c> if water events should be raised even if the part is not buoyant; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.ShowHiddenPartProperties">
            <summary>
            Gets or sets a value indicating whether hidden part properties should be shown.
            </summary>
            <value>
              <c>true</c> if hidden part properties should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.StageActivationType">
            <summary>
            Gets the stage activation type for this part.
            </summary>
            <value>
            The stage activation type for this part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.SupportsActivation">
            <summary>
            Gets a value indicating whether this part can be activated.
            </summary>
            <value>
            <c>true</c> if the part can be activated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.ConfigData.TinkerPanelEnabled">
            <summary>
            Gets or sets a value indicating whether the tinker panel is enabled.
            </summary>
            <value>
              <c>true</c> if the tinker panel is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.OnDesignerCraftStructureChanged">
            <summary>
            Called when the craft structure has changed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.CreateScriptComponent(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Creates the Unity MonoBehaviour for the part modifier and associates it with a game object.
            </summary>
            <param name="partScript">The part script.</param>
            <returns>
            The created part modifier script.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.OnCreated(System.Xml.Linq.XElement)">
            <summary>
            Called when the part modifier is created.
            This is where the default values are read from the part modifier definition and loaded as the modifier's default values.
            </summary>
            <param name="partModifierXml">The XML that defines the part modifier and its default values.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.OnDesignerInitialization(ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface)">
            <summary>
            Called when the part modifier data is initialized in the designer scene.
            </summary>
            <param name="d">The designer part properties.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.ChangeCommandPod">
            <summary>
            Prompts the user to select a new command pod for the part.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.UpdatePartScale(System.Single)">
            <summary>
            Updates the part scale.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigData.UpdateSymmetryAndCraftStructure">
            <summary>
            Updates the symmetry and craft structure.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Modifiers.ConfigScript">
            <summary>
            Script for the General modifier.
            </summary>
            <seealso cref="!:ModApi.Craft.Parts.PartModifierScript&lt;ModApi.Craft.Parts.Modifiers.ConfigData&gt;" />
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigScript._bodiesOutdated">
            <summary>
            The bodies outdated
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Modifiers.ConfigScript._bodyId">
            <summary>
            The current body identifier
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigScript.GetBodyId">
            <summary>
            Gets the current body ID for this part. If necessary, the body data lists will be recalculated.
            </summary>
            <returns>The body ID.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Modifiers.ConfigScript.OnCraftStructureChanged(ModApi.Craft.ICraftScript)">
            <summary>
            Called when the craft structure has changed.
            </summary>
            <param name="craftScript">The craft script.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine">
            <summary>
            Interface for a reaction engine.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.IsActive">
            <summary>
            Gets a value indicating whether this reaction engine is active.
            </summary>
            <value>
            <c>true</c> if this reaction engine is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.CurrentMassFlowRate">
            <summary>
            Gets the current mass flow rate of the engine in kg/s.
            </summary>
            <value>
            The mass flow rate in kg/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.CurrentThrust">
            <summary>
            Gets the current thrust of the engine.
            </summary>
            <value>
            The current thrust in scaled Newtons.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.FuelSource">
            <summary>
            Gets the fuel source.
            </summary>
            <value>
            The fuel source.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.MaximumMassFlowRate">
            <summary>
            Gets the maximum mass flow rate of the engine in kg/s.
            </summary>
            <value>
            The maximum mass flow rate in kg/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.MaximumThrust">
            <summary>
            Gets the maximum thrust of the engine in scaled Newtons.
            </summary>
            <value>
            The thrust in scaled Newtons.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.ThrottleResponse">
            <summary>
            Gets the throttle response, which determines how quickly the engine responds to
            throttle input. A value of 1.0 would allow the engine to reach 100% throttle in one second.
            Value of 0.5 would require two seconds to reach 100% throttle.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.Part">
            <summary>
            Gets the part.
            </summary>
            <value>
            The part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.RemainingFuel">
            <summary>
            Gets the remaining fuel.
            </summary>
            <value>
            The remaining fuel in kg.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Modifiers.Propulsion.IReactionEngine.SupportsWarpBurn">
            <summary>
            Gets a value indicating whether this engine supports burning during time warp.
            </summary>
            <value>
              <c>true</c> if this engine supports burning during time warp; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.PartColliderScript">
            <summary>
            A script containing configuration data for a part collider attached to the same game object.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Craft.Parts.PartColliderScript._ignoreDesignerCollisions">
            <summary>
            If set to <c>true</c>, the collider will be ignore when detecting collisions while placing parts in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartColliderScript._isPrimary">
            <summary>
            Indicates that this collider is the primary collider for the part.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartColliderScript.Collider">
            <summary>
            Gets the collider associated with this script.
            </summary>
            <value>
            The collider associated with this script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartColliderScript.IgnoreDesignerCollisions">
            <summary>
            Gets a value indicating whether the collider will be ignore when detecting collisions while placing parts in the designer.
            </summary>
            <value>
              <c>true</c> if the collider will be ignore when detecting collisions while placing parts in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartColliderScript.IsPrimary">
            <summary>
            Gets a value indicating whether this collider is the primary collider for the part.
            </summary>
            <value>
              <c>true</c> if this collider is the primary collider for the part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartColliderScript.AddAsPrimary(UnityEngine.GameObject)">
            <summary>
            Adds the component as the primary collider for the part.
            </summary>
            <param name="obj">The game object to which to add the collider.</param>
            <returns>The collider script that was added to the object.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartColliderScript.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartCollision">
            <summary>
            A class representing a design time collider intersection between two parts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollision._assembly">
            <summary>
            The assembly.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartCollision.#ctor(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartCollision" /> class.
            </summary>
            <param name="partA">The part A.</param>
            <param name="partB">The part B.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartCollision.#ctor(ModApi.Craft.Parts.PartData,System.String,ModApi.Craft.Parts.PartData,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartCollision" /> class.
            </summary>
            <param name="partA">The part A.</param>
            <param name="colliderNameA">The name of part A's collider that is involved in the collision.</param>
            <param name="partB">The part B.</param>
            <param name="colliderNameB">The name of part B's collider that is involved in the collision.</param>
            <param name="autoGenerated">Set to <c>true</c> if the collision was automatically generated.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.PartCollision.Assembly">
            <summary>
            Gets the assembly that contains the part connection.
            </summary>
            <value>
            The assembly that contains the part connection.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartCollision.AutoGenerated">
            <summary>
            Gets a value indicating whether the collision was automatically generated or manually created (likely via XML modding).
            </summary>
            <value>
              <c>true</c> if the collision was automatically generated or manually created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartCollision.ColliderNameA">
            <summary>
            Gets the collider name for part A.
            </summary>
            <value>
            The collider name for part A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartCollision.ColliderNameB">
            <summary>
            Gets the collider name for part B.
            </summary>
            <value>
            The collider name for part B.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartCollision.PartA">
            <summary>
            Gets the part A.
            </summary>
            <value>
            The part A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartCollision.PartB">
            <summary>
            Gets the part B.
            </summary>
            <value>
            The part B.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartCollision.Create(System.Xml.Linq.XElement,ModApi.Craft.Assembly)">
            <summary>
            Creates the part collision object from the specified XML.
            If an error occurs and the object could not be created, a <c>null</c> will be returned.
            </summary>
            <param name="xml">The XML from which to create the part collision object.</param>
            <param name="assembly">The assembly for which the part collision is being created.</param>
            <returns>The requested part collision object or <c>null</c> if it could not be created.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartCollision.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The collision element.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartCollision.GetOtherPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Gets the other part in the collision.
            </summary>
            <param name="part">The part.</param>
            <returns>The other part or <c>null</c> if the specified part is not involved in this collision.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartCollision.SetAssembly(ModApi.Craft.Assembly)">
            <summary>
            Sets the assembly that contains the part connection.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartCollisionHandlingMethod">
            <summary>
            An enumeration defining the different methods for handling part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionHandlingMethod.Default">
            <summary>
            The default method.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionHandlingMethod.AutoDisablePerPart">
            <summary>
            Part collisions are automatically disabled for all colliders between two colliding parts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionHandlingMethod.AutoDisablePerCollider">
            <summary>
            Part collisions are automatically disabled for each collider involved in a collision between two parts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionHandlingMethod.Never">
            <summary>
            Part collisions should never occur.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionHandlingMethod.Always">
            <summary>
            Part collisions should always occur.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartCollisionVelocityMode">
            <summary>
            List of modes that determine how a part will look at its collision velocity when calculating
            if it needs to disconnect or explode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionVelocityMode.None">
            <summary>
            The part does not consider collision velocity.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionVelocityMode.OmniDirectional">
            <summary>
            The magnitude of the collision velocity will be used, regardless of its direction.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartCollisionVelocityMode.NormalOnly">
            <summary>
            Only the component of the collision velocity that is aligned with the collision normal
            will be used. For example, a skipping rock with 100m/s lateral velocity and 5m/s vertical velocity
            will only consider the 5m/s velocity when colliding with the ground.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartConnectedEventData">
            <summary>
            Provides information when parts are connected in the designer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnectedEventData.#ctor(ModApi.Craft.Parts.AttachPoint,ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.AttachPoint,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartConnectedEventData" /> class.
            </summary>
            <param name="thisAttachPoint">The this attach point.</param>
            <param name="targetPart">The target part.</param>
            <param name="targetAttachPoint">The target attach point.</param>
            <param name="processingSymmetry">if set to <c>true</c> then processing symmetry.</param>
            <param name="newConnection">if set to <c>true</c> if this is new connection or an additional attachment to an existing connection.</param>
            <param name="processedFirst">if set to <c>true</c> then this event is being processed first.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnectedEventData.IsNewConnection">
            <summary>
            Gets a value indicating whether this is a new part connection, otherwise this is an additional
            attachment on an existing part connection.
            </summary>
            <value>
              <c>true</c> if this is a new connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnectedEventData.IsProcessedFirst">
            <summary>
            Gets a value indicating whether this event is being processed first. When a part connection happens, two parts receive notifications.
            This flag indicates if the this is the first part or the second part to receive the notification.
            </summary>
            <value>
              <c>true</c> if this is processed first; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnectedEventData.IsProcessingSymmetry">
            <summary>
            Gets a value indicating whether this part connection is the result of
            processing symmetry.
            </summary>
            <value>
              <c>true</c> if this instance is processing symmetry; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnectedEventData.TargetAttachPoint">
            <summary>
            Gets the attach point on the target part that this part is being attached to.
            </summary>
            <value>
            The target attach point.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnectedEventData.TargetPart">
            <summary>
            Gets the part that this part is connecting to.
            </summary>
            <value>
            The target part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnectedEventData.ThisAttachPoint">
            <summary>
            Gets the attach point belonging to the part receiving this event.
            </summary>
            <value>
            The attach point.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.PartConnection">
            <summary>
            Defines a connection between two parts and all overlapping attach points.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartConnection._assembly">
            <summary>
            The assembly.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.#ctor(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartConnection" /> class.
            </summary>
            <param name="partA">The part a.</param>
            <param name="partB">The part b.</param>
            <exception cref="T:System.Exception">PartConnection: PartA and PartB cannot be the same part.</exception>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.#ctor(System.Xml.Linq.XElement,ModApi.Craft.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartConnection" /> class.
            </summary>
            <param name="xml">The XML element.</param>
            <param name="assembly">The assembly to pull parts from.</param>
            <exception cref="T:System.Exception">PartConnection: Unequal number of attach points between part A and part B.</exception>
        </member>
        <member name="T:ModApi.Craft.Parts.PartConnection.PartConnectionDelegate">
            <summary>
            Delegate for par connection events.
            </summary>
            <param name="partConnection">The part connection.</param>
        </member>
        <member name="E:ModApi.Craft.Parts.PartConnection.Destroyed">
            <summary>
            Occurs when the part connection is destroyed.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.AllowManualDelete">
            <summary>
            Gets or sets a value indicating whether this part connection can be deleted manually
            via the part connections panel.
            </summary>
            <value>
              <c>true</c> if the part connection can be manual deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>
            The attachments.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.BodyJointData">
            <summary>
            Gets or sets the body joint data. Part connections that connect two bodies will have
            a BodyJointData. Otherwise, this will be null.
            </summary>
            <value>
            The body joint data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.IsDestroyed">
            <summary>
            Gets a value indicating whether [is destroyed].
            </summary>
            <value>
              <c>true</c> if [is destroyed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.IsPhysicsJoint">
            <summary>
            Gets a value indicating whether or not this part connection will be represented with
            a physics joint at runtime.
            </summary>
            <value>
              <c>true</c> if it is a physics joint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.PartA">
            <summary>
            Gets the part a.
            </summary>
            <value>
            The part a.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.PartB">
            <summary>
            Gets the part b.
            </summary>
            <value>
            The part b.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.SymmetryId">
            <summary>
            Gets or sets the symmetry identifier, which links this part connection with all other part connections that have been
            created via symmetry mode.
            </summary>
            <value>
            The symmetry identifier.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.GetPartConnectionsBetweenParts(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Gets all part connections between two parts.
            </summary>
            <param name="partA">The part a.</param>
            <param name="partB">The part b.</param>
            <returns>The list of part connections between the two parts.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.AddAttachment(ModApi.Craft.Parts.AttachPoint,ModApi.Craft.Parts.AttachPoint)">
            <summary>
            Adds the attachment to this connection, which links one attach point from Part A to one attach point from Part B.
            </summary>
            <param name="attachPointA">The attach point from part A for this attachment.</param>
            <param name="attachPointB">The attach point from part B for this attachment.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.DestroyAttachment(ModApi.Craft.Parts.PartConnection.Attachment)">
            <summary>
            Destroys the attachment.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.DestroyConnection">
            <summary>
            Destroys the connection.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The connection element.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.GetOtherPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Gets the other part in the connection.
            </summary>
            <param name="part">The part.</param>
            <returns>
            The other part.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.SetAssembly(ModApi.Craft.Assembly)">
            <summary>
            Sets the assembly that contains the part connection.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.DestroyAttachment(ModApi.Craft.Parts.PartConnection.Attachment,System.Boolean)">
            <summary>
            Destroys the attachment.
            </summary>
            <param name="attachment">The attachment.</param>
            <param name="removeFromList">if set to <c>true</c> then remove the attachment from the list.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.Initialize(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Initializes the part connection with the parts.
            </summary>
            <param name="partA">The part a.</param>
            <param name="partB">The part b.</param>
            <exception cref="T:System.Exception">PartConnection: PartA and PartB cannot be the same part.</exception>
        </member>
        <member name="T:ModApi.Craft.Parts.PartConnection.Attachment">
            <summary>
            Contains the attach points that are connected to each other.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.Attachment.AttachPointA">
            <summary>
            Gets or sets the attach point from part A for this attachment.
            </summary>
            <value>
            The attach point from part A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartConnection.Attachment.AttachPointB">
            <summary>
            Gets or sets the attach point from part B for this attachment.
            </summary>
            <value>
            The attach point from part B.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartConnection.Attachment.GetOtherAttachPoint(ModApi.Craft.Parts.AttachPoint)">
            <summary>
            Gets the other attach point.
            </summary>
            <param name="attachPoint">The attach point.</param>
            <returns>The other attach point.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.PartData">
            <summary>
            A part is a complete object, which is either added or removed as a whole in the designer.
            This is different from "Modifiers" which may be used to change a Part's behavior.
            Once constructed, parts are capable of producing XML to fully describe themselves,
            or a UNITY GameObject to do the same.
            Typically, it is only used used for IO purposes, such as saving to an xml file, or
            loading from XML to create an object for design/simulation.
            <para />
            The Part class defines an object in its entirety.  If you can construct an Part by
            any fashion, you should be able to get a GameObject, and use it in simulation mode.
            Likewise, any Part (GameObject w/a PartScript) should be able to be used to construct
            a Part and used to generate XML for saving purposes.
            <para />
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartData._commandPod">
            <summary>
            The command pod
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartData._enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartData._modifiers">
            <summary>
            The part modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartData._preferredNodeName">
            <summary>
            The preferred node name. <seealso cref="P:ModApi.Craft.Parts.PartData.PreferredNodeName"/>
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.#ctor(System.Xml.Linq.XElement,System.Int32,ModApi.Craft.Parts.PartType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartData" /> class.
            </summary>
            <param name="xml">The part XElement to create the part from.</param>
            <param name="xmlVersion">The XML version.</param>
            <param name="partType">Type of the part.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartData.PropertyChangedHandler">
            <summary>
            Delegate for events related to properties changing.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartData.Created">
            <summary>
            Occurs when a part data object has been created.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartData.Creating">
            <summary>
            Occurs when a part data object is being created.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartData.EnabledChanged">
            <summary>
            Occurs when <see cref="P:ModApi.Craft.Parts.PartData.Enabled"/> changes.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Activated">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.Parts.PartData"/> is activated.
            </summary>
            <value>
              <c>true</c> if activated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.ActivationGroup">
            <summary>
            Gets or sets the activation group.
            </summary>
            <value>
            The activation group.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.ActivationStage">
            <summary>
            Gets or sets the activation stage.
            </summary>
            <value>
            The activation stage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.ActivationStageOverride">
            <summary>
            Gets or sets a value indicating whether the user has overridden the automatic assigned activation stage for this part.
            </summary>
            <value>
            <c>true</c> if [activation stage override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.AttachPoints">
            <summary>
            Gets the attach points.
            </summary>
            <value>
            The attach points.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.BuoyancyScale">
            <summary>
            Gets the value to scale this part's buoyancy by.  A value of 1 would indicate default buoyancy for the volume of this part's collider.  A value lower would indicate that the
            part is porous.  Set to zero to disable buoyancy for a part.  This is a rolled-up value based on BuoyancyBaseScale and BuoyancyUserScale.
            </summary>
            <value>
            The value to scale this part's buoyancy by.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.CommandPod">
            <summary>
            Gets or sets the command pod that controls this part.
            </summary>
            <value>
            The command pod.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.CommandPodId">
            <summary>
            Gets the command pod part ID.
            </summary>
            <value>
            The command pod part ID.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Config">
            <summary>
            Gets the additional config data for the part from its config modifier.
            </summary>
            <value>
            The config modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Damage">
            <summary>
            Gets or sets the damage.
            </summary>
            <value>
            The damage.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.EmptyMass">
            <summary>
            Gets the empty mass, without considering the mass of the modifiers.
            Note: This mass has been scaled by Constants.MassScale.
            </summary>
            <value>
            The empty mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Enabled">
            <summary>
            Gets or sets a value indicating whether this part is enabled.
            </summary>
            <value>
              <c>true</c> if this part is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.GroupId">
            <summary>
            Gets or sets the group identifier, which is used to group parts together so they stay in tact when
            disconnecting from the craft in the designer.
            </summary>
            <value>
            The group identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.InertiaTensorScale">
            <summary>
            Gets the value to scale this part's body's inertia tensor by. It is the result of the user's tensor scale times the part type's base tensor scale.
            </summary>
            <value>
            The value to scale this part's body's inertia tensor by.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
              <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.IsRootPart">
            <summary>
            Gets or sets a value indicating whether this is the root part of the craft.
            </summary>
            <value>
              <c>true</c> if it is the root part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.LoadedMass">
            <summary>
            Gets the current total mass of the part, including all modifiers.
            Note: This mass has been scaled by Constants.MassScale.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.LoadModifierFailures">
            <summary>
            Gets or sets the list of modifier load failures.
            </summary>
            <value>
            The list of modifier load failures.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.MaterialIds">
            <summary>
            Gets or sets the primary material IDs. These are indexes into the solid part texture. Negative
            IDs are used for standard colors, such as black, etc that cannot be changed by a theme.
            </summary>
            <value>
            The primary material IDs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Mirrored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.Parts.PartData"/> is mirrored.
            </summary>
            <value>
              <c>true</c> if mirrored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.ModifierMass">
            <summary>
            Gets the modifier mass.
            Note: This mass is scaled by Constants.MassScale.
            Note: Modifiers are responsible for scaling their own masses by Constants.MassScale.
            </summary>
            <value>
            The modifier mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Modifiers">
            <summary>
            Gets the part modifiers.
            </summary>
            <value>
            The part modifiers.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Name">
            <summary>
            Gets or sets the name of the part the user has given the part in the designer.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.PartConnections">
            <summary>
            Gets the part connections.
            </summary>
            <value>
            The part connections.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.PartDrag">
            <summary>
            Gets the part drag. The drag directions are relative to the orientation of the body containing the part, and not the part's orientation.
            </summary>
            <value>
            The part drag.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.PartScript">
            <summary>
            Gets or sets the part script.
            </summary>
            <value>
            The part script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.PartType">
            <summary>
            Gets or sets the type of the part.
            </summary>
            <value>
            The type of the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Position">
            <summary>
            Gets the position of the part relative to the craft's origin. Once the part script is created
            this property will become out of sync, unless Synchronize is called.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.PreferredNodeName">
            <summary>
            Gets or sets the preferred node name assigned to this part. If this part is the root part when the craft is created, its value will be used
            to set the craft node's name.  As long as it is the root part, any changes to the node's name will also be made to this property (but not vice versa).
            If set to <c>null</c>, default craft node naming will be used.
            </summary>
            <value>
            The name of the preferred node.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.PreviouslyActivated">
            <summary>
            Gets or sets a value indicating whether this part has ever been activated before
            </summary>
            <value>
              <c>true</c> if [previously activated]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Price">
            <summary>
            Gets the price of the part, which includes all of its modifiers.
            </summary>
            <value>
            The price of the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Rotation">
            <summary>
            Gets the rotation of the part relative to the craft's transform. Once the part script is created
            this property will become out of sync, unless Synchronize is called.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Styles">
            <summary>
            Gets the styles for the part.
            </summary>
            <value>
            The styles for the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.SymmetryId">
            <summary>
            Gets or sets the symmetry identifier, which links this part with all other parts that have been
            created via symmetry mode.
            </summary>
            <value>
            The symmetry identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.SymmetryMode">
            <summary>
            Gets or sets the symmetry mode for the part. This is not serialized (at least not at the time of this comment)
            and it is only used in the designer for convenience so the designer doesn't forget what symmetry mode to use
            for a part if it is pulled of briefly from the craft.
            This is only set on the root part of the SymmetrySlice. For checking symmetry mode, use PartScript.SymmetrySlice.SymmetryGroup.SymmetryMode
            </summary>
            <value>
            The symmetry mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.Tag">
            <summary>
            Gets or sets the "tag" value.  Tag is not used by the game, but is intended to be used by XML modders, or modders in general to identify parts (i.e tag="Left Elevon") to make
            testing changes easer.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.ThemeData">
            <summary>
            Gets or sets the theme data.
            </summary>
            <value>
            The theme data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartData.ThemeDataId">
            <summary>
            Gets or sets the ID of the theme that the part should use. If this is null, then the part should use the first
            theme in the craft's list of themes. This is used when crafts merge with other crafts and they must maintain
            separate themes for parts.
            </summary>
            <value>
            The theme identifier.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.op_Inequality(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left hand side.</param>
            <param name="b">The right hand side.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.op_Equality(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left hand side.</param>
            <param name="b">The right hand side.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.ToPartScriptList(System.Collections.Generic.List{ModApi.Craft.Parts.PartData})">
            <summary>
            Converts the list to a list of part scripts.
            </summary>
            <param name="parts">The parts.</param>
            <returns>
            The part script list.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GenerateXml(UnityEngine.Transform,System.Boolean)">
            <summary>
            Generates the XElement to fully describe this object for serialization purposes.
            </summary>
            <param name="craftTransform">The craft transform.</param>
            <param name="optimizeXml">If set to <c>true</c>, the generated XML will be optimized where possible.</param>
            <returns>
            The XElement to fully describe this object for serialization purposes.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetAttachPoint(System.String)">
            <summary>
            Gets the attach point by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The attach point, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetAttachPoint(System.Int32)">
            <summary>
            Gets the attach point with the ID.
            </summary>
            <param name="attachPointId">The attach point ID.</param>
            <returns>
            The attach point, or null if it doesn't exist.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetMaterial(ModApi.Craft.Parts.PartMeshMaterialLevel)">
            <summary>
            Gets the part material of the specified level for this part.
            </summary>
            <param name="level">The material level of the material to retrieve.</param>
            <returns>The requested material.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetModifier``1">
            <summary>
            Gets the modifier.
            </summary>
            <typeparam name="T">The type of the modifier to get.</typeparam>
            <returns>The modifier or null if it does not contain one.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetModifierById(System.String)">
            <summary>
            Gets the modifier by the specified id.
            </summary>
            <param name="id">The id of the modifier to retrieve.</param>
            <returns>The requested modifier or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetModifierByTypeId(System.String)">
            <summary>
            Gets the modifier by the specified type id.
            </summary>
            <param name="typeId">The type id of the modifier to retrieve.</param>
            <returns>The requested modifier or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetModifierCount(System.Type,System.Boolean)">
            <summary>
            Gets the number of modifiers of the specified type.
            </summary>
            <param name="type">The type of modifiers to consider.</param>
            <param name="inherit">If set to <c>true</c>, modifiers that inherit from the specified type will be considered as well.</param>
            <returns>The number of modifiers that match the specified criteria.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetModifiers``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the modifiers of the specified type.
            </summary>
            <typeparam name="T">The type of the modifier to get.</typeparam>
            <param name="modifiers">The list to be updated with any matching modifiers that were found.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetModifiers(System.Type,System.Boolean,System.Collections.Generic.List{ModApi.Craft.Parts.PartModifierData})">
            <summary>
            Gets the modifiers of the specified type.
            </summary>
            <param name="type">The type of the modifier to get.</param>
            <param name="inherit">If set to <c>true</c>, modifiers that inherit from the specified type will be considered as well.</param>
            <param name="modifiers">The list to be updated with any matching modifiers that were found.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.GetPartConnection(ModApi.Craft.Parts.PartData)">
            <summary>
            Gets the part connection to the specified part.
            </summary>
            <param name="part">The part.</param>
            <returns>
            The part connection or null if a part connection does not exist between the two parts
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.OnPartDestroyed">
            <summary>
            Destroys the part.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.OnModifierAdded(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Called when a modifier is being added to the part.
            </summary>
            <param name="partModifierData">The part modifier data for the modifier that is being added.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.OnModifierRemoved(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Called when a modifier is being removed from the part.
            </summary>
            <param name="modifier">The part modifier data for the modifier that is being removed.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.InitializeConfigModifier">
            <summary>
            Initializes the config modifier.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.LoadStyleData(System.Xml.Linq.XElement)">
            <summary>
            Loads the style data for the part.
            </summary>
            <param name="xml">The XML from which to load the style data.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartData.Synchronize(UnityEngine.Transform)">
            <summary>
            Synchronizes the part position and rotation with the part's script, relative to the craft transform.
            </summary>
            <param name="craftTransform">The craft transform.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartGraph">
            <summary>
            Class that traverses a part's connections and builds a list of parts in the graph.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartGraph._includedParts">
            <summary>
            If not set to null, then the parts considered to be in the part graph must be in this list as well.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartGraph._visitedNodes">
            <summary>
            The visited nodes.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.#ctor(ModApi.Craft.Parts.PartData,System.Collections.Generic.Dictionary{ModApi.Craft.Parts.PartData,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartGraph"/> class.
            </summary>
            <param name="part">The part.</param>
            <param name="includedParts">The parts to consider for inclusion in the part graph.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.#ctor(ModApi.Craft.Parts.PartData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartGraph" /> class.
            </summary>
            <param name="part">The part to start building the graph from.</param>
            <param name="breakOnRigidBodyBoundary">if set to <c>true</c> [break on rigid body boundary].</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.#ctor(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.PartData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartGraph" /> class. Ignores the specified part.
            </summary>
            <param name="part">The part to start from.</param>
            <param name="ignorePart">The part to ignore.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.#ctor(ModApi.Craft.Parts.PartData,System.Collections.Generic.List{ModApi.Craft.Parts.PartConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartGraph" /> class.
            </summary>
            <param name="part">The part.</param>
            <param name="partConnectionsToIgnore">The part connections to ignore.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.PartGraph.HasRoot">
            <summary>
            Gets or sets a value indicating whether this part graph contains the root part.
            </summary>
            <value>
            <c>true</c> if it has the root part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartGraph.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.GetPartsConnectedToPartButNotConnectedToRootPart(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Gets the parts connected to the specified part, but not connected to the root part.
            </summary>
            <param name="part">The part.</param>
            <returns>The list of parts.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.IsPartIncluded(ModApi.Craft.Parts.PartData)">
            <summary>
            Determines whether is part included in the part graph.
            </summary>
            <param name="part">The part.</param>
            <returns>True if it is included, or false otherwise.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartGraph.Traverse(ModApi.Craft.Parts.PartData,System.Boolean,System.Collections.Generic.List{ModApi.Craft.Parts.PartConnection})">
            <summary>
            Traverses the graph starting with the specified part.
            </summary>
            <param name="initialPart">The initial part.</param>
            <param name="breakOnRigidBodyBoundary">if set to <c>true</c> [break on rigid body boundary].</param>
            <param name="partConnectionsToIgnore">The part connections to ignore.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartMaterial">
            <summary>
            Material for a part.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.DetailStrength">
            <summary>
            Gets or sets the detail strength of the material.
            </summary>
            <value>
            The detail strength of the material.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.EmissionStrength">
            <summary>
            Gets or sets the emission strength of the material.
            </summary>
            <value>
            The emission strength of the material.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.Metallic">
            <summary>
            Gets or sets the metallic property of the material.
            </summary>
            <value>
            The metallic property of the material.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.Smoothness">
            <summary>
            Gets or sets the smoothness of the material.
            </summary>
            <value>
            The smoothness of the material.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMaterial.SmoothnessModifier">
            <summary>
            Gets or sets the smoothness modifier.
            </summary>
            <value>
            The smoothness modifier.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.PartMeshMaterialLevel">
            <summary>
            An enumeration defining the different material levels.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshMaterialLevel.Primary">
            <summary>
            The primary material level.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshMaterialLevel.Trim1">
            <summary>
            The first trim material level.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshMaterialLevel.Trim2">
            <summary>
            The second trim material level.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshMaterialLevel.Trim3">
            <summary>
            The third trim material level.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshMaterialLevel.Trim4">
            <summary>
            The fourth trim material level.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartMeshRenderQueue">
            <summary>
            The available types of render queues to use for part meshes.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshRenderQueue.Default">
            <summary>
            The default render queue.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshRenderQueue.BeforeDepthMask">
            <summary>
            The part mesh should be rendered before depth masks.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartMeshScript">
            <summary>
            A component that contains part configuration information for a mesh render on the same object.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshScript._excludeFromDragModel">
            <summary>
            The exclude from drag model flag.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshScript._excludeFromMeshCombine">
            <summary>
            A value indicating if this mesh should be excluding from the combining of neighboring meshes.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshScript._excludeFromPartMaterials">
            <summary>
            The exclude from part materials
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshScript._renderQueue">
            <summary>
            The render queue to use for the part mesh.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartMeshScript._usesEmissiveOverride">
            <summary>
            A flag used by some modifiers to indicate that this mesh should be used when overriding the emissive-ness of the part material.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMeshScript.ExcludeFromDragModel">
            <summary>
            Gets or sets a value indicating whether to exclude this mesh from the drag model. By default,
            all mesh renderers are included in the drag calculation, so this flag can be set to remove
            specific renderers from the calculation.
            </summary>
            <value>
              <c>true</c> if the game object should be excluded from drag model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMeshScript.ExcludeFromMeshCombine">
            <summary>
            Gets or sets a value indicating whether this mesh should be excluding from the combining of neighboring meshes.
            </summary>
            <value>
            <c>true</c> if this mesh should be excluding from the combining of neighboring meshes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMeshScript.ExcludeFromPartMaterials">
            <summary>
            Gets or sets a value indicating whether to exclude this mesh from having its materials overwritten by the part.
            </summary>
            <value>
              <c>true</c> if mesh should be excluded from having its materials overwritten by the part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMeshScript.RenderQueue">
            <summary>
            Gets or sets the queue to use for the part mesh.
            </summary>
            <value>
            The render queue.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartMeshScript.UsesEmissiveOverride">
            <summary>
            Gets or sets a value indicating whether this mesh should be used when overriding the emissive-ness of the part material.
            </summary>
            <value>
              <c>true</c> if this mesh should be used when overriding the emissive-ness of the part material; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.PartModifierData">
            <summary>
            The base class for all part modifier data classes.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._EmptyEnumerableInt">
            <summary>
            The empty integer enumerable.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._allPropertiesLookup">
            <summary>
            The cached lookup table of type keys to their associated list of member names
            that have been identified as part modifier properties to be restored when a modifier is first created.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._createFromStateDefaultXmlLookup">
            <summary>
            A dictionary, keyed by modifier type, of default XML.
            When a modifier is created from state XML, there is no default XML for the modifier.
            Default XML is created for the type and cached here so state-created modifiers will have default XML.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._partModifierModMap">
            <summary>
            A dictionary of mods keyed by part modifier types. This is used to look up the mod responsible for a part modifier.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._partModifierTypes">
            <summary>
            A dictionary of part modifier types keyed by part modifier type ids.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._registeredAssemblies">
            <summary>
            The list of assemblies that have been scanned for part modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._serializer">
            <summary>
            The serializer used for saving and restoring state.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._statePropertiesLookup">
            <summary>
            The cached lookup table of type keys to their associated list of member names
            that have been identified as part modifier properties to be preserved as state values.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._typeIDLookup">
            <summary>
            The cached part modifier type id lookup table associating part modifier types with their type ids.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._designerPartProperties">
            <summary>
            The designer part properties object.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._disposed">
            <summary>
            A value indicating whether this modifier has been disposed.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._forceAllowSerializationOptimization">
            <summary>
            This is a hack used when saving designer parts.
            It is used to ignore the state preservation mode flags that prevent attribute removal for optimization purposes.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._id">
            <summary>
            The optional identifier for the part modifier.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._inputId">
            <summary>
            The input id for this part modifier.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._inspectorEnabled">
            <summary>
            The flag that determines if this part modifier should be visible in the inspector in flight.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._partPropertiesEnabled">
            <summary>
            The flag that determines if this part modifier should be visible in the part properties in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._staticPriceAndMass">
            <summary>
            The flag that determines if this part modifier contributes a static amount of mass/cost to the part (doesn't vary depending on size/configuration).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._symmetryId">
            <summary>
            The symmetry identifier.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartModifierData._typeId">
            <summary>
            The part modifier type id.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartModifierData"/> class.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartModifierData.Created">
            <summary>
            Occurs when a part modifier data object has been created.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartModifierData.Creating">
            <summary>
            Occurs when a part modifier data object is being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.DefaultXml">
            <summary>
            Gets the default XML for the part modifier.
            </summary>
            <value>
            The default XML for the part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.ModApi#Design#IDesignerPartModifierData#DesignerPartProperties">
            <summary>
            Gets the designer part properties interface.
            </summary>
            <value>
            The designer part properties interface.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.Id">
            <summary>
            Gets the optional identifier for the part modifier.
            </summary>
            <value>
            The optional identifier for the part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.InputId">
            <summary>
            Gets the input identifier for this part modifier.
            </summary>
            <value>
            The input identifier for this part modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.InspectorEnabled">
            <summary>
            Gets or sets a value indicating whether the part modifier should be visible in the inspector in flight.
            </summary>
            <value>
              <c>true</c> if visible in the inspector in flight; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.Mass">
            <summary>
            Gets the mass of this modifier which can add to the part's overall mass.
            Note: This mass is scaled by Constants.MassScale.
            </summary>
            <value>
            The extra mass for the part due to this modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.Mod">
            <summary>
            Gets the mod associated with this part modifier (if any).
            This returns <c>null</c> if this is a stock modifier.
            </summary>
            <value>
            The mod associated with this part modifier (if any).
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.Name">
            <summary>
            Gets the modifier's name.
            </summary>
            <value>
            The modifier's name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.Part">
            <summary>
            Gets or sets the part associated with the modifier.
            </summary>
            <value>
            The part associated with the modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.ModApi#Design#IDesignerPartModifierData#PartModifierData">
            <summary>
            Gets the part modifier data.
            </summary>
            <value>
            The part modifier data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.PartPropertiesEnabled">
            <summary>
            Gets or sets a value indicating whether the part modifier should be visible in the part properties in the designer.
            </summary>
            <value>
              <c>true</c> if visible in the part properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.Price">
            <summary>
            Gets the price of the modifier.
            </summary>
            <value>
            The price.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.StaticPriceAndMass">
            <summary>
            Gets or sets a value indicating whether this part modifier contributes a static amount of mass/cost to the part (doesn't vary depending on size/configuration).
            </summary>
            <value>
              <c>true</c> if this part modifier contributes a static amount of mass/cost to the part; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.SymmetryId">
            <summary>
            Gets or sets the symmetry identifier, which links this modifier with all other modifiers that have been
            created via symmetry mode.
            </summary>
            <value>
            The symmetry identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.ThermalMassRatio">
            <summary>
            Gets the thermal mass ratio, which is the percentage of the modifier's mass that should be used
            when calculating the part's thermal qualities, such as temperature.
            </summary>
            <value>
            The thermal mass ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.TypeId">
            <summary>
            Gets the type identifier of the modifier.
            </summary>
            <value>
            The type identifier of the modifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.CreatedFromStateElement">
            <summary>
            Gets a value indicating whether the part modifier was created directly from a state element.
            This implies that the part modifier has been added to the XML by hand and is not standard for the part.
            </summary>
            <value>
            <c>true</c> if the part modifier was created directly from a state element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.DesignerPartProperties">
            <summary>
            Gets the designer part properties interface.
            </summary>
            <value>
            The designer part properties interface.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.CreateForEditor(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Creates a part modifier data object from the specified modifier XML and modifier state XML for use in the Unity editor.
            </summary>
            <param name="partModifierXml">The part modifier XML.</param>
            <param name="partModifierStateXml">The part modifier state XML.</param>
            <returns>The created part modifier data object.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.CreateFromDefaultXml``1(ModApi.Craft.Parts.PartData)">
            <summary>
            Creates a part modifier from the default XML for the specified type.
            </summary>
            <typeparam name="T">The type of the part modifier to create.</typeparam>
            <param name="part">The part for which the modifier is being crated.</param>
            <returns>The created part modifier.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.CreateFromStateXml(System.Xml.Linq.XElement,ModApi.Craft.Parts.PartData,System.Int32)">
            <summary>
            Creates a part modifier from the specified part modifier state XML.
            </summary>
            <param name="partModifierStateXml">The state XML for the part modifier.</param>
            <param name="part">The part for which the modifier is being crated.</param>
            <returns>The created part modifier.</returns>
            <param name="xmlVersion">The XML version.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the part modifier state XML is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Thrown if the part modifier type could not be found or there was an issue creating the modifier.</exception>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.CreateFromXml(System.Xml.Linq.XElement,System.Xml.Linq.XElement,ModApi.Craft.Parts.PartData,System.Int32,System.Boolean)">
            <summary>
            Creates a part modifier from the specified XML.
            The part modifier state XML is optional if the part modifier XML is provided.
            If the part modifier XML is <c>null</c>, then the state XML must be specified.
            </summary>
            <param name="partModifierXml">The XML from which to create the part modifier.</param>
            <param name="partModifierStateXml">The state XML for the part modifier.</param>
            <param name="part">The part for which the modifier is being crated.</param>
            <returns>The created part modifier.</returns>
            <param name="xmlVersion">The XML version.</param>
            <param name="restoreAllState">
            If <c>true</c>, all state properties will be restored with missing values restored as <c>null</c>.
            If <c>false</c>, only state properties specified in the state XML will be restored and missing values will be ignored.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when both the part modifier XML and state XML are <c>null</c>.</exception>
            <exception cref="T:System.Exception">Thrown if the part modifier type could not be found or there was an issue creating the modifier.</exception>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetRegisteredPartModifierTypes">
            <summary>
            Gets the registered part modifier types.
            </summary>
            <returns>The list of part modifier types that have been registered so far.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetTypeId(System.Type)">
            <summary>
            Gets the part modifier type identifier.
            </summary>
            <param name="type">The part modifier type.</param>
            <returns>The part modifier type identifier.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.Register(System.Reflection.Assembly,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Registers the specified assembly, scanning it for part modifiers.
            </summary>
            <param name="assembly">The assembly to be registered.</param>
            <param name="mod">The mod from which the assembly is being registered (or <c>null</c> for stock modifier assemblies).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.CopyFrom(ModApi.Craft.Parts.PartModifierData,System.Xml.Linq.XElement)">
            <summary>
            Copies the data from the source part modifier and overwrites data in this part modifier.
            </summary>
            <param name="sourcePartModifier">The source part modifier.</param>
            <param name="sourcePartModifierStateElement">The XML generated by the source part modifier.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.CreateScript">
            <summary>
            Called when this part modifier needs to create its part modifier script.
            </summary>
            <returns>
            The created part modifier script, or <c>null</c> if it was not created.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.DestroyScript">
            <summary>
            Called when the part modifier needs to destroy its part modifier script.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.System#IDisposable#Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GenerateCompleteXml">
            <summary>
            Generates the XML that defines the modifier.
            </summary>
            <returns>The XML that defines the modifier.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GenerateDesignerPartModfierXml(System.Xml.Linq.XElement)">
            <summary>
            Generates the part modifier XML used in the generation of designer part XML.
            </summary>
            <param name="partTypeModifierXml">The part type modifier XML.</param>
            <returns>The XElement to fully describe this object for serialization purposes.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GenerateStateXml(System.Boolean)">
            <summary>
            Generates the XElement to fully describe the state of this modifier for serialization purposes.
            </summary>
            <param name="optimizeXml">if set to <c>true</c> then remove attributes that are equal to their default values.</param>
            <returns>
            The XElement to fully describe this object for serialization purposes.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetAssociatedActivationGroups">
            <summary>
            Gets the activation groups associated with the modifier.
            </summary>
            <returns>The set of activation groups that are associated with the modifier.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetModRequirements(ModApi.Mods.AddModRequirementDelegate)">
            <summary>
            Gets the mod requirement for this part modifier.
            By default, this will automatically add a mod requirement (with code execution) if the modifier was defined in a mod.
            </summary>
            <param name="addModRequirement">The add mod requirement.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetScript">
            <summary>
            Gets the behavior script associated with the modifier if it has been initialized. <c>null</c> if uninitialized.
            </summary>
            <returns>
            The behavior script associated with the modifier if it has been initialized. <c>null</c> if uninitialized.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.RemoveModifier">
            <summary>
            Removes the part modifier from the part.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.RestoreFromState(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Restores the modifier state information from the specified XML element.
            </summary>
            <param name="stateElement">The state element from which to restore.</param>
            <param name="restoreAll">
            If <c>true</c>, all state properties will be restored with missing values restored as <c>null</c>.
            If <c>false</c>, only state properties specified in the state XML will be restored and missing values will be ignored.
            </param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetDefaultInputId">
            <summary>
            Gets the default input identifier for this modifier.
            </summary>
            <returns>The default input identifier for this modifier.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnCreated(System.Xml.Linq.XElement)">
            <summary>
            Called when the part modifier is created.
            This is where the default values are read from the part modifier definition and loaded as the modifier's default values.
            </summary>
            <param name="partModifierXml">The XML that defines the part modifier and its default values.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnDesignerInitialization(ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface)">
            <summary>
            Called when the part modifier data is initialized in the designer scene.
            </summary>
            <param name="d">The designer part properties.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnDisposed">
            <summary>
            Called when the modifier is disposed.
            Note: In the flight scene this is not called immediately after a part is destroyed since bodies are initially deactivated and only marked for deletion.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnInitialized">
            <summary>
            Called after the modifier has been fully initialized.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnRemoveModifier">
            <summary>
            Called when the modifier is removed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnUpgrade(System.Int32)">
            <summary>
            Called when an older version of the modifier XML is being loaded.
            This is called after deserialization when the current craft
            XML version is greater than the XML version of the craft being loaded.
            </summary>
            <param name="xmlVersion">The XML version of the craft being loaded.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.OnXmlUpgrade(System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Called when an older version of the modifier XML is being loaded.
            This is called prior to deserialization when the current craft
            XML version is greater than the XML version of the craft being loaded.
            The specified XML can be tweaked/upgraded as needed so it can then be deserialized.
            </summary>
            <param name="xmlVersion">The XML version of the craft being loaded.</param>
            <param name="xml">The XML of the modifier being loaded.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetDefaultTypeId(System.Type)">
            <summary>
            Gets the default type ID for the specified part modifier type.
            </summary>
            <param name="type">The part modifier type.</param>
            <returns>The default type ID for the specified part modifier type.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetDefaultXmlForType(System.Type)">
            <summary>
            Gets the default XML for a state-created modifiers of the specified type.
            </summary>
            <param name="modifierType">Type of the modifier.</param>
            <returns>The default XML for state-created modifiers of the specified type.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetMembersToSerialize(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,ModApi.Craft.Parts.Attributes.PartModifierPropertyStatePreservationMode},System.Type,System.Boolean)">
            <summary>
            Gets the list of members to serialize when saving and loading states.
            </summary>
            <param name="memberNames">The names of the members to serialize.</param>
            <param name="statePreservationModes">The state preservation modes.</param>
            <param name="type">The type of the class to serialize.</param>
            <param name="stateMembersOnly">A value indicating if all part modifier properties should be returned or only those used for preserving state.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetMembersToSerialize(System.Type,System.Boolean)">
            <summary>
            Gets the list of members to serialize when saving and loading states.
            </summary>
            <param name="type">The type for which to get the member name list.</param>
            <param name="stateMembersOnly">A value indicating if all part modifier properties should be returned or only those used for preserving state.</param>
            <returns>The list of members to serialize when saving and loading states.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.GetTypeId">
            <summary>
            Gets the part modifier type identifier.
            </summary>
            <returns>The part modifier type identifier.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.PartModifierData.MembersToSerialize">
            <summary>
            A class containing information about members to be serialized.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.MembersToSerialize.MemberNames">
            <summary>
            Gets or sets the names of the members to serialize.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData.MembersToSerialize.StatePreservationModes">
            <summary>
            Gets or sets the state preservation modes (keyed by the member name without the leading underscore).
            </summary>
            <value>
            The state preservation modes (keyed by the member name without the leading underscore).
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData.MembersToSerialize.AllowOptimization(System.Xml.Linq.XAttribute)">
            <summary>
            Determines if optimization is allowed for the specified serialized attribute.
            Allowing optimization means that the attribute can be removed if it matches the default value.
            </summary>
            <param name="attribute">The attribute for which to check.</param>
            <returns><c>true</c> if optimization is allowed for this attribute; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.PartModifierData`1">
            <summary>
            The generic base class for all part modifiers.
            </summary>
            <typeparam name="T">The type of the part modifier behavior.</typeparam>
        </member>
        <member name="E:ModApi.Craft.Parts.PartModifierData`1.CreatedScript">
            <summary>
            Occurs when a part modifier script has been created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierData`1.Script">
            <summary>
            Gets the behavior script associated with the modifier if it has been initialized. <c>null</c> if uninitialized.
            </summary>
            <value>
            The behavior script associated with the modifier if it has been initialized. <c>null</c> if uninitialized.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData`1.CreateScript">
            <summary>
            Called when this part modifier needs to create its part modifier script.
            </summary>
            <returns>
            The created part modifier script, or <c>null</c> if it was not created.
            </returns>
            <exception cref="T:System.Exception">The part modifier already has a script.</exception>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData`1.DestroyScript">
            <summary>
            Called when the part modifier needs to destroy its part modifier script.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData`1.GetScript">
            <summary>
            Gets the behavior script associated with the modifier if it has been initialized. <c>null</c> if uninitialized.
            </summary>
            <returns>
            The behavior script associated with the modifier if it has been initialized. <c>null</c> if uninitialized.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData`1.CreateScriptComponent(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Creates the Unity MonoBehaviour for the part modifier and associates it with a game object.
            </summary>
            <param name="partScript">The part script.</param>
            <returns>
            The created part modifier script.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierData`1.DestroyScriptComponent(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Destroys the Unity MonoBehaviour and any associated game objects for the part modifier.
            </summary>
            <param name="partScript">The part script.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.PartModifierScript">
            <summary>
            The base class for all part modifier scripts.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierScript.CanRefuseConnection">
            <summary>
            Gets a value indicating whether this instance can refuse designer connections.  If <c>true</c>, then AcceptConnection() will be called before a part is connected to another part.
            </summary>
            <value>
              <c>true</c> if this instance can refuse connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierScript.PartScript">
            <summary>
            Gets or sets the part script.
            </summary>
            <value>
            The part script.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.AcceptConnection(ModApi.Craft.Parts.AttachPointScript,ModApi.Craft.Parts.AttachPointScript)">
            <summary>
            Determines whether the connection should be accepted.
            </summary>
            <param name="ourAttachPoint">Our attach point.</param>
            <param name="targetAttachPoint">The target attach point.</param>
            <returns>
              <c>true</c> if the connection should be accepted, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.System#IDisposable#Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            Note: In the flight scene this is not called immediately after a part is destroyed since bodies are initially deactivated and only marked for deletion.
            Override <see cref="M:ModApi.Craft.Parts.PartModifierScript.OnPartDestroyed"/> for tasks which need completed imediately upon a part being destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.FlightEnd">
            <summary>
            End method called when the part is being removed from the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.GetData">
            <summary>
            Gets the part modifier associated with this script.
            </summary>
            <returns>The part modifier associated with this script.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.GetInputController">
            <summary>
            Gets the default input controller for this modifier.
            </summary>
            <returns>The default input controller for this modifier or <c>null</c> if it cannot be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.GetInputController(System.String)">
            <summary>
            Gets the input controller with the specified ID for this modifier.
            </summary>
            <param name="id">The identifier of the input controller to get.</param>
            <returns>The input controller with the specified ID for this modifier or <c>null</c> if it cannot be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.GetInputController(System.Linq.Expressions.Expression{System.Func{ModApi.Craft.CraftControls,System.Single}})">
            <summary>
            Gets the input controller of the specified control for this modifier.
            If an input controller cannot be found, a light-weight input
            controller will be created using the specified control input.
            The input controller id will match the specified control's name.
            </summary>
            <param name="control">The control to be used if an input controller cannot be found.</param>
            <returns>The requested input controller.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.GetInputController(System.String,System.Func{ModApi.Craft.CraftControls,System.Single})">
            <summary>
            Gets the input controller with the specified ID for this modifier.
            If an input controller cannot be found, a light-weight input
            controller will be created using the specified control input.
            </summary>
            <param name="id">The identifier of the input controller to get.</param>
            <param name="defaultControl">The default control to be used if an input controller cannot be found.</param>
            <returns>The requested input controller.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.Initialize(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Initializes the part modifier script.
            </summary>
            <param name="data">The part modifier data associated with the script.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnActivated">
            <summary>
            Called when a part is activated.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnAddedToCraftInDesigner(System.Boolean)">
            <summary>
            Called when the part is added to the craft in the designer.
            </summary>
            <param name="isSubassembly">if set to <c>true</c> then this part is contained in a new subassembly.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnBeforePhysicsChanged(System.Boolean)">
            <summary>
            Called when before physics changed.
            </summary>
            <param name="enabled">if set to <c>true</c> physics will be enabled, otherwise <c>false</c>.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnCollision(ModApi.Craft.Parts.IPartFlightCollision)">
            <summary>
            Called when a part has been involved in a collision.
            </summary>
            <param name="partCollision">The part collision.</param>
            <returns>
            True if the modifier has handled the collision and no further action should be taken. Return false
            if the collision should continue.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnConnectedToPart(ModApi.Craft.Parts.PartConnectedEventData)">
            <summary>
            Called when this part is connected to another part in the designer.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnCraftLoaded(ModApi.Craft.ICraftScript,System.Boolean)">
            <summary>
            Called when the craft has finished loading. It is possible that this method will be called
            more than once for a single part if the part has moved to a new craft.
            </summary>
            <param name="craftScript">The craft script.</param>
            <param name="movedToNewCraft">If set to <c>true</c> an existing part is being moved to a new craft, otherwise; <c>false</c>.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnCraftStructureChanged(ModApi.Craft.ICraftScript)">
            <summary>
            Called when the craft structure has changed.
            </summary>
            <param name="craftScript">The craft script.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnDeactivated">
            <summary>
            Called when a part is deactivated.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnDesignerPullout(ModApi.Craft.Assembly)">
            <summary>
            Called when a part this modifier is attached to is pulled out in the designer.  This is called before DesignerStart() and while the previous part is still selected.
            </summary>
            <param name="assembly">The assembly this modifier's part is within (will contain all parts if contained in a sub-assembly).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnGenerateInspectorModel(ModApi.Ui.Inspector.PartInspectorModel)">
            <summary>
            Called when the part is generating a model for an inspector panel. The modifier can optionally add
            its own functionality to the model.
            </summary>
            <param name="model">The inspector model.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnIsPlayerCraftChanged(System.Boolean,ModApi.Craft.ICraftNode)">
            <summary>
            Called when our CraftNode.IsPlayer state has changed.
            </summary>
            <param name="isPlayer">If set to <c>true</c> our craft has become the player craft, otherwise <c>false</c> if we're no-longer the player craft.</param>
            <param name="other">Either the new player craft, or the old one (depending on wether our craft is now player controlled or not).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnModifiersCreated">
            <summary>
            Called after all of the part's modifiers have been created.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnNodeLoaded">
            <summary>
            Called after the craft that this modifier belongs to has had its node loaded, and assigned.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnPartDestroyed">
            <summary>
            Called when the part owning this modifier is destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnPhysicsChanged(System.Boolean)">
            <summary>
            Called when physics has been enabled or disabled for the craft.
            </summary>
            <param name="enabled">if set to <c>true</c> enabled.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnPreNodeLoaded">
            <summary>
            Called immediately prior to <see cref="M:ModApi.Craft.Parts.PartModifierScript.OnNodeLoaded" /> and to <see cref="P:ModApi.Craft.ICraftScript.ActiveCommandPod" /> being initially set and thus any events related to that.
            Note: The node has been loaded and is accessible, just like for <see cref="M:ModApi.Craft.Parts.PartModifierScript.OnNodeLoaded" />
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnSymmetry(ModApi.Design.SymmetryMode,ModApi.Craft.Parts.IPartScript,System.Boolean)">
            <summary>
            Called when the part has been updated by symmetry.
            </summary>
            <param name="mode">The symmetry mode.</param>
            <param name="originalPart">The original part.</param>
            <param name="created">if set to <c>true</c> then the part has been created. False indicates the part is being updated.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.PrepareForPartIcon">
            <summary>
            Called when the part is about to have its picture taken for the part icons. Try and look your best and say cheese!
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.RecalculateFrameState(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Called when a modifier should recalulate the reference frame sate (position/velocity) of any special, "unmanaged" game-objects.
            </summary>
            <param name="positionDelta">The position delta.</param>
            <param name="velocityDelta">The velocity delta.</param>
            <remarks>
            Any children of a craft should have their position updated without using the position delta.  However, any rigid-body other than
            the one associated with a <see cref="T:ModApi.Craft.IBodyScript" /> will need its velocity updated with the velocity delta.
            Any gameobject not under a craft should add both the position and velocity deltas to the current value to keep the same relative state.
            -
            Caution: This may be called either when the reference frame recenters, rotates, or when the node's orbit position/velocity is manually
            updated such as while warping.  If subscribing to <see cref="E:ModApi.Flight.GameView.IGameView.ReferenceFrameRecentered"/>, do not also add deltas in response
            to that or they'll be added in twice.
            </remarks>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnRemoveModifier">
            <summary>
            Called when the modifier is removed from a part.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript.OnDisposed">
            <summary>
            Called when the modifier script is disposed.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartModifierScript`1">
            <summary>
            The generic base class for all part modifier behaviors.
            </summary>
            <typeparam name="T">The type of the part modifier associated with this script.</typeparam>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:ModApi.Craft.Parts.PartModifierScript`1.Data">
            <summary>
            Gets the part modifier associated with this script.
            </summary>
            <value>
            The part modifier associated with this script.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript`1.GetData">
            <summary>
            Gets the part modifier associated with this script.
            </summary>
            <returns>
            The part modifier associated with this script.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript`1.Initialize(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Initializes the part modifier script.
            </summary>
            <param name="data">The part modifier data associated with the script.</param>
            <exception cref="T:System.ArgumentNullException">Throw if the specified part modifier is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Thrown if the script has already been initialized or if the part modifier does not match the expected type.</exception>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript`1.OnInitialized">
            <summary>
            Called when the part modifier script is initialized.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript`1.ScheduleCoroutineAction(System.Action,UnityEngine.YieldInstruction)">
            <summary>
            Schedules an action as a co-routine.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="waitType">The type of yield instruction to wait on before executing the action.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartModifierScript`1.ScheduleCoroutineActionCoroutine(System.Action,UnityEngine.YieldInstruction)">
            <summary>
            Schedules an action as a co-routine.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="waitInstruction">The type of yield instruction to wait on before executing the action.</param>
            <returns>The IEnumerator for the co-routine.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.PartType">
            <summary>
            A class containing the definition for a part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._allowDesignerReorientationOnPullout">
            <summary>
            A value indicating whether to allow re-orientation when switching build modes in the designer when the part is initially pulled out.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._allowIndividualPartRemoval">
            <summary>
            a value indicating whether this part type requires the ability to be removed individually (i.e. not only with entire Part Group).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._attachPointsElement">
            <summary>
            The attach points XML element for the part type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._defaultColorIndexPrimary">
            <summary>
            The color index of the default primary color.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._defaultColorIndexTrim1">
            <summary>
            The color index of the default trim 1 color.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._defaultColorIndexTrim2">
            <summary>
            The color index of the default trim 2 color.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._defaultColorIndexTrim3">
            <summary>
            The color index of the default trim 3 color.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._defaultColorIndexTrim4">
            <summary>
            The color index of the default trim 4 color.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._id">
            <summary>
            The identifier for the part type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._includeInBodyDrag">
            <summary>
            Gets a value indicating whether to include this part's calculated drag in the body's overall drag.
            This is used for parts that compute their own drag so they can excuse themselves from the body's
            drag and avoid having a double-drag calculation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._instantiatePrefab">
            <summary>
            The instantiate prefab function that should return an instantiated
            copy of the part type's prefab (or <c>null</c> if a problem occurs).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._mirrorConfig">
            <summary>
            The mirror configuration for the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._modifiersElement">
            <summary>
            The part modifier XML elements for the part type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._name">
            <summary>
            The name of the part type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._partCollisionHandling">
            <summary>
            The part collision handling method.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._price">
            <summary>
            The price of the part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._stylesShareHeader">
            <summary>
            A value indicating whether the styles in this part share the same header in the part properties.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._subparts">
            <summary>
            The collection of subpart types supported by this part type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._subpartsSharePartStyle">
            <summary>
            A value indicating whether all subparts share the same part style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._unscaledMass">
            <summary>
            The unscaled mass of the part type in kilograms.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartType._usePreferredNodeName">
            <summary>
            a value indicating whether this part type requires the ability to be removed individually (i.e. not only with entire Part Group).
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartType" /> class.
            </summary>
            <param name="xml">The XML from which to create the part type.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.#ctor(System.Xml.Linq.XElement,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartType" /> class.
            </summary>
            <param name="xml">The XML from which to create the part type.</param>
            <param name="mod">The mod in which this part is defined (leave <c>null</c> for stock parts).</param>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.Parts.PartType"/> class from being created.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartType.CreatedPartModifiers">
            <summary>
            Occurs when part modifiers have been created.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.PartType.CreatingPartModifiers">
            <summary>
            Occurs when part modifiers are being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.AllowDesignerReorientationOnPullout">
            <summary>
            Gets a value indicating whether to allow re-orientation when switching build modes in the designer when the part is initially pulled out.
            </summary>
            <value>
              <c>true</c> if re-orientations should be allowed when switching build modes in the designer when the part is initially pulled out; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.AllowIndividualPartRemoval">
            <summary>
            Gets a value indicating whether this part type requires the ability to be removed individually (i.e. not only with entire Part Group).
            </summary>
            <value>
              <c>true</c> if this part type requires the ability to be removed individually (i.e. not only with entire Part Group).; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.DefaultMaterialIds">
            <summary>
            Gets the default materials IDs.
            </summary>
            <value>
            The default materials IDs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.HasModPrefab">
            <summary>
            Gets a value indicating whether this part type uses a prefab from a mod (<c>true</c>) or a stock prefab (<c>false</c>).
            </summary>
            <value>
              <c>true</c> if this part type uses a prefab from a mod; otherwise, <c>false</c> if it uses a stock prefab.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.Id">
            <summary>
            Gets the identifier for the part type.
            </summary>
            <value>
            The identifier for the part type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.IncludeInBodyDrag">
            <summary>
            Gets a value indicating whether to include this part's calculated drag in the body's overall drag. This
            is used for parts that compute their own drag so they can excuse themselves from the body's drag and
            avoid having a double-drag calculation.
            </summary>
            <value>
              <c>true</c> if this part should be included in the body's overall drag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.IsCommandPod">
            <summary>
            Gets a value indicating whether this instance is command pod.
            </summary>
            <value>
            <c>true</c> if this instance is command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.Mass">
            <summary>
            Gets the mass of the part in kilograms.
            Note: This mass has been scaled by Constants.MassScale.
            </summary>
            <value>
            The mass of the part in kilograms.
            Note: This mass has been scaled by Constants.MassScale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.MirrorConfig">
            <summary>
            Gets the mirror configuration for the part.
            </summary>
            <value>
            The mirror configuration for the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.Mod">
            <summary>
            Gets or sets the mod associated with the part.
            </summary>
            <value>
            The mod associated with the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.MustBeBySelfInPartGroup">
            <summary>
            Gets a value indicating whether parts of this type must be in their own part group.
            </summary>
            <value>
            <c>true</c> if the parts of this type must be in their own part group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.Name">
            <summary>
            Gets the name of the part type.
            </summary>
            <value>
            The name of the part type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.PartCollisionHandling">
            <summary>
            Gets the part collision handling method.
            </summary>
            <value>
            The part collision handling method.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.PrefabPath">
            <summary>
            Gets the prefab path for the part.
            </summary>
            <value>
            The prefab path for the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.Price">
            <summary>
            Gets the price of the part type.
            </summary>
            <value>
            The price.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.StylesShareHeader">
            <summary>
            Gets a value indicating whether the styles in this part share the same header in the part properties.
            </summary>
            <value>
              <c>true</c> if the styles share the same header in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.Subparts">
            <summary>
            Gets the subpart types.
            </summary>
            <value>
            The subpart types.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.SubpartsSharePartStyle">
            <summary>
            Gets a value indicating whether all subparts share the same part style.
            </summary>
            <value>
              <c>true</c> if all subparts share the same part style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartType.UsePreferredNodeName">
            <summary>
            Gets or sets a value indicating whether to use <see cref="P:ModApi.Craft.Parts.PartData.PreferredNodeName"/>.
            </summary>
            <value>
              <c>true</c> if this part should use <see cref="P:ModApi.Craft.Parts.PartData.PreferredNodeName"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.CreateEditorScript(UnityEngine.GameObject,System.String)">
            <summary>
            Creates a part type editor script attached to the specified game object.
            </summary>
            <param name="obj">The object to which to attach the script.</param>
            <param name="partTypeId">The part type identifier.</param>
            <returns>The attached part type editor script.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.CreateAttachPoints">
            <summary>
            Creates the attach points.
            </summary>
            <returns>The attach points.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.CreateModifiers(ModApi.Craft.Parts.PartData,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Creates the modifiers.
            </summary>
            <param name="part">The part for which modifiers are being created.</param>
            <param name="partElement">The XML element defining the part.</param>
            <param name="xmlVersion">The XML version.</param>
            <returns>The list of part modifiers for the specified part.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.GeneratePartTypeXml(System.String,System.Xml.Linq.XElement,System.Collections.Generic.List{System.Xml.Linq.XElement},System.Collections.Generic.List{System.Xml.Linq.XElement})">
            <summary>
            Generates the part type XML.
            </summary>
            <param name="prefabPath">The prefab path of the part.</param>
            <param name="styles">The part tyep styles XML.</param>
            <param name="modifiers">The part type modifiers XML.</param>
            <param name="attachPoints">The attach points XML for the part type.</param>
            <returns>The part type XML.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.InstantiatePrefab">
            <summary>
            Instantiates the prefab for this part type.
            </summary>
            <returns>The instantiated prefab or <c>null</c> if a problem occurs.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.PartType.InitializePrefab">
            <summary>
            Initializes the prefab loading data.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.PartTypeList">
            <summary>
            The list of part types in the game.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartTypeList._partTypes">
            <summary>
            The part types.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartTypeList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartTypeList"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartTypeList.Add(System.Xml.Linq.XElement,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Adds the specified part type element.
            </summary>
            <param name="partTypeElement">The part type element.</param>
            <param name="mod">The mod in which the part is defined (leave <c>null</c> for stock parts).</param>
            <returns>The part type that was added.</returns>
            <exception cref="T:ModApi.Exceptions.GameException">Part Type list has duplicate ID: " + partType.Id</exception>
        </member>
        <member name="M:ModApi.Craft.Parts.PartTypeList.GetPartType(System.String)">
            <summary>
            Gets the type of the part.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The part type.</returns>
            <exception cref="T:ModApi.Exceptions.InvalidPartTypeException">Could not find part type.</exception>
        </member>
        <member name="T:ModApi.Craft.Parts.PartTypeMirrorConfig">
            <summary>
            The configuration settings used when determining how to mirror a part type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartTypeMirrorConfig._hasRotationOffset">
            <summary>
            A value indicating if a rotation offset should be applied when mirroring a part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartTypeMirrorConfig._rotationOffsetEuler">
            <summary>
            The rotation offset to use when mirroring a part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartTypeMirrorConfig._rotationOffsetQuaternion">
            <summary>
            The rotation offset to use when mirroring a part
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.PartTypeMirrorConfig._rotationOffsetQuaternionInverse">
            <summary>
            The inverse of the rotation offset.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartTypeMirrorConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartTypeMirrorConfig"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.PartTypeMirrorConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.PartTypeMirrorConfig"/> class.
            </summary>
            <param name="xml">The XML from which to load the part type mirror config.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.PartTypeMirrorConfig.HasRotationOffset">
            <summary>
            Gets or sets a value indicating whether a rotation offset should be applied when mirroring a part.
            </summary>
            <value>
            A value indicating if a rotation offset should be applied when mirroring a part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartTypeMirrorConfig.RotationOffset">
            <summary>
            Gets or sets the rotation offset to use when mirroring a part.
            </summary>
            <value>
            The rotation offset to use when mirroring a part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.PartTypeMirrorConfig.RotationOffsetInverse">
            <summary>
            Gets the inverse of the rotation offset.
            </summary>
            <value>
            The inverse of the rotation offset.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.PartTypeMirrorConfig.Save(System.Xml.Linq.XElement)">
            <summary>
            Saves the specified XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles">
            <summary>
            A class defining subpart and style information for a part definition.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles._stylesShareHeader">
            <summary>
            A value indicating if the subparts all share a single part style header in the part properties flyout in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles._styleSubparts">
            <summary>
            The collection of subparts and the subpart styles definined for this part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles._subpartsSharePartStyle">
            <summary>
            A value indicating if all subparts of this part share a single part style.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles.StylesShareHeader">
            <summary>
            Gets a value indicating whether the subparts all share a single part style header in the part properties flyout in the designer.
            </summary>
            <value>
              <c>true</c> if the subparts all share a single part style header in the part properties flyout in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles.StyleSubparts">
            <summary>
            Gets the collection of subparts and the subpart styles definined for this part.
            </summary>
            <value>
            The collection of subparts and the subpart styles definined for this part.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles.SubpartsSharePartStyle">
            <summary>
            Gets a value indicating whether all subparts of this part share a single part style.
            </summary>
            <value>
              <c>true</c> if all subparts of this part share a single part style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles.GeneratePartStylesXml">
            <summary>
            Generates the part styles XML.
            </summary>
            <returns>The part styles XML.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles.GeneratePartTypeStylesXml">
            <summary>
            Generates the part type styles XML.
            </summary>
            <returns>The part type styles XML.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartDefinitionStyles.Load(ModApi.Craft.Parts.PartType,System.Xml.Linq.XElement)">
            <summary>
            Loads the data for the part styles using the specified part type and part styles XML.
            This is typically used when cloning a part in the Unity editor.
            </summary>
            <param name="partType">The part type.</param>
            <param name="partStyles">The part styles XML.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart">
            <summary>
            A class that defines a subpart for a part definition.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart._displayName">
            <summary>
            The display name for the subpart.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart._xmlName">
            <summary>
            The XML name for the subpart.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart._styles">
            <summary>
            The style set for the subpart.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart.#ctor(System.String,System.String,ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart"/> class.
            </summary>
            <param name="xmlName">The XML name used for the subpart.</param>
            <param name="displayName">The display name for the subpart.</param>
            <param name="styleSet">The style set for the subpart.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart.DisplayName">
            <summary>
            Gets the display name for the subpart.
            </summary>
            <value>
            The display name for the subpart.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart.Styles">
            <summary>
            Gets the style set for the subpart.
            </summary>
            <value>
            The style set for the subpart.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartDefinitionSubpart.XmlName">
            <summary>
            Gets the XML name for the subpart.
            </summary>
            <value>
            The XML name for the subpart.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition">
            <summary>
            An object that defines a part style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition._id">
            <summary>
            The identifier of the style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition._displayName">
            <summary>
            The display name of the style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition._dataValues">
            <summary>
            The collection of data values associated with the part style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition._textures">
            <summary>
            The texture styles assigned to this part style.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition.DataValues">
            <summary>
            Gets the collection of data values associated with the part style.
            </summary>
            <value>
            The collection of data values associated with the part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition.DisplayName">
            <summary>
            Gets the display name of the part style.
            </summary>
            <value>
            The display name of the part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition.Id">
            <summary>
            Gets the identifier of the part style.
            </summary>
            <value>
            The identifier of the part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition.Textures">
            <summary>
            Gets the texture styles assigned to this part style.
            </summary>
            <value>
            The texture styles assigned to this part style.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartStyleDefinition.Create(System.String,System.String)">
            <summary>
            Creates the specified part style.
            </summary>
            <param name="id">The part style identifier.</param>
            <param name="displayName">The part style display name.</param>
            <returns>The requested part style.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension">
            <summary>
            A class that extends an existing part style by adding additional textures to the style.
            </summary>
            <seealso cref="T:UnityEngine.ScriptableObject" />
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension._partId">
            <summary>
            The part type ID of the part style being extended.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension._subpartIndex">
            <summary>
            The subpart index of the part style being extended.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension._styleId">
            <summary>
            The part type ID of the part style being extended.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension._textureStyles">
            <summary>
            The collection of texture style to be added to the part style.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension.PartId">
            <summary>
            Gets the part type ID of the part style being extended.
            </summary>
            <value>
            The part type ID of the part style being extended.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension.StyleId">
            <summary>
            Gets the part type ID of the part style being extended.
            </summary>
            <value>
            The part type ID of the part style being extended.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension.SubpartIndex">
            <summary>
            Gets the subpart index of the part style being extended.
            </summary>
            <value>
            The subpart index of the part style being extended.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension.TextureStyles">
            <summary>
            Gets the collection of texture style to be added to the part style.
            </summary>
            <value>
            The collection of texture style to be added to the part style.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartStyleExtension.CreateXml">
            <summary>
            Creates the XML representing this part style extension.
            If there are no textures to add, a <c>null</c> value will be returned.
            </summary>
            <returns>The XML representing this part style extension.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition">
            <summary>
            An object that defines a set of part styles for a part.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition._dataKeys">
            <summary>
            The set of data properties associated with each part style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition._styles">
            <summary>
            The collection of part styles.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition.DataKeys">
            <summary>
            Gets the set of data properties associated with each part style.
            </summary>
            <value>
            The set of data properties associated with each part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition.Styles">
            <summary>
            Gets the collection of part styles.
            </summary>
            <value>
            The collection of part styles.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartStyleSetDefinition.Create(UnityEngine.GameObject)">
            <summary>
            Creates the specified style set definition.
            </summary>
            <param name="parent">The parent object on which to add the style set definition component.</param>
            <returns>The requested style set definition.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition">
            <summary>
            A scriptable object that defines a part texture style.
            </summary>
            <seealso cref="T:UnityEngine.ScriptableObject" />
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition._id">
            <summary>
            The identifier of the style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition._displayName">
            <summary>
            The display name of the style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition._detailTexture">
            <summary>
            The detail texture of the style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition._normalMapTexture">
            <summary>
            The normal map texture of the style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition._options">
            <summary>
            The options flags for the style.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition.DetailTexture">
            <summary>
            Gets the detail texture of the style.
            </summary>
            <value>
            The detail texture of the style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition.DisplayName">
            <summary>
            Gets the display name of the style.
            </summary>
            <value>
            The display name of the style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition.Id">
            <summary>
            Gets the identifier of the style.
            </summary>
            <value>
            The identifier of the style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition.NormalMapTexture">
            <summary>
            Gets the normal map texture of the style.
            </summary>
            <value>
            The normal map texture of the style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition.Options">
            <summary>
            Gets the options flags for the style.
            </summary>
            <value>
            The options flags for the style.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.Editor.PartTextureStyleDefinition.CreateXml">
            <summary>
            Creates the XML representing this texture style.
            If the ID is <c>null</c>, a <c>null</c> value will be returned.
            </summary>
            <returns>The XML representing this texture style.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.IPartStyle">
            <summary>
            An interface for a part style.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.Data">
            <summary>
            Gets the part style data.
            </summary>
            <value>
            The part style data.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.DisplayName">
            <summary>
            Gets the display name of the part style.
            </summary>
            <value>
            The display name of the part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.Id">
            <summary>
            Gets the identifier of the part style.
            </summary>
            <value>
            The identifier of the part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.Invalid">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Craft.Parts.Styles.IPartStyle"/> is invalid.
            </summary>
            <value>
              <c>true</c> if invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.PartId">
            <summary>
            Gets the part identifier.
            </summary>
            <value>
            The part identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.SubpartIndex">
            <summary>
            Gets the subpart index.
            </summary>
            <value>
            The subpart index.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyle.Textures">
            <summary>
            Gets the collection of texture styles configured for this part style.
            </summary>
            <value>
            The collection of texture styles configured for this part style.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyle.GetData``1(System.String,``0,System.Boolean)">
            <summary>
            Gets the style data with the specified key.
            </summary>
            <typeparam name="T">The type of the data to get.</typeparam>
            <param name="key">The data key.</param>
            <param name="defaultValue">The default value if the data could not be found.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged if the value cannot be found.</param>
            <returns>The requested data value.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.IPartStyleManager">
            <summary>
            An interface for a class that manages part styles.
            </summary>
        </member>
        <member name="E:ModApi.Craft.Parts.Styles.IPartStyleManager.TextureArraysChanged">
            <summary>
            Occurs when the texture arrays have changed.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.DefaultStyle">
            <summary>
            Gets the default style.
            </summary>
            <value>
            The default style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.DefaultTextureStyle">
            <summary>
            Gets the default texture style.
            </summary>
            <value>
            The default texture style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.DetailTextures">
            <summary>
            Gets the detail texture array.
            </summary>
            <value>
            The detail texture array.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.DetailTexturesEnabled">
            <summary>
            Gets a value indicating whether detail textures are enabled.
            </summary>
            <value>
              <c>true</c> if detail textures are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.ModTexturesLoaded">
            <summary>
            Gets a value indicating whether mod textures have been loaded.
            </summary>
            <value>
              <c>true</c> if mod textures have been loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.NormalMapsEnabled">
            <summary>
            Gets a value indicating whether normal maps are enabled.
            </summary>
            <value>
              <c>true</c> if normal maps are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.NormalMapTextures">
            <summary>
            Gets the normal map texture array.
            </summary>
            <value>
            The normal map texture array.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartStyleManager.SupportsModTextures">
            <summary>
            Gets a value indicating whether the current device supports mod textures.
            </summary>
            <value>
              <c>true</c> if the current device supports mod textures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.GetDetailTextureIndex(System.String)">
            <summary>
            Gets the index of the specified detail texture in the texture array.
            </summary>
            <param name="textureId">The texture identifier.</param>
            <returns>The index of the specified detail texture in the texture array.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.GetNormalMapTextureIndex(System.String)">
            <summary>
            Gets the index of the specified normal map texture in the texture array.
            </summary>
            <param name="textureId">The texture identifier.</param>
            <returns>The index of the specified normal map texture in the texture array.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.GetStyle(System.String,System.Int32,System.String)">
            <summary>
            Gets the specified style. If the style could not be found, a default style will be returned.
            </summary>
            <param name="partId">The part identifier.</param>
            <param name="subpartIndex">The subpart index.</param>
            <param name="styleId">The style identifier.</param>
            <returns>The specified style or a default style.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.GetStyles(System.String,System.Int32)">
            <summary>
            Gets the styles for the specified part.
            </summary>
            <param name="partId">The part identifier.</param>
            <param name="subpartIndex">The subpart index.</param>
            <returns>The styles for the specified part.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.GetTextureStyle(System.String)">
            <summary>
            Gets the specified texture style, or <c>null</c> if it could not be found.
            </summary>
            <param name="id">The style identifier.</param>
            <returns>The specified texture style, or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.GetTextureStyles(System.String,System.Int32,System.String)">
            <summary>
            Gets the specified texture styles.
            </summary>
            <param name="partId">The part identifier.</param>
            <param name="subpartIndex">The subpart index.</param>
            <param name="styleId">The style identifier.</param>
            <returns>The specified texture styles.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.LoadPartStyleExtensions(System.String)">
            <summary>
            Loads the specified part style extensions.
            </summary>
            <param name="xml">The part style extensions XML.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.LoadTextureStyles(System.String,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Loads the texture styles from the specified XML.
            </summary>
            <param name="xml">The part texture styles XML.</param>
            <param name="mod">The mod from which the texture are being loaded or <c>null</c> for stock textures.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.RebuildTextureArrays">
            <summary>
            Rebuilds the texture arrays based on the currently loaded part styles.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartStyleManager.RebuildTextureArraysIfNecessary">
            <summary>
            Rebuilds the texture arrays (only if they are out of date) based on the currently loaded part styles.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.IPartTextureStyle">
            <summary>
            An interface for a part texture style.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartTextureStyle.DetailTextureId">
            <summary>
            Gets the detail texture identifier.
            </summary>
            <value>
            The detail texture identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartTextureStyle.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartTextureStyle.Id">
            <summary>
            Gets the identifier of the texture style.
            </summary>
            <value>
            The identifier of the texture style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartTextureStyle.NormalMapTextureId">
            <summary>
            Gets the normal map texture identifier.
            </summary>
            <value>
            The normal map texture identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.IPartTextureStyle.Options">
            <summary>
            Gets the texture style options.
            </summary>
            <value>
            The texture style options.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.IPartTextureStyleProvider">
            <summary>
            An interface for a part modifier that provides the designer part properties flyout with a list
            of textures styles that can be used on the currently selected part in its current configuration.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.IPartTextureStyleProvider.GetAvailablePartTextureStyles(System.String,System.Int32,System.String)">
            <summary>
            Gets the available part texture styles.
            </summary>
            <param name="partTypeId">The part type identifier.</param>
            <param name="subpartIndex">Index of the subpart.</param>
            <param name="partStyleId">The part style identifier.</param>
            <returns>The list of available part texture styles.</returns>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.PartStyleData">
            <summary>
            The style specific data associated with a part instance.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.PartStyleData._part">
            <summary>
            The part data associated with this instance.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.PartStyleData.#ctor(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.Styles.IPartStyle,ModApi.Craft.Parts.Styles.IPartTextureStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Styles.PartStyleData"/> class.
            </summary>
            <param name="part">The part data.</param>
            <param name="style">The part style.</param>
            <param name="textureStyle">The part texture style.</param>
        </member>
        <member name="M:ModApi.Craft.Parts.Styles.PartStyleData.#ctor(ModApi.Craft.Parts.PartData,ModApi.Craft.Parts.Styles.IPartStyle,ModApi.Craft.Parts.Styles.IPartTextureStyle,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.Styles.PartStyleData" /> class.
            </summary>
            <param name="part">The part data.</param>
            <param name="style">The part style.</param>
            <param name="textureStyle">The part texture style.</param>
            <param name="tiling">The part texture tiling.</param>
            <param name="offset">The part texture offset.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.PartStyleData.Part">
            <summary>
            Gets the part data associated with this instance.
            </summary>
            <value>
            The part data associated with this instance.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.PartStyleData.Style">
            <summary>
            Gets or sets the part style.
            </summary>
            <value>
            The part style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.PartStyleData.TextureOffset">
            <summary>
            Gets or sets the part texture offset.
            </summary>
            <value>
            The part texture offset.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.PartStyleData.TextureStyle">
            <summary>
            Gets or sets the part texture style.
            </summary>
            <value>
            The part texture style.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.Styles.PartStyleData.TextureTiling">
            <summary>
            Gets or sets the part texture tiling.
            </summary>
            <value>
            The part texture tiling.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.Styles.PartTextureStyleOptions">
            <summary>
            The part texture style option flags.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.PartTextureStyleOptions.Default">
            <summary>
            The default options.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.PartTextureStyleOptions.DesignerTileableX">
            <summary>
            A flag indicating if the texture, by default, can be tiled in the X direction in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.Styles.PartTextureStyleOptions.DesignerTileableY">
            <summary>
            A flag indicating if the texture, by default, can be tiled in the Y direction in the designer.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Parts.SubpartType">
            <summary>
            An object defining a subpart type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.SubpartType._displayName">
            <summary>
            The display name of the subpart type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.SubpartType._xmlName">
            <summary>
            The base XML name of the subpart type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.SubpartType._xmlNames">
            <summary>
            The XML names of the subpart type.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.MaxCountPerPart">
            <summary>
            Gets the maximum number of subparts per part type.
            </summary>
            <value>
            The maximum number of subparts per part type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.DisplayName">
            <summary>
            Gets the display name of the subpart type.
            </summary>
            <value>
            The display name of the subpart type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.XmlNames">
            <summary>
            Gets the XML names of the subpart type.
            </summary>
            <value>
            The XML names of the subpart type.
            </value>
        </member>
        <member name="M:ModApi.Craft.Parts.SubpartType.Create(System.String,System.String)">
            <summary>
            Creates the specified subpart type.
            </summary>
            <param name="xmlName">The XML name of the subpart type.</param>
            <param name="displayName">The display name of the subpart type.</param>
            <returns>The requested subpart type.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.SubpartType.CreateFromXml(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates a collection of subpart types from XML.
            </summary>
            <param name="xml">The XML from which to create the items.</param>
            <param name="createDefault">If <c>true</c> and the XML contains no items, a default item will be created.</param>
            <returns>The created items.</returns>
        </member>
        <member name="M:ModApi.Craft.Parts.SubpartType.SaveToXml(System.Xml.Linq.XElement,System.Collections.Generic.IReadOnlyList{ModApi.Craft.Parts.SubpartType})">
            <summary>
            Saves a collection of subpart types to XML.
            </summary>
            <param name="xml">The XML to which to save the items.</param>
            <param name="items">The items to be saved.</param>
        </member>
        <member name="T:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames">
            <summary>
            A class containing all the XML names for a subpart type.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames"/> class.
            </summary>
            <param name="baseName">The base XML name for the subpart type.</param>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames.Base">
            <summary>
            Gets the base XML name for the subpart type.
            </summary>
            <value>
            The base XML name for the subpart type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames.Style">
            <summary>
            Gets the style XML name for the subpart type.
            </summary>
            <value>
            The style XML name for the subpart type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames.TextureOffset">
            <summary>
            Gets the texture offset XML name for the subpart type.
            </summary>
            <value>
            The texture offset XML name for the subpart type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames.TextureStyle">
            <summary>
            Gets the texture XML name for the subpart type.
            </summary>
            <value>
            The texture XML name for the subpart type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Parts.SubpartType.SubpartTypeXmlNames.TextureTiling">
            <summary>
            Gets the texture tiling XML name for the subpart type.
            </summary>
            <value>
            The texture tiling XML name for the subpart type.
            </value>
        </member>
        <member name="T:ModApi.Craft.Parts.TireFrictionDefinition">
            <summary>
            Defines friction parameters for wheels to use
            </summary>
        </member>
        <member name="F:ModApi.Craft.Parts.TireFrictionDefinition._offroadPercentage">
            <summary>
            The off-road percentage
            </summary>
        </member>
        <member name="P:ModApi.Craft.Parts.TireFrictionDefinition.OffroadPercentage">
            <summary>
            Gets the off-road percentage
            </summary>
            <value>
            The off-road percentage
            </value>
        </member>
        <member name="T:ModApi.Craft.ColorStyles">
            <summary>
            A class for working with color styles for crafts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.FlatMetallic">
            <summary>
            The flat metallic value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.FlatSmoothness">
            <summary>
            The flat smoothness value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.GlossMetallic">
            <summary>
            The gloss metallic value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.GlossSmoothness">
            <summary>
            The gloss smoothness value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.SemiGlossMetallic">
            <summary>
            The semi gloss metallic value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.SemiGlossSmoothness">
            <summary>
            The semi gloss smoothness value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.StyleNameCustom">
            <summary>
            The style name for the custom style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.StyleNameFlat">
            <summary>
            The style name for the flat stlye.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.StyleNameGloss">
            <summary>
            The style name for the gloss style.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ColorStyles.StyleNameSemiGloss">
            <summary>
            The style name for the semi-gloss style.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ColorStyles.GetMetallicValue(System.String)">
            <summary>
            Gets the metallic value.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns>The metallic value.</returns>
        </member>
        <member name="M:ModApi.Craft.ColorStyles.GetSmoothnessValue(System.String)">
            <summary>
            Gets the smoothness value.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns>The smoothness value.</returns>
        </member>
        <member name="M:ModApi.Craft.ColorStyles.GetStyleName(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the name of the style.
            </summary>
            <param name="metallic">The metallic value.</param>
            <param name="smoothness">The smoothness value.</param>
            <param name="detailStrength">The detail strength.</param>
            <param name="emissionStrength">The emission strength.</param>
            <returns>The style name.</returns>
        </member>
        <member name="T:ModApi.Craft.CraftBiomeData">
            <summary>
            The biome data for the strongest biome for a given craft.
            </summary>
        </member>
        <member name="P:ModApi.Craft.CraftBiomeData.BiomeName">
            <summary>
            Gets the name of the strongest biome.
            </summary>
            <value>
            The name of the strongest biome.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftBiomeData.BiomeStrength">
            <summary>
            Gets the biome strength.
            </summary>
            <value>
            The biome strength.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftBiomeData.SubBiomeName">
            <summary>
            Gets the name of the strongest sub biome within the strongest biome.
            </summary>
            <value>
            The name of the strongest sub biome within the strongest biome.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftBiomeData.TireTrackStrength">
            <summary>
            Gets the tire track strength.
            </summary>
            <value>
            The tire track strength.
            </value>
        </member>
        <member name="M:ModApi.Craft.CraftBiomeData.Clear">
            <summary>
            Clears the biome data.
            </summary>
        </member>
        <member name="M:ModApi.Craft.CraftBiomeData.Update(ModApi.Planet.PlanetVertexData,ModApi.Planet.PlanetVertexBiomeData)">
            <summary>
            Updates the biome data.
            </summary>
            <param name="vertexData">The vertex data.</param>
            <param name="biomeData">The vertex biome data.</param>
        </member>
        <member name="T:ModApi.Craft.CraftControls">
            <summary>
            Controls for a craft.
            </summary>
        </member>
        <member name="F:ModApi.Craft.CraftControls._commandPod">
            <summary>
            The command pod
            </summary>
        </member>
        <member name="F:ModApi.Craft.CraftControls._targetHeading">
            <summary>
            The target heading
            </summary>
        </member>
        <member name="F:ModApi.Craft.CraftControls._translationModeEnabled">
            <summary>
            The translation mode enabled flag.
            </summary>
        </member>
        <member name="M:ModApi.Craft.CraftControls.#ctor(ModApi.Craft.Parts.ICommandPod,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.CraftControls" /> class.
            </summary>
            <param name="commandPod">The command pod.</param>
            <param name="stateXml">The state XML, or null if there is none.</param>
        </member>
        <member name="T:ModApi.Craft.CraftControls.TargetHeadingChangedHandler">
            <summary>
            Handler for when the target heading has changed.
            </summary>
            <param name="newHeading">The new heading.</param>
            <param name="oldHeading">The old heading.</param>
        </member>
        <member name="E:ModApi.Craft.CraftControls.TargetHeadingChanged">
            <summary>
            Occurs when the target heading changed has changed.
            </summary>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Brake">
            <summary>
            Gets or sets the brake.
            </summary>
            <value>
            The brake input.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaAnalogJump">
            <summary>
            Gets or sets the eva analog jump.
            </summary>
            <value>
            The eva analog jump.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaMoveFwdAft">
            <summary>
            Gets or sets the fwd/aft movement input (used by EVA).
            </summary>
            <value>
            The fwd/aft movement input (used by EVA).
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaMoveUpDown">
            <summary>
            Gets or sets the eva move up down.
            </summary>
            <value>
            The eva move up down.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaPitch">
            <summary>
            Gets or sets the eva pitch.  Only used w/jetpacks.
            </summary>
            <value>
            The eva pitch.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaRoll">
            <summary>
            Gets or sets the eva roll.  Only used w/jetpacks.
            </summary>
            <value>
            The eva roll.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaShootTether">
            <summary>
            Gets or sets a value indicating whether the astronaut's tether should be shot.
            </summary>
            <value>
              <c>true</c> if the astronaut's tether should be shot; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaStrafe">
            <summary>
            Gets or sets the eva strafe.
            </summary>
            <value>
            The eva strafe.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaTetherLength">
            <summary>
            Gets or sets the value indicating how much to extend/retract the astronaut's tether by.
            </summary>
            <value>
            The value indicating how much to extend/retract the astronaut's tether by.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaTetherLengthOffset">
            <summary>
            Gets or sets the slider offset for the EVA tether length.
            </summary>
            <value>
            The slider offset for the EVA tether length.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaTurn">
            <summary>
            Gets or sets the eva turn.
            </summary>
            <value>
            The eva turn.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.EvaWalk">
            <summary>
            Gets or sets a value indicating whether the astronaut is walking.
            </summary>
            <value>
            The value indicating whether the astronaut is walking.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetBrake">
            <summary>
            Gets or sets the slider offset for brake.
            </summary>
            <value>
            The slider offset for brake.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetPitch">
            <summary>
            Gets or sets the slider offset for pitch.
            </summary>
            <value>
            The slider offset for pitch.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetRoll">
            <summary>
            Gets or sets the slider offset for roll.
            </summary>
            <value>
            The slider offset for roll.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetSlider1">
            <summary>
            Gets or sets the slider offset for slider 1.
            </summary>
            <value>
            The slider offset for slider 1.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetSlider2">
            <summary>
            Gets or sets the slider offset for slider 2.
            </summary>
            <value>
            The slider offset for slider 2.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetTranslateForward">
            <summary>
            Gets or sets the slider offset for translate forward.
            </summary>
            <value>
            The slider offset for translate forward.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetTranslateRight">
            <summary>
            Gets or sets the slider offset for translate right.
            </summary>
            <value>
            The slider offset for translate right.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetTranslateUp">
            <summary>
            Gets or sets the slider offset for translate up.
            </summary>
            <value>
            The slider offset for translate up.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.OffsetYaw">
            <summary>
            Gets or sets the slider offset for yaw.
            </summary>
            <value>
            The slider offset for yaw.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Pitch">
            <summary>
            Gets or sets the pitch.
            </summary>
            <value>
            The pitch.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.PitchInputReceived">
            <summary>
            Gets or sets a value indicating whether pitch input was received from the player this frame.
            </summary>
            <value>
              <c>true</c> if pitch input was received; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Roll">
            <summary>
            Gets or sets the roll.
            </summary>
            <value>
            The roll.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.RollInputReceived">
            <summary>
            Gets or sets a value indicating whether roll input was received from the player this frame.
            </summary>
            <value>
              <c>true</c> if roll input was received; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Slider1">
            <summary>
            Gets or sets the slider 1 input.
            </summary>
            <value>
            The slider 1 input.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Slider2">
            <summary>
            Gets or sets the slider 2 input.
            </summary>
            <value>
            The slider 2 input.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.TargetDirection">
            <summary>
            Gets the target direction, or null if the target heading is not currently set.
            </summary>
            <value>
            The target direction.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.TargetHeading">
            <summary>
            Gets or sets the target heading. Null if the target heading is not currently set.
            </summary>
            <value>
            The target heading.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Throttle">
            <summary>
            Gets or sets the throttle.
            </summary>
            <value>
            The throttle.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.TranslateForward">
            <summary>
            Gets or sets the translate forward input.
            </summary>
            <value>
            The translate forward input.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.TranslateRight">
            <summary>
            Gets or sets the translate right input.
            </summary>
            <value>
            The translate right input.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.TranslateUp">
            <summary>
            Gets or sets the translate up input.
            </summary>
            <value>
            The translate up input.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.TranslationModeEnabled">
            <summary>
            Gets or sets a value indicating whether translation mode is enabled.
            </summary>
            <value>
              <c>true</c> if translation mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.Yaw">
            <summary>
            Gets or sets the yaw.
            </summary>
            <value>
            The yaw.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftControls.YawInputReceived">
            <summary>
            Gets or sets a value indicating whether yaw input was received from the player this frame.
            </summary>
            <value>
              <c>true</c> if yaw input was received; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.CraftControls.CopyControls(ModApi.Craft.CraftControls,ModApi.Craft.CraftControls)">
            <summary>
            Copies all control input values from the source to the destination.
            </summary>
            <param name="sourceControls">The source controls.</param>
            <param name="destControls">The destination controls.</param>
        </member>
        <member name="M:ModApi.Craft.CraftControls.ZeroControls(ModApi.Craft.CraftControls)">
            <summary>
            Sets all control inputs to zero for the specified <see cref="T:ModApi.Craft.CraftControls"/>
            </summary>
            <param name="controls">The controls to zero out input values for.</param>
        </member>
        <member name="M:ModApi.Craft.CraftControls.GenerateStateXml">
            <summary>
            Generates the state XML for the controls.
            </summary>
            <returns>The XML element.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftControls.GetActivationGroup(System.Int32)">
            <summary>
            Gets the state of the activation group.
            </summary>
            <param name="activationGroup">The activation group to check state for.</param>
            <returns><c>true</c> if the activation group is enabled, otherwise <c>false.</c></returns>
        </member>
        <member name="M:ModApi.Craft.CraftControls.GetActivationGroupName(System.Int32)">
            <summary>
            Gets the name of the activation group.
            </summary>
            <param name="activationGroup">The activation group.</param>
            <returns>The name of the activation group.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftControls.SetActivationGroup(System.Int32,System.Boolean)">
            <summary>
            Sets the state of the activation group.
            </summary>
            <param name="activationGroup">The activation group for which to check state.</param>
            <param name="state">If set to <c>true</c>, the activation group will be enabled.</param>
        </member>
        <member name="M:ModApi.Craft.CraftControls.ToggleActivationGroup(System.Int32)">
            <summary>
            Toggles the state of the activation group.
            </summary>
            <param name="activationGroup">The activation group for which to toggle state.</param>
        </member>
        <member name="M:ModApi.Craft.CraftControls.ToggleTranslationMode">
            <summary>
            Toggles the translation mode for the craft controls.
            </summary>
        </member>
        <member name="M:ModApi.Craft.CraftControls.SetAttributeIfNonZero(System.Xml.Linq.XElement,System.String,System.Single)">
            <summary>
            Sets the attribute if it is non-zero.
            </summary>
            <param name="stateXml">The state XML.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="T:ModApi.Craft.CraftData">
            <summary>
            Defines a craft for IO purposes.
            </summary>
        </member>
        <member name="F:ModApi.Craft.CraftData.CurrentXmlVersion">
            <summary>
            The current XML version.
            </summary>
        </member>
        <member name="F:ModApi.Craft.CraftData._themes">
            <summary>
            The themes
            </summary>
        </member>
        <member name="M:ModApi.Craft.CraftData.#ctor(System.Xml.Linq.XElement,ModApi.Craft.CraftThemes,ModApi.Craft.Parts.PartTypeList)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.CraftData" /> class.
            </summary>
            <param name="xml">The craft element.</param>
            <param name="themes">The themes.</param>
            <param name="partTypes">The part types.</param>
        </member>
        <member name="M:ModApi.Craft.CraftData.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Craft.CraftData"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Craft.CraftData.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.DesignerSettings">
            <summary>
            Gets the designer settings.
            </summary>
            <value>
            The designer settings.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.InitialBoundsMax">
            <summary>
            Gets or sets the maximum bounds calculated in the designer when the craft was created. Will not be correct
            as the craft undergoes structural changes during flight.
            Note: This is relative to the command pod's position
            </summary>
            <value>
            The bounds maximum.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.InitialBoundsMin">
            <summary>
            Gets or sets the minimum bounds calculated in the designer when the craft was created. Will not be correct
            as the craft undergoes structural changes during flight.
            Note: This is relative to the command pod's position
            </summary>
            <value>
            The bounds minimum.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.LegacyLaunchConfiguration">
            <summary>
            Gets or sets a value indicating whether the craft was built in a previous version and its parts were setup to
            be centered on its root part instead of its center of mass. Special care must be taken to launch these crafts.
            </summary>
            <value>
              <c>true</c> if [legacy launch configuration]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.LocalCenterOfMass">
            <summary>
            Gets or sets the position of the center of mass relative to the root part.
            </summary>
            <value>
            The position of the center of mass relative to the root part.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.ParentAncestryId">
            <summary>
            Gets or sets the parent ancestry ID.
            </summary>
            <value>
            The parent ancestry ID.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.Price">
            <summary>
            Gets or sets the price.
            </summary>
            <value>
            The price.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.SuppressCraftConfigWarnings">
            <summary>
            Gets or sets a value indicating whether to suppress craft configuration warnings.
            </summary>
            <value>
              <c>true</c> if we should suppress craft configuration warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.Themes">
            <summary>
            Gets the themes.
            </summary>
            <value>
            The themes.
            </value>
        </member>
        <member name="P:ModApi.Craft.CraftData.XmlVersion">
            <summary>
            Gets or sets the version of the craft's XML.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="M:ModApi.Craft.CraftData.CreateEmptyCraftDataFromSource(ModApi.Craft.CraftData,ModApi.Craft.Assembly)">
            <summary>
            Creates a new craft data based on the source with the given assembly.
            </summary>
            <param name="source">The source craft data.</param>
            <param name="assembly">The assembly.</param>
            <returns>
            The craft data.
            </returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GetCraftName(System.Xml.Linq.XElement)">
            <summary>
            Gets the name of the craft from the specified craft XML.
            </summary>
            <param name="xml">The craft XML from which to get the craft name.</param>
            <returns>The name of the craft.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GetPrice(System.Xml.Linq.XElement)">
            <summary>
            Gets the price.
            </summary>
            <param name="xml">The XML.</param>
            <returns>The price.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GetRequiredMods(System.Xml.Linq.XElement)">
            <summary>
            Gets the required mods for the craft represented by the specified XML.
            </summary>
            <param name="xml">The craft XML for which to get the required mods.</param>
            <returns>The required mods for the craft represented by the specified XML.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GetXmlVersion(System.Xml.Linq.XElement)">
            <summary>
            Gets the craft XML version from the specified craft XML.
            </summary>
            <param name="xml">The XML from which to get the version.</param>
            <returns>The XML version of the craft XML.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.VerifyRequiredMods(System.Xml.Linq.XElement)">
            <summary>
            Verifies that the mods required by the craft represented by the specified XML are all installed and enabled.
            </summary>
            <param name="xml">The craft XML for which to verify the required mods.</param>
            <returns>An object containing verification data regarding the mods required by the craft.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.AddTheme(ModApi.Craft.ThemeData)">
            <summary>
            Adds the theme to this craft data and ensures it has a unique ID.
            </summary>
            <param name="themeData">The theme data.</param>
        </member>
        <member name="M:ModApi.Craft.CraftData.FindModifierById(System.String)">
            <summary>
            Finds the first part modifier by its id.
            </summary>
            <param name="id">The id of the modifier to find.</param>
            <returns>The requested modifier or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GenerateXml(UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Generates the XElement to fully describe this object for serialization purposes.
            </summary>
            <param name="craftTransform">The craft transform.</param>
            <param name="optimizeXml">If set to <c>true</c>, the generated craft XML will be optimized where possible.</param>
            <param name="generateRequiredMods">If set to <c>true</c>, the required mods data will be generated for the craft.</param>
            <returns>
            The XElement to fully describe this object for serialization purposes.
            </returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GetRequiredMods">
            <summary>
            Gets the collection of mods required for the craft.
            </summary>
            <returns>
            The collection of mods required for the craft.
            </returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.GetTheme(System.Guid)">
            <summary>
            Gets the theme with the specified id.
            </summary>
            <param name="themeId">The theme identifier.</param>
            <returns>The theme, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftData.RemoveTheme(ModApi.Craft.ThemeData)">
            <summary>
            Removes the theme.
            </summary>
            <param name="themeData">The theme data.</param>
        </member>
        <member name="T:ModApi.Craft.CraftThemes">
            <summary>
            Color themes for crafts.
            </summary>
        </member>
        <member name="M:ModApi.Craft.CraftThemes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.CraftThemes" /> class.
            </summary>
            <param name="xml">The XML content.</param>
        </member>
        <member name="P:ModApi.Craft.CraftThemes.Themes">
            <summary>
            Gets the themes.
            </summary>
            <value>
            The themes.
            </value>
        </member>
        <member name="M:ModApi.Craft.CraftThemes.GetTheme(System.String)">
            <summary>
            Gets the theme.
            </summary>
            <param name="name">The name of the theme to get.</param>
            <returns>The requested theme or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Craft.CraftThemes.LoadXml(System.String)">
            <summary>
            Loads the XML.
            </summary>
            <param name="xml">The XML.</param>
            <exception cref="T:System.Exception">Failed to parse craft themes XML.</exception>
        </member>
        <member name="T:ModApi.Craft.CraftXmlVersionUpdater">
            <summary>
            A class used for upgrading craft XML from previous XML versions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.CraftXmlVersionUpdater._upgradeActions">
            <summary>
            The upgrade actions, one for each XML version.
            </summary>
        </member>
        <member name="M:ModApi.Craft.CraftXmlVersionUpdater.Upgrade(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Upgrades the craft XML to the latest version.
            Assembly XML (part of the craft XML) is upgraded separately, however they share the same version number.
            </summary>
            <param name="xml">The craft XML to upgrade.</param>
            <param name="version">The version of the XML being upgraded.</param>
        </member>
        <member name="T:ModApi.Craft.DesignerSettingsData">
            <summary>
            Craft level settings related to the designer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.DesignerSettingsData.#ctor(System.Xml.Linq.XElement,System.Int32,ModApi.Craft.CraftThemes)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.DesignerSettingsData" /> class.
            </summary>
            <param name="xml">The XML element used to construct the class.</param>
            <param name="xmlVersion">The XML version.</param>
            <param name="themes">The themes.</param>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.CurrentThemeName">
            <summary>
            Gets or sets the name of the currently selected theme.
            </summary>
            <value>
            The name of the selected theme.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.CustomTheme">
            <summary>
            Gets or sets the custom theme.
            </summary>
            <value>
            The custom theme.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.PartCollisions">
            <summary>
            Gets the designer part collision settings.
            </summary>
            <value>
            The designer part collision settings.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.UserStages">
            <summary>
            Gets the list of stages that were manually added by the user.
            </summary>
            <value>
            The user added stages.
            </value>
        </member>
        <member name="M:ModApi.Craft.DesignerSettingsData.GenerateXml(System.Boolean)">
            <summary>
            Generates the XML for the designer settings data.
            </summary>
            <param name="optimizeXml">If set to <c>true</c>, the generated XML will be optimized where possible.</param>
            <returns>The XML for the designer settings data.</returns>
        </member>
        <member name="T:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions">
            <summary>
            A collection of settings related to designer part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.EnabledDefault">
            <summary>
            The default enabled setting for designer part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.FuselageShapeToolDefault">
            <summary>
            The default setting for determining whether the fuselage shape tool checks for part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.FuselageToolDefault">
            <summary>
            The default setting for determining whether the fuselage tool checks for part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.MovePartToolDefault">
            <summary>
            The default setting for determining whether the move part tool checks for part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.SymmetryModeChangeDefault">
            <summary>
            The default setting for determining whether symmetry mode changes check for part collisions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.ToleranceDefault">
            <summary>
            The default part collision tolerance value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.WingToolDefault">
            <summary>
            The default setting for determining whether the wing tool checks for part collisions.
            </summary>
        </member>
        <member name="M:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.#ctor(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions"/> class.
            </summary>
            <param name="xml">The XML element used to construct the class.</param>
            <param name="xmlVersion">The XML version.</param>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.Enabled">
            <summary>
            Gets or sets a value indicating whether designer part collisions are enabled or disabled.
            If disabled, this will override enabled settings for specific tools.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.FuselageShapeTool">
            <summary>
            Gets or sets a value indicating whether the fuselage shape tool checks for part collisions.
            </summary>
            <value>
              <c>true</c> if the fuselage shape tool checks for part collisions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.FuselageTool">
            <summary>
            Gets or sets a value indicating whether the fuselage tool checks for part collisions.
            </summary>
            <value>
              <c>true</c> if the fuselage tool checks for part collisions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.MovePartTool">
            <summary>
            Gets or sets a value indicating whether the move part tool checks for part collisions.
            </summary>
            <value>
              <c>true</c> if the move part tool checks for part collisions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.SymmetryModeChange">
            <summary>
            Gets or sets a value indicating whether the symmetry mode changes check for part collisions.
            </summary>
            <value>
              <c>true</c> if symmetry mode changes check for part collisions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.Tolerance">
            <summary>
            Gets or sets the part collision tolerance value.
            This is how many meters that parts are allowed to overlap each other before being considered colliding in the designer.
            </summary>
        </member>
        <member name="P:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.WingTool">
            <summary>
            Gets or sets a value indicating whether the wing tool checks for part collisions.
            </summary>
            <value>
              <c>true</c> if the wing tool checks for part collisions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.DesignerSettingsData.DesignerPartCollisions.GenerateXml">
            <summary>
            Generates the XML for the settings data.
            </summary>
            <returns>The XML for the settings data.</returns>
        </member>
        <member name="T:ModApi.Craft.Drag">
            <summary>
            Provides multi-directional drag information for each of the directions that a body can travel.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.ArraySize">
            <summary>
            The size of the array drag and area arrays.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag._area">
            <summary>
            The area that is causing the drag in m^2.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag._drag">
            <summary>
            The drag coefficient multiplied by the cross sectional area (Cd * A in the drag equation).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag._positions">
            <summary>
            The center of drag positions from all directions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag._totalArea">
            <summary>
            The total area in m^2, from all directions.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Drag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Drag"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Drag.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Drag"/> class from XML.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:ModApi.Craft.Drag.DragDirection">
            <summary>
            Directions included in part drag calculations.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.DragDirection.Forward">
            <summary>
            Drag applied when the body containing the part is moved forwards (0, 0, 1).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.DragDirection.Backward">
            <summary>
            Drag applied when the body containing the part is moved backwards (0, 0, -1).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.DragDirection.Upward">
            <summary>
            Drag applied when the body containing the part is moved up (0, 1, 0).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.DragDirection.Downward">
            <summary>
            Drag applied when the body containing the part is moved down (0, -1, 0).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.DragDirection.Leftward">
            <summary>
            Drag applied when the body containing the part is moved left (-1, 0, 0).
            </summary>
        </member>
        <member name="F:ModApi.Craft.Drag.DragDirection.Rightward">
            <summary>
            Drag applied when the body containing the part is moved right (1, 0, 0).
            </summary>
        </member>
        <member name="P:ModApi.Craft.Drag.IsOccluded">
            <summary>
            Gets a value indicating whether this instance is currently occluded by other parts.
            </summary>
            <value>
              <c>true</c> if this instance is currently occluded by other parts; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Drag.TotalArea">
            <summary>
            Gets the total area in m^2, from all directions.
            </summary>
            <value>
            The total area.
            </value>
        </member>
        <member name="M:ModApi.Craft.Drag.DragDirectionToVector3(ModApi.Craft.Drag.DragDirection)">
            <summary>
            Drags the direction to vector3.
            </summary>
            <param name="dragDirection">The drag direction.</param>
            <returns>The vector representing the direction.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.OppositeDirection(ModApi.Craft.Drag.DragDirection)">
            <summary>
            Returns the opposite direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The direction opposite to the one passed in.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.AddDrag(ModApi.Craft.Drag.DragDirection,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds the drag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="value">The drag value (Cd * A).</param>
            <param name="position">The position.</param>
            <param name="area">The area in m^2.</param>
        </member>
        <member name="M:ModApi.Craft.Drag.AddDrag(ModApi.Craft.Drag)">
            <summary>
            Adds the drag.
            </summary>
            <param name="drag">The drag.</param>
        </member>
        <member name="M:ModApi.Craft.Drag.ClearDrag(System.Nullable{ModApi.Craft.Drag.DragDirection})">
            <summary>
            Clears the drag values for the specified direction. If null is provided, then drag
            is cleared from all directions.
            </summary>
            <param name="direction">The direction to clear drag, or null to clear drag from all directions.</param>
        </member>
        <member name="M:ModApi.Craft.Drag.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The XML element.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.GetArea(ModApi.Craft.Drag.DragDirection)">
            <summary>
            Gets the area in m^2 for the specified direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The area for the specified direction.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.GetCenterOfDrag(ModApi.Craft.Drag.DragDirection)">
            <summary>
            Gets the center of drag for the direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The CoD for the specified direction.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.GetDrag">
            <summary>
            Gets the drag table for all directions.
            Warning, this is a direct reference to the drag array to be used for efficient access. Don't abuse it...
            </summary>
            <returns>The drag table for all directions.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.GetDrag(ModApi.Craft.Drag.DragDirection)">
            <summary>
            Gets the drag for the specified direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The drag for the specified direction.</returns>
        </member>
        <member name="M:ModApi.Craft.Drag.SetCenterOfDrag(ModApi.Craft.Drag.DragDirection,UnityEngine.Vector3)">
            <summary>
            Sets the center of drag for the direction.
            </summary>
            <param name="direction">The direction.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:ModApi.Craft.Drag.SetDrag(ModApi.Craft.Drag.DragDirection,System.Single,System.Single)">
            <summary>
            Sets the drag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="value">The value.</param>
            <param name="area">The area in m^2.</param>
        </member>
        <member name="M:ModApi.Craft.Drag.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Drag.ParseFloatArray(System.Single[],System.String)">
            <summary>
            Parses the float array from the value string.
            </summary>
            <param name="floatArray">The float array.</param>
            <param name="valueString">The value string.</param>
        </member>
        <member name="M:ModApi.Craft.Drag.WriteFloatArray(System.Single[])">
            <summary>
            Writes the float array to a comma separate string.
            </summary>
            <param name="floatArray">The float array.</param>
            <returns>
            The float array string.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Drag.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:ModApi.Craft.GroupCenterOfMass">
            <summary>
            Class for center of mass.
            </summary>
        </member>
        <member name="M:ModApi.Craft.GroupCenterOfMass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.GroupCenterOfMass"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.GroupCenterOfMass.#ctor(System.Collections.Generic.IEnumerable{ModApi.Craft.Parts.PartData})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.GroupCenterOfMass" /> class.
            </summary>
            <param name="parts">The parts to use for the calculation.</param>
        </member>
        <member name="P:ModApi.Craft.GroupCenterOfMass.CenterOfMass">
            <summary>
            Gets the center of mass.
            </summary>
            <value>
            The center of mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.GroupCenterOfMass.EmptyMass">
            <summary>
            Gets the empty mass.
            </summary>
            <value>
            The empty mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.GroupCenterOfMass.LoadedMass">
            <summary>
            Gets the total mass of all objects included.
            </summary>
            <value>
            The total mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.GroupCenterOfMass.MassWeightedCenterOfMass">
            <summary>
            Gets the mass weighted center of mass.
            </summary>
            <value>
            The mass weighted center of mass.
            </value>
        </member>
        <member name="T:ModApi.Craft.IBodyJoint">
            <summary>
            Interface for a body joint.
            </summary>
        </member>
        <member name="P:ModApi.Craft.IBodyJoint.Body">
            <summary>
            Gets body A of the joint.
            </summary>
            <value>
            The body a.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyJoint.Broken">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.IBodyJoint"/> is broken.
            </summary>
            <value>
            <c>true</c> if broken; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyJoint.ConnectedBody">
            <summary>
            Gets body A of the joint.
            </summary>
            <value>
            The body b.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyJoint.Joints">
            <summary>
            Gets the Unity physics joints involved in this body joint.
            </summary>
            <value>
            The joints.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyJoint.PartConnection">
            <summary>
            Gets the part connection.
            </summary>
            <value>
            The part connection.
            </value>
        </member>
        <member name="M:ModApi.Craft.IBodyJoint.Destroy">
            <summary>
            Destroys the joint and notifies the craft that the structure has been changed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.IBodyJoint.GetJointForAttachPoint(ModApi.Craft.Parts.AttachPoint)">
            <summary>
            Gets the physics joint for the specified attach point.
            </summary>
            <param name="attachPoint">The attach point.</param>
            <returns>The physics joint, or null if the attach point does not have a joint in this body joint.</returns>
        </member>
        <member name="M:ModApi.Craft.IBodyJoint.OtherBody(ModApi.Craft.IBodyScript)">
            <summary>
            Convenience method to get the other body in the joint.
            </summary>
            <param name="body">The body you don't want to get.</param>
            <returns>The body you do want to get.</returns>
        </member>
        <member name="T:ModApi.Craft.BodyScriptDelegate">
            <summary>
            Delegate for BodyScript events.
            </summary>
            <param name="bodyScript">The body script.</param>
        </member>
        <member name="T:ModApi.Craft.IBodyScript">
            <summary>
            Interface for a body script.
            </summary>
        </member>
        <member name="E:ModApi.Craft.IBodyScript.UnloadedFromGameView">
            <summary>
            Occurs when the body script has been unloaded from the game view.
            </summary>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.AccelerationMagnitude">
            <summary>
            Gets the magnitude of the acceleration of the body for this frame, in m/s.
            </summary>
            <value>
            The magnitude of the acceleration of the body for this frame, in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.Acceleration">
            <summary>
            Gets the acceleration vector of the body for this frame, in m/s.
            </summary>
            <value>
            The acceleration vector of the body for this frame, in m/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.ApplyStandardForces">
            <summary>
            Gets or sets a value indicating whether to apply standard forces such as drag, gravity, buoyancy, etc.
            </summary>
            <value>
              <c>true</c> if standard forces will be applied; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.CenterOfMass">
            <summary>
            Gets or sets the center of mass, relative to the transform's origin.
            </summary>
            <value>
            The center of mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.CollidingWithTerrain">
            <summary>
            Gets a value indicating whether the body is colliding with terrain.
            </summary>
            <value>
              <c>true</c> if currently colliding with terrain; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.CraftScript">
            <summary>
            Gets the craft.
            </summary>
            <value>
            The craft.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.Data">
            <summary>
            Gets the body.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.Disconnected">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Craft.IBodyScript"/> is disconnected
            from the body containing the command pod.
            </summary>
            <value>
              <c>true</c> if disconnected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.FluidDensity">
            <summary>
            Gets the fluid density that the body is currently in (atmosphere/water/vacuum).
            </summary>
            <value>
            The fluid density that the body is currently in (atmosphere/water/vacuum).
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.GameObject">
            <summary>
            Gets the game object.
            </summary>
            <value>
            The game object.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.IsDebris">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Craft.IBodyScript"/> is debris. If it
            is debris, it will not be separated into a CraftNode when disconnected bodies are processed.
            </summary>
            <value>
              <c>true</c> if body is debris; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.Joints">
            <summary>
            Gets the joints.
            </summary>
            <value>
            The joints.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.MachNumber">
            <summary>
            Gets the Mach number.
            </summary>
            <value>
            The Mach number.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.PartGroups">
            <summary>
            Gets the part groups.
            </summary>
            <value>
            The part groups.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.PartIsland">
            <summary>
            Gets the part island, which is the list of all parts in the craft that can be reached
            from any part in this body via part connections. This includes all parts in this body.
            </summary>
            <value>
            The part island.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.ReEntryEffectStrength">
            <summary>
            Gets the average Re-Entry effect strength on this body.
            </summary>
            <value>
            The average Re-Entry effect strength on this body.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.RigidBody">
            <summary>
            Gets the rigidbody.
            </summary>
            <value>
            The rigidbody.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.SurfaceVelocity">
            <summary>
            Gets the velocity of the body relative to the surface of the planet in frame coordinates.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.VelocityMagnitude">
            <summary>
            Gets the velocity magnitude.
            </summary>
            <value>
            The velocity magnitude.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.VelocityNormalized">
            <summary>
            Gets the velocity normalized.
            </summary>
            <value>
            The velocity normalized.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.VelocitySquared">
            <summary>
            Gets the velocity squared.
            </summary>
            <value>
            The velocity squared.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.WaterPhysics">
            <summary>
            Gets the water physics.
            </summary>
            <value>
            The water physics.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.WaterPhysicsEnabled">
            <summary>
            Gets a value indicating whether water physics enabled for this body.
            </summary>
            <value>
              <c>true</c> if water physics are enabled for this body; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyScript.WorldCenterOfMass">
            <summary>
            Gets the center of mass in world coordinates.
            </summary>
            <value>
            The center of mass in world coordinates.
            </value>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.AddFrameDrag(ModApi.Craft.Drag.DragDirection,System.Single,UnityEngine.Vector3)">
            <summary>
            Adds the frame drag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="drag">The drag.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.ExplodePart(ModApi.Craft.Parts.IPartScript,System.Single,System.Int32)">
            <summary>
            Creates an explosion and destroys the part. If zero is provided for power, then the part will
            just simply be destroyed, without an explosion.
            </summary>
            <param name="part">The part.</param>
            <param name="power">The explosion power.</param>
            <param name="numCascades">The number of explosion cascades.</param>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.OnPartMassChanged">
            <summary>
            Sets a flag on the body script notifying it that a part's mass has changed and the body needs to
            recalculate its total mass.
            </summary>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.QueuePartGroupForDestruction(ModApi.Craft.Parts.IPartGroupScript)">
            <summary>
            Adds the part group to the list of part groups to destroy this frame.
            </summary>
            <param name="partGroup">The part group.</param>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.RecalculateMass">
            <summary>
            Recalculates the mass and CoM of the body from its parts. This method should only be called
            during flight.
            </summary>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.SetBody(UnityEngine.Rigidbody)">
            <summary>
            Sets the rigid-body for this <see cref="T:ModApi.Craft.IBodyScript"/>
            </summary>
            <param name="body">The rigid-body to use for this <see cref="T:ModApi.Craft.IBodyScript"/>.</param>
        </member>
        <member name="M:ModApi.Craft.IBodyScript.SetCollidingWithTerrainFlag(System.Nullable{System.Boolean})">
            <summary>
            Sets the override flag indicating whether the body is currently colliding with the terrain.
            A value of <c>true</c> or <c>false</c> will override the normal value of the flag whereas a value of
            <c>null</c> will cause the flag to fall back to its default method of determining terrain collisions.
            </summary>
            <param name="collidingWithTerrain">
            <c>true</c> if the body is currently colliding with the terrain.
            <c>false</c> if the body is not currently colliding with the terrain.
            <c>null</c> to use the default terrain collision method for the body.
            </param>
        </member>
        <member name="T:ModApi.Craft.IBodyWaterPhysics">
            <summary>
            Body script's water physics.
            </summary>
        </member>
        <member name="P:ModApi.Craft.IBodyWaterPhysics.PrecisionModePartOverride">
            <summary>
            Gets or sets the part precision override.
            When set, this will assign the specified precision mode to all parts within the body.
            It is used for debug purposes to force all parts within the body to a specific precision mode.
            </summary>
            <value>
            The part precision override.
            </value>
        </member>
        <member name="P:ModApi.Craft.IBodyWaterPhysics.IsPrecisionModePerPart">
            <summary>
            Gets a value indicating whether the current precision mode processes individual parts for water physics, or solely at the rigid body level.
            This is used to allow PartWaterPhysics objects to know if they need to manually forward water related events since their Update method won't be called.
            </summary>
            <value>
            <c>true</c> if the current precision mode processes individual parts for water physics; otherwise, <c>false</c> to signify it is calculated solely at the rigid body level.
            </value>
        </member>
        <member name="T:ModApi.Craft.CrafConfigurationType">
            <summary>
            Defines the craft configuration assigned to this command pod.
            </summary>
        </member>
        <member name="F:ModApi.Craft.CrafConfigurationType.Rocket">
            <summary>
            The rocket
            </summary>
        </member>
        <member name="F:ModApi.Craft.CrafConfigurationType.Plane">
            <summary>
            The plane
            </summary>
        </member>
        <member name="T:ModApi.Craft.ICraftConfiguration">
            <summary>
            Data related to general configuration of a craft.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftConfiguration.DefaultPilotOrientation">
            <summary>
            Gets the default pilot orientation.
            </summary>
            <value>
            The default pilot orientation.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftConfiguration.Name">
            <summary>
            Gets the name of the configuration type.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftConfiguration.PartPulloutRotation">
            <summary>
            Gets the part pullout rotation; the rotation which is (optionally) applied to parts after they're pulled out.
            </summary>
            <value>
            The part pullout rotation.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftConfiguration.Type">
            <summary>
            Gets the configuration type.
            </summary>
            <value>
            The configuration type.
            </value>
        </member>
        <member name="M:ModApi.Craft.ICraftConfiguration.OnDesignerPartPullout(ModApi.Craft.Parts.IPartScript,ModApi.Craft.Assembly)">
            <summary>
            Called when a part being managed by this craft configuration is pulled out in the designer.  This is called before the part's DesignerStart() method is called, and while the previous part is still selected.
            </summary>
            <param name="partScript">The part script being pulled out.</param>
            <param name="assembly">The assembly this part is within (will contain all parts if contained in a sub-assembly).</param>
        </member>
        <member name="T:ModApi.Craft.ICraftDebris">
            <summary>
            Interface for craft debris.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftDebris.RigidBody">
            <summary>
            Gets the rigid body.
            </summary>
            <value>
            The rigid body.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftDebris.Transform">
            <summary>
            Gets the root transform.
            </summary>
            <value>
            The root transform.
            </value>
        </member>
        <member name="T:ModApi.Craft.ICraftFlightData">
            <summary>
            Interface for a craft's flight data.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Acceleration">
            <summary>
            Gets the acceleration vector of the craft in planet position.
            </summary>
            <value>
            The acceleration vector for the craft in planet position.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AccelerationFrame">
            <summary>
            Gets the acceleration vector of the craft in the reference frame.
            </summary>
            <value>
            The acceleration vector for the craft in the reference frame.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AccelerationMagnitude">
            <summary>
            Gets the magnitude of acceleration in m/s2 for the current frame.
            </summary>
            <value>
            The magnitude of acceleration in m/s2 for the current frame.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.ActiveEngines">
            <summary>
            Gets the active engines.
            </summary>
            <value>
            The active engines.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AltitudeAboveGroundLevel">
            <summary>
            Gets the altitude above ground level.
            </summary>
            <value>
            The altitude above ground level.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AltitudeAboveSeaLevel">
            <summary>
            Gets the altitude above sea level.
            </summary>
            <value>
            The altitude above sea level.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AngleOfAttack">
            <summary>
            Gets the angle of attack of the craft in degrees.
            </summary>
            <value>
            The angle of attack of the craft in degrees.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AngularVelocity">
            <summary>
            Gets the angular velocity of the craft around its CoM in rad/sec.
            </summary>
            <value>
            The angular velocity of the craft around its CoM in rad/sec.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AngularVelocityMagnitude">
            <summary>
            Gets the angular velocity in rad/s.
            </summary>
            <value>
            The angular velocity in rad/s.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.AtmosphereSample">
            <summary>
            Gets the atmosphere sample.
            </summary>
            <value>
            The atmosphere sample.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.BankAngle">
            <summary>
            Gets the bank angle of the craft in degrees. The bank angle is typically affected by roll inputs.
            </summary>
            <value>
            The bank angle of the craft in degrees.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CraftForward">
            <summary>
            Gets the forward vector of the craft in planet position coordinates.
            </summary>
            <value>
            The forward vector of the craft in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CraftRight">
            <summary>
            Gets the right vector of the craft in planet position coordinates.
            </summary>
            <value>
            The right vector of the craft in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CraftUp">
            <summary>
            Gets the up vector of the craft in planet position coordinates
            </summary>
            <value>
            The up vector of the craft in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CurrentEngineThrust">
            <summary>
            Gets the current thrust from all engines that are currently burning.
            </summary>
            <value>
            The force in scaled Newtons.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CurrentEngineThrustUnscaled">
            <summary>
            Gets the current engine thrust in Newtons.
            </summary>
            <value>
            The current engine thrust in Newtons (unscaled).
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CurrentMass">
            <summary>
            Gets the current mass in kg.
            </summary>
            <value>
            The current mass in kg. Note, these are not scaled kg.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.CurrentMassUnscaled">
            <summary>
            Gets the current mass in kg.
            </summary>
            <value>
            The current mass in kg (unscaled).
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.East">
            <summary>
            Gets the east vector for the craft.
            </summary>
            <value>
            The east vector.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Gravity">
            <summary>
            Gets the current gravity acceleration vector in planet position coordinates.
            </summary>
            <value>
            The gravity vector in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.GravityFrame">
            <summary>
            Gets the gravity force vector. This is the force of gravity for 1kg of mass. It should be scaled by the
            rigid body's mass before being used to apply a force. This vector is in the reference frame's coordinate system.
            Note: This gravity force is updated once per Update frame.
            </summary>
            <value>
            The gravity vector.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.GravityFrameNormalized">
            <summary>
            Gets the gravity vector, normalized.
            </summary>
            <value>
            The gravity vector, normalized.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.GravityMagnitude">
            <summary>
            Gets the gravity magnitude in m/s2.
            </summary>
            <value>
            The gravity magnitude in m/s2.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Grounded">
            <summary>
            Gets a value indicating whether the craft is currently touching the ground.
            </summary>
            <value>
              <c>true</c> if the craft is grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Heading">
            <summary>
            Gets the craft heading in degrees.
            </summary>
            <value>
            The craft heading in degrees.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.LateralSurfaceVelocity">
            <summary>
            Gets the lateral surface velocity.
            </summary>
            <value>
            The lateral surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.MachNumber">
            <summary>
            Gets the mach number.
            </summary>
            <value>
            The mach number.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.MaxActiveEngineThrust">
            <summary>
            Gets the total maximum thrust of active engines.
            </summary>
            <value>
            The force in scaled Newtons.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.MaxActiveEngineThrustUnscaled">
            <summary>
            Gets the total maximum thrust of active engines in Newtons.
            </summary>
            <value>
            The force in Newtons (unscaled).
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.NavSphereTarget">
            <summary>
            Gets the nav sphere's current target.
            </summary>
            <value>
            The nav sphere's current target.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.North">
            <summary>
            Gets the north vector for the craft.
            </summary>
            <value>
            The north vector.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Orbit">
            <summary>
            Gets the craft's orbit data.
            </summary>
            <value>
            The craft's orbit data.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.ParentPlanetOcclusion">
            <summary>
            Gets the parent planet occlusion value.
            This represents an approximation of how much the craft's parent planet is occluding the craft.
            A value of 1 represents no occlusion and a value of 0 represents a fully occluded craft.
            </summary>
            <value>
            The parent planet occlusion value.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Performance">
            <summary>
            Gets the craft's performance data.
            </summary>
            <value>
            The craft's performance data.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Pitch">
            <summary>
            Gets the craft pitch in degrees.
            </summary>
            <value>
            The craft pitch in degrees.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Position">
            <summary>
            Gets the position of the craft in planet position coordinates.
            </summary>
            <value>
            The position of the craft in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.PositionNormalized">
            <summary>
            Gets the normalized position of the craft in planet position coordinates.
            </summary>
            <value>
            The normalized position of the craft in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.RemainingBattery">
            <summary>
            Gets the percentage of remaining battery left in the craft.
            </summary>
            <value>
            The percentage of remaining battery.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.RemainingFuelInStage">
            <summary>
            Gets the percentage of remaining fuel left in the stage (0 to 1).
            </summary>
            <value>
            The percentage of remaining fuel in stage.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.RemainingMonopropellant">
            <summary>
            Gets the percentage of remaining monopropellant left in the craft.
            </summary>
            <value>
            The percentage of remaining monopropellant.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SideSlip">
            <summary>
            Gets the side slip angle of the craft in degrees. This is the angle between the forward vector of the craft and the
            craft's surface velocity vector about the craft's y-axis.
            </summary>
            <value>
            The side slip angle of the craft in degrees.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SolarRadiationDirection">
            <summary>
            Gets the solar radiation direction. This is in planet coordinates (i.e. - not rotated by the reference frame).
            </summary>
            <value>
            The solar radiation direction.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SolarRadiationFrameDirection">
            <summary>
            Gets the solar radiation direction. This is in frame coordinates.
            </summary>
            <value>
            The solar radiation direction in frame coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SolarRadiationIntensity">
            <summary>
            Gets the current amount of received solar radiation, which is based on how much sunlight is received
            from the sun at the current distance. Zero would indicate the node is shadowed.
            This is in Watts / Meter^2
            </summary>
            <value>
            The received solar radiation.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SupportsWarpBurn">
            <summary>
            Gets a value indicating whether the currently active engines support warp burn.
            This will also be true if there are no active engines.
            </summary>
            <value>
              <c>true</c> if the active engines support warp burn; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SurfaceVelocity">
            <summary>
            Gets the surface velocity in planet position coordinates.
            </summary>
            <value>
            The surface velocity in planet position coordinates.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SurfaceVelocityFrame">
            <summary>
            Gets the surface velocity in frame coordinates.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.SurfaceVelocityMagnitude">
            <summary>
            Gets the surface velocity magnitude.
            </summary>
            <value>
            The surface velocity magnitude.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.Velocity">
            <summary>
            Gets the velocity.
            </summary>
            <value>
            The velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.VelocityMagnitude">
            <summary>
            Gets the velocity magnitude.
            </summary>
            <value>
            The velocity magnitude.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.VerticalSurfaceVelocity">
            <summary>
            Gets the vertical surface velocity.
            </summary>
            <value>
            The vertical surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.WeightedThrottleResponse">
            <summary>
            Gets the thrust-weighted throttle response for all active engines in the current stage, which determines how quickly the engine responds to
            throttle input. A value of 1.0 would allow the engine to reach 100% throttle in one second.
            Value of 0.5 would require two seconds to reach 100% throttle.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftFlightData.WeightedThrottleResponseTime">
            <summary>
            Gets the thrust-weighted throttle response time, in seconds.  It is the number of seconds it will take to go from one throttle extreme to the other (fully on to off).
            </summary>
        </member>
        <member name="T:ModApi.Craft.ICraftOrbitData">
            <summary>
            Interface for a craft's orbit data.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.ApoapsisAltitude">
            <summary>
            Gets the apoapsis altitude in meters.
            </summary>
            <value>
            The apoapsis altitude in meters.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.ApoapsisTime">
            <summary>
            Gets the time from the current true anomaly to the apoapsis, in seconds.
            </summary>
            <value>
            The apoapsis time.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.Eccentricity">
            <summary>
            Gets the eccentricity.
            </summary>
            <value>
            The eccentricity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.Inclination">
            <summary>
            Gets the inclination in radians.
            </summary>
            <value>
            The inclination in radians.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.PeriapsisAltitude">
            <summary>
            Gets the periapsis altitude in meters.
            </summary>
            <value>
            The periapsis altitude in meters.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.PeriapsisTime">
            <summary>
            Gets the time from the current true anomaly to the periapsis, in seconds.
            </summary>
            <value>
            The periapsis time.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftOrbitData.Period">
            <summary>
            Gets the period.
            </summary>
            <value>
            The period.
            </value>
        </member>
        <member name="T:ModApi.Craft.ICraftPerformanceData">
            <summary>
            Interface for a craft's performance data.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftPerformanceData.CurrentIsp">
            <summary>
            Gets the current Isp of the active engines.
            </summary>
            <value>
            The current Isp of the active engines.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftPerformanceData.DeltaVStage">
            <summary>
            Gets the delta V remaining in the stage.
            </summary>
            <value>
            The delta V remaining in the stage.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftPerformanceData.FuelAllStagesPercentage">
            <summary>
            Gets the percentage of fuel in all remaining stages.
            </summary>
            <value>
            The percentage of fuel in all remaining stages.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftPerformanceData.RemainingBurnTime">
            <summary>
            Gets the remaining burn time in seconds.
            </summary>
            <value>
            The remaining burn time in seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftPerformanceData.ThrustToWeightRatio">
            <summary>
            Gets the thrust to weight ratio.
            </summary>
            <value>
            The thrust to weight ratio.
            </value>
        </member>
        <member name="T:ModApi.Craft.FuelDelegate">
            <summary>
            Delegate for events relating to fuel.
            </summary>
            <param name="fuel">The amount of fuel.</param>
            <param name="fuelType">The type of fuel.</param>
        </member>
        <member name="T:ModApi.Craft.ICraftFuelSources">
            <summary>
            Interface for fuel sources in the craft that don't require direct fuel line connections.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftFuelSources.FuelUsed">
            <summary>
            Occurs when fuel is used from any of the craft's fuel sources.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftFuelSources.FuelSources">
            <summary>
            Gets the list of all fuel sources.
            </summary>
            <value>
            The fuel sources in the craft.
            </value>
        </member>
        <member name="T:ModApi.Craft.ICraftLoader">
            <summary>
            An interface for an object containing functionality for loading craft data.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ICraftLoader.LoadCraftImmediate(System.String)">
            <summary>
            Loads the craft with the specified ID.
            This will show no message dialogs or errors and will attempt to force the
            loading of craft with potential issues (version or mod requirements not met).
            Some errors may be logged and exceptions could be thrown for show-stopping errors.
            </summary>
            <param name="craftId">The craft identifier.</param>
            <returns>The requested craft.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftLoader.LoadCraftImmediate(System.Xml.Linq.XElement)">
            <summary>
            Loads the craft with the specified XML.
            This will show no message dialogs or errors and will attempt to force the
            loading of craft with potential issues (version or mod requirements not met).
            Some errors may be logged and exceptions could be thrown for show-stopping errors.
            </summary>
            <param name="craftXml">The craft XML.</param>
            <returns>The requested craft.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftLoader.LoadCraftInteractive(System.String,System.Action{ModApi.Craft.CraftData},System.Action)">
            <summary>
            Loads the craft with the specified ID.
            This may be an interactive process, with message dialogs or errors being shown before completing.
            As such, the craft may not be loaded immediately. In fact, the craft may not be loaded at all due to errors or cancellation.
            The success callback will be invoked if the craft was loaded successfully (not necessarily without issues though).
            The failure callback will be invoked for any show-stopping errors that were encountered or if the loading was canceled.
            </summary>
            <param name="craftId">The craft identifier.</param>
            <param name="successCallback">The success callback.</param>
            <param name="failureCallback">The failure callback.</param>
        </member>
        <member name="M:ModApi.Craft.ICraftLoader.LoadCraftInteractive(System.Xml.Linq.XElement,System.Action{ModApi.Craft.CraftData},System.Action)">
            <summary>
            Loads the craft with the specified XML.
            This may be an interactive process, with message dialogs or errors being shown before completing.
            As such, the craft may not be loaded immediately. In fact, the craft may not be loaded at all due to errors or cancellation.
            The success callback will be invoked if the craft was loaded successfully (not necessarily without issues though).
            The failure callback will be invoked for any show-stopping errors that were encountered or if the loading was canceled.
            </summary>
            <param name="craftXml">The craft XML.</param>
            <param name="successCallback">The success callback.</param>
            <param name="failureCallback">The failure callback.</param>
        </member>
        <member name="T:ModApi.Craft.PhysicsChangedHandler">
            <summary>
            Handler for events related to physics being enabled/disabled.
            </summary>
            <param name="source">The source <see cref="T:ModApi.Craft.ICraftNode"/> where physics has changed.</param>
            <param name="reason">The reason for the change.</param>
        </member>
        <member name="T:ModApi.Craft.ICraftNode">
            <summary>
            Node for a craft. Manages the orbital movement and entering and exiting the reference frame.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftNode.PhysicsDisabled">
            <summary>
            Occurs when physics is being disabled for a craft node.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftNode.PhysicsEnabled">
            <summary>
            Occurs when physics has been enabled for the craft node.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftNode.TimeMultiplierModeChanged">
            <summary>
            Occurs after the time multiplier changes, and after this <see cref="T:ModApi.Craft.ICraftNode"/> has finished processing the event.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.Altitude">
            <summary>
            Gets the altitude above sea level, in meters.
            </summary>
            <value>
            The altitude.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.AltitudeAboveTerrain">
            <summary>
            Gets the altitude above the terrain, in meters.
            </summary>
            <value>
            The altitude above the terrain, in meters.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.AltitudeAgl">
            <summary>
            Gets the altitude above "ground" level, in meters.  When over water, this returns altitude above the water, not the terrain below.
            </summary>
            <value>
            The altitude.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.CanWarp">
            <summary>
            Gets a value indicating whether this instance can warp.
            </summary>
            <value>
              <c>true</c> if this instance can warp; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.Controls">
            <summary>
            Gets the controls.
            </summary>
            <value>
            The controls.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.CraftMass">
            <summary>
            Gets the craft's scaled mass.
            </summary>
            <value>
            The craft mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.CraftPartCount">
            <summary>
            Gets the craft's part count.
            </summary>
            <value>
            The number crafts parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.CraftScript">
            <summary>
            Gets the craft script.
            </summary>
            <value>
            The craft script.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.HasCommandPod">
            <summary>
            Gets a value indicating whether this instance has command pod.
            </summary>
            <value>
              <c>true</c> if this instance has command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.Heading">
            <summary>
            Gets the heading.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.InContactWithPlanet">
            <summary>
            Gets a value indicating whether this craft is touching the ground.
            </summary>
            <value>
              <c>true</c> if grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.IsPlayer">
            <summary>
            Gets a value indicating whether this CraftNode is being controlled by the player.
            </summary>
            <value>
              <c>true</c> if this instance is player; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
            <value>
            The node identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.ReferenceFrame">
            <summary>
            Gets the reference frame the craft is currently in.
            </summary>
            <value>
            The reference frame.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.SurfacePosition">
            <summary>
            Gets the surface position, or null if not currently touching the ground.
            </summary>
            <value>
            The surface position.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.SurfaceRotation">
            <summary>
            Gets the surface rotation, or null if not currently touching the ground.
            </summary>
            <value>
            The surface rotation.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftNode.SurfaceVelocity">
            <summary>
            Gets the surface velocity, or null if not currently touching the ground.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="T:ModApi.Craft.ActiveCommandPodChandedHandler">
            <summary>
            Handler for event when the active command pod has changed.
            </summary>
            <param name="source">The source craft.</param>
            <param name="newPod">The new pod.</param>
            <param name="oldPod">The old pod.</param>
        </member>
        <member name="T:ModApi.Craft.CraftScriptDelegate">
            <summary>
            Notification delegate related to <see cref="T:ModApi.Craft.ICraftScript" />s.
            </summary>
            <param name="craftScript">The craft script.</param>
        </member>
        <member name="T:ModApi.Craft.DockingDelegate">
            <summary>
            Delegate for an event involving docking with another craft.
            </summary>
            <param name="craftNodeNameA">The craft node name a.</param>
            <param name="craftNodeNameB">The craft node name b.</param>
        </member>
        <member name="T:ModApi.Craft.PartCollisionDelegate">
            <summary>
            Delegate for a part collision event.
            </summary>
            <param name="partCollision">The part collision.</param>
        </member>
        <member name="T:ModApi.Craft.PartDelegate">
            <summary>
            Delegate for an event involving a part.
            </summary>
            <param name="part">The part that exploded.</param>
        </member>
        <member name="T:ModApi.Craft.ICraftScript">
            <summary>
            Interface for the CraftScript.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.ActiveCommandPodChanged">
            <summary>
            Occurs when active command pod has changed for this craft.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.CraftStructureChanged">
            <summary>
            Occurs when the craft structure has changed.
            TODO: This is a major problem because parts that break off onto new crafts will be receiving events
            from an old craft.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.DockComplete">
            <summary>
            Occurs when docking has completed.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.Initialized">
            <summary>
            Occurs after this <see cref="T:ModApi.Craft.ICraftScript"/> has been fully initialized.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.PartCollisionEnter">
            <summary>
            Occurs when a part in the craft enters a collision.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.PartExploded">
            <summary>
            Occurs when a part has exploded.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ICraftScript.TimeMultiplierModeChanged">
            <summary>
            Occurs after the time multiplier changes, and after this <see cref="T:ModApi.Craft.ICraftScript"/> has finished processing the event.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.ActiveCommandPod">
            <summary>
            Gets the command pod currently being controlled by the player.
            </summary>
            <value>
            The active command pod.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.AtmosphereSample">
            <summary>
            Gets the current sample from the atmosphere at the current altitude.
            </summary>
            <value>
            The atmospheric sample.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.CameraFocus">
            <summary>
            Gets or sets the camera focus.
            </summary>
            <value>
            The camera focus.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.CameraTarget">
            <summary>
            Gets the transform where a camera should focus on when looking at the craft.
            </summary>
            <value>
            The transform where a camera should focus on when looking at the craft.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.CenterOfMass">
            <summary>
            Gets the center of mass of the craft, which is oriented to primary command pod's pilot orientation.  up=yaw, forward=roll, right=pitch.
            </summary>
            <value>
            The center of mass transform.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.CommandPods">
            <summary>
            Gets the command pods in the craft.
            </summary>
            <value>
            The command pods in the craft.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.CraftNode">
            <summary>
            Gets the craft node. This will only be non-null in the flight scene.
            </summary>
            <value>
            The craft node.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.Data">
            <summary>
            Gets the craft.
            </summary>
            <value>
            The craft.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.FlightData">
            <summary>
            Gets the flight data.
            </summary>
            <value>
            The flight data.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.FramePosition">
            <summary>
            Gets the position of the craft's CoM within the reference frame.
            </summary>
            <value>
            The position of the craft's CoM within the reference frame.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.FuelSources">
            <summary>
            Gets the fuel sources in the craft that don't require direct fuel line connections.
            </summary>
            <value>
            The craft fuel sources.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.GravityForce">
            <summary>
            Gets the gravity force vector. This is the force of gravity for 1kg of mass. It should be scaled by the
            rigid body's mass before being used to apply a force. This vector is in the reference frame's coordinate system.
            Note: This gravity force is updated once per Update frame.
            </summary>
            <value>
            The gravity vector.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.GravityMagnitude">
            <summary>
            Gets the gravity magnitude in m/s2.
            </summary>
            <value>
            The gravity magnitude in m/s2.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.GravityNormal">
            <summary>
            Gets the gravity vector, normalized.
            </summary>
            <value>
            The gravity vector, normalized.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.InletAir">
            <summary>
            Gets the inlet air.
            </summary>
            <value>
            The inlet air.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.IsPhysicsEnabled">
            <summary>
            Gets a value indicating whether the craft currently has physics enabled.
            </summary>
            <value>
            <c>true</c> if this craft has physics enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.Mass">
            <summary>
            Gets the mass.
            Note: This mass has been scaled by Constants.MassScale.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.PartHighlighter">
            <summary>
            Gets the part highlighter for the craft.
            </summary>
            <value>
            The part highlighter for the craft.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.PrimaryCommandPod">
            <summary>
            Gets the primary command pod, or null if there is not one.
            </summary>
            <value>
            The primary command pod.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.ReEntryIntensity">
            <summary>
            Gets the craft-level Re-Entry intensity.
            </summary>
            <value>
            The craft-level Re-Entry intensity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.ReferenceFrame">
            <summary>
            Gets the reference frame the craft is currently in.
            </summary>
            <value>
            The reference frame.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.RootPart">
            <summary>
            Gets the root part.
            </summary>
            <value>
            The root part.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.SurfaceVelocity">
            <summary>
            Gets the velocity of the craft relative to the surface of the planet in frame coordinates.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Craft.ICraftScript.Transform">
            <summary>
            Gets the transform for the craft.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.AddDebris(ModApi.Craft.ICraftDebris)">
            <summary>
            Adds the debris, which will then be managed by the craft and automatically
            removed when it drifts too far. It will also be updated with reference frame
            recenters.
            </summary>
            <param name="debris">The debris.</param>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.CalculateBounds">
            <summary>
            Calculates the bounds of the craft.
            </summary>
            <returns>The bounds.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.CalculateWingArea">
            <summary>
            Calculates the wing area, in m^2
            </summary>
            <returns>The wing area, in m^2</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.CalculateWingLoading">
            <summary>
            Calculates the wing loading, in kg/m^2.
            </summary>
            <returns>The wing loading, in kg/m^2.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.DestroyPart(ModApi.Craft.Parts.PartData,System.Boolean)">
            <summary>
            Removes the part from the craft.
            </summary>
            <param name="part">The part to destroy.</param>
            <param name="destroyPartGameObject">if set to <c>true</c> then destroy the part script game object too.
            Otherwise the part script game object will only be disabled.</param>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.GetAltitudeAboveGroundLevel(UnityEngine.Vector3)">
            <summary>
            Gets the altitude above ground level at the frame position.
            </summary>
            <param name="framePosition">The frame position.</param>
            <returns>The altitude above ground level at the frame position</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.GetAltitudeAboveSeaLevel(UnityEngine.Vector3)">
            <summary>
            Gets the altitude above sea level for the given frame position.
            </summary>
            <param name="framePosition">The frame position.</param>
            <returns>The altitude above sea level</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.GetColliderSubmergedPercent(UnityEngine.Collider)">
            <summary>
            Gets the percentage that the supplied collider is submerged under water.
            </summary>
            <param name="collider">The collider to determine the submerged percent for.</param>
            <returns>The percentage that the supplied collider is submerged under water.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.GetCraftWarnings">
            <summary>
            Analyzes the craft and produces warnings, if there are any.
            </summary>
            <returns>The craft warnings, or string.empty if there are none.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.GetVerticalVelocity">
            <summary>
            Gets the vertical velocity of the craft, relative to the planet.
            </summary>
            <returns>The vertical velocity of the craft, relative to the planet.</returns>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.InitiateDragRecalculation">
            <summary>
            Initiates the recalculation of drag for all parts in the craft. This operation will take
            multiple frames to complete. Each body in the craft will be processed one at a time. Each
            body will take six frames to recalculate drag. This only works in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.RaiseDesignerCraftStructureChangedEvent">
            <summary>
            Raises the event that the craft structure has changed for designer events.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.SetActiveCommandPod(ModApi.Craft.Parts.ICommandPod)">
            <summary>
            Sets the command pod.
            </summary>
            <param name="commandPod">The command pod.</param>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.SetMassChanged">
            <summary>
            Notifies the craft that its mass has changed and it should update its center of mass.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ICraftScript.SetStructureChanged">
            <summary>
            Sets a flag causing the StructureChangedEvent to be called at the end of the frame.
            </summary>
        </member>
        <member name="T:ModApi.Craft.ITheme">
            <summary>
            An interface for working with the theme of a craft.
            </summary>
        </member>
        <member name="E:ModApi.Craft.ITheme.PartMaterialsChanged">
            <summary>
            Occurs when one or more part materials change.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsAttached">
            <summary>
            Gets the part materials for attached parts.
            </summary>
            <value>
            The part materials for attached parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsBdm">
            <summary>
            Gets the default part materials for meshes rendered before the depth mask.
            </summary>
            <value>
            The default part materials for rendering before the depth mask.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsCollision">
            <summary>
            Gets the part materials for colliding parts.
            </summary>
            <value>
            The part materials for colliding parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsDefault">
            <summary>
            Gets the default part materials.
            </summary>
            <value>
            The part default materials.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsDisconnected">
            <summary>
            Gets the part materials for disconnected parts.
            </summary>
            <value>
            The part materials for disconnected parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsHidden">
            <summary>
            Gets the part materials for hidden parts.
            </summary>
            <value>
            The part materials for hidden parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsHighlighted">
            <summary>
            Gets the part materials for highlighted parts.
            </summary>
            <value>
            The part materials for highlighted parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartMaterialsSelected">
            <summary>
            Gets the part materials for selected parts.
            </summary>
            <value>
            The part materials for selected parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.ITheme.PartStateColors">
            <summary>
            Gets the part state coloring information.
            </summary>
            <value>
            The part state coloring information.
            </value>
        </member>
        <member name="M:ModApi.Craft.ITheme.GetMaterialIndex(System.Int32)">
            <summary>
            Gets the array index of the material, which is used by the part shader.
            </summary>
            <param name="materialId">The material identifier.</param>
            <returns>The array index of the material.</returns>
        </member>
        <member name="M:ModApi.Craft.ITheme.RefreshAll">
            <summary>
            Refreshes all data related to the current theme.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ITheme.RefreshMaterialProperties">
            <summary>
            Refreshes the material properties.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ITheme.ReleaseDefaultPartMaterialInstance(UnityEngine.Material)">
            <summary>
            Releases an instance of the default part material.
            </summary>
            <param name="material">The material to release.</param>
        </member>
        <member name="M:ModApi.Craft.ITheme.RequestDefaultPartMaterialInstance">
            <summary>
            Requests a new instance of the default part material.
            </summary>
            <returns>A new instance of the default part material.</returns>
        </member>
        <member name="M:ModApi.Craft.ITheme.UpdateMaterialRenderQueues(UnityEngine.Material[],ModApi.Craft.Parts.PartMeshRenderQueue)">
            <summary>
            Updates the render queues for the part materials.
            </summary>
            <param name="partMaterials">The part materials.</param>
            <param name="renderQueue">The render queue.</param>
        </member>
        <member name="M:ModApi.Craft.ITheme.UpdateThemeMaterial(System.Int32)">
            <summary>
            Updates the specified theme material based on the current state of the theme definition.
            </summary>
            <param name="materialId">The material identifier.</param>
        </member>
        <member name="M:ModApi.Craft.ITheme.UpdateThemeMaterial(System.Int32,UnityEngine.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updates the specified theme material.
            </summary>
            <param name="materialId">The material identifier.</param>
            <param name="color">The new color of the theme.</param>
            <param name="smoothness">The new smoothness value of the theme.</param>
            <param name="metallicness">The new metallicness value of the theme.</param>
            <param name="detailStrength">The detail strength value of the theme material.</param>
            <param name="emissionStrength">The emission strength value of the theme material.</param>
        </member>
        <member name="T:ModApi.Craft.WaterPhysicsHandler`1">
            <summary>
            General event handler related to body scripts.
            </summary>
            <typeparam name="T">The WaterPhysics type.</typeparam>
            <param name="source">The source.</param>
        </member>
        <member name="T:ModApi.Craft.PrecisionModeType">
            <summary>
            The physics precision seting for water.
            </summary>
        </member>
        <member name="F:ModApi.Craft.PrecisionModeType.NotifyOnly">
            <summary>
            Does the absolute minimum to raise events.  No physics are applied.
            </summary>
        </member>
        <member name="F:ModApi.Craft.PrecisionModeType.Low">
            <summary>
            Will report either 0 or 1 for UnderWaterAmount (either fully submerged, or not at all).  Does bare minimum to provide buoyancy.
            </summary>
        </member>
        <member name="F:ModApi.Craft.PrecisionModeType.Med">
            <summary>
            Same as Low, except will perform a few additional physics operations to stabilize an object on the surface of the water.
            </summary>
        </member>
        <member name="F:ModApi.Craft.PrecisionModeType.High">
            <summary>
            Will calculate a value ranging from 0 to 1 depending on how much the object is submerged.
            </summary>
        </member>
        <member name="T:ModApi.Craft.IWaterPhysics`1">
            <summary>
            For interacting with water physics.
            </summary>
            <typeparam name="T">The WaterPhysics type.</typeparam>
        </member>
        <member name="E:ModApi.Craft.IWaterPhysics`1.WaterEntered">
            <summary>
            Occurs when the body has entered the water.
            </summary>
        </member>
        <member name="E:ModApi.Craft.IWaterPhysics`1.WaterExited">
            <summary>
            Occurs when the body has exited the water.
            </summary>
        </member>
        <member name="E:ModApi.Craft.IWaterPhysics`1.WaterStay">
            <summary>
            Occurs while the body is in the water.
            </summary>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.BodyScript">
            <summary>
            Gets the body script.
            </summary>
            <value>
            The body script.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.DisplacedVolume">
            <summary>
            Gets the volume currently displaced by the part.
            </summary>
            <value>
            The volume currently displaced by the part.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.DisplacedVolumeScaled">
            <summary>
            Gets the volume currently displaced by the object, scaled by BuoyancyScale.
            </summary>
            <value>
            The volume currently displaced by the object, scaled by BuoyancyScale.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.IsFullySubmerged">
            <summary>
            Gets a value indicating whether this instance is fully submerged.
            </summary>
            <value>
              <c>true</c> if this instance is fully submerged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.IsInWater">
            <summary>
            Gets a value indicating whether this instance is in water.
            </summary>
            <value>
              <c>true</c> if this instance is in water; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.PrecisionMode">
            <summary>
            Gets or sets the precision mode.
            </summary>
            <value>
            The precision mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.TotalDisplacementVolume">
            <summary>
            Gets the total displacement volume of this object, ie. the volume of fluid it would displace if it were fully submerged.  Normally equal to the it's collider volume unless it
            is porous...or "empty", like a rocket nozzle would be.
            </summary>
            <value>
            The total displacement volume of this part.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.TotalDisplacementVolumeScaled">
            <summary>
            Gets the total displacement volume, scaled by BuoyancyScale.
            </summary>
            <value>
            The total displacement volume of this part.
            </value>
        </member>
        <member name="P:ModApi.Craft.IWaterPhysics`1.UnderWaterAmount">
            <summary>
            Gets a value indicating how much this object is under water, from 0 to 1.  Zero meaning not under water at all, and one meaning fully submerged.
            </summary>
            <value>
            The value indicating how much this object is under water, from 0 to 1  Zero meaning not under water at all, and one meaning fully submerged.
            </value>
        </member>
        <member name="M:ModApi.Craft.IWaterPhysics`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:ModApi.Craft.IWaterPhysics`1.Update">
            <summary>
            Updates the water physics for this object.
            </summary>
        </member>
        <member name="T:ModApi.Craft.InletAir">
            <summary>
            Tracks how much air is being added and used each frame.
            </summary>
        </member>
        <member name="F:ModApi.Craft.InletAir._availableAir">
            <summary>
            The total amount of air available this frame.
            </summary>
        </member>
        <member name="F:ModApi.Craft.InletAir._usedAir">
            <summary>
            The total amount of air used this frame.
            </summary>
        </member>
        <member name="P:ModApi.Craft.InletAir.AirEfficiency">
            <summary>
            Gets the air efficiency, which is 1 unless the used air exceeds the available air.
            </summary>
            <value>
            The air efficiency.
            </value>
        </member>
        <member name="P:ModApi.Craft.InletAir.AvailableAir">
            <summary>
            Gets the available air.
            </summary>
            <value>
            The available air.
            </value>
        </member>
        <member name="M:ModApi.Craft.InletAir.AddAir(System.Single)">
            <summary>
            Adds the specified amount of air.
            </summary>
            <param name="air">The air.</param>
        </member>
        <member name="M:ModApi.Craft.InletAir.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:ModApi.Craft.InletAir.UseAir(System.Single)">
            <summary>
            Uses the specified amount of air.
            </summary>
            <param name="air">The air.</param>
        </member>
        <member name="T:ModApi.Craft.PartGroupData">
            <summary>
            Contains a group of parts that will (attempted to) be combined into a single mesh
            and also the smallest unit that can break off.
            </summary>
        </member>
        <member name="M:ModApi.Craft.PartGroupData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.PartGroupData"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.PartGroupData.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="T:ModApi.Craft.PartLookup">
            <summary>
            Class that provides quick lookup of parts.
            </summary>
        </member>
        <member name="F:ModApi.Craft.PartLookup._parts">
            <summary>
            The parts
            </summary>
        </member>
        <member name="M:ModApi.Craft.PartLookup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.PartLookup"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.PartLookup.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="M:ModApi.Craft.PartLookup.AddPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Adds the part.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ModApi.Craft.PartLookup.ContainsPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Determines whether the part island contains the specified part.
            </summary>
            <param name="part">The part.</param>
            <returns>
              <c>true</c> if the specified part contains part; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.CraftProperties">
            <summary>
            Contains the available properties.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.CraftProperties._properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Craft.Program.CraftProperties"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.AddProperty(System.String,System.String,System.String,ModApi.Craft.Program.ListItemInfoType,System.String)">
            <summary>
            Adds the property.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="xmlName">Name of the XML.</param>
            <param name="itemType">Type of the item.</param>
            <param name="tooltip">The tooltip.</param>
            <returns>
            The craft property.
            </returns>
            <exception cref="T:System.ArgumentException">Craft property with XML name already exists.</exception>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.GetPropertiesInCategory(System.String)">
            <summary>
            Gets the properties in category.
            </summary>
            <param name="category">The category.</param>
            <returns>The properties.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.GetProperty(System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="xmlName">Name of the XML.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.GetCraftNodeByName(ModApi.Craft.Program.ProgramNode,ModApi.Craft.Program.IThreadContext,System.Int32)">
            <summary>
            Gets the craft by its name from the expression with the specified index.
            </summary>
            <param name="node">The node.</param>
            <param name="context">The context.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <returns>
            The craft, or null if it cannot be found.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.GetCraftNodeById(ModApi.Craft.Program.ProgramNode,ModApi.Craft.Program.IThreadContext,System.Int32)">
            <summary>
            Gets the craft node by identifier.
            </summary>
            <param name="node">The node.</param>
            <param name="context">The context.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <returns>The craft node, or null if it cannot be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.GetPartById(ModApi.Craft.Program.ProgramNode,ModApi.Craft.Program.IThreadContext,System.Int32)">
            <summary>
            Gets the part by identifier.
            </summary>
            <param name="node">The node.</param>
            <param name="context">The context.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <returns>
            The part, or null if it cannot be found.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.GetPartByName(ModApi.Craft.Program.ProgramNode,ModApi.Craft.Program.IThreadContext,System.Int32)">
            <summary>
            Gets the part by its name from the expression with the specified index.
            </summary>
            <param name="node">The node.</param>
            <param name="context">The context.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <returns>
            The part, or null if it cannot be found.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.CraftProperties.Vec(System.Nullable{UnityEngine.Vector3d})">
            <summary>
            Returns the vector value or Vector3d.zero if the vector is null.
            </summary>
            <param name="v">The vector.</param>
            <returns>The vector value or Vector3d.zero if the vector is null.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.CraftProperty">
            <summary>
            Represents a property on a craft.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.Getter">
            <summary>
            Gets or sets the getter.
            </summary>
            <value>
            The getter.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.Setter">
            <summary>
            Gets or sets the setter.
            </summary>
            <value>
            The setter.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.ItemType">
            <summary>
            Gets or sets the type of the item.
            </summary>
            <value>
            The type of the item.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.CraftProperty.XmlName">
            <summary>
            Gets or sets the name of the XML.
            </summary>
            <value>
            The name of the XML.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Craft.ICraftInputs">
            <summary>
            Interface for accessing craft inputs.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Brake">
            <summary>
            Gets or sets the brake.
            </summary>
            <value>
            The brake.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Pitch">
            <summary>
            Gets or sets the pitch.
            </summary>
            <value>
            The pitch.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Roll">
            <summary>
            Gets or sets the roll.
            </summary>
            <value>
            The roll.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Slider1">
            <summary>
            Gets or sets the slider1.
            </summary>
            <value>
            The slider1.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Slider2">
            <summary>
            Gets or sets the slider2.
            </summary>
            <value>
            The slider2.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Throttle">
            <summary>
            Gets or sets the throttle.
            </summary>
            <value>
            The throttle.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.TranslateForward">
            <summary>
            Gets or sets the translate forward.
            </summary>
            <value>
            The translate forward.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.TranslateRight">
            <summary>
            Gets or sets the translate right.
            </summary>
            <value>
            The translate right.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.TranslateUp">
            <summary>
            Gets or sets the translate up.
            </summary>
            <value>
            The translate up.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.TranslationMode">
            <summary>
            Gets or sets a value indicating whether translation mode is enabled.
            </summary>
            <value>
              <c>true</c> if translation mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftInputs.Yaw">
            <summary>
            Gets or sets the yaw.
            </summary>
            <value>
            The yaw.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Craft.CameraProperty">
            <summary>
            The available camera properties.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.CameraProperty.CameraMode">
            <summary>
            The camera mode
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.CameraProperty.CameraModeIndex">
            <summary>
            The camera mode index
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.CameraProperty.RotationX">
            <summary>
            The camera rotation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.CameraProperty.RotationY">
            <summary>
            The camera rotation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.CameraProperty.Tilt">
            <summary>
            The camera tilt.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.CameraProperty.Zoom">
            <summary>
            The camera zoom.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.Craft.TimeModeType">
            <summary>
            The time mode types.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.Paused">
            <summary>
            The paused time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.SlowMotion">
            <summary>
            The slow motion time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.Normal">
            <summary>
            The normal time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.FastForward">
            <summary>
            The fast forward time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp1">
            <summary>
            The time warp 1 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp2">
            <summary>
            The time warp 2 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp3">
            <summary>
            The time warp 3 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp4">
            <summary>
            The time warp 4 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp5">
            <summary>
            The time warp 5 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp6">
            <summary>
            The time warp 6 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp7">
            <summary>
            The time warp 7 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp8">
            <summary>
            The time warp 8 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp9">
            <summary>
            The time warp 9 time mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Craft.TimeModeType.TimeWarp10">
            <summary>
            The time warp 10 time mode.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.Craft.ICraftService">
            <summary>
            Service that provides access to methods and properties on a craft.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.CraftScript">
            <summary>
            Gets the craft script.
            </summary>
            <value>
            The craft script.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.Data">
            <summary>
            Gets the craft data object.
            </summary>
            <value>
            The data object.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.ExecutingPart">
            <summary>
            Gets the part that is currently executing this program.
            </summary>
            <value>
            The part that is currently executing this program.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.FrameDeltaTime">
            <summary>
            Gets the frame delta time, in seconds.
            </summary>
            <value>
            The frame delta time, in seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.Inputs">
            <summary>
            Gets the craft inputs.
            </summary>
            <value>
            The craft inputs.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.NavSphere">
            <summary>
            Gets the nav sphere.
            </summary>
            <value>
            The nav sphere.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.TimeMode">
            <summary>
            Gets or sets the time mode.
            </summary>
            <value>
            The time mode.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.TimeSinceLaunch">
            <summary>
            Gets the time since launch, in seconds.
            </summary>
            <value>
            The time since launch, in seconds.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Craft.ICraftService.TotalTime">
            <summary>
            Gets the total amount of time since the sandbox was created, in seconds.
            </summary>
            <value>
            The total amount of time since the sandbox was created, in seconds.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.ActivateNextStage">
            <summary>
            Activates the next stage.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.BroadcastMessage(System.Boolean,System.String,System.String)">
            <summary>
            Broadcasts the message.
            </summary>
            <param name="local">if set to <c>true</c> then only send the message to the same flight program. If false, then send to all flight programs in the craft.</param>
            <param name="messageName">The name of the message.</param>
            <param name="data">The message data.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.ConvertLatLongAglToPlanetPosition(UnityEngine.Vector3d)">
            <summary>
            Converts the lat/long/AGL vector to planet position coordinates.
            </summary>
            <param name="latLongAgl">The position in lat, long, AGL.</param>
            <returns>The planet position.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.ConvertLocalToPCI(ModApi.Craft.Parts.IPartScript,UnityEngine.Vector3)">
            <summary>
            Converts the vector in the craft's local coordinates to PCI coordinates.
            </summary>
            <param name="part">The part, or null to use the craft's orientation.</param>
            <param name="local">The local vector, relative to the craft's local transform.</param>
            <returns>
            The vector in PCI coordinates.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.ConvertPCIToLocal(ModApi.Craft.Parts.IPartScript,UnityEngine.Vector3d)">
            <summary>
            Converts the vector in the PCI coordinates to the craft's local coordinates.s
            </summary>
            <param name="part">The part, or null to use the craft's orientation.</param>
            <param name="pci">The vector in PCI coordinates.</param>
            <returns>
            The vector in local coordinates to the craft.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.ConvertPlanetPositionToLatLongAgl(UnityEngine.Vector3d)">
            <summary>
            Converts the planet position vector to a Vector3d with x = lat, y = long, and z = AGL.
            </summary>
            <param name="position">The position in planet position coordinates.</param>
            <returns>The lat, long, AGL vector.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.DisplayMessage(System.String,System.Single)">
            <summary>
            Displays the message in the flight scene.
            </summary>
            <param name="message">The message.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.GetActivationGroupState(System.Int32)">
            <summary>
            Gets the state of the activation group.
            </summary>
            <param name="activationGroup">The activation group.</param>
            <returns>The activation group state.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.GetCraftNode(System.Int32)">
            <summary>
            Gets the craft node with the specifeid ID.
            </summary>
            <param name="craftNodeId">The craft node identifier.</param>
            <returns>The craft node or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.GetCraftNodeByName(System.String)">
            <summary>
            Gets the craft by name, or <c>null</c> if it does not exist.
            </summary>
            <param name="craftName">The craft name.</param>
            <returns>The craft with the specified name.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.GetPlanet(System.String)">
            <summary>
            Gets the planet node with the specified name.
            </summary>
            <param name="planetName">Name of the planet.</param>
            <returns>The planet node.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.SetActivationGroupState(System.Int32,System.Boolean)">
            <summary>
            Sets the state of the activation group.
            </summary>
            <param name="activationGroup">The activation group (starting with 1, not 0).</param>
            <param name="state">if set to <c>true</c> then activate the group. Otherwise deactivate the group.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.SetCameraProperty(ModApi.Craft.Program.Craft.CameraProperty,ModApi.Craft.Program.ExpressionResult)">
            <summary>
            Sets the camera property to the specified value.
            </summary>
            <param name="cameraProperty">The camera property.</param>
            <param name="value">The value to set the camera property to.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.SetTargetNode(System.String)">
            <summary>
            Sets the craft's target node.
            </summary>
            <param name="name">The target's name.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Craft.ICraftService.SwitchToCraftNode(ModApi.Craft.ICraftNode)">
            <summary>
            Switches to craft node.
            </summary>
            <param name="craftNode">The craft node.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.ActivationGroupExpression">
            <summary>
            Expression that returns the state of an activation group.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.ActivationGroupExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ActivationGroupExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ActivationGroupExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ActivationGroupExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ActivationGroupExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.BinaryOperatorExpression">
            <summary>
            Expression that returns the result of an operation on two operands.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.BinaryOperatorExpression._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.BinaryOperatorExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.BinaryOperatorExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.ExpressionA">
            <summary>
            Gets the expression A.
            </summary>
            <value>
            The expression A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.ExpressionB">
            <summary>
            Gets the expression B.
            </summary>
            <value>
            The expression B.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.EvaluateAsNumbers(ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ExpressionResult,ModApi.Craft.Program.ExpressionResult)">
            <summary>
            Evaluates the result as numbers.
            </summary>
            <param name="context">The context.</param>
            <param name="lhs">The expression on the left-hand side of the operator.</param>
            <param name="rhs">The expression on the right-hand side of the operator.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.BinaryOperatorExpression.EvaluateAsVectors(ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ExpressionResult,ModApi.Craft.Program.ExpressionResult)">
            <summary>
            Evaluates the result as numbers.
            </summary>
            <param name="context">The context.</param>
            <param name="lhs">The expression on the left-hand side of the operator.</param>
            <param name="rhs">The expression on the right-hand side of the operator.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.BoolOperatorExpression">
            <summary>
            Expression that returns the result of a bool operation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.BoolOperatorExpression._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.BoolOperatorExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.BoolOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.BoolOperatorExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BoolOperatorExpression.ExpressionA">
            <summary>
            Gets the expression A.
            </summary>
            <value>
            The expression A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BoolOperatorExpression.ExpressionB">
            <summary>
            Gets the expression B.
            </summary>
            <value>
            The expression B.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BoolOperatorExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.BoolOperatorExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.BoolOperatorExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.CallCustomExpression">
            <summary>
            Instruction that invokes a custom expression.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.ProgramExpression" />
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CallCustomExpression._call">
            <summary>
            The name of the custon expression to call.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CallCustomExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.CallCustomExpression" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CallCustomExpression.Call">
            <summary>
            Gets or sets the custom expression to call.
            </summary>
            <value>
            The custom expression to call.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CallCustomExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CallCustomExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.ComparisonExpression">
            <summary>
            Expression that returns the result of a comparison between two expressions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.ComparisonExpression._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.ComparisonExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ComparisonExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ComparisonExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ComparisonExpression.ExpressionA">
            <summary>
            Gets the expression A.
            </summary>
            <value>
            The expression A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ComparisonExpression.ExpressionB">
            <summary>
            Gets the expression B.
            </summary>
            <value>
            The expression B.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ComparisonExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ComparisonExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ComparisonExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.ConditionalExpression">
            <summary>
            Expression that returns the one expression if true, and the other if false.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.ConditionalExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConditionalExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConditionalExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ConditionalExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConditionalExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.ConstantExpression">
            <summary>
            Constant expression.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.ProgramExpression" />
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConstantExpression"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConstantExpression"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConstantExpression"/> class.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConstantExpression" /> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.#ctor(UnityEngine.Vector3d)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConstantExpression" /> class.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ConstantExpression"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ConstantExpression.ExpressionResult">
            <summary>
            Gets the expression result.
            </summary>
            <value>
            The expression result.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ConstantExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result..
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ConstantExpression.OnSerialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been serialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.CraftPropertyExpression">
            <summary>
            Expression that returns the current state of a property of the craft.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.ProgramExpression" />
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CraftPropertyExpression._category">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CraftPropertyExpression._craftProperty">
            <summary>
            The craft property
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CraftPropertyExpression._property">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CraftPropertyExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CraftPropertyExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CraftPropertyExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CraftPropertyExpression.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CraftPropertyExpression.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CraftPropertyExpression.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CraftPropertyExpression.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.CustomExpression">
            <summary>
            Custom expression created by a user.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CustomExpression._callFormat">
            <summary>
            The call format
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CustomExpression._format">
            <summary>
            The format
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CustomExpression._localVariables">
            <summary>
            The local variables
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.CustomExpression._name">
            <summary>
            The name of the expression.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CustomExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.CustomExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CustomExpression.CallFormat">
            <summary>
            Gets or sets the format to use for the caller expression.
            </summary>
            <value>
            The format to use for the caller expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CustomExpression.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CustomExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CustomExpression.LocalVariables">
            <summary>
            Gets the local variable definitions.
            </summary>
            <value>
            The local variables.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.CustomExpression.Name">
            <summary>
            Gets or sets the name of the custom expression.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.CustomExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.ListOperatorExpression">
            <summary>
            Expression that returns the result of a list operation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.ListOperatorExpression._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.ListOperatorExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ListOperatorExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.ListOperatorExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.EvaluteCreate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evalutes the create.
            </summary>
            <param name="context">The context.</param>
            <returns>The expression result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.EvaluteGet(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evalutes the get.
            </summary>
            <param name="context">The context.</param>
            <returns>The expression result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.EvaluteIndex(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evalutes the index.
            </summary>
            <param name="context">The context.</param>
            <returns>The expression result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.EvaluteLength(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evalutes the length.
            </summary>
            <param name="context">The context.</param>
            <returns>The expression result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.ListOperatorExpression.GetList(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Gets the list.
            </summary>
            <param name="context">The context.</param>
            <returns>The list.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.MathFunctionExpression">
            <summary>
            Expression that evaluates a function with a paremeter and returns the result.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.ProgramExpression" />
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.MathFunctionExpression._functions">
            <summary>
            The math functions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.MathFunctionExpression._function">
            <summary>
            The function this expression should execute.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.MathFunctionExpression._mathFunction">
            <summary>
            The currently selected math function.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.MathFunctionExpression._result">
            <summary>
            The expression result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Craft.Program.Expressions.MathFunctionExpression"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.MathFunctionExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.FunctionName">
            <summary>
            Gets or sets the name of the function to call.
            </summary>
            <value>
            The name of the function.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.FunctionNames">
            <summary>
            Gets the function names.
            </summary>
            <value>
            The function names.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The list elements.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.AddMathFunction(System.String,ModApi.Craft.Program.ListItemInfoType,System.String,System.Func{System.Double,System.Double})">
            <summary>
            Adds the math function.
            </summary>
            <param name="name">The name.</param>
            <param name="itemType">Type of the item.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="function">The function.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.SetFunction(System.String)">
            <summary>
            Sets the function.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction">
            <summary>
            Math function.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction.#ctor(System.String,ModApi.Craft.Program.ListItemInfoType,System.String,System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="itemType">Type of the item.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="execute">The function to execute.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction.Execute">
            <summary>
            Gets or sets the function to execute.
            </summary>
            <value>
            The function to execute.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>
            The type of the item.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.MathFunctionExpression.MathFunction.Tooltip">
            <summary>
            Gets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.NotExpression">
            <summary>
            Expression that returns the result of a not operation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.NotExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.NotExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.NotExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.NotExpression.Expression">
            <summary>
            Gets the expression A.
            </summary>
            <value>
            The expression A.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.NotExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.NotExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.PlanetExpression">
            <summary>
            Expression that deals with returning information from a planet.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.PlanetExpression._op">
            <summary>
            The operation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.PlanetExpression._opLower">
            <summary>
            The op lower
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.PlanetExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.PlanetExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.PlanetExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.PlanetExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.PlanetExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.PlanetExpression.GetListItems(System.String)">
            <summary>
            Gets the list items for the list with the specified ID.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The list elements, or null if there are no elements for the specified list.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.PlanetExpression.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The currently selected value.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.PlanetExpression.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.PlanetExpression.Evaluate(ModApi.Craft.Program.IThreadContext,System.Action{ModApi.Flight.Sim.IPlanetNode,ModApi.Craft.Program.ExpressionResult})">
            <summary>
            Evaluates the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.StringOperatorExpression">
            <summary>
            Expression that returns the result of a string operation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.StringOperatorExpression._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.StringOperatorExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.StringOperatorExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.StringOperatorExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.StringOperatorExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.EvaluateContainsOp(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Processes the contains operation.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.EvaluateFormatOp(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Processes the format operation.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.EvaluateJoinOp(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Processes the join operation.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.EvaluateLengthOp(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Processes the length operation.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.EvaluateLetterOp(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the letter operation.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.EvaluateSubstringOp(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the substring op.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.GetText(ModApi.Craft.Program.IThreadContext,System.Int32)">
            <summary>
            Gets the text from the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <returns>The text, or empty string if there is none.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.LeftInt(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Gets the right side of the operation as text.
            </summary>
            <param name="context">The context.</param>
            <returns>The right side as text.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.LeftText(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Gets the left side of the operation as text.
            </summary>
            <param name="context">The context.</param>
            <returns>The left side as text.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.StringOperatorExpression.RightText(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Gets the right side of the operation as text.
            </summary>
            <param name="context">The context.</param>
            <returns>The right side as text.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.VectorExpression">
            <summary>
            Expression that creates a vector from x, y, and z components.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.VectorExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.VectorExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.VectorExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Expressions.VectorOperatorExpression">
            <summary>
            Expression that returns the result of an operation on one or more vectors.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.VectorOperatorExpression._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Expressions.VectorOperatorExpression._result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Expressions.VectorOperatorExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.VectorOperatorExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Expressions.VectorOperatorExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorOperatorExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The value of the expression.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorOperatorExpression.GetListItems(System.String)">
            <summary>
            Gets the list items for the list with the specified ID.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The list elements, or null if there are no elements for the specified list.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorOperatorExpression.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The currently selected value.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Expressions.VectorOperatorExpression.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.ExpressionType">
            <summary>
            The types of expressions.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionType.Boolean">
            <summary>
            The boolean expression type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionType.List">
            <summary>
            The list expression type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionType.Text">
            <summary>
            The text expression type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionType.Number">
            <summary>
            The number expression type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionType.Vector">
            <summary>
            The vector expression type.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.ExpressionResult">
            <summary>
            Expression result that contains the result of an expression.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionResult._bool">
            <summary>
            The bool value.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionResult._list">
            <summary>
            The list
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionResult._number">
            <summary>
            The number
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionResult._resetCaches">
            <summary>
            This flag is set when the value changes so any cached values are wiped out and will require recalculation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionResult._text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ExpressionResult._vector">
            <summary>
            The vector value.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ExpressionResult"/> class.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ExpressionResult"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ExpressionResult"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.BoolValue">
            <summary>
            Gets or sets a value indicating whether this expression result is true. If this expression
            is not of this type, then it will attempt to calculate/cast it from its currently
            set type.
            </summary>
            <value>
            The value of this variable as a bool.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.ExpressionType">
            <summary>
            Gets the type of the expression.
            </summary>
            <value>
            The type of the expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.IsNumberOrNumberAsText">
            <summary>
            Gets a value indicating whether this expression is a number or if it is a text expression
            that can be converted to a number.
            </summary>
            <value>
            True if the expression is a number or text that can be converted to a number.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.IsVectorOrVectorAsText">
            <summary>
            Gets a value indicating whether this expression is a vector or if it is a text expression
            that can be converted to a vector.
            </summary>
            <value>
            True if the expression is a vector or text that can be converted to a vector.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.ListValue">
            <summary>
            Gets the list value.
            </summary>
            <value>
            The list value.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.NumberValue">
            <summary>
            Gets or sets the value of this expression result as a number. If this expression
            is not of this type, then it will attempt to calculate/cast it from its currently
            set type.
            </summary>
            <value>
            The value of this variable as a number.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.TextValue">
            <summary>
            Gets or sets the value of this expression result as a string. If this expression
            is not of this type, then it will attempt to calculate/cast it from its currently
            set type.
            </summary>
            <value>
            The value of this variable as a string.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ExpressionResult.VectorValue">
            <summary>
            Gets or sets the value of this expression result as a vector. If this expression
            is not of this type, then it will attempt to calculate/cast it from its currently
            set type.
            </summary>
            <value>
            The value of this variable as a vector.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.GetListForModification">
            <summary>
            Gets the list for modification. The caller must call OnListModified when they
            are done modifying the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.OnListModified">
            <summary>
            Called when the list has been modified.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the state of the expression to the XML element.
            </summary>
            <param name="xml">The XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.Set(ModApi.Craft.Program.ExpressionResult)">
            <summary>
            Sets the value of the expression result from another expresion result.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.CastToBool">
            <summary>
            Casts the current expression to bool.
            </summary>
            <returns>The bool result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.CastToList">
            <summary>
            Casts the current expression to a list.
            </summary>
            <returns>The list result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.CastToNumber">
            <summary>
            Casts the current expression to a number.
            </summary>
            <returns>The number result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.CastToText">
            <summary>
            Casts the current expression to text.
            </summary>
            <returns>The text result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.CastToVector">
            <summary>
            Casts the current expression to a vector.
            </summary>
            <returns>The vector result.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ExpressionResult.ResetCaches">
            <summary>
            Resets the casts.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramExpression">
            <summary>
            Base class for expression classes.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramExpression"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramExpression.CanReplaceInUI">
            <summary>
            Gets or sets a value indicating whether this instance can replace in UI.
            </summary>
            <value>
              <c>true</c> if this instance can replace in UI; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramExpression.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramExpression.OnSerialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been serialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="T:ModApi.Craft.Program.VariableExpression">
            <summary>
            Expression that returns the value of a variable.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.VariableExpression._list">
            <summary>
            The flag that indicates if this variable expression is a list.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.VariableExpression._local">
            <summary>
            Flag that indicates if this is a local variable.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.VariableExpression._variableName">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.VariableExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.VariableExpression" /> class.
            </summary>
            <param name="list">if set to <c>true</c> then this variable is a list.</param>
        </member>
        <member name="P:ModApi.Craft.Program.VariableExpression.IsBoolean">
            <summary>
            Gets a value indicating whether this expression is a boolean expression type.
            </summary>
            <value>
              <c>true</c> if this instance is boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.VariableExpression.IsDefinition">
            <summary>
            Gets or sets a value indicating whether this instance is definition.
            </summary>
            <value>
              <c>true</c> if this instance is definition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.VariableExpression.IsList">
            <summary>
            Gets a value indicating whether this instance is a list.
            </summary>
            <value>
              <c>true</c> if this instance is a list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.VariableExpression.IsLocal">
            <summary>
            Gets or sets a value indicating whether this instance is local.
            </summary>
            <value>
              <c>true</c> if this instance is local; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.VariableExpression.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>
            The name of the variable.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.VariableExpression.Evaluate(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Evaluates this expression and returns the result.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The expression result.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.FlightProgram">
            <summary>
            Flight program.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.FlightProgram._customExpressions">
            <summary>
            The custom expressions
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.FlightProgram._customInstructions">
            <summary>
            The custom instructions
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.FlightProgram"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.FlightProgram.CustomExpressions">
            <summary>
            Gets the custom expressions.
            </summary>
            <value>
            The custom expressions.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.FlightProgram.CustomInstructions">
            <summary>
            Gets the custom instructions.
            </summary>
            <value>
            The custom instructions.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.FlightProgram.GlobalVariables">
            <summary>
            Gets or sets the global variables.
            </summary>
            <value>
            The global variables.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.FlightProgram.Name">
            <summary>
            Gets or sets the name of the program.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.FlightProgram.RootExpressions">
            <summary>
            Gets the root expressions.
            </summary>
            <value>
            The root expressions.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.FlightProgram.RootInstructions">
            <summary>
            Gets the root instructions.
            </summary>
            <value>
            The root instructions.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.AddCustomExpression(ModApi.Craft.Program.Expressions.CustomExpression)">
            <summary>
            Adds the custom expression.
            </summary>
            <param name="customExpression">The custom expression.</param>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.AddCustomInstruction(ModApi.Craft.Program.Instructions.CustomInstruction)">
            <summary>
            Adds the custom instruction.
            </summary>
            <param name="customInstruction">The custom instruction.</param>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.GetCustomExpression(System.String)">
            <summary>
            Gets the custom expression.
            </summary>
            <param name="name">The name.</param>
            <returns>The custom expression, or null if there are none with the specified name.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.GetCustomInstruction(System.String)">
            <summary>
            Gets the custom instruction.
            </summary>
            <param name="name">The name.</param>
            <returns>The custom instruction, or null if there are none with the specified name.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.ModApi#Craft#Program#Instructions#IGetInstructionById#GetInstructionById(System.Int32)">
            <summary>
            Gets the instruction by specified ID.
            </summary>
            <param name="instructionId">The instruction ID.</param>
            <returns>The program instruction, or null if it cannot be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.RemoveCustomExpression(ModApi.Craft.Program.Expressions.CustomExpression)">
            <summary>
            Removes the custom expression.
            </summary>
            <param name="customExpression">The custom expression.</param>
        </member>
        <member name="M:ModApi.Craft.Program.FlightProgram.RemoveCustomInstruction(ModApi.Craft.Program.Instructions.CustomInstruction)">
            <summary>
            Removes the custom instruction.
            </summary>
            <param name="customInstruction">The custom expression.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.ActivateStageInstruction">
            <summary>
            Instruction that activates the next stage.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ActivateStageInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.BreakInstruction">
            <summary>
            Instruction that breaks out of its nearest parent loop instruction block.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.BreakInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.BroadcastMessageInstruction">
            <summary>
            Instruction to broadcast a message to locally, or to all other flight programs in the craft, with optional data.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.BroadcastMessageInstruction._local">
            <summary>
            The flag when true indicates the message should only be sent to the same flight program script. Otherwise
            it will be sent to the entire craft.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.BroadcastMessageInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.BroadcastMessageInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.BroadcastMessageInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.CallCustomInstruction">
            <summary>
            Instruction that invokes a custom instruction.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.CallCustomInstruction._call">
            <summary>
            The name of the custon expression to call.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.CallCustomInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.CallCustomInstruction" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.CallCustomInstruction.Call">
            <summary>
            Gets or sets the custom expression to call.
            </summary>
            <value>
            The custom expression to call.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.CallCustomInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.ChangeVariableInstruction">
            <summary>
            Instruction that changes the value of a variable.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ChangeVariableInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.ChangeVariableInstruction" /> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ChangeVariableInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.CommentInstruction">
            <summary>
            Dummy instruction that just holds text that can be used for storing comments in a program.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.CommentInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.CommentInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.CommentInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.CustomInstruction">
            <summary>
            Custom instruction created by a user.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.CustomInstruction._callFormat">
            <summary>
            The call format
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.CustomInstruction._format">
            <summary>
            The format
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.CustomInstruction._localVariables">
            <summary>
            The local variables
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.CustomInstruction._name">
            <summary>
            The name of the expression.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.CustomInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.CustomInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.CustomInstruction.CallFormat">
            <summary>
            Gets or sets the format to use for the caller expression.
            </summary>
            <value>
            The format to use for the caller expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.CustomInstruction.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.CustomInstruction.LocalVariables">
            <summary>
            Gets the local variable definitions.
            </summary>
            <value>
            The local variables.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.CustomInstruction.Name">
            <summary>
            Gets or sets the name of the custom expression.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.DisplayMessageInstruction">
            <summary>
            Instruction to display a message in the flight scene.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.DisplayMessageInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.DisplayMessageInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.DisplayMessageInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.ElseIfInstruction">
            <summary>
            ElseIf instructions can only follow an If or another ElseIf instruction.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.IfInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ElseIfInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.ProgramEventType">
            <summary>
            The types of program events.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramEventType.ChangeSoi">
            <summary>
            The change SOI event.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramEventType.Docked">
            <summary>
            The docked event.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramEventType.FlightStart">
            <summary>
            The flight start event.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramEventType.PartCollision">
            <summary>
            The part collision event.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramEventType.PartExplode">
            <summary>
            The part explode event.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramEventType.ReceiveMessage">
            <summary>
            The receive message event.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.EventInstruction">
            <summary>
            Instruction that is executed when an event occurs.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.EventInstruction._event">
            <summary>
            The event
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.EventInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.EventInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.EventInstruction.EventType">
            <summary>
            Gets the type of the event.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.EventInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.ForInstruction">
            <summary>
            Instruction used to increment from the min to the max, one integer at a time.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ForInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.ForInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.ForInstruction.SupportsChildren">
            <summary>
            Gets a value indicating whether this instruction supports children instructions.
            </summary>
            <value>
              <c>true</c> if this instruction supports children instructions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ForInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.IfInstruction">
            <summary>
            Instruction that evaluates an expression and if true executes its child instructions.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.IfInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.IfInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.IfInstruction.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.IfInstruction.SupportsChildren">
            <summary>
            Gets a value indicating whether this instruction supports children instructions.
            </summary>
            <value>
              <c>true</c> if this instruction supports children instructions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.IfInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.IfInstruction.GetNextInstruction(System.Boolean)">
            <summary>
            Gets the next instruction.
            </summary>
            <param name="expressionValue">if set to <c>true</c> then the expression value was true.</param>
            <returns>
            The next instruction, or null if there are none.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.LockNavSphereInstruction">
            <summary>
            Locks the nav sphere on an indicator.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction._indicatorType">
            <summary>
            The indicator type to lock.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType">
            <summary>
            The available indicator types on the nav sphere
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType.None">
            <summary>
            No indicator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType.Prograde">
            <summary>
            The velocity prograde indicator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType.Retrograde">
            <summary>
            The velocity retrograde indicator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType.Target">
            <summary>
            The target indicator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType.BurnNode">
            <summary>
            The burn node indicator.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.NavSphereIndicatorType.Current">
            <summary>
            The craft's current heading.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.GetListItems(System.String)">
            <summary>
            Gets the list items for the list with the specified ID.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The list elements, or null if there are no elements for the specified list.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>
            The currently selected value.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.LockNavSphereInstruction.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.LogMessageInstruction">
            <summary>
            Instruction to write a message to the log.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.LogMessageInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.LogMessageInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.LogMessageInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.LoopInstruction">
            <summary>
            Base class for loop instructions.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.LoopInstruction.StopBreakPropagation">
            <summary>
            Gets a value indicating whether this instruction should stop a break instruction
            from propagating further up the stack frame. Note that this only makes sense
            for instructions that support children.
            </summary>
            <value>
              <c>true</c> if the instruction responds to a break instruction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.LoopInstruction.SupportsChildren">
            <summary>
            Gets a value indicating whether this instruction supports children instructions.
            </summary>
            <value>
              <c>true</c> if this instruction supports children instructions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.IGetInstructionById">
            <summary>
            Interface for the get instruction by ID method. This method should only be
            used during deserialization, as that is the only time when nodes will have
            valid IDs.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.IGetInstructionById.GetInstructionById(System.Int32)">
            <summary>
            Gets the instruction by specified ID.
            </summary>
            <param name="instructionId">The instruction ID.</param>
            <returns>The program instruction, or null if it cannot be found.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.IInstructionId">
            <summary>
            The interface to get and assign an ID for a program instruction, which should only be done when
            serializing an instruction. This interface is to ensure the call knows what they are doing
            and make it clear the ID should not be modified except for serialization.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.IInstructionId.Id">
            <summary>
            Gets or sets the node's ID, or -1 if it has not yet been assigned.
            </summary>
            <value>
            The node's ID.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.ProgramInstruction">
            <summary>
            Base class for instructions for a flight program.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.ProgramInstruction._id">
            <summary>
            The program instruction ID, used for serialization.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ProgramInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.ProgramInstruction.FirstChild">
            <summary>
            Gets or sets the first child instruction.
            </summary>
            <value>
            The first child instruction.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.ProgramInstruction.ModApi#Craft#Program#Instructions#IInstructionId#Id">
            <summary>
            Gets or sets the node's ID, or -1 if it has not yet been assigned.
            </summary>
            <value>
            The node's ID.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.ProgramInstruction.Next">
            <summary>
            Gets or sets the next instruction.
            </summary>
            <value>
            The next instruction.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.ProgramInstruction.StopBreakPropagation">
            <summary>
            Gets a value indicating whether this instruction should stop a break instruction
            from propagating further up the stack frame. Note that this only makes sense
            for instructions that support children.
            </summary>
            <value>
              <c>true</c> if the instruction responds to a break instruction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.ProgramInstruction.SupportsChildren">
            <summary>
            Gets a value indicating whether this instruction supports children instructions.
            </summary>
            <value>
              <c>true</c> if this instruction supports children instructions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ProgramInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.ProgramInstruction.ModApi#Craft#Program#Instructions#IGetInstructionById#GetInstructionById(System.Int32)">
            <summary>
            Gets the instruction by specified instruction ID.
            </summary>
            <param name="instructionId">The instruction ID.</param>
            <returns>The program instruction, or null if it cannot be found.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.RepeatInstruction">
            <summary>
            Instruction used to repeat a set of instruction zero to many times.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.RepeatInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.RepeatInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.RepeatInstruction.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.RepeatInstruction.SupportsChildren">
            <summary>
            Gets a value indicating whether this instruction supports children instructions.
            </summary>
            <value>
              <c>true</c> if this instruction supports children instructions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.RepeatInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetActivationGroupInstruction">
            <summary>
            Instruction that sets the activation group state.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetActivationGroupInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction">
            <summary>
            Instruction that sets the a property on the current camera.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction._properties">
            <summary>
            The properties.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction._property">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction._selectedProperty">
            <summary>
            The selected property.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction" /> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.AddProperty(System.String,System.String,ModApi.Craft.Program.ListItemInfoType,System.String,System.Action{ModApi.Craft.Program.Craft.ICraftService,ModApi.Craft.Program.ExpressionResult})">
            <summary>
            Adds the property.
            </summary>
            <param name="displayName">The name.</param>
            <param name="xmlName">Name of the XML.</param>
            <param name="itemType">Type of the item.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="setter">The setter action.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty">
            <summary>
            Property wrapper class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty.#ctor(System.String,System.String,ModApi.Craft.Program.ListItemInfoType,System.String,System.Action{ModApi.Craft.Program.Craft.ICraftService,ModApi.Craft.Program.ExpressionResult})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty" /> class.
            </summary>
            <param name="displayName">The name.</param>
            <param name="xmlName">Name of the XML.</param>
            <param name="itemType">Type of the item.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="setter">The setter action.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty.DisplayName">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>
            The type of the item.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty.Setter">
            <summary>
            Gets or sets the setter action.
            </summary>
            <value>
            The setter action.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty.Tooltip">
            <summary>
            Gets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCameraPropertyInstruction.CameraProperty.XmlName">
            <summary>
            Gets or sets the name of the XML.
            </summary>
            <value>
            The name of the XML.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetCraftInputInstruction">
            <summary>
            Instruction that sets the input axis on the craft's controls.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCraftInputInstruction._inputs">
            <summary>
            The inputs.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCraftInputInstruction._input">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCraftInputInstruction._selectedInput">
            <summary>
            The selected input
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Craft.Program.Instructions.SetCraftInputInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetCraftInputInstruction" /> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.AddInput(System.String,System.String,System.Action{ModApi.Craft.Program.Craft.ICraftInputs,System.Single})">
            <summary>
            Adds the input.
            </summary>
            <param name="displayName">The name.</param>
            <param name="xmlName">Name of the XML.</param>
            <param name="setter">The setter action.</param>
            <returns>The input.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input">
            <summary>
            Input wrapper class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input.#ctor(System.String,System.String,System.Action{ModApi.Craft.Program.Craft.ICraftInputs,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input" /> class.
            </summary>
            <param name="displayName">The name.</param>
            <param name="xmlName">Name of the XML.</param>
            <param name="setter">The setter action.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input.DisplayName">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input.ListItemInfoType">
            <summary>
            Gets or sets the type of the list item information.
            </summary>
            <value>
            The type of the list item information.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input.Setter">
            <summary>
            Gets or sets the setter action.
            </summary>
            <value>
            The setter action.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetCraftInputInstruction.Input.XmlName">
            <summary>
            Gets or sets the name of the XML.
            </summary>
            <value>
            The name of the XML.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction">
            <summary>
            Instruction that sets a property on the craft.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction._category">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction._craftProperty">
            <summary>
            The craft property
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction._property">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetCraftPropertyInstruction.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetListInstruction">
            <summary>
            Instruction that operates on a list.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetListInstruction._op">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetListInstruction" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetListInstruction.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteAdd(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the add.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteClear(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the clear.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteInsert(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the insert.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteRemove(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the remove.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteReverse(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the reverse.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteSet(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the set.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetListInstruction.ExecuteSort(ModApi.Craft.Program.IThreadContext,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the sort.
            </summary>
            <param name="context">The context.</param>
            <param name="list">The list.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction">
            <summary>
            Instruction that sets the craft's heading.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.TargetHeading">
            <summary>
            The target heading string.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.TargetPitch">
            <summary>
            The target pitch string.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction._property">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.Expression">
            <summary>
            Gets the expression to evaluate to assign to the variable.
            </summary>
            <value>
            The expression to evaluate to assign to the variable.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTargetHeadingInstruction.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetTargetInstruction">
            <summary>
            Instruction that sets the craft's current target.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTargetInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetTimeModeInstruction">
            <summary>
            Instruction that sets the time warp's current mode.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Instructions.SetTimeModeInstruction._mode">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTimeModeInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetTimeModeInstruction" /> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTimeModeInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTimeModeInstruction.GetListItems(System.String)">
            <summary>
            Gets the list elements.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTimeModeInstruction.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetTimeModeInstruction.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SetVariableInstruction">
            <summary>
            Instruction that sets the value of a variable.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetVariableInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SetVariableInstruction" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetVariableInstruction.ValueExpression">
            <summary>
            Gets the value expression.
            </summary>
            <value>
            The value expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.SetVariableInstruction.VariableNameExpression">
            <summary>
            Gets the variable name expression.
            </summary>
            <value>
            The variable name expression.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SetVariableInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.SwitchCraftInstruction">
            <summary>
            Instruction to switch to a different craft in flight.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SwitchCraftInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.SwitchCraftInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.SwitchCraftInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.WaitSecondsInstruction">
            <summary>
            Instruction to wait for a specified amount of time in seconds.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.WaitSecondsInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.WaitSecondsInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.WaitSecondsInstruction.Time">
            <summary>
            Gets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.WaitSecondsInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.WaitUntilInstruction">
            <summary>
            Waits until the condition is true
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.WaitUntilInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.WaitUntilInstruction"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.WaitUntilInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.Instructions.WhileInstruction">
            <summary>
            Instruction used to repeat a set of instructions until its condition becomes false.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.Instructions.ProgramInstruction" />
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.WhileInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Instructions.WhileInstruction"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.Instructions.WhileInstruction.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Instructions.WhileInstruction.Execute(ModApi.Craft.Program.IThreadContext)">
            <summary>
            Executes the instruction.
            </summary>
            <param name="context">The thread context.</param>
            <returns>
            The instruction to execute next.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.ListItemInfoType">
            <summary>
            The types of list items.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.None">
            <summary>
            The list item does not have a corresponding expression.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.Number">
            <summary>
            The number type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.Degrees">
            <summary>
            The degrees type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.Radians">
            <summary>
            The radians type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.Text">
            <summary>
            The text type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.Vector">
            <summary>
            The vector type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ListItemInfoType.List">
            <summary>
            The list type
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.ListItemInfo">
            <summary>
            Information about an item in a list for a program node.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ListItemInfo.#ctor(System.String,System.String,System.String,ModApi.Craft.Program.ListItemInfoType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ListItemInfo"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="text">The text.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:ModApi.Craft.Program.ListItemInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ListItemInfo.ItemType">
            <summary>
            Gets or sets the type of the item.
            </summary>
            <value>
            The type of the item.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ListItemInfo.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ListItemInfo.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.LocalVariableDefinition">
            <summary>
            Definition for a local variable defined in a custom function.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.LocalVariableDefinition.Name">
            <summary>
            Gets or sets the name of the local variable.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.LogMessage">
            <summary>
            Represents a single log message.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.LogMessage.ThreadId">
            <summary>
            Gets or sets the ID of the thread that created the log message.
            </summary>
            <value>
            The ID of the thread that created the log message.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.LogMessage.Error">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Craft.Program.LogMessage"/> is error.
            </summary>
            <value>
              <c>true</c> if error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.LogMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.LogMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.LogMessageDelegate">
            <summary>
            Delegate for an event related to a log message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ModApi.Craft.Program.ILogService">
            <summary>
            Interface for a log service.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.ILogService.ActiveThreadId">
            <summary>
            Gets or sets the active thread ID.
            </summary>
            <value>
            The thread ID.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.ILogService.Log(System.String,ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ProgramNode)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The thread context, or null if there is no context.</param>
            <param name="node">The node, or null if there is no associated node.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ILogService.LogError(System.String,ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ProgramNode)">
            <summary>
            Logs the error.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The thread context, or null if there is no context.</param>
            <param name="node">The node, or null if there is no associated node.</param>
        </member>
        <member name="T:ModApi.Craft.Program.LogService">
            <summary>
            Class for logging output for a program.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.ILogService" />
        </member>
        <member name="E:ModApi.Craft.Program.LogService.LogAdded">
            <summary>
            Occurs when a new log message has been added.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.LogService.ActiveThreadId">
            <summary>
            Gets or sets the active thread ID.
            </summary>
            <value>
            The thread ID.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.LogService.Log(System.String,ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ProgramNode)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The thread context, or null if there is no context.</param>
            <param name="node">The node, or null if there is no associated node.</param>
        </member>
        <member name="M:ModApi.Craft.Program.LogService.LogError(System.String,ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ProgramNode)">
            <summary>
            Logs the error.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The thread context, or null if there is no context.</param>
            <param name="node">The node, or null if there is no associated node.</param>
        </member>
        <member name="M:ModApi.Craft.Program.LogService.AddMessage(System.String,System.Boolean,ModApi.Craft.Program.IThreadContext,ModApi.Craft.Program.ProgramNode)">
            <summary>
            Adds the message.
            </summary>
            <param name="message">The message.</param>
            <param name="error">if set to <c>true</c> [error].</param>
            <param name="context">The context.</param>
            <param name="node">The node.</param>
        </member>
        <member name="T:ModApi.Craft.Program.NodeFormat">
            <summary>
            Provides methods to tokenize the display format for a program node.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.ReservedCharacters">
            <summary>
            The reserved characters
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenEndDelimiters">
            <summary>
            The token end delimiters
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenStartDelimiters">
            <summary>
            The token start delimiters
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.NodeFormat.TokenType">
            <summary>
            Enumeration of possible node token types.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenType.Text">
            <summary>
            The text token type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenType.Boolean">
            <summary>
            The boolean token type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenType.Input">
            <summary>
            The input token type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenType.List">
            <summary>
            The list token type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.NodeFormat.TokenType.LocalVariableDefinition">
            <summary>
            The local variable definition type.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.NodeFormat.GetNumExpressionsInFormat(System.String)">
            <summary>
            Gets the number expressions in the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>The number of expressions in the format.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.NodeFormat.Tokenize(System.String)">
            <summary>
            Tokenizes the node's format string.
            </summary>
            <param name="format">The display format.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.NodeFormat.Token">
            <summary>
            Provides information about a token in a node's format.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.NodeFormat.Token.#ctor(System.String,ModApi.Craft.Program.NodeFormat.TokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.NodeFormat.Token" /> class.
            </summary>
            <param name="text">The token's text.</param>
            <param name="tokenType">Type of the token.</param>
        </member>
        <member name="P:ModApi.Craft.Program.NodeFormat.Token.ExpressionIndex">
            <summary>
            Gets or sets the index of the expression this token represents, or -1 if it does not
            represent an expression.
            </summary>
            <value>
            The index of the expression.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.NodeFormat.Token.Text">
            <summary>
            Gets or sets the text of the token.
            </summary>
            <value>
            The token's text.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.NodeFormat.Token.TokenType">
            <summary>
            Gets or sets the type of the token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.NodeFormat.Token.Validation">
            <summary>
            Gets or sets the validation.
            </summary>
            <value>
            The validation.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.Process">
            <summary>
            The process executes a flight program and manages thread execution.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Process.ProcessElementName">
            <summary>
            The process XML element name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Process._deadThreads">
            <summary>
            The list of dead threads to be removed.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Process._newThreadContexts">
            <summary>
            The new thread to create for the process.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Process._startThreadIndex">
            <summary>
            The thread index to start at for the next call to Update.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Process._threads">
            <summary>
            The threads.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Process.#ctor(ModApi.Craft.Program.FlightProgram,ModApi.Craft.Program.ILogService,ModApi.Craft.Program.Craft.ICraftService,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Process" /> class.
            </summary>
            <param name="program">The program.</param>
            <param name="logService">The log service.</param>
            <param name="craftService">The craft service.</param>
            <param name="maxThreads">The maximum number of threads allowed.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Process.CraftService">
            <summary>
            Gets the craft service.
            </summary>
            <value>
            The craft service.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.EventHandler">
            <summary>
            Gets the event handler.
            </summary>
            <value>
            The event handler.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.GlobalVariables">
            <summary>
            Gets the global variables.
            </summary>
            <value>
            The global variables.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.LogService">
            <summary>
            Gets the log service.
            </summary>
            <value>
            The log service.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.MaxCallStackSize">
            <summary>
            Gets or sets the maximum size of the call stack.
            </summary>
            <value>
            The maximum size of the call stack.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.MaxThreads">
            <summary>
            Gets the maximum threads.
            </summary>
            <value>
            The maximum threads.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.Program">
            <summary>
            Gets the program.
            </summary>
            <value>
            The program.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Process.Threads">
            <summary>
            Gets the threads.
            </summary>
            <value>
            The threads.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Process.CreateThread(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Creates the new thread context. The thread for the context will be
            started with the next call to Update.
            </summary>
            <param name="startInstruction">The start instruction.</param>
            <returns>
            The thread context.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.Process.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the process from the XML element.
            </summary>
            <param name="xml">The XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Process.Serialize">
            <summary>
            Serializes this process to XML.
            </summary>
            <returns>The Process XElement.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.Process.Start">
            <summary>
            Starts the process.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Process.Update(System.Double,System.Int32)">
            <summary>
            Updates the process and processes all threads by the specified delta time.
            </summary>
            <param name="deltaTime">The delta time.</param>
            <param name="maxInstructions">The maximum instructions to process.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Process.RemoveOldThreads">
            <summary>
            Removes the old threads.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Process.StartNewThreads">
            <summary>
            Processes the new threads.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramEventHandler">
            <summary>
            The program event handler implementation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramEventHandler._process">
            <summary>
            The process
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.#ctor(ModApi.Craft.Program.Process)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramEventHandler"/> class.
            </summary>
            <param name="process">The process.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.OnChangeSoi(System.String)">
            <summary>
            Called when the craft node changed to a new SOI.
            </summary>
            <param name="name">The name of the new SOI.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.OnCraftDocked(System.String,System.String)">
            <summary>
            Called when the player craft has docked with another craft.
            </summary>
            <param name="craftNameA">The craft name a.</param>
            <param name="craftNameB">The craft name b.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.OnFlightStart">
            <summary>
            Called when the flight scene has started.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.OnPartCollision(ModApi.Craft.Parts.IPartFlightCollision)">
            <summary>
            Called when a part has collided.
            </summary>
            <param name="partCollision">The part collision.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.OnPartExploded(ModApi.Craft.Parts.PartData)">
            <summary>
            Called when a part in the craft has exploded.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.OnReceiveMessage(System.String,System.String)">
            <summary>
            Called when the flight program has received a message.
            </summary>
            <param name="messageName">Name of the message.</param>
            <param name="data">The message data.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.GetEventMessageName(ModApi.Craft.Program.Instructions.EventInstruction)">
            <summary>
            Gets the name of the event message.
            </summary>
            <param name="e">The event instruction of type ReceiveMessage.</param>
            <returns>The name of the message.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.CreateThread(ModApi.Craft.Program.Instructions.EventInstruction)">
            <summary>
            Creates the thread with the event instruction.
            </summary>
            <param name="e">The event instruction.</param>
            <returns>The thread context.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramEventHandler.GetEvents(ModApi.Craft.Program.Instructions.ProgramEventType)">
            <summary>
            Gets the events of the specified type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>The list of events.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramException">
            <summary>
            Exception class used for flight programs.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:ModApi.Craft.Program.ProgramException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramException"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramNode">
            <summary>
            Base class for any instruction or expression used in a flight program.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramNode._expressions">
            <summary>
            The expressions
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramNode._style">
            <summary>
            The style of the node to use in the program editor.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramNode.EditorPosition">
            <summary>
            Gets or sets the position in the editor for serialization.
            </summary>
            <value>
            The position in the editor.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramNode.Expressions">
            <summary>
            Gets the expressions.
            </summary>
            <value>
            The expressions.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramNode.Style">
            <summary>
            Gets or sets the style of the node to use in the program editor.
            </summary>
            <value>
            The node's style in the program editor.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.ExecuteActionOnTree``1(ModApi.Craft.Program.ProgramNode,System.Action{``0})">
            <summary>
            Executes the action on node tree, by recurively calling the same action on all
            expressions, children instructions, and next instructions.
            </summary>
            <typeparam name="T">The program node type to execute the action on.</typeparam>
            <param name="root">The root node.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the index.
            </summary>
            <param name="index">The index.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.GetListItems(System.String)">
            <summary>
            Gets the list items for the list with the specified ID.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The list elements, or null if there are no elements for the specified list.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.GetListValue(System.String)">
            <summary>
            Gets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <returns>The currently selected value.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.InitializeExpressions(ModApi.Craft.Program.ProgramExpression[])">
            <summary>
            Initializes the expressions.
            </summary>
            <param name="expressions">The expressions.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.OnDeserialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been deserialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.OnSerialized(System.Xml.Linq.XElement)">
            <summary>
            Called when the node has been serialized.
            </summary>
            <param name="xml">The node's XML element.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.SetExpression(System.Int32,ModApi.Craft.Program.ProgramExpression)">
            <summary>
            Sets the expression.
            </summary>
            <param name="index">The index of the expression.</param>
            <param name="programExpression">The program expression.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNode.SetListValue(System.String,System.String)">
            <summary>
            Sets the selected value of the specified list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="value">The value to select.</param>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramNodePropertyAttribute">
            <summary>
            Attribute applied to fields in a program node that marks them to be serialized when the program is serialized.
            </summary>
            <seealso cref="T:Jundroo.ModTools.Serialization.Xml.Attributes.CustomSerializeFieldBase" />
        </member>
        <member name="M:ModApi.Craft.Program.ProgramNodePropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramNodePropertyAttribute"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.IProgramSerializer">
            <summary>
            Interface for a flight program serializer.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.IProgramSerializer.DeserializeFlightProgram(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the flight program.
            </summary>
            <param name="programXml">The flight program XML.</param>
            <returns>The flight program.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.IProgramSerializer.SerializeFlightProgram(ModApi.Craft.Program.FlightProgram)">
            <summary>
            Generates the XML for the program.
            </summary>
            <param name="program">The program.</param>
            <returns>The root XML element.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramSerializer">
            <summary>
            Handles serialization of a flight program.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer.ChildInstructionsElementName">
            <summary>
            The child instructions element name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer.InstructionsElementName">
            <summary>
            The instructions element name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer.ProgramElementName">
            <summary>
            The XML element name for the flight program.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer.RootExpressionsElementName">
            <summary>
            The root expressions element name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer._typeNameLookup">
            <summary>
            The type name lookup dictionary.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer._xmlNameLookup">
            <summary>
            The XML name lookup dictionary.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ProgramSerializer._xmlSerializer">
            <summary>
            The XML serializer
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Craft.Program.ProgramSerializer"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.CreateProgramNode(System.Xml.Linq.XElement)">
            <summary>
            Creates the program node from XML.
            </summary>
            <param name="xml">The XML element.</param>
            <returns>The program node.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.DeserializeInstructionSet(System.Xml.Linq.XElement)">
            <summary>
            Deserializes a set of instructions and returns the first instruction.
            </summary>
            <param name="containerElement">The container element.</param>
            <returns>The first instruction in the set.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.DeserializeProgramNode(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the program node from XML.
            </summary>
            <param name="nodeElement">The node XML element.</param>
            <returns>The program node.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.SerializeProgramNodes(ModApi.Craft.Program.ProgramNode,System.Xml.Linq.XElement,System.Int32@,System.Boolean)">
            <summary>
            Serializes the program nodes and any connected nodes to the parent XML element.
            </summary>
            <param name="node">The node.</param>
            <param name="parentElement">The parent element.</param>
            <param name="instructionId">The instruction identifier.</param>
            <param name="cloneChain">if set to <c>true</c> then clone the chain of instructions, if this is an instruction.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.DeserializeFlightProgram(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the flight program.
            </summary>
            <param name="programXml">The flight program XML.</param>
            <returns>The flight program.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.SerializeFlightProgram(ModApi.Craft.Program.FlightProgram)">
            <summary>
            Generates the XML for the program.
            </summary>
            <param name="program">The program.</param>
            <returns>The root XML element.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.GetXmlNameForNode(ModApi.Craft.Program.ProgramNode)">
            <summary>
            Gets the XML element name for the node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The XML element name.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.SerializeProgramNode(ModApi.Craft.Program.ProgramNode,System.Xml.Linq.XElement,System.Int32@,System.Boolean)">
            <summary>
            Serializes the instruction and recursively serializes all children and next instructions.
            </summary>
            <param name="node">The program node.</param>
            <param name="parentElement">The parent element.</param>
            <param name="instructionId">The instruction ID.</param>
            <param name="cloneChain">if set to <c>true</c> then clone the chain of instructions, if this is an instruction.</param>
            <returns>
            The XML element for the program node.
            </returns>
        </member>
        <member name="T:ModApi.Craft.Program.ProgramSerializer.ProgramNodeCreator">
            <summary>
            Responsible for creating a program node for a specified type.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ProgramSerializer.ProgramNodeCreator.#ctor(System.String,System.Type,System.Func{ModApi.Craft.Program.ProgramNode})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ProgramSerializer.ProgramNodeCreator"/> class.
            </summary>
            <param name="xmlName">Name of the XML.</param>
            <param name="programNodeType">Type of the program node.</param>
            <param name="createFunc">The create function.</param>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramSerializer.ProgramNodeCreator.CreateFunc">
            <summary>
            Gets or sets the function that creates the program node.
            </summary>
            <value>
            The create function.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramSerializer.ProgramNodeCreator.TypeName">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ProgramSerializer.ProgramNodeCreator.XmlName">
            <summary>
            Gets or sets the name of the program node's XML element.
            </summary>
            <value>
            The name of the program node's XML element.
            </value>
        </member>
        <member name="T:ModApi.Craft.Program.StackFrame">
            <summary>
            The activation record that stores the current state of the program on the call stack.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.StackFrame.LocalVariables">
            <summary>
            Gets the global variables.
            </summary>
            <value>
            The global variables.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.StackFrame.NodeStates">
            <summary>
            Gets the node states.
            </summary>
            <value>
            The node states.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.StackFrame.ReturnInstruction">
            <summary>
            Gets or sets the instruction to return to when this activation record
            is popped from the stack.
            </summary>
            <value>
            The return instruction.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.StackFrame.Deserialize(System.Xml.Linq.XElement,ModApi.Craft.Program.FlightProgram)">
            <summary>
            Deserializes the stack frame from the XML.
            </summary>
            <param name="xml">The stack frame XML element.</param>
            <param name="program">The flight program.</param>
            <returns>The stack frame.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.StackFrame.Serialize">
            <summary>
            Serializes this stack frame.
            </summary>
            <returns>The XML element.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.Thread">
            <summary>
            Smallest unit of instruction processing in a Vizzy Process. It contains its own memory stack, however it shares global
            variables with other threads. This thread class is not to be confused with a system thread and it is not asynchronous
            and is not even guaranteed to be thread safe.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Thread._debugId">
            <summary>
            The debug identifier
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.Thread._nextInstruction">
            <summary>
            The next instruction
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Thread.#ctor(ModApi.Craft.Program.ThreadContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Thread" /> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Thread.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Thread.DebugId">
            <summary>
            Gets the ID of the thread, used for debugging.
            </summary>
            <value>
            The debug identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Thread.IsDone">
            <summary>
            Gets a value indicating whether this thread is done executing.
            </summary>
            <value>
              <c>true</c> if this thread is done; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Thread.ProcessNext(System.Int32)">
            <summary>
            Processes the next instruction.
            </summary>
            <param name="maxInstructions">The maximum number of new instructions to execute.</param>
            <returns>The number of instructions executed.</returns>
        </member>
        <member name="T:ModApi.Craft.Program.BreakExecutionType">
            <summary>
            The types of break execution.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.BreakExecutionType.None">
            <summary>
            No break in execution should occur.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.BreakExecutionType.Wait">
            <summary>
            The program should break and wait until the next frame to continue execution.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.BreakExecutionType.Exit">
            <summary>
            The program should exit
            </summary>
        </member>
        <member name="T:ModApi.Craft.Program.IThreadContext">
            <summary>
            Interface for a thread context.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.IThreadContext.CallStackSize">
            <summary>
            Gets the size of the call stack.
            </summary>
            <value>
            The size of the call stack.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.IThreadContext.Craft">
            <summary>
            Gets the craft service.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.IThreadContext.DeltaTime">
            <summary>
            Gets the delta time for this frame of execution.
            </summary>
            <value>
            The delta time.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.IThreadContext.Log">
            <summary>
            Gets the log service.
            </summary>
            <value>
            The log service.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.IThreadContext.NextInstruction">
            <summary>
            Gets the next instruction that should be executed.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.BreakExecution(ModApi.Craft.Program.BreakExecutionType)">
            <summary>
            Signals to the program that it should break execution.
            </summary>
            <param name="breakExecutionType">The type of break execution.</param>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.CreateLocalVariable(System.String)">
            <summary>
            Creates the local variable with the specified name. The variable is created and accessible in
            the current stack frame and is also accessible in any child stack frames.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.GetCustomExpression(System.String)">
            <summary>
            Gets the custom expression by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The custom expression, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.GetCustomInstruction(System.String)">
            <summary>
            Gets the custom instruction by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The custom expression, or null if it does not exist.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.GetInstructionState(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Gets the state of the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>
            The instruction's state.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.GetLocalVariable(System.String)">
            <summary>
            Gets the local variable with the specified name. The stack frames are searched recursively
            for the first occurrence of the local variable. If no local variable is found, then null is
            returned.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>
            The variable, or null if it cannot be found.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.GetOrCreateGlobalVariable(System.String)">
            <summary>
            Gets or creates the global variable with the specified name. The variable is accessible
            from any instruction/expression in the program, but not from different programs.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.HasInstructionState(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Determines whether there has been a state set for the specified instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>
              <c>true</c> if the instruction has state set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.PopStackFrame">
            <summary>
            Pops the current stack frame from the call stack.
            </summary>
            <returns>The stack frame that was popped off the stack.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.PushStackFrame(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Pushes a new stack frame set to return to the specified return instruction when it is finished.
            </summary>
            <param name="returnInstruction">The return instruction.</param>
        </member>
        <member name="M:ModApi.Craft.Program.IThreadContext.SetInstructionState(ModApi.Craft.Program.Instructions.ProgramInstruction,System.Double)">
            <summary>
            Sets the state of the program instructionj.
            </summary>
            <param name="instruction">The program instruction.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:ModApi.Craft.Program.ThreadContext">
            <summary>
            Implementation of the thread context.
            </summary>
            <seealso cref="T:ModApi.Craft.Program.IThreadContext" />
        </member>
        <member name="F:ModApi.Craft.Program.ThreadContext.ThreadContextElementName">
            <summary>
            The thread context XML element name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ThreadContext._flightProgram">
            <summary>
            The flight program
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.ThreadContext._globalVariables">
            <summary>
            The global variables
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.#ctor(ModApi.Craft.Program.FlightProgram,ModApi.Craft.Program.VariableSet,ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.ThreadContext" /> class.
            </summary>
            <param name="program">The program.</param>
            <param name="globalVariables">The global variables.</param>
            <param name="instruction">The start instruction.</param>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.BreakExecutionFlag">
            <summary>
            Gets or sets the break execution flag.
            </summary>
            <value>
            The break execution flag.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.CallStackSize">
            <summary>
            Gets the size of the call stack.
            </summary>
            <value>
            The size of the call stack.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.Craft">
            <summary>
            Gets or sets the craft service.
            </summary>
            <value>
            The craft service.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.DeltaTime">
            <summary>
            Gets or sets the delta time for this frame of execution.
            </summary>
            <value>
            The delta time.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.Log">
            <summary>
            Gets or sets the log service.
            </summary>
            <value>
            The log service.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.MaxCallStackSize">
            <summary>
            Gets or sets the maximum size of the call stack.
            </summary>
            <value>
            The maximum size of the call stack.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.NextInstruction">
            <summary>
            Gets or sets the next instruction to execute.
            </summary>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.CallStack">
            <summary>
            Gets or sets the call stack.
            </summary>
            <value>
            The call stack.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.ThreadContext.CurrentStackFrame">
            <summary>
            Gets the current stack frame.
            </summary>
            <value>
            The current stack frame.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.Deserialize(System.Xml.Linq.XElement,ModApi.Craft.Program.FlightProgram,ModApi.Craft.Program.VariableSet,ModApi.Craft.Program.ILogService)">
            <summary>
            Deserializes the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="program">The program.</param>
            <param name="globalVariables">The global variables.</param>
            <param name="logService">The log service.</param>
            <returns>
            The thread context.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.BreakExecution(ModApi.Craft.Program.BreakExecutionType)">
            <summary>
            Signals to the program that it should break execution.
            </summary>
            <param name="breakExecutionType">The type of break execution.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.CreateLocalVariable(System.String)">
            <summary>
            Creates the local variable with the specified name. The variable is created and accessible in
            the current stack frame and is also accessible in any child stack frames.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.GetCustomExpression(System.String)">
            <summary>
            Gets the custom expression by name.
            </summary>
            <param name="name">The name.</param>
            <returns>
            The custom expression, or null if it does not exist.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.GetCustomInstruction(System.String)">
            <summary>
            Gets the custom instruction by name.
            </summary>
            <param name="name">The name.</param>
            <returns>
            The custom instruction, or null if it does not exist.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.GetInstructionState(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Gets the state of the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>
            The instruction's state.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.GetLocalVariable(System.String)">
            <summary>
            Gets the local variable with the specified name. The stack frames are searched recursively
            for the first occurrence of the local variable. If no local variable is found, then null is
            returned.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>
            The variable, or null if it cannot be found.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.GetOrCreateGlobalVariable(System.String)">
            <summary>
            Gets or creates the global variable with the specified name. The variable is accessible
            from any instruction/expression in the program, but not from different programs.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.HasInstructionState(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Determines whether there has been a state set for the specified instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>
              <c>true</c> if the instruction has state set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.PopStackFrame">
            <summary>
            Pops the current stack frame from the call stack.
            </summary>
            <returns>The stack frame that was popped off the stack.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.PushStackFrame(ModApi.Craft.Program.Instructions.ProgramInstruction)">
            <summary>
            Pushes a new stack frame set to return to the specified return instruction when it is finished.
            </summary>
            <param name="returnInstruction">The return instruction.</param>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.Serialize">
            <summary>
            Serializes the context and the flight program.
            </summary>
            <returns>
            The thread context XML element.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Program.ThreadContext.SetInstructionState(ModApi.Craft.Program.Instructions.ProgramInstruction,System.Double)">
            <summary>
            Sets the state of the program instruction.
            </summary>
            <param name="instruction">The program instruction.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:ModApi.Craft.Program.Variable">
            <summary>
            Variable used in a program.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.Variable.#ctor(System.String,ModApi.Craft.Program.ExpressionResult)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Variable" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The initial value, or null to initialize to 0.</param>
        </member>
        <member name="M:ModApi.Craft.Program.Variable.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.Variable"/> class.
            </summary>
            <param name="xml">The variable XML element.</param>
        </member>
        <member name="P:ModApi.Craft.Program.Variable.IsList">
            <summary>
            Gets a value indicating whether this instance is list.
            </summary>
            <value>
              <c>true</c> if this instance is list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Variable.Name">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>
            The name of the variable.
            </value>
        </member>
        <member name="P:ModApi.Craft.Program.Variable.Value">
            <summary>
            Gets the value of the variable.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.Variable.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the state of the variable to XML.
            </summary>
            <param name="xml">The variable XML element.</param>
        </member>
        <member name="T:ModApi.Craft.Program.VariableSet">
            <summary>
            Contains a set of variables with methods to access them.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.VariableSet.VariablesElementsName">
            <summary>
            The variables elements name.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Program.VariableSet._variables">
            <summary>
            The variable dictionary.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.VariableSet"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Program.VariableSet"/> class.
            </summary>
            <param name="xml">The XML element to deserialize the variable set from.</param>
        </member>
        <member name="P:ModApi.Craft.Program.VariableSet.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.AddVariable(ModApi.Craft.Program.Variable)">
            <summary>
            Adds the variable.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.Clone">
            <summary>
            Clones the variable set.
            </summary>
            <returns>The cloned VariableSet.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.DeleteVariable(System.String)">
            <summary>
            Deletes the variable from the set.
            </summary>
            <param name="name">The name of the variable to delete.</param>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.GetOrCreateVariable(System.String)">
            <summary>
            Gets or creates the variable with the specified name.
            </summary>
            <param name="name">The variable's name.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.GetVariable(System.String)">
            <summary>
            Gets the variable with the specified name. If the variable is not in the set,
            then null is returned.
            </summary>
            <param name="name">The name.</param>
            <returns>The variable, or null if it cannot be found.</returns>
        </member>
        <member name="M:ModApi.Craft.Program.VariableSet.Serialize">
            <summary>
            Serializes the variable set to an XML element.
            </summary>
            <returns>The XML element.</returns>
        </member>
        <member name="T:ModApi.Craft.Propulsion.FuelType">
            <summary>
            Contains data about a fuel type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.FuelType.IdLoxRp1">
            <summary>
            The identifier for the LOX/RP1 fuel type.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Propulsion.FuelType.#ctor(System.Xml.Linq.XElement,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Propulsion.FuelType" /> class.
            </summary>
            <param name="xml">The XML.</param>
            <param name="mod">The mod (if any) in which this fuel type was defined.</param>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Battery">
            <summary>
            Gets the battery fuel type.
            </summary>
            <value>
            The battery fuel type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Jet">
            <summary>
            Gets the jet fuel type.
            </summary>
            <value>
            The jet fuel type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Monopropellant">
            <summary>
            Gets the mono fuel type.
            </summary>
            <value>
            The mono fuel type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.AllowFuelTransfer">
            <summary>
            Gets a value indicating whether or not to allow fuel transfer of this fuel type.
            </summary>
            <value>
              <c>true</c> if fuel transfer is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.CombustionTemperature">
            <summary>
            Gets the combustion temperature in K.
            </summary>
            <value>
            The combustion temperature in K.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Density">
            <summary>
            Gets the density in kg/L.
            </summary>
            <value>
            The density in kg/L.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.DisplayInDesigner">
            <summary>
            Gets a value indicating whether this fuel type should be displayed in the designer.
            </summary>
            <value>
              <c>true</c> if this fuel type should be displayed in the designer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.EnginePriceScale">
            <summary>
            Gets the scale that is applied to a rocket engine that uses this fuel. Some fuels are more
            costly to build engines with.
            </summary>
            <value>
            The engine price scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.ExhaustColor">
            <summary>
            Gets the color of the exhaust.
            </summary>
            <value>
            The color of the exhaust.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.ExhaustDetailIntensity">
            <summary>
            Gets the exhaust detail intensity.
            </summary>
            <value>
            The exhaust detail intensity.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.ExhaustIntensity">
            <summary>
            Gets the exhaust intensity.
            </summary>
            <value>
            The exhaust intensity.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.ExplosivePower">
            <summary>
            Gets the explosive power.
            </summary>
            <value>
            The explosive power.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.FuelTransferRate">
            <summary>
            Gets the fuel transfer rate.
            </summary>
            <value>
            The fuel transfer rate.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Gamma">
            <summary>
            Gets the ratio of specific heats.
            </summary>
            <value>
            The ratio of specific heats.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Mod">
            <summary>
            Gets the mod (if any) in which this fuel type was defined.
            </summary>
            <value>
            The mod (if any) in which this fuel type was defined.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.MolecularWeight">
            <summary>
            Gets the molecular weight in kg/kmol.
            </summary>
            <value>
            The molecular weight in kg/kmol.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.Price">
            <summary>
            Gets the price per kilogram.
            </summary>
            <value>
            The price per kilogram.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.SmokeIntensity">
            <summary>
            Gets the smoke intensity.
            </summary>
            <value>
            The smoke intensity.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.FuelType.StorageOverhead">
            <summary>
            Gets the storage overhead. For each unit of volume, this is how much of that volume that
            cannot hold fuel. It approximates storage overhead such as pumps, pipes, structure, etc in the
            fuel tank. In the case of solid fuel, this could be used to approximate the combustion
            chamber hollowed out in the middle of the fuel tank.
            </summary>
            <value>
            The storage overhead.
            </value>
        </member>
        <member name="M:ModApi.Craft.Propulsion.FuelType.Initialize(System.Collections.Generic.List{ModApi.Craft.Propulsion.FuelType})">
            <summary>
            Initializes the static references to fuel types.
            </summary>
            <param name="fuels">The list of fuels read in from file.</param>
        </member>
        <member name="T:ModApi.Craft.Propulsion.PropulsionData">
            <summary>
            Contains data for propulsion systems in the game.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.PropulsionData._fuels">
            <summary>
            The fuels
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.PropulsionData._rocketEngines">
            <summary>
            Gets the rocket engines.
            </summary>
            <value>
            The rocket engines.
            </value>
        </member>
        <member name="F:ModApi.Craft.Propulsion.PropulsionData._rocketNozzles">
            <summary>
            Gets the rocket nozzles.
            </summary>
            <value>
            The rocket nozzles.
            </value>
        </member>
        <member name="M:ModApi.Craft.Propulsion.PropulsionData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Propulsion.PropulsionData" /> class.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="P:ModApi.Craft.Propulsion.PropulsionData.Fuels">
            <summary>
            Gets the fuels.
            </summary>
            <value>
            The fuels.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.PropulsionData.RocketEngines">
            <summary>
            Gets the rocket engines.
            </summary>
            <value>
            The rocket engines.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.PropulsionData.RocketNozzles">
            <summary>
            Gets the rocket nozzles.
            </summary>
            <value>
            The rocket nozzles.
            </value>
        </member>
        <member name="M:ModApi.Craft.Propulsion.PropulsionData.GetFuelType(System.String)">
            <summary>
            Gets the fuel type with the specified ID.
            </summary>
            <param name="fuelTypeId">The fuel type identifier.</param>
            <returns>The fuel type.</returns>
        </member>
        <member name="M:ModApi.Craft.Propulsion.PropulsionData.LoadXml(System.String,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Loads the propulsion data XML specified.
            </summary>
            <param name="xml">The propulsion data XML to load.</param>
            <param name="mod">The mod associated with XML to load.</param>
            <exception cref="T:ModApi.Exceptions.GameException">Failed to parse propulsion data XML.</exception>
        </member>
        <member name="T:ModApi.Craft.Propulsion.RocketEngineType">
            <summary>
            Contains data about a rocket engine type.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketEngineType.#ctor(System.Xml.Linq.XElement,ModApi.Craft.Propulsion.PropulsionData,ModApi.Craft.Propulsion.RocketEngineType,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Propulsion.RocketEngineType" /> class.
            </summary>
            <param name="xml">The XML.</param>
            <param name="propulsionData">The propulsion data.</param>
            <param name="parent">The parent rocket engine type.</param>
            <param name="mod">The mod (if any) in which this rocket engine type was defined.</param>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.AudioId">
            <summary>
            Gets the ID for the audio type to use for this engine.
            </summary>
            <value>
            The audio identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.BaseMass">
            <summary>
            Gets the base mass of the engine type in kg.
            </summary>
            <value>
            The base mass of the engine type in kg.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.BasePrice">
            <summary>
            Gets the base price.
            </summary>
            <value>
            The base price.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.BaseScale">
            <summary>
            Gets the base scale for this engine type.
            </summary>
            <value>
            The base scale for this engine type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.ChamberPressure">
            <summary>
            Gets the chamber pressure.
            </summary>
            <value>
            The chamber pressure.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.Efficiency">
            <summary>
            Gets the efficiency of the engine from 0-1. This is multiplied by the theoretical
            maximum thrust to calculate actual thrust, which affects the Isp of the engine.
            </summary>
            <value>
            The efficiency.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.WattsPerThrustPower">
            <summary>
            Gets the electrical consumption of the engine in watts per unit of thrust power.
            </summary>
            <value>
            The electrical consumption of the engine in watts per unit of thrust power.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.GimbalId">
            <summary>
            Gets the gimbal type identifier.
            </summary>
            <value>
            The gimbal type identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.GimbalRange">
            <summary>
            Gets the maximum gimbal range.
            </summary>
            <value>
            The maximum gimbal range.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.GimbalSpeed">
            <summary>
            Gets the gimbal speed.
            </summary>
            <value>
            The gimbal speed.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.IsAbstractType">
            <summary>
            Gets a value indicating whether this engine type is an abstract type definition.
            If an engine defines subtypes, then it is considered an abstract type and cannot be selected for use on rockets.
            </summary>
            <value>
              <c>true</c> if this engine type is an abstract type definition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.MassScale">
            <summary>
            Gets the mass scale, which is multiplied by the engine's normalized mass flow to determine the
            total mass of the chamber.
            </summary>
            <value>
            The mass scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.MinThrottle">
            <summary>
            Gets the minimum throttle available for this engine.
            </summary>
            <value>
            The minimum throttle.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.Mod">
            <summary>
            Gets the mod (if any) in which this rocket engine type was defined.
            </summary>
            <value>
            The mod (if any) in which this rocket engine type was defined.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.NozzleRadiusScale">
            <summary>
            Gets the nozzle radius scale, which allows scaling the nozzle throat and exit radiuses down for certain engine
            types so they can use the same nozzles even though the engines are capable of very different mass flow rates.
            </summary>
            <value>
            The mass flow scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.PrefabId">
            <summary>
            Gets the prefab identifier.
            </summary>
            <value>
            The prefab identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.PriceScale">
            <summary>
            Gets the price scale.
            </summary>
            <value>
            The price scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.Radius">
            <summary>
            Gets the radius, which is used to determine how large to resize fuselage fuel tanks when connecting
            the engine to a fuel tank.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.SubPrefabId">
            <summary>
            Gets the sub prefab identifier.
            </summary>
            <value>
            The sub prefab identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.SubTextureStyleIds">
            <summary>
            Gets the sub texture style ids supported by this engine type.
            </summary>
            <value>
            The sub texture style ids supported by this engine type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.SubTypes">
            <summary>
            Gets the sub types.
            </summary>
            <value>
            The sub types.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.SupportedFuels">
            <summary>
            Gets the supported fuels.
            </summary>
            <value>
            The supported fuels.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.SupportedNozzles">
            <summary>
            Gets the supported nozzles.
            </summary>
            <value>
            The supported nozzles.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.SupportsDeactivation">
            <summary>
            Gets a value indicating whether the engine can be deactivated after it has been
            turned on.
            </summary>
            <value>
              <c>true</c> if the engine supports deactivation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.TextureStyleIds">
            <summary>
            Gets the texture style ids supported by this engine type.
            </summary>
            <value>
            The texture style ids supported by this engine type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketEngineType.ThrottleResponse">
            <summary>
            Gets the throttle response, which is how quickly the engine responds to throttle changes over time. A value of 0.5 indicates
            that the throttle can achieve 50% throttle in one second. A value of 10 would indicate the engine could achieve 100% throttle
            in 1/10th of a second.
            </summary>
            <value>
            The throttle response.
            </value>
        </member>
        <member name="T:ModApi.Craft.Propulsion.RocketNozzleType">
            <summary>
            Contains data about a rocket nozzle type.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._altitudeCompensation">
            <summary>
            The base altitude compensation.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._altitudeCompensationScale">
            <summary>
            The altitude compensation scale that adjusts altitude compensation with extension length.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._extensionMax">
            <summary>
            The extension maximum
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._extensionMin">
            <summary>
            The extension minimum
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._extensionRadius">
            <summary>
            The rate at which the nozzle exit radius increases with each unit of length from the nozzle extension.
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._nozzleDensity">
            <summary>
            The nozzle density
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._nozzleLength">
            <summary>
            The nozzle length
            </summary>
        </member>
        <member name="F:ModApi.Craft.Propulsion.RocketNozzleType._thickness">
            <summary>
            The thickness of the nozzle used for mass calculation.
            </summary>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.#ctor(System.Xml.Linq.XElement,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.Propulsion.RocketNozzleType"/> class.
            </summary>
            <param name="xml">The XML.</param>
            <param name="mod">The mod (if any) in which this rocket nozzle type was defined.</param>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.ExhaustRadiusScale">
            <summary>
            Gets the exhaust radius scale.
            </summary>
            <value>
            The exhaust radius scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.ExtensionOverlap">
            <summary>
            Gets the extension overlap.
            </summary>
            <value>
            The extension overlap.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.ExtensionPrefabId">
            <summary>
            Gets the extension prefab identifier.
            </summary>
            <value>
            The extension prefab identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.ExtensionTextureStyleIds">
            <summary>
            Gets the extension texture style ids supported by this nozzle type.
            </summary>
            <value>
            The extension texture style ids supported by this nozzle type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.Mod">
            <summary>
            Gets the mod (if any) in which this rocket nozzle type was defined.
            </summary>
            <value>
            The mod (if any) in which this rocket nozzle type was defined.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.NozzleRadius">
            <summary>
            Gets the nozzle radius.
            </summary>
            <value>
            The nozzle radius.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.PrefabId">
            <summary>
            Gets the prefab identifier.
            </summary>
            <value>
            The prefab identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.PriceScale">
            <summary>
            Gets the price scale.
            </summary>
            <value>
            The price scale.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.TextureStyleIds">
            <summary>
            Gets the texture style ids supported by this nozzle type.
            </summary>
            <value>
            The texture style ids supported by this nozzle type.
            </value>
        </member>
        <member name="P:ModApi.Craft.Propulsion.RocketNozzleType.ThroatRadius">
            <summary>
            Gets the throat radius in m.
            </summary>
            <value>
            The throat radius in m.
            </value>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.CalculateMass(System.Single,System.Single)">
            <summary>
            Calculates the mass of the nozzle in kg.
            </summary>
            <param name="scale">The overall rocket engine scale.</param>
            <param name="extensionSize">The size of the extension.</param>
            <returns>
            The mass in kg.
            </returns>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.GetAltitudeCompensation(System.Single)">
            <summary>
            Gets the altitude compensation factor from 0-1, which indicates how much the nozzle compensates
            for atmospheric pressure. Zero indicates no altitude compensation and nozzle exit pressure is calculated
            normally. One indicates perfect compensation so that the exit pressure is always equal to the atmospheric
            pressure. Values in between lerp between chamber pressure and atmospheric pressure by this percentage.
            </summary>
            <param name="extensionLength">Length of the extension.</param>
            <returns>The altitude compensation</returns>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.GetExitRadius(System.Single)">
            <summary>
            Gets the exit radius in m.
            </summary>
            <param name="extensionPercentage">The extension percentage.</param>
            <returns>The exit radius in m.</returns>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.GetExtensionLength(System.Single)">
            <summary>
            Gets the length of the extension in m.
            </summary>
            <param name="extensionPercentage">The extension percentage.</param>
            <returns>The length of the extension in m.</returns>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.CalculateVolume(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the volume.
            </summary>
            <param name="r1">The radius 1 of the volume.</param>
            <param name="r2">The radius 2 of the volume.</param>
            <param name="length">The length of the volume.</param>
            <returns>The volume in m3.</returns>
        </member>
        <member name="M:ModApi.Craft.Propulsion.RocketNozzleType.GetNozzleExtensionScale(System.Single)">
            <summary>
            Gets the nozzle extension scale for the given extension percentage.
            </summary>
            <param name="extensionPercentage">The percentage of extension to use with this nozzle.</param>
            <returns>The nozzle extension scale</returns>
        </member>
        <member name="T:ModApi.Craft.StageAnalysis">
            <summary>
            The result of the StageAnalyzer. Contains data about the analysis of each stage.
            </summary>
        </member>
        <member name="M:ModApi.Craft.StageAnalysis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.StageAnalysis"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.EndingThrustToWeightRatio">
            <summary>
            Gets or sets the ending thrust to weight ratio of the craft.
            </summary>
            <value>
            The ending thrust to weight ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.NumEngines">
            <summary>
            Gets or sets the number engines in the craft.
            </summary>
            <value>
            The number engines.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.PropellantMass">
            <summary>
            Gets the total mass of the propellant in kg.
            </summary>
            <value>
            The total mass of the propellant in kg.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stages">
            <summary>
            Gets the stages.
            </summary>
            <value>
            The stages.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.StartingThrustToWeightRatio">
            <summary>
            Gets or sets the starting thrust to weight ratio of the craft.
            </summary>
            <value>
            The starting thrust to weight ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.TotalBurnTime">
            <summary>
            Gets or sets the total burn time of the craft's engines.
            </summary>
            <value>
            The total burn time.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.TotalDeltaV">
            <summary>
            Gets or sets the total delta v of the craft
            </summary>
            <value>
            The total delta v.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.TotalThrust">
            <summary>
            Gets or sets the total thrust of the craft.
            </summary>
            <value>
            The total thrust.
            </value>
        </member>
        <member name="T:ModApi.Craft.StageAnalysis.Stage">
            <summary>
            Contains data about a stage in the analysis.
            </summary>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.AverageEngineIsp">
            <summary>
            Gets or sets the average engine Isp.
            </summary>
            <value>
            The average engine Isp.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.BurnTime">
            <summary>
            Gets or sets the burn time.
            </summary>
            <value>
            The burn time.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.DeltaV">
            <summary>
            Gets or sets the delta v.
            </summary>
            <value>
            The delta v.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.EndingMass">
            <summary>
            Gets or sets the ending mass.
            </summary>
            <value>
            The ending mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.EndingThrustToWeightRatio">
            <summary>
            Gets the ending thrust to weight ratio.
            </summary>
            <value>
            The thrust to weight ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.NumEngines">
            <summary>
            Gets or sets the number engines.
            </summary>
            <value>
            The number engines.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.NumParts">
            <summary>
            Gets or sets the number parts.
            </summary>
            <value>
            The number parts.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.PropellantMass">
            <summary>
            Gets the mass of the propellant in this stage in kg.
            </summary>
            <value>
            The mass of the propellant in this stage in kg.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.StageNumber">
            <summary>
            Gets or sets the stage number.
            </summary>
            <value>
            The stage number.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.StartingMass">
            <summary>
            Gets or sets the starting mass.
            </summary>
            <value>
            The starting mass.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.StartingThrustToWeightRatio">
            <summary>
            Gets the starting thrust to weight ratio.
            </summary>
            <value>
            The thrust to weight ratio.
            </value>
        </member>
        <member name="P:ModApi.Craft.StageAnalysis.Stage.TotalThrust">
            <summary>
            Gets or sets the total thrust.
            </summary>
            <value>
            The total thrust.
            </value>
        </member>
        <member name="T:ModApi.Craft.ActivationStage">
            <summary>
            Contains data about a stage.
            </summary>
        </member>
        <member name="M:ModApi.Craft.ActivationStage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.ActivationStage"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.ActivationStage.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="T:ModApi.Craft.StagingData">
            <summary>
            Contains the data for staging.
            </summary>
        </member>
        <member name="M:ModApi.Craft.StagingData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.StagingData"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Craft.StagingData.Stages">
            <summary>
            Gets the stages.
            </summary>
            <value>
            The stages.
            </value>
        </member>
        <member name="M:ModApi.Craft.StagingData.GetStageIndex(ModApi.Craft.ActivationStage)">
            <summary>
            Gets the index of the stage.
            </summary>
            <param name="stage">The stage.</param>
            <returns>The stage index.</returns>
        </member>
        <member name="T:ModApi.Craft.ThemeData">
            <summary>
            The visual theme used for a craft.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ThemeData.MaxThemeMaterials">
            <summary>
            The maximum number of materials per theme.
            </summary>
        </member>
        <member name="F:ModApi.Craft.ThemeData._materials">
            <summary>
            Gets the materials.
            </summary>
            <value>
            The materials.
            </value>
        </member>
        <member name="M:ModApi.Craft.ThemeData.#ctor(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Craft.ThemeData" /> class.
            </summary>
            <param name="element">The element.</param>
            <param name="xmlVersion">The XML version.</param>
        </member>
        <member name="P:ModApi.Craft.ThemeData.Hidden">
            <summary>
            Gets a value indicating whether the theme is hidden.
            </summary>
            <value>
              <c>true</c> if the theme is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Craft.ThemeData.Id">
            <summary>
            Gets or sets the identifier, which should be unique within a craft.
            </summary>
            <value>
            The theme identifier.
            </value>
        </member>
        <member name="P:ModApi.Craft.ThemeData.MaterialCount">
            <summary>
            Gets the current number of materials in the theme.
            </summary>
            <value>
            The current number of materials in the theme.
            </value>
        </member>
        <member name="P:ModApi.Craft.ThemeData.Name">
            <summary>
            Gets the name of the theme.
            </summary>
            <value>
            The name of the theme.
            </value>
        </member>
        <member name="P:ModApi.Craft.ThemeData.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
            <value>
            The theme.
            </value>
        </member>
        <member name="M:ModApi.Craft.ThemeData.Duplicate">
            <summary>
            Duplicates the theme data.
            </summary>
            <returns>The duplicate theme data.</returns>
        </member>
        <member name="M:ModApi.Craft.ThemeData.GenerateXml(System.Boolean)">
            <summary>
            Generates the XML.
            </summary>
            <param name="optimizeXml">If set to <c>true</c>, the generated XML will be optimized where possible.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:ModApi.Craft.ThemeData.GetMaterial(System.Int32)">
            <summary>
            Gets the specified material.
            </summary>
            <param name="materialId">The material identifier.</param>
            <returns>The specified material.</returns>
        </member>
        <member name="M:ModApi.Craft.ThemeData.UpdateFromTheme(ModApi.Craft.ThemeData)">
            <summary>
            Updates this theme by copying materials from the specified theme.
            </summary>
            <param name="newTheme">The new theme.</param>
        </member>
        <member name="M:ModApi.Craft.ThemeData.UpdateMaterial(System.Int32,UnityEngine.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updates the specified material.
            </summary>
            <param name="materialId">The material identifier.</param>
            <param name="color">The new color for the material.</param>
            <param name="smoothness">The new smoothness value for the material.</param>
            <param name="metallicness">The new metallicness value for the material.</param>
            <param name="detailStrength">The detail strength value for the material.</param>
            <param name="emissionStrength">The emission strength value for the material.</param>
        </member>
        <member name="M:ModApi.Craft.ThemeData.AddMissingMaterialDefaults(ModApi.Craft.Parts.PartMaterial,System.Int32)">
            <summary>
            This adds missing themes (slot 15-20) for crafts existing prior to 0.9.100.0 (XML Ver 11) to include the new material slots added for the astronaut.
            </summary>
            <param name="partMaterial">The part material.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ModApi.Craft.ThemeData.CreateDefaultMaterial(System.Int32)">
            <summary>
            Creates a default material.
            </summary>
            <param name="id">The material identifier.</param>
            <returns>A default material object.</returns>
        </member>
        <member name="T:ModApi.Culture">
            <summary>
            A class containing information about the various culture settings used by the game.
            </summary>
        </member>
        <member name="F:ModApi.Culture.EnglishUS">
            <summary>
            The English US culture.
            </summary>
        </member>
        <member name="F:ModApi.Culture.Invariant">
            <summary>
            The invariant culture.
            </summary>
        </member>
        <member name="F:ModApi.Culture.Original">
            <summary>
            The original culture of the application.
            </summary>
        </member>
        <member name="M:ModApi.Culture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Culture"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Culture.Current">
            <summary>
            Gets the current culture in use by the application.
            </summary>
            <value>
            The current culture in use by the application.
            </value>
        </member>
        <member name="T:ModApi.Data.CurveObject">
            <summary>
            ScriptableObject which holds a curve
            </summary>
            <seealso cref="T:UnityEngine.ScriptableObject" />
        </member>
        <member name="F:ModApi.Data.CurveObject._curve">
            <summary>
            The curve
            </summary>
        </member>
        <member name="P:ModApi.Data.CurveObject.Curve">
            <summary>
            Gets the curve.
            </summary>
            <value>
            The curve.
            </value>
        </member>
        <member name="T:ModApi.Data.UserCurve">
            <summary>
            A class representing an animation curve defined by the user and able to be saved/restored with XML.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._separatorKeyframe">
            <summary>
            The separator character used to separate keyframes.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._separatorKeyframeValues">
            <summary>
            The separator character used to separate keyframe values.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._amplitude">
            <summary>
            The amplitude of the curve (multiplier on the output value).
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._currentTime">
            <summary>
            The current time used for curve evaluations.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._curve">
            <summary>
            The underlying animation curve.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._frequency">
            <summary>
            The frequency of the curve (multiplier on the time input).
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._modulusTime">
            <summary>
            The value used with the modulus operator on the current time to prevent a loss of float precision when evaluating the curve.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._style">
            <summary>
            The style of the curve (affects the keyframe tangents).
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._wrapMode">
            <summary>
            The wrap mode for the curve.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve._xmlName">
            <summary>
            The XML name of the curve.
            This is used as the base string name for all XML attributes related to this curve.
            </summary>
        </member>
        <member name="M:ModApi.Data.UserCurve.#ctor(System.String,ModApi.Data.UserCurve.CurveStyle,ModApi.Data.UserCurve.CurveWrapMode,UnityEngine.Keyframe[])">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Data.UserCurve"/> class.
            </summary>
            <param name="xmlName">The XML name of the curve. This is used as the base string name for all XML attributes related to this curve.</param>
            <param name="style">The style of the curve (affects the keyframe tangents).</param>
            <param name="wrapMode">The wrap mod for the curve.</param>
            <param name="keyframes">The keyframes that make up the curve.</param>
        </member>
        <member name="M:ModApi.Data.UserCurve.#ctor(System.String,UnityEngine.AnimationCurve,ModApi.Data.UserCurve.CurveStyle,ModApi.Data.UserCurve.CurveWrapMode,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Data.UserCurve"/> class.
            </summary>
            <param name="xmlName">The XML name of the curve. This is used as the base string name for all XML attributes related to this curve.</param>
            <param name="curve">The animation curve associated with this curve object.</param>
            <param name="style">The style of the curve (affects the keyframe tangents).</param>
            <param name="wrapMode">The wrap mod for the curve.</param>
            <param name="frequency">The frequency of the curve (multiplier on the time input).</param>
            <param name="amplitude">The amplitude of the curve (multiplier on the output value).</param>
        </member>
        <member name="T:ModApi.Data.UserCurve.CurveStyle">
            <summary>
            The style of the curve.
            This enumeration is the same as the <see cref="T:ModApi.Common.Animation.AnimationCurveTangentMode"/> enumeration
            except a few enumeration value names have been changed to be more XML user friendly.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveStyle.Custom">
            <summary>
            The tangents are manually set.
            Same as AnimationCurveTangentMode.Free.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveStyle.SmoothUnclamped">
            <summary>
            The tangents are automatically set to make the curve go smoothly through the key.
            Same as AnimationCurveTangentMode.Auto.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveStyle.Linear">
            <summary>
            The tangent points towards the neighboring key.
            Same as AnimationCurveTangentMode.Linear.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveStyle.Constant">
            <summary>
            The curve retains a constant value between two keys.
            Same as AnimationCurveTangentMode.Constant.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveStyle.Smooth">
            <summary>
            The tangents are automatically set to make the curve go smoothly through the key and prevent overshooting.
            Same as AnimationCurveTangentMode.ClampedAuto.
            </summary>
        </member>
        <member name="T:ModApi.Data.UserCurve.CurveWrapMode">
            <summary>
            An enumeration defining the wrap modes for a user curve.
            The enumeration values match those in <see cref="T:UnityEngine.WrapMode"/> so they can be cast back and forth.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveWrapMode.Loop">
            <summary>
            The curve will loop back to the beginning of the curve when it reaches the end.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveWrapMode.PingPong">
            <summary>
            The curve will ping pong back and forth between the beginning of the curve and end of the curve.
            </summary>
        </member>
        <member name="F:ModApi.Data.UserCurve.CurveWrapMode.Clamp">
            <summary>
            The curve will be clamped to the beginning and end positions, never extending beyond those times.
            </summary>
        </member>
        <member name="P:ModApi.Data.UserCurve.Amplitude">
            <summary>
            Gets or sets the amplitude of the curve (multiplier on the output value).
            </summary>
            <value>
            The amplitude of the curve (multiplier on the output value).
            </value>
        </member>
        <member name="P:ModApi.Data.UserCurve.CurrentTime">
            <summary>
            Gets or sets the current time used for curve evaluations.
            </summary>
            <value>
            The current time used for curve evaluations.
            </value>
        </member>
        <member name="P:ModApi.Data.UserCurve.Curve">
            <summary>
            Gets or sets the underlying animation curve.
            </summary>
            <value>
            The underlying animation curve.
            </value>
        </member>
        <member name="P:ModApi.Data.UserCurve.Frequency">
            <summary>
            Gets or sets the frequency of the curve (multiplier on the time input).
            </summary>
            <value>
            The frequency of the curve (multiplier on the time input).
            </value>
        </member>
        <member name="P:ModApi.Data.UserCurve.Style">
            <summary>
            Gets or sets the style of the curve (affects the keyframe tangents).
            </summary>
            <value>
            The style of the curve (affects the keyframe tangents).
            </value>
        </member>
        <member name="P:ModApi.Data.UserCurve.WrapMode">
            <summary>
            Gets or sets the wrap mode of the curve.
            </summary>
            <value>
            The wrap mode of the curve.
            </value>
        </member>
        <member name="P:ModApi.Data.UserCurve.XmlName">
            <summary>
            Gets or sets the XML name of the curve.
            This is used as the base string name for all XML attributes related to this curve.
            </summary>
            <value>
            The XML name of the curve.
            This is used as the base string name for all XML attributes related to this curve.
            </value>
        </member>
        <member name="M:ModApi.Data.UserCurve.RestoreFromXml(System.Xml.Linq.XElement,System.String,ModApi.Data.UserCurve.CurveWrapMode)">
            <summary>
            Restores a curve from XML the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the curve.</param>
            <param name="xmlName">The XML name of the curve used for the base string name of all XML attributes related to the curve.</param>
            <param name="defaultWrapMode">The default wrap mode for the curve.</param>
            <returns>The curve defined by the XML.</returns>
        </member>
        <member name="M:ModApi.Data.UserCurve.GenerateXml(System.Xml.Linq.XElement)">
            <summary>
            Generates the XML that represents this curve.
            </summary>
            <param name="xml">The XML element to which to save the curve data.</param>
        </member>
        <member name="M:ModApi.Data.UserCurve.GetKeyframesAsString">
            <summary>
            Gets the keyframes as a string value.
            Each keyframe should be separated by the '|' character, with each keyframe having values separated by the ',' character.
            Each keyframe should consist of a time value and an output value. If custom tangents are used, then there will be two
            additional values representing the incoming tangent and the outgoing tangent.
            </summary>
            <returns>The keyframes encoded as a string value.</returns>
        </member>
        <member name="M:ModApi.Data.UserCurve.GetValue(System.Double)">
            <summary>
            Updates the current time of the curve based on the elapsed time and then gets the current value of the curve.
            </summary>
            <param name="elapsedTime">The elapsed time.</param>
            <returns>The current value of the curve.</returns>
        </member>
        <member name="M:ModApi.Data.UserCurve.GetValue(System.Single)">
            <summary>
            Updates the current time of the curve based on the elapsed time and then gets the current value of the curve.
            </summary>
            <param name="elapsedTime">The elapsed time.</param>
            <returns>The current value of the curve.</returns>
        </member>
        <member name="M:ModApi.Data.UserCurve.GetValueAtCurrentTime">
            <summary>
            Gets the value of the curve at the current time.
            </summary>
            <returns>The value of the curve at the current time.</returns>
        </member>
        <member name="M:ModApi.Data.UserCurve.GetValueAtTime(System.Single)">
            <summary>
            Gets the value of the curve at the specified time, ignoring the curve's current time value.
            </summary>
            <param name="time">The time at which to get the value.</param>
            <returns>The value of the curve at the specified time.</returns>
        </member>
        <member name="M:ModApi.Data.UserCurve.SetKeyframes(System.Collections.Generic.IEnumerable{UnityEngine.Keyframe})">
            <summary>
            Sets the keyframes for the curve.
            </summary>
            <param name="keyframes">The keyframes to be set on the curve.</param>
        </member>
        <member name="M:ModApi.Data.UserCurve.SetKeyframes(UnityEngine.Keyframe[])">
            <summary>
            Sets the keyframes for the curve.
            </summary>
            <param name="keyframes">The keyframes to be set on the curve.</param>
        </member>
        <member name="M:ModApi.Data.UserCurve.SetKeyframes(System.String)">
            <summary>
            Sets the keyframes on the curve based on the specially formatted keyframe string.
            Each keyframe should be separated by the '|' character, with each keyframe having values separated by the ',' character.
            A keyframe should define a time value and an output value. Optionally, the keyframe may specify a third value the defines
            the incoming and outgoing tangents, or a third and fourth value that define the incoming and outgoing tangents respectively.
            Example: 0.0,0.0|0.5,1.0|1.0,0.0
            </summary>
            <param name="keyframes">The keyframes to be set on the curve.</param>
        </member>
        <member name="M:ModApi.Data.UserCurve.AddKeyframes(UnityEngine.AnimationCurve,System.String)">
            <summary>
            Adds the keyframes defined in the specially formatted string to the specified <see cref="T:UnityEngine.AnimationCurve"/>.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.AnimationCurve"/>curve.</param>
            <param name="keyframes">The string defining the keyframes to be added.</param>
        </member>
        <member name="M:ModApi.Data.UserCurve.UpdateModulusTime">
            <summary>
            Updates the value used with the modulus operator on the current time to prevent a loss of float precision when evaluating the curve.
            </summary>
        </member>
        <member name="T:ModApi.Design.DesignerTool">
            <summary>
            Base class for tools in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerTool._requestCaptureOnNextInput">
            <summary>
            A value indicating whether the tool should request capture the next time it recieves notification of an input.
            </summary>
        </member>
        <member name="M:ModApi.Design.DesignerTool.#ctor(ModApi.Design.IDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Design.DesignerTool"/> class.
            </summary>
            <param name="designer">The designer.</param>
        </member>
        <member name="P:ModApi.Design.DesignerTool.Active">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Design.DesignerTool"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.DesignerTool.Designer">
            <summary>
            Gets the designer.
            </summary>
            <value>
            The designer.
            </value>
        </member>
        <member name="P:ModApi.Design.DesignerTool.HandleFingerToolEvents">
            <summary>
            Gets a value indicating whether this tool should handle events originating from the finger tool.
            </summary>
            <value>
              <c>true</c> if this tool should handle events originating from the finger tool; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.DesignerTool.IsBaseTool">
            <summary>
            Gets a value indicating whether this is a "base" tool (Camera Tool, Move Part Tool, etc).  Base tools are always active, and are not part specific.
            </summary>
            <value>
              <c>true</c> if this is a "base" tool (Camera Tool, Move Part Tool, etc); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.DesignerTool.IsInputCaptured">
            <summary>
            Gets a value indicating whether this instance has input captured.
            </summary>
            <value>
              <c>true</c> if this instance has input captured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.DesignerTool.Name">
            <summary>
            Gets the name of the Designer tool.
            </summary>
            <value>
            The name of the Designer tool.
            </value>
        </member>
        <member name="P:ModApi.Design.DesignerTool.SelectedPart">
            <summary>
            Gets the selected part.
            </summary>
            <value>
            The selected part.
            </value>
        </member>
        <member name="M:ModApi.Design.DesignerTool.Activate">
            <summary>
            Called when the designer has started using this tool.
            </summary>
        </member>
        <member name="M:ModApi.Design.DesignerTool.Deactivate">
            <summary>
            Called when the designer has stopped using this tool. It may be used again.
            </summary>
        </member>
        <member name="M:ModApi.Design.DesignerTool.HandleClick(ModApi.Input.Events.ClickEventArgs)">
            <summary>
            Handles the touch.
            </summary>
            <param name="e">The input event.</param>
            <returns><c>true</c> if this tool is requesting to capture, or retain a current input capture, otherwise <c>false</c></returns>
        </member>
        <member name="M:ModApi.Design.DesignerTool.HandlePinch(ModApi.Input.Events.PinchEventArgs)">
            <summary>
            Handles the pinch event.
            </summary>
            <param name="e">The pinch event.</param>
            <returns><c>true</c> if this tool is requesting to capture, or retain a current input capture, otherwise <c>false</c></returns>
        </member>
        <member name="M:ModApi.Design.DesignerTool.HandleScroll(ModApi.Input.Events.ScrollEventArgs)">
            <summary>
            Handles the scroll wheel.
            </summary>
            <param name="e">The event.</param>
            <returns><c>true</c> if this tool is requesting to capture, or retain a current input capture, otherwise <c>false</c></returns>
        </member>
        <member name="M:ModApi.Design.DesignerTool.OnCapturedToolChanged(ModApi.Design.DesignerTool)">
            <summary>
            Called when the Designer's current captured tool has changed. Only called when this tool is active.
            </summary>
            <param name="designerTool">The designer tool, or null if the captured tool has been released.</param>
        </member>
        <member name="M:ModApi.Design.DesignerTool.OnCraftStructureChanged">
            <summary>
            Called when the craft's structure has changed.
            </summary>
        </member>
        <member name="M:ModApi.Design.DesignerTool.OnOtherToolActivated(ModApi.Design.DesignerTool)">
            <summary>
            Called when a tool other than this one has been activated.
            </summary>
            <param name="toolActivated">The tool which was activated.</param>
        </member>
        <member name="M:ModApi.Design.DesignerTool.OnOtherToolDeactivated(ModApi.Design.DesignerTool)">
            <summary>
            Called when a tool other than this one has been deactivated.
            </summary>
            <param name="toolDeactivated">The tool which was deactivated.</param>
        </member>
        <member name="M:ModApi.Design.DesignerTool.SelectedPartChanged(ModApi.Craft.Parts.IPartScript,System.Nullable{UnityEngine.RaycastHit},System.Boolean)">
            <summary>
            Called when the selected part has changed.
            </summary>
            <param name="newPart">The new part.</param>
            <param name="hit">The raycast hit.</param>
            <param name="justAdded">Whether the part was just added (created and immediately selected in the same frame).</param>
        </member>
        <member name="M:ModApi.Design.DesignerTool.SelectedPartClicked(ModApi.Craft.Parts.IPartScript,System.Nullable{UnityEngine.RaycastHit})">
            <summary>
            Called when the selected part has been clicked on.
            </summary>
            <param name="selectedPart">The selected part.</param>
            <param name="hit">The raycast hit.</param>
        </member>
        <member name="M:ModApi.Design.DesignerTool.Update(System.Single)">
            <summary>
            Called every frame when the designer is using this tool.
            </summary>
            <param name="deltaTime">The delta time.</param>
        </member>
        <member name="M:ModApi.Design.DesignerTool.RequestCaptureOnNextInput">
            <summary>
            When called, the tool will request capture the next time it recieves notification of an input.
            </summary>
        </member>
        <member name="T:ModApi.Design.Events.DesignerPartAddedEventArgs">
            <summary>
            An event that is raised when a designer part has been added in the designer.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Design.Events.DesignerPartAddedEventArgs.#ctor(ModApi.Craft.Parts.DesignerPart,ModApi.Craft.Assembly,System.Collections.Generic.IReadOnlyList{ModApi.Craft.Parts.IPartScript})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Design.Events.DesignerPartAddedEventArgs"/> class.
            </summary>
            <param name="designerPart">The designer part.</param>
            <param name="assembly">The assembly.</param>
            <param name="partScripts">The part scripts.</param>
        </member>
        <member name="P:ModApi.Design.Events.DesignerPartAddedEventArgs.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:ModApi.Design.Events.DesignerPartAddedEventArgs.DesignerPart">
            <summary>
            Gets the designer part.
            </summary>
            <value>
            The designer part.
            </value>
        </member>
        <member name="P:ModApi.Design.Events.DesignerPartAddedEventArgs.PartScripts">
            <summary>
            Gets the part scripts.
            </summary>
            <value>
            The part scripts.
            </value>
        </member>
        <member name="T:ModApi.Design.SelectedPartChangedDelegate">
            <summary>
            Delegate for selected part changed event.
            </summary>
            <param name="oldPart">The previously selected part (or <c>null</c> there was no selected part).</param>
            <param name="newPart">The new selected part (or <c>null</c> there is no selected part).</param>
        </member>
        <member name="T:ModApi.Design.IDesigner">
            <summary>
            The interface for the designer.
            </summary>
        </member>
        <member name="E:ModApi.Design.IDesigner.CraftLoaded">
            <summary>
            Occurs when a craft has been loaded.
            </summary>
        </member>
        <member name="E:ModApi.Design.IDesigner.CraftStructureChanged">
            <summary>
            Occurs when the current craft structure has changed. For designer scripts, this event is preferred over the CraftScript's own
            CraftStructureChanged event. The Designer will manage disconnecting and reconnecting to the currently loaded CraftScript, so
            subscribers of this event won't have to worry about that.
            </summary>
        </member>
        <member name="E:ModApi.Design.IDesigner.PartAdded">
            <summary>
            Occurs when a part has been added.
            </summary>
        </member>
        <member name="E:ModApi.Design.IDesigner.SelectedPartChanged">
            <summary>
            Occurs when the selected part changes.
            </summary>
        </member>
        <member name="P:ModApi.Design.IDesigner.ActiveCraftConfiguration">
            <summary>
            Gets the active <see cref="T:ModApi.Craft.ICraftConfiguration"/>, which is the config tied to the currently selected part, or the root command pod if no part is selected.
            </summary>
            <value>
            The active craft configuration.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.AdvancedMode">
            <summary>
            Gets or sets a value indicating whether the designer is currently operating in advanced mode.
            </summary>
            <value>
              <c>true</c> if the designer is currently operating in advanced mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.AllowPartMovement">
            <summary>
            Gets or sets a value indicating whether part movement should be allowed.  Note: The currently active tool must also allow part movement for it to be enabled.
            </summary>
            <value>
              <c>true</c> if part movement should be allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.AllowPartSelection">
            <summary>
            Gets or sets a value indicating whether to allow part selection.
            </summary>
            <value>
              <c>true</c> if part selection is currently allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.CameraIsMoving">
            <summary>
            Gets a value indicating whether the camera is moving.
            </summary>
            <value>
              <c>true</c> if the camera is moving; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.CanPinch">
            <summary>
            Gets or sets a value indicating whether pinch gestures should be detected, or just ignored.
            </summary>
            <value>
              <c>true</c> if pinch gestures should be detected; otherwise, ignored <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.CapturedTool">
            <summary>
            Gets the captured tool if one is captured, otherwise; <c>null</c>.
            </summary>
            <value>
            The captured tool if one is captured, otherwise; <c>null</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.CraftScript">
            <summary>
            Gets the craft.
            </summary>
            <value>
            The craft.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.DesignerCamera">
            <summary>
            Gets the designer camera.
            </summary>
            <value>
            The designer camera.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.DesignerUi">
            <summary>
            Gets the designer UI.
            </summary>
            <value>
            The designer UI.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.DisableCameraMovement">
            <summary>
            Gets or sets a value indicating whether to disable camera movement.
            </summary>
            <value>
            <c>true</c> if camera movement is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.DisableCameraZoom">
            <summary>
            Gets a value indicating whether to disable camera zoom.
            </summary>
            <value>
              <c>true</c> if camera zoom should be disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.GameLoop">
            <summary>
            Gets the designer scene game loop manager.
            </summary>
            <value>
            The designer scene game loop manager.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.GameObject">
            <summary>
            Gets the game object the designer script is attached to.
            </summary>
            <value>
            The designer script game object.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.GizmoCamera">
            <summary>
            Gets the shared camera used by gizmos.
            </summary>
            <value>
            The shared camera used by gizmos.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.HighlightedPart">
            <summary>
            Gets or sets the highlighted part.
            </summary>
            <value>
            The highlighted part.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.Lights">
            <summary>
            Gets the designer lights.
            </summary>
            <value>
            The designer lights.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.MovePartTool">
            <summary>
            Gets the move part tool.
            </summary>
            <value>
            The move part tool.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.PerformanceAnalysis">
            <summary>
            Gets the performance analysis environment.
            </summary>
            <value>
            The performance analysis environment.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.SelectedPart">
            <summary>
            Gets the selected part.
            </summary>
            <value>
            The selected part.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.SelectPartTool">
            <summary>
            Gets the select part tool.
            </summary>
            <value>
            The select part tool.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.Symmetry">
            <summary>
            Gets the symmetry utility.
            </summary>
            <value>
            The symmetry utility.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.Tools">
            <summary>
            Gets the tools.
            </summary>
            <value>
            The tools.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesigner.UserInterface">
            <summary>
            Gets the user interface.
            </summary>
            <value>
            The user interface.
            </value>
        </member>
        <member name="M:ModApi.Design.IDesigner.AddTool``1(``0)">
            <summary>
            Adds a new tool to be available for use in the designer.
            </summary>
            <typeparam name="T">The type of designer tool.</typeparam>
            <param name="newTool">The new tool to add.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.BeginFlight">
            <summary>
            Begins the flight scene with the current design.
            </summary>
        </member>
        <member name="M:ModApi.Design.IDesigner.CreateCraftBodyDatas">
            <summary>
            Creates and assigns the body-data for the designer craft.
            </summary>
        </member>
        <member name="M:ModApi.Design.IDesigner.CreateNewCraft(ModApi.Craft.CrafConfigurationType)">
            <summary>
            Creates the new craft.
            </summary>
            <param name="type">The craft type.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.CreateSubassembly(System.String,ModApi.Craft.Assembly)">
            <summary>
            Creates the subassembly.
            </summary>
            <param name="name">The name.</param>
            <param name="subassembly">The subassembly.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.CreateUndoStep(System.String)">
            <summary>
            Adds the craft in its current state as the most recent undo step.
            </summary>
            <param name="ignoreKey">If specified, then an undo will not be created if the last undo has the same ignore key.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.DeselectPart">
            <summary>
            De-selects the current part, if any is selected.
            </summary>
        </member>
        <member name="M:ModApi.Design.IDesigner.DeselectTool(ModApi.Design.DesignerTool)">
            <summary>
            Deactivates the specified designer tool, which will no longer get input notifications.
            </summary>
            <param name="tool">The designer tool.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.DisplayCraftWarnings(ModApi.Craft.ICraftScript)">
            <summary>
            Displays any warnings related to the craft.
            </summary>
            <param name="craftScript">The craft script.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.Exit">
            <summary>
            Exits the designer. The current craft is saved to the editor XML before exiting.
            </summary>
        </member>
        <member name="M:ModApi.Design.IDesigner.GetPartAtScreenPosition(UnityEngine.Vector2)">
            <summary>
            Gets the part at screen position.
            </summary>
            <param name="position">The position.</param>
            <returns>The result of the part raycast.</returns>
        </member>
        <member name="M:ModApi.Design.IDesigner.GetTool``1">
            <summary>
            Gets the tool.
            </summary>
            <typeparam name="T">The tool type.</typeparam>
            <returns>The tool of the requested type if it has been registered; otherwise null.</returns>
        </member>
        <member name="M:ModApi.Design.IDesigner.HandleSelectedPartClicked(UnityEngine.RaycastHit)">
            <summary>
            Notifies the designer to handle an occurrence of the currently selected part being clicked.
            </summary>
            <param name="hit">The RaycastHit which resulted in the click.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.IsToolActive``1">
            <summary>
            Determines whether a tool of the specified type is active.
            </summary>
            <typeparam name="T">The type to check for.</typeparam>
            <returns>
              <c>true</c> if a tool of the specified type is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Design.IDesigner.IsToolActive(ModApi.Design.DesignerTool)">
            <summary>
            Determines whether the specified tool is active.
            </summary>
            <param name="toolToCheck">The tool to check.</param>
            <returns>
              <c>true</c> if the specified tool is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Design.IDesigner.PlaySound(ModApi.Audio.AudioFile)">
            <summary>
            Plays the sound in the designer.
            </summary>
            <param name="audioFile">The audio file to play.</param>
            <returns>The audio source.</returns>
        </member>
        <member name="M:ModApi.Design.IDesigner.SaveCraft(System.String,System.String,System.Boolean)">
            <summary>
            Saves the current craft.
            </summary>
            <param name="craftId">The craft identifier. If <c>null</c>, the default editor craft will be saved.</param>
            <param name="name">The name of the aircraft. If <c>null</c>, the craft's current name will be used.</param>
            <param name="showMessage">A value indicating if a UI message is show to the user to indcate that the craft has been saved.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.SelectPart(ModApi.Craft.Parts.IPartScript,System.Nullable{UnityEngine.RaycastHit},System.Boolean)">
            <summary>
            Selects the part.
            </summary>
            <param name="partScript">The part script.</param>
            <param name="hit">The RaycastHit info obtained when the part was selected.</param>
            <param name="justAdded">Whether the part was just added (created and immediately selected in the same frame).</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.SelectTool(ModApi.Design.DesignerTool)">
            <summary>
            Activates the specified designer tool, which will now get input notifications.
            </summary>
            <param name="tool">The designer tool.</param>
        </member>
        <member name="M:ModApi.Design.IDesigner.ShowMessage(System.String,System.Single)">
            <summary>
            Shows the message.
            </summary>
            <param name="message">The message.</param>
            <param name="time">The duration to display the message.</param>
        </member>
        <member name="T:ModApi.Design.DesignerCameraViewDirection">
            <summary>
            The directions available for the designer camera.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Front">
            <summary>
            The front direction.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Back">
            <summary>
            The back direction.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Left">
            <summary>
            The left direction.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Right">
            <summary>
            The right direction.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Top">
            <summary>
            The top direction.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Bottom">
            <summary>
            The bottom direction.
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.Showcase">
            <summary>
            The view that shows the craft off the best
            </summary>
        </member>
        <member name="F:ModApi.Design.DesignerCameraViewDirection.None">
            <summary>
            No current direction.
            </summary>
        </member>
        <member name="T:ModApi.Design.IDesignerCamera">
            <summary>
            Script for controlling the camera in the designer.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="P:ModApi.Design.IDesignerCamera.Camera">
            <summary>
            Gets the camera.
            </summary>
            <value>
            The camera.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerCamera.CameraTarget">
            <summary>
            Gets the camera target.
            </summary>
        </member>
        <member name="P:ModApi.Design.IDesignerCamera.CurrentZoom">
            <summary>
            Gets the current zoom.
            </summary>
            <value>
            The current zoom.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerCamera.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.FocusOnPart(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Moves the camera to focus on the specified part.
            </summary>
            <param name="partScript">The part script.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.Move(UnityEngine.Vector2)">
            <summary>
            Moves the specified direction.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.Rotate(UnityEngine.Vector2)">
            <summary>
            Rotates the specified rotation.
            </summary>
            <param name="rotation">The amount in degrees to rotate around the x and y axes.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.ScreenPointToRay(UnityEngine.Vector2)">
            <summary>
            Create a ray from the screen coordinates.
            </summary>
            <param name="screenCoordinates">The screen coordinates.</param>
            <returns>The ray.</returns>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.SetTargetPosition(UnityEngine.Vector3,System.Single)">
            <summary>
            Sets the target position.
            </summary>
            <param name="position">The position.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.SetTargetRotation(UnityEngine.Vector2,System.Single)">
            <summary>
            Sets the target rotation.
            </summary>
            <param name="rotation">The rotation.</param>
            <param name="duration">The amount of time to take animating to the new rotation.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.SetTargetZoom(System.Single,System.Single)">
            <summary>
            Sets the target zoom.
            </summary>
            <param name="zoom">The zoom.</param>
            <param name="duration">The amount of time to take animating to the new zoom.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.SetViewDirection(ModApi.Design.DesignerCameraViewDirection,System.Single)">
            <summary>
            Sets the view direction.
            </summary>
            <param name="viewDirection">The view direction.</param>
            <param name="duration">The amount of time to take animating to the new direction.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerCamera.Zoom(System.Single)">
            <summary>
            Zooms the camera by the specified percentage. A percentage less than 1.0 would be zooming in towards
            the target. A percentage greater than 1 would be zooming out.
            </summary>
            <param name="zoomPercentage">The zoom percentage.</param>
        </member>
        <member name="T:ModApi.Design.IDesignerPartModifierData">
            <summary>
            An interface for a part modifier data object that is used exclusively by the designer.
            </summary>
        </member>
        <member name="P:ModApi.Design.IDesignerPartModifierData.DesignerPartProperties">
            <summary>
            Gets the designer part properties interface.
            </summary>
            <value>
            The designer part properties interface.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerPartModifierData.PartModifierData">
            <summary>
            Gets the part modifier data.
            </summary>
            <value>
            The part modifier data.
            </value>
        </member>
        <member name="T:ModApi.Design.IDesignerUi">
            <summary>
            Interface for the designer user interface.
            </summary>
        </member>
        <member name="E:ModApi.Design.IDesignerUi.SelectedFlyoutChanged">
            <summary>
            Occurs when the selected flyout has changed.
            </summary>
        </member>
        <member name="P:ModApi.Design.IDesignerUi.Designer">
            <summary>
            Gets the designer reference.
            </summary>
            <value>
            The designer reference.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerUi.FingerTool">
            <summary>
            Gets the finger tool.
            </summary>
            <value>
            The finger tool.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerUi.Flyouts">
            <summary>
            Gets the default user interface flyouts used in the designer scene.
            </summary>
            <value>
            The default user interface flyouts used in the designer scene.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerUi.SelectedFlyout">
            <summary>
            Gets or sets the selected flyout.
            </summary>
            <value>
            The selected flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IDesignerUi.Transform">
            <summary>
            Gets the root transform for the designer user interface.
            </summary>
            <value>
            The root transform for the designer user interface.
            </value>
        </member>
        <member name="M:ModApi.Design.IDesignerUi.CloseFlyout(ModApi.Ui.IFlyout)">
            <summary>
            Closes the specified flyout.
            </summary>
            <param name="flyout">The flyout to close.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerUi.EditFlightProgram(ModApi.Craft.Parts.PartData)">
            <summary>
            Edits the flight program for the specified part. If the part does not have
            a flight program modifier, it will be added.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerUi.SetMainPanelVisibility(System.Boolean)">
            <summary>
            Sets the main panel's visibility.
            </summary>
            <param name="visible">If set to <c>true</c>, the main panel will be visible. If set to <c>false</c>, it will be hidden.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerUi.ShowMessage(System.String,System.Single)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message to show.</param>
            <param name="time">The duration (in seconds) that the message should be shown.</param>
        </member>
        <member name="M:ModApi.Design.IDesignerUi.ToggleFlyout(ModApi.Ui.IFlyout)">
            <summary>
            Toggles the flyout's visibility. If it is currently being shown, then it will be hidden.
            If it is currently hidden, then it will be shown.
            </summary>
            <param name="flyout">The flyout to toggle.</param>
        </member>
        <member name="T:ModApi.Design.IFingerTool">
            <summary>
            Interface for the finger tool.
            </summary>
        </member>
        <member name="P:ModApi.Design.IFingerTool.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Design.IFingerTool"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IFingerTool.PartButtonsEnabled">
            <summary>
            Gets a value indicating whether the part buttons are enabled.
            </summary>
            <value>
              <c>true</c> if the part buttons are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.IFingerTool.Position">
            <summary>
            Gets or sets the screen position of the finger tool's cursor.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="T:ModApi.Design.IFlyouts">
            <summary>
            An interface used for retrieving references to the various flyouts used in the designer scene.
            </summary>
        </member>
        <member name="P:ModApi.Design.IFlyouts.ActivationGroups">
            <summary>
            Gets the activation groups flyout.
            </summary>
            <value>
            The activation groups flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.All">
            <summary>
            Gets all the flyouts used in the designer.
            </summary>
            <value>
            All the flyouts used in the designer..
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.CraftParts">
            <summary>
            Gets the craft parts designer flyout.
            </summary>
            <value>
            The craft parts  designer flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.LoadCraft">
            <summary>
            Gets the load craft designer flyout.
            </summary>
            <value>
            The load craft designer flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.Menu">
            <summary>
            Gets the menu flyout.
            </summary>
            <value>
            The menu flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.PartConnections">
            <summary>
            Gets the part connections flyout.
            </summary>
            <value>
            The part connections flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.PartList">
            <summary>
            Gets the part list designer flyout.
            </summary>
            <value>
            The part list designer flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.PartProperties">
            <summary>
            Gets the part properties designer flyout.
            </summary>
            <value>
            The part properties designer flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.StagingEditor">
            <summary>
            Gets the staging editor designer flyout.
            </summary>
            <value>
            The staging editor designer flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.Symmetry">
            <summary>
            Gets the symmetry designer flyout.
            </summary>
            <value>
            The symmetry designer flyout.
            </value>
        </member>
        <member name="P:ModApi.Design.IFlyouts.Tools">
            <summary>
            Gets the tools flyout.
            </summary>
            <value>
            The tools flyout.
            </value>
        </member>
        <member name="T:ModApi.Design.IPerformanceAnalysis">
            <summary>
            Interface for the designer performance analysis.
            </summary>
        </member>
        <member name="E:ModApi.Design.IPerformanceAnalysis.EnvironmentChanged">
            <summary>
            Occurs when some parameter of the performance analysis environment has changed.
            </summary>
        </member>
        <member name="E:ModApi.Design.IPerformanceAnalysis.StageAnalysisChanged">
            <summary>
            Occurs when the staging analysis is updated.
            </summary>
        </member>
        <member name="E:ModApi.Design.IPerformanceAnalysis.StagingChanged">
            <summary>
            Occurs when staging changes.
            </summary>
        </member>
        <member name="P:ModApi.Design.IPerformanceAnalysis.AtmosphereSample">
            <summary>
            Gets or sets the atmosphere sample for which performance should be analyzed.
            </summary>
            <value>
            The atmosphere sample for which performance should be analyzed.
            </value>
        </member>
        <member name="P:ModApi.Design.IPerformanceAnalysis.MachNumber">
            <summary>
            Gets the mach number that the performance should be analyzed for.
            </summary>
            <value>
            The mach number.
            </value>
        </member>
        <member name="P:ModApi.Design.IPerformanceAnalysis.StageAnalysis">
            <summary>
            Gets the stage analysis.
            </summary>
            <value>
            The stage analysis.
            </value>
        </member>
        <member name="M:ModApi.Design.IPerformanceAnalysis.ClosePanel">
            <summary>
            Closes the panel.
            </summary>
        </member>
        <member name="M:ModApi.Design.IPerformanceAnalysis.ConfigureForVacuum">
            <summary>
            Configures the settings for a vacuum.
            </summary>
        </member>
        <member name="M:ModApi.Design.IPerformanceAnalysis.ToggleInspectorPanel">
            <summary>
            Toggles the inspector panel.
            </summary>
        </member>
        <member name="T:ModApi.Design.ISelectPartTool">
            <summary>
            Interface for the select part tool.
            </summary>
        </member>
        <member name="M:ModApi.Design.ISelectPartTool.Activate(System.Func{ModApi.Craft.Parts.PartData,System.Boolean},ModApi.Craft.Parts.PartData,System.Action{ModApi.Craft.Parts.PartData},System.Action)">
            <summary>
            Activates the tool in the designer.
            </summary>
            <param name="partFilter">The part filter that returns true for parts that should be visible for selection and false
            for parts that should be hidden.</param>
            <param name="selectedPart">The initially selected part.</param>
            <param name="completeAction">The action to execute when the part has been selected.</param>
            <param name="cancelAction">The action to execute if the part selection has been cancelled.</param>
        </member>
        <member name="T:ModApi.Design.ISymmetry">
            <summary>
            An interface for a class containing methods for working with parts in symmetry mode.
            </summary>
        </member>
        <member name="M:ModApi.Design.ISymmetry.DeleteSymmetricParts(System.Collections.Generic.List{ModApi.Craft.Parts.IPartScript})">
            <summary>
            Deletes all symmetric parts corresponding to these parts and removes these parts from their current SymmetricSlice.
            </summary>
            <param name="partScripts">The part scripts.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.DuplicateParts(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Duplicates the parts and their part connections.
            </summary>
            <param name="rootPart">The root part.</param>
            <returns>The cloned parts.</returns>
        </member>
        <member name="M:ModApi.Design.ISymmetry.EnumerateSymmetricPartScripts(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Enumerates all parts that are symmetric to the specified part script.
            </summary>
            <param name="partScript">The part script.</param>
            <returns>The enumerable list of parts.</returns>
        </member>
        <member name="M:ModApi.Design.ISymmetry.ExecuteOnSymmetricPartModifiers``1(``0,System.Boolean,System.Action{``0})">
            <summary>
            Executes the specified action on all symmetric part modifiers and optionally on the specified modifier as well.
            </summary>
            <typeparam name="TModifier">The type of the modifier.</typeparam>
            <param name="modifier">The modifier.</param>
            <param name="includeSourceModifier">If set to <c>true</c>, the action will be executed on the specified modifier as well.</param>
            <param name="action">The action to execute for each symmetric modifier.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.ExecuteOnSymmetricPartModifiers``2(``0,System.Boolean,``1,System.Action{``0,``1})">
            <summary>
            Executes the specified action on all symmetric part modifiers and optionally on the specified modifier as well.
            This takes a value parameter and passes that same parameter to all modifiers executing the action.
            </summary>
            <typeparam name="TModifier">The type of the modifier.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="modifier">The modifier.</param>
            <param name="includeSourceModifier">If set to <c>true</c>, the action will be executed on the specified modifier as well.</param>
            <param name="value">The value to pass to the action.</param>
            <param name="action">The action to execute for each symmetric modifier.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.GenerateSymmetryXml(ModApi.Craft.Assembly)">
            <summary>
            Generates the XML.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The Symmetry XML element.</returns>
        </member>
        <member name="M:ModApi.Design.ISymmetry.GetSymmetricPartModifier``1(``0,ModApi.Craft.Parts.PartData)">
            <summary>
            Gets the part modifier in part that is symmetric to the specified part modifier.
            </summary>
            <typeparam name="T">The part modifier type.</typeparam>
            <param name="sourceModifier">The non-symmetric part modifier.</param>
            <param name="symmetricPart">The symmetric part to check for a part modifier that is symmetric to the source modifier.</param>
            <returns>The symmetric part modifier or null if there are none.</returns>
        </member>
        <member name="M:ModApi.Design.ISymmetry.GetSymmetricPartScripts(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Gets the all parts that are symmetric to the specified part script.
            </summary>
            <param name="partScript">The part script.</param>
            <returns>The list of symmetric parts.</returns>
        </member>
        <member name="M:ModApi.Design.ISymmetry.LoadSymmetryXml(System.Xml.Linq.XElement,ModApi.Craft.Assembly)">
            <summary>
            Reads the XML and loads in the symmetric groups and slices.
            </summary>
            <param name="symmetryElement">The symmetry XML element.</param>
            <param name="assembly">The assembly to access parts from.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.RemovePartConnection(ModApi.Craft.Parts.IPartScript,ModApi.Craft.Parts.PartConnection)">
            <summary>
            Removes the part connection from all symmetric parts.
            </summary>
            <param name="partScript">The part script.</param>
            <param name="partConnection">The part connection.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.RemovePartModifier(ModApi.Craft.Parts.IPartScript,ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Removes the part modifier from all symmetric parts.
            </summary>
            <param name="partScript">The part script.</param>
            <param name="partModifier">The part modifier.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.RemoveSymmetryGroup(ModApi.Design.ISymmetryGroup)">
            <summary>
            Removes symmetry from all parts in the group. This also removes all references to the symmetry group
            since only parts reference a symmetry slice and its symmetry group.
            </summary>
            <param name="symmetryGroup">The symmetry group.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.SetSymmetryMode(ModApi.Craft.Parts.IPartScript,ModApi.Design.SymmetryMode,ModApi.Design.IDesignerUi)">
            <summary>
            Sets the symmetry mode on the specified part.
            </summary>
            <param name="partScript">The part for which to set symmetry.</param>
            <param name="symmetryMode">The symmetry mode.</param>
            <param name="designerUi">The designer UI.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.SynchronizePartConnections(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Synchronizes the part connections of the part with its symmetric parts (if it has any).
            </summary>
            <param name="partScript">The part script.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.SynchronizePartModifiers(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Synchronizes the part modifiers of the part with its symmetric parts (if it has any).
            </summary>
            <param name="partScript">The part script.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.SynchronizeParts(ModApi.Craft.Parts.IPartScript,System.Boolean)">
            <summary>
            Synchronizes the symmetric parts with the given part's properties
            Note: when new properties are added that should be synced, they need to be added manually
            </summary>
            <param name="partScript">The part script.</param>
            <param name="synchronizeModifiers">if set to <c>true</c> [synchronize modifiers].</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.SynchronizePartStyles(ModApi.Craft.Parts.IPartScript,System.Collections.Generic.List{ModApi.Craft.Parts.IPartScript})">
            <summary>
            Synchronizes the part styles.
            </summary>
            <param name="partScript">The part script.</param>
            <param name="symmetricParts">The symmetric parts. Use <c>null</c> to automatically determine symmetric parts.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.UpdatePartPositions(System.Collections.Generic.List{ModApi.Craft.Parts.IPartScript})">
            <summary>
            Updates the position of the symmetric clones of the specified parts.
            </summary>
            <param name="parts">The parts.</param>
        </member>
        <member name="M:ModApi.Design.ISymmetry.UpdateSymmetry(System.Collections.Generic.List{ModApi.Craft.Parts.IPartScript},ModApi.Craft.Parts.IPartScript,ModApi.Craft.Parts.AttachPoint)">
            <summary>
            Updates the symmetry of the parts after a part has been repositioned via the MovePartTool. This includes
            possibly creating new SymmetricGroups, SymmetricSlices, and new clones of the parts, which are linked
            via a SymmetryId guid.
            </summary>
            <param name="parts">The parts.</param>
            <param name="partScript">The part script that is being connected to the craft.</param>
            <param name="craftAttachPoint">The attach point on the craft that partScript is connecting to.</param>
        </member>
        <member name="T:ModApi.Design.ISymmetryGroup">
            <summary>
            Interface for SymmetryGroup (Contains information about a group of parts in symmetry mode).
            </summary>
        </member>
        <member name="P:ModApi.Design.ISymmetryGroup.AttachPoint">
            <summary>
            Gets the attach point.
            </summary>
            <value>
            The attach point.
            </value>
        </member>
        <member name="P:ModApi.Design.ISymmetryGroup.RootPart">
            <summary>
            Gets the root part.
            </summary>
            <value>
            The root part.
            </value>
        </member>
        <member name="P:ModApi.Design.ISymmetryGroup.Slices">
            <summary>
            Gets the slices.
            </summary>
            <value>
            The slices.
            </value>
        </member>
        <member name="P:ModApi.Design.ISymmetryGroup.SymmetryMode">
            <summary>
            Gets the symmetry mode.
            </summary>
            <value>
            The symmetry mode.
            </value>
        </member>
        <member name="T:ModApi.Design.ISymmetrySlice">
            <summary>
            Interface for SymmetrySlice (Contains information about a single slice in a symmetry group).
            </summary>
        </member>
        <member name="P:ModApi.Design.ISymmetrySlice.Angle">
            <summary>
            Gets the angle for this slice.
            </summary>
            <value>
            The angle.
            </value>
        </member>
        <member name="P:ModApi.Design.ISymmetrySlice.Parts">
            <summary>
            Gets the parts in the slice.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="P:ModApi.Design.ISymmetrySlice.SliceRootPart">
            <summary>
            Gets or sets the root part of the slice.
            </summary>
            <value>
            The root part of the slice.
            </value>
        </member>
        <member name="P:ModApi.Design.ISymmetrySlice.SymmetryGroup">
            <summary>
            Gets the symmetry group.
            </summary>
            <value>
            The symmetry group.
            </value>
        </member>
        <member name="M:ModApi.Design.ISymmetrySlice.GetPart(System.Guid)">
            <summary>
            Gets the part with the specified symmetry id.
            </summary>
            <param name="symmetryId">The symmetry identifier.</param>
            <returns>The part.</returns>
        </member>
        <member name="M:ModApi.Design.ISymmetrySlice.UpdatePartTransform(ModApi.Craft.Parts.IPartScript,ModApi.Craft.Parts.IPartScript)">
            <summary>
            Updates the position and rotation of the symmetric part based on the source part.
            </summary>
            <param name="sourcePart">The source part.</param>
            <param name="symmetricPart">The symmetric part.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.StyleChangedDelegate`1">
            <summary>
            A delegate used when a style changes.
            </summary>
            <typeparam name="T">The type of the style.</typeparam>
            <param name="previousStyle">The previous style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.ICenterButtonProperty">
            <summary>
            An interface representing a part modifier's property that is configurable in the designer via a centered button control.
            </summary>
            <seealso cref="T:ModApi.Design.PartProperties.IConfigurableProperty" />
        </member>
        <member name="T:ModApi.Design.PartProperties.IColorSlidersProperty">
            <summary>
            An interface representing a part modifier's color property that is configurable in the designer via slider controls.
            </summary>
            <seealso cref="T:ModApi.Design.PartProperties.IConfigurableProperty" />
        </member>
        <member name="P:ModApi.Design.PartProperties.IColorSlidersProperty.LabelValue">
            <summary>
            Gets or sets the label value.
            </summary>
            <value>
            The label value.
            </value>
        </member>
        <member name="T:ModApi.Design.PartProperties.IConfigurableProperty">
            <summary>
            An interface for generic configurable properties on part modifiers.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.IConfigurableProperty.CurrentFieldTarget">
            <summary>
            Gets the field target object (object on which the field is defined).
            </summary>
            <value>
            The field target object (object on which the field is defined).
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.IConfigurableProperty.Field">
            <summary>
            Gets the field associated with the property.
            </summary>
            <value>
            The field associated with the property.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.IConfigurableProperty.RefreshUI">
            <summary>
            Refreshes the UI, updating it to reflect the current value of the property.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IConfigurableProperty.SetPreferredHeight(System.Single)">
            <summary>
            Sets the height of the preferred of the UI element representing this property.
            </summary>
            <param name="height">The preferred height.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.IDesignerPartProperties">
            <summary>
            An interface for interacting with part properties in the designer.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.IDesignerPartProperties.Flyout">
            <summary>
            Gets the part properties flyout.
            </summary>
            <value>
            The part properties flyout.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartProperties.GetProperty``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the property for the specified field or <c>null</c> if an acceptable property can not be found.
            </summary>
            <typeparam name="T">The type of the field to retrieve.</typeparam>
            <param name="field">The field for which to retrieve the property.</param>
            <returns>The requested property or <c>null</c> if an acceptable property can not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartProperties.OnPropertyChanged(System.Reflection.FieldInfo)">
            <summary>
            Called when a part modifier property changes.
            </summary>
            <param name="field">The part modifier field that was changed.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartProperties.RefreshUI">
            <summary>
            Refreshes the UI.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartProperties.SetVisibility(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Sets the visibility of the specified field.
            </summary>
            <param name="field">The field for which to set visibility.</param>
            <param name="visible">If set to <c>true</c>, the field will be set to visible. If <c>false</c>, the field will be hidden.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartProperties.UpdateVisibility(System.Reflection.FieldInfo)">
            <summary>
            Updates the visibility of the specified field (using the fields visibility function if one was defined.
            If the specified field is <c>null</c>, this will update the visibility of all fields for the current part modifier data.
            </summary>
            <param name="field">The field for which to update visibility or <c>null</c> to update visibility for all fields.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface">
            <summary>
            The interface for the designer to work with a part modifier's part properties.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.PartModifierData">
            <summary>
            Gets the part modifier data.
            </summary>
            <value>
            The part modifier data.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.GetHeaderLabel">
            <summary>
            Gets the header label.
            </summary>
            <returns>The header label text or <c>null</c> if it should remain unchanged.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.GetValueLabel(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Gets the text to be displayed for the specified field that represent the specified value.
            </summary>
            <param name="field">The field associated with the value.</param>
            <param name="value">The value for which to get the display text.</param>
            <returns>The display text for the specified value.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.IsVisible(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Determines whether the specified field is visible.
            </summary>
            <param name="field">The field for which to determine visibility.</param>
            <param name="showHiddenFields">A value indicating whether the option to show hidden fields has been toggled on.</param>
            <returns><c>true</c> if the field should be visible, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnActivated(ModApi.Design.PartProperties.IDesignerPartProperties)">
            <summary>
            Called when the part properties UI is activated for this part modifier.
            </summary>
            <param name="partPropertiesScript">The part properties script.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnDeactivated(ModApi.Design.PartProperties.IDesignerPartProperties)">
            <summary>
            Called when the part properties UI is deactivated for this part modifier.
            </summary>
            <param name="partPropertiesScript">The part properties script.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnPartMaterialsChanged">
            <summary>
            Called when part materials may have changed.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnPartStyleChanged(ModApi.Craft.Parts.Styles.IPartStyle,ModApi.Craft.Parts.Styles.IPartStyle)">
            <summary>
            Called when the part style changes.
            </summary>
            <param name="previousStyle">The previous style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnPartTextureStyleChanged(ModApi.Craft.Parts.Styles.IPartTextureStyle,ModApi.Craft.Parts.Styles.IPartTextureStyle)">
            <summary>
            Called when the part texture style changes.
            </summary>
            <param name="previousStyle">The previous style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnPropertyActivated(ModApi.Design.PartProperties.IConfigurableProperty)">
            <summary>
            Called when the specified part property is activated.
            </summary>
            <param name="property">The property that was activated.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnPropertyChanged(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            Called when a part property value changes.
            </summary>
            <param name="field">The field that changed.</param>
            <param name="newVal">The new value of the changed property.</param>
            <param name="oldVal">The old value of the changed property.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnRefreshUI">
            <summary>
            Called when the designer part properties UI is refreshed.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.OnUpdate">
            <summary>
            The update method that is called every frame if the part modifier is active in the part properties flyout.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.SetVisible(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Sets the visibility for the specified field.
            </summary>
            <param name="field">The field for which to set the visibility.</param>
            <param name="visible">If set to <c>true</c>, the field will be set to visible; otherwise it will be hidden.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface.UpdateSpinnerValues(System.Reflection.FieldInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Updates the text spinner values.
            </summary>
            <param name="field">The field represented by the spinner.</param>
            <param name="currentValues">The current values for the spinner.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface">
            <summary>
            The interface for a part modifier to work with its designer part properties.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.Manager">
            <summary>
            Gets the designer part properties interface if the part modifier is currently
            active in the designer part properties (otherwise <c>null</c>).
            </summary>
            <value>
            The designer part properties interface if the part modifier is currently
            active in the designer part properties (otherwise <c>null</c>).
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetCenterButtonProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer centered button part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested centered button part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer field specified by the field selector.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector.</param>
            <returns>The requested field reference or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetLabelProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer label part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested label part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetSliderProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer slider part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested slider part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetSpinnerProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer spinner part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested spinner part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.GetToggleButtonProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer toggle button part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested toggle button part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnActivated(System.Action)">
            <summary>
            Subscribes to the event that occurs when the designer part properties are opened for the part.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnAnyPropertyChanged(System.Action)">
            <summary>
            Subscribes to the event that occurs when any designer property value is changed.
            </summary>
            <param name="action">The action to execute when a value changes.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnCenterButtonActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ICenterButtonProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnDeactivated(System.Action)">
            <summary>
            Subscribes to the event that occurs when the designer part properties are closed for the part.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnHeaderLabelRequested(System.Func{System.String})">
            <summary>
            Subscribes to the event that is called when a display string is requested for a designer part property header label.
            </summary>
            <param name="headerLabel">The function that returns the requested header label. Return <c>null</c> if the header should remain unchanged..</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnLabelActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ILabelProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnPartMaterialsChanged(System.Action)">
            <summary>
            Subscribes to the event that occurs when part materials may have changed.
            </summary>
            <param name="action">The action to execute when the part materials may have changed.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnPartStyleChanged(ModApi.Design.PartProperties.StyleChangedDelegate{ModApi.Craft.Parts.Styles.IPartStyle})">
            <summary>
            Subscribes to the event that occurs when that part style changes in the designer.
            </summary>
            <param name="action">The action to execute when the change occurs.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnPartTextureStyleChanged(ModApi.Design.PartProperties.StyleChangedDelegate{ModApi.Craft.Parts.Styles.IPartTextureStyle})">
            <summary>
            Subscribes to the event that occurs when that part texture style changes in the designer.
            </summary>
            <param name="action">The action to execute when the change occurs.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnPropertyActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.IConfigurableProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{``0,``0})">
            <summary>
            Subscribes to the event that occurs when a designer part property value is changed.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify the field for which to subscribe to the change event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the value of the specified field changes. The parameters to the action are the new and old values of the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnRefreshUI(System.Action)">
            <summary>
            Subscribes to the part properties refresh UI event in the designer with the specified action.
            </summary>
            <param name="action">The action to perform when the designer part properties UI is refreshed.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnSliderActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ISliderProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnSpinnerActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ISpinnerProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnSpinnerValuesRequested``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{System.Collections.Generic.List{System.String}})">
            <summary>
            Subscribes to the event that is called when a set of text spinner values are requested for a designer part property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field represented by a text spinner. Example: "() => this._myField".</param>
            <param name="updateAction">The action used to update the list of spinner values.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnToggleButtonActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.IToggleButtonProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnValueLabelRequested``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0,System.String})">
            <summary>
            Subscribes to the event that is called when a display string is requested for a designer part property value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify the field for which the value is being displayed. Example: "() => this._myField".</param>
            <param name="label">The function that takes the value to be displayed and returns it in string format.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface.OnVisibilityRequested``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{System.Boolean,System.Boolean})">
            <summary>
            Sets a visibility function for the specified field in the designer part properties user interface.
            This visibility function executes whenever a part property changes and determines whether or not the specified field should be visible.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify the field for which to set the visibility function. Example: "() => this._myField".</param>
            <param name="visibilityTest">The visibility test.
            This should return <c>true</c> if the field should be visible or <c>false</c> if it should be hidden.
            The parameter indicates whether the option to show hidden fields is enabled (<c>true</c>) or disabled (<c>false</c>).</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.ILabelProperty">
            <summary>
            An interface representing a part modifier's property that is represented in the designer via a label control.
            </summary>
            <seealso cref="T:ModApi.Design.PartProperties.IConfigurableProperty" />
        </member>
        <member name="P:ModApi.Design.PartProperties.ILabelProperty.FontSize">
            <summary>
            Gets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ILabelProperty.LabelValue">
            <summary>
            Gets or sets the label value.
            </summary>
            <value>
            The label value.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.ILabelProperty.RestoreFontSize">
            <summary>
            Restores the original size of the font.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.ILabelProperty.SetFontSize(System.Single)">
            <summary>
            Sets the size of the font.
            </summary>
            <param name="size">The font size.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.ILabelProperty.SetFontSize(System.Single,System.Single)">
            <summary>
            Sets the size of the font using auto-sizing.
            </summary>
            <param name="minSize">The minimum size.</param>
            <param name="maxSize">The maximum size.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.IPartPropertiesFlyout">
            <summary>
            An interface for the part properties flyout.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IPartPropertiesFlyout.RefreshTextureStyles">
            <summary>
            Refreshes the texture style spinners.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.IPartPropertiesFlyout.RefreshUI">
            <summary>
            Refreshes the UI.
            </summary>
        </member>
        <member name="T:ModApi.Design.PartProperties.ISliderProperty">
            <summary>
            An interface representing a part modifier's property that is configurable in the designer via a slider control.
            </summary>
            <seealso cref="T:ModApi.Design.PartProperties.IConfigurableProperty" />
        </member>
        <member name="P:ModApi.Design.PartProperties.ISliderProperty.LabelValue">
            <summary>
            Gets or sets the label value.
            </summary>
            <value>
            The label value.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISliderProperty.MaxValue">
            <summary>
            Gets the maximum value for the slider.
            </summary>
            <value>
            The maximum value for the slider.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISliderProperty.MinValue">
            <summary>
            Gets the minimum value for the slider.
            </summary>
            <value>
            The minimum value for the slider.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISliderProperty.NumberOfSteps">
            <summary>
            Gets the number of steps for the slider.
            </summary>
            <value>
            The number of steps for the slider.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISliderProperty.SliderValue">
            <summary>
            Gets or sets the slider value.
            </summary>
            <value>
            The slider value.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.ISliderProperty.UpdateSliderSettings(System.Single,System.Single,System.Int32)">
            <summary>
            Updates the slider settings.
            </summary>
            <param name="minValue">The minimum value for the slider.</param>
            <param name="maxValue">The maximum value for the slider.</param>
            <param name="numberOfSteps">The number of steps for the slider.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.ISliderProperty.UpdateSliderSettings(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Updates the slider settings.
            </summary>
            <param name="minValue">The minimum value for the slider.</param>
            <param name="maxValue">The maximum value for the slider.</param>
            <param name="numberOfSteps">The number of steps for the slider.</param>
            <param name="refreshUI">If set to <c>true</c>, the UI will be refreshed after updating the slider.</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.ISpinnerProperty">
            <summary>
            An interface representing a part modifier's property that is configurable in the designer via a spinner control.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISpinnerProperty.IsTextSpinner">
            <summary>
            Gets a value indicating whether this instance is text spinner.
            </summary>
            <value>
              <c>true</c> if this instance is text spinner; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISpinnerProperty.LabelValue">
            <summary>
            Gets or sets the label value.
            </summary>
            <value>
            The label value.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISpinnerProperty.NumericValue">
            <summary>
            Gets the numeric value of the spinner.
            This will throw an exception if this spinner is a text spinner.
            </summary>
            <value>
            The numeric value of the spinner.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISpinnerProperty.TextValue">
            <summary>
            Gets the text value of the spinner.
            </summary>
            <value>
            The text value of the spinner.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ISpinnerProperty.Values">
            <summary>
            Gets the values for a text spinner.
            </summary>
            <value>
            The values for a text spinner.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.ISpinnerProperty.UpdateNumericSpinnerSettings(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Updates the spinner settings for a numeric spinner.
            </summary>
            <param name="minValue">The minimum value for the spinner.</param>
            <param name="maxValue">The maximum value for the spinner.</param>
            <param name="stepSize">The step size for the spinner.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.ISpinnerProperty.UpdateValues">
            <summary>
            Updates the values available in the spinner.
            </summary>
        </member>
        <member name="T:ModApi.Design.PartProperties.ITextInputProperty">
            <summary>
            An interface representing a part modifier's property that is configurable in the designer via a text input control.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.ITextInputProperty.LabelValue">
            <summary>
            Gets or sets the label value.
            </summary>
            <value>
            The label value.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.ITextInputProperty.Value">
            <summary>
            Gets the text value of the property.
            </summary>
            <value>
            The text value of the property.
            </value>
        </member>
        <member name="T:ModApi.Design.PartProperties.IToggleButtonProperty">
            <summary>
            An interface representing a part modifier's property that is configurable in the designer via a toggle button control.
            </summary>
            <seealso cref="T:ModApi.Design.PartProperties.IConfigurableProperty" />
        </member>
        <member name="P:ModApi.Design.PartProperties.IToggleButtonProperty.LabelValue">
            <summary>
            Gets or sets the label value.
            </summary>
            <value>
            The label value.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.IToggleButtonProperty.ToggleValue">
            <summary>
            Gets or sets a value indicating whether the toggle button control is toggled on.
            </summary>
            <value>
              <c>true</c> if the toggle control value is true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties">
            <summary>
            An object associated with a single part modifier and used for interacting with the modifier's part properties in the designer.
            </summary>
            <seealso cref="T:ModApi.Design.PartProperties.IDesignerPartPropertiesModifierInterface" />
            <seealso cref="T:ModApi.Design.PartProperties.IDesignerPartPropertiesDesignerInterface" />
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._invalidFields">
            <summary>
            The invalid designer fields.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._validFields">
            <summary>
            The valid designer fields.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._activatedActions">
            <summary>
            The activated actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._anyPropertyChangedActions">
            <summary>
            The actions triggered when any property changes.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._deactivatedActions">
            <summary>
            The deactivated actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._headerLabelFunction">
            <summary>
            The designer property header label function.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._onPartMaterialsChangedActions">
            <summary>
            The designer part materials changed actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._onPartStyleChangedActions">
            <summary>
            The designer part style changed actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._onPartTextureStyleChangedActions">
            <summary>
            The designer part texture style changed actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._propertyActivatedActions">
            <summary>
            The designer property activated actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._propertyChangedActions">
            <summary>
            The property changed actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._refreshUIActions">
            <summary>
            The designer refresh UI actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._textSpinnerValuesActions">
            <summary>
            The designer property text spinner values actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._updateActions">
            <summary>
            The designer part properties update actions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._valueLabelActions">
            <summary>
            The designer property value label functions.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties._visibleActions">
            <summary>
            The designer property visible actions.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.#ctor(ModApi.Craft.Parts.PartModifierData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties"/> class.
            </summary>
            <param name="modifier">The part modifier.</param>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.Manager">
            <summary>
            Gets the designer part properties interface if the part modifier is currently
            active in the designer part properties (otherwise <c>null</c>).
            </summary>
            <value>
            The designer part properties interface if the part modifier is currently
            active in the designer part properties (otherwise <c>null</c>).
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.PartModifierData">
            <summary>
            Gets the part modifier data.
            </summary>
            <value>
            The part modifier data.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetCenterButtonProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer centered button part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>
            The requested centered button part property interface or <c>null</c> if an acceptable match could not be found.
            </returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer field specified by the field selector.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector.</param>
            <returns>The requested field reference or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#GetHeaderLabel">
            <summary>
            Gets the header label.
            </summary>
            <returns>
            The header label text or <c>null</c> if it should remain unchanged.
            </returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetLabelProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer label part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>
            The requested label part property interface or <c>null</c> if an acceptable match could not be found.
            </returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetSliderProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer slider part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested slider part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetSpinnerProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer spinner part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested spinner part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetToggleButtonProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the designer toggle button part property interface for the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>
            The requested toggle button part property interface or <c>null</c> if an acceptable match could not be found.
            </returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#GetValueLabel(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Gets the text to be displayed for the specified field that represent the specified value.
            </summary>
            <param name="field">The field associated with the value.</param>
            <param name="value">The value for which to get the display text.</param>
            <returns>The display text for the specified value.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#IsVisible(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Determines whether the specified field is visible.
            </summary>
            <param name="field">The field for which to determine visibility.</param>
            <param name="showHiddenFields">A value indicating whether the option to show hidden fields has been toggled on.</param>
            <returns>
              <c>true</c> if the field should be visible, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnActivated(System.Action)">
            <summary>
            Subscribes to the event that occurs when the designer part properties are opened for the part.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnActivated(ModApi.Design.PartProperties.IDesignerPartProperties)">
            <summary>
            Called when the part properties UI is opened for this part modifier.
            </summary>
            <param name="partPropertiesScript">The part properties script.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnAnyPropertyChanged(System.Action)">
            <summary>
            Subscribes to the event that occurs when any designer property value is changed.
            </summary>
            <param name="action">The action to execute when a value changes.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnCenterButtonActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ICenterButtonProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() =&gt; this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnDeactivated(System.Action)">
            <summary>
            Subscribes to the event that occurs when the designer part properties are closed for the part.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnDeactivated(ModApi.Design.PartProperties.IDesignerPartProperties)">
            <summary>
            Called when the part properties UI is closed for this part modifier.
            </summary>
            <param name="partPropertiesScript">The part properties script.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnHeaderLabelRequested(System.Func{System.String})">
            <summary>
            Subscribes to the event that is called when a display string is requested for a designer part property header label.
            </summary>
            <param name="headerLabel">The function that returns the requested header label. Return <c>null</c> if the header should remain unchanged..</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnLabelActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ILabelProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() =&gt; this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPartMaterialsChanged(System.Action)">
            <summary>
            Subscribes to the event that occurs when part materials may have changed.
            </summary>
            <param name="action">The action to execute when the part materials may have changed.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnPartMaterialsChanged">
            <summary>
            Called when part materials may have changed.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnPartStyleChanged(ModApi.Craft.Parts.Styles.IPartStyle,ModApi.Craft.Parts.Styles.IPartStyle)">
            <summary>
            Called when the part style changes.
            </summary>
            <param name="previousStyle">The previous style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPartStyleChanged(ModApi.Design.PartProperties.StyleChangedDelegate{ModApi.Craft.Parts.Styles.IPartStyle})">
            <summary>
            Subscribes to the event that occurs when that part style changes in the designer.
            </summary>
            <param name="action">The action to execute when the change occurs.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnPartTextureStyleChanged(ModApi.Craft.Parts.Styles.IPartTextureStyle,ModApi.Craft.Parts.Styles.IPartTextureStyle)">
            <summary>
            Called when the part texture style changes.
            </summary>
            <param name="previousStyle">The previous style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPartTextureStyleChanged(ModApi.Design.PartProperties.StyleChangedDelegate{ModApi.Craft.Parts.Styles.IPartTextureStyle})">
            <summary>
            Subscribes to the event that occurs when that part texture style changes in the designer.
            </summary>
            <param name="action">The action to execute when the change occurs.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnPropertyActivated(ModApi.Design.PartProperties.IConfigurableProperty)">
            <summary>
            Called when a designer part property is activated.
            </summary>
            <param name="property">The designer part property that was activated.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPropertyActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.IConfigurableProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{``0,``0})">
            <summary>
            Subscribes to the event that occurs when a designer property value is changed.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify the field for which to subscribe to the change event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the value of the specified field changes. The parameters to the action are the new and old values of the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnPropertyChanged(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            Called when a part property value changes.
            </summary>
            <param name="field">The field that changed.</param>
            <param name="newVal">The new value of the changed property.</param>
            <param name="oldVal">The old value of the changed property.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnRefreshUI(System.Action)">
            <summary>
            Subscribes to the part properties refresh UI event in the designer with the specified action.
            </summary>
            <param name="action">The action to perform when the designer part properties UI is refreshed.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnRefreshUI">
            <summary>
            Called when the designer part properties UI is refreshed.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnSliderActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ISliderProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnSpinnerActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.ISpinnerProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnSpinnerValuesRequested``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{System.Collections.Generic.List{System.String}})">
            <summary>
            Subscribes to the event that is called when a set of text spinner values are requested for a designer part property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field represented by a text spinner. Example: "() => this._myField".</param>
            <param name="updateAction">The action used to update the list of spinner values.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnToggleButtonActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action{ModApi.Design.PartProperties.IToggleButtonProperty})">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() =&gt; this._myField".</param>
            <param name="action">The action to execute when the field is activated. The action parameter is the property interface associated with the field.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#OnUpdate">
            <summary>
            The update method that is called every frame if the part modifier is active in the part properties flyout.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnUpdate(System.Action)">
            <summary>
            Subscribes to the part properties update event in the designer with the specified action.
            </summary>
            <param name="action">The action to perform every update when the designer part properties is open.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnValueLabelRequested``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0,System.String})">
            <summary>
            Subscribes to the event that is called when a display string is requested for a designer part property value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify the field for which the value is being displayed. Example: "() => this._myField".</param>
            <param name="label">The function that takes the value to be displayed and returns it in string format.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnVisibilityRequested``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{System.Boolean,System.Boolean})">
            <summary>
            Sets a visibility function for the specified field in the designer part properties user interface.
            This visibility function executes whenever a part property changes and determines whether or not the specified field should be visible.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify the field for which to set the visibility function. Example: "() => this._myField".</param>
            <param name="visibilityTest">The visibility test.
            This should return <c>true</c> if the field should be visible or <c>false</c> if it should be hidden.
            The parameter indicates whether the option to show hidden fields is enabled (<c>true</c>) or disabled (<c>false</c>).</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#SetVisible(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Sets the visibility for the specified field.
            </summary>
            <param name="field">The field for which to set the visibility.</param>
            <param name="visible">If set to <c>true</c>, the field will be set to visible; otherwise it will be hidden.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ModApi#Design#PartProperties#IDesignerPartPropertiesDesignerInterface#UpdateSpinnerValues(System.Reflection.FieldInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Updates the text spinner values.
            </summary>
            <param name="field">The field represented by the spinner.</param>
            <param name="currentValues">The current values for the spinner.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.ValidatePropertyField(System.Reflection.FieldInfo)">
            <summary>
            Validates the designer property field.
            </summary>
            <param name="field">The field to be validated.</param>
            <returns><c>true</c> if the designer field is valid (has a designer part property attribute) or <c>false</c> if it is invalid.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Gets the designer part property interface for the specified field.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector for which to get the part property interface.</param>
            <returns>The requested part property interface or <c>null</c> if an acceptable match could not be found.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPartMaterialsChanged(System.Object,System.EventArgs)">
            <summary>
            Called when part materials may have changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnPropertyActivated``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Delegate)">
            <summary>
            Subscribes to the event that occurs when a designer part property is activated.
            This event occurs after all part selection callbacks have run.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldSelector">The field selector. This should specify a field for which to subscribe to the event. Example: "() => this._myField".</param>
            <param name="action">The action to execute when the field is activated.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartModifierDataDesignerPartProperties.OnVisibilityRequested(System.Reflection.FieldInfo,System.Func{System.Boolean,System.Boolean})">
            <summary>
            Sets a visibility function for the specified field in the designer part properties user interface.
            This visibility function executes whenever a part property changes and determines whether or not the specified field should be visible.
            </summary>
            <param name="field">The field for which to set the visibility function.</param>
            <param name="visibilityTest">The visibility test.
            This should return <c>true</c> if the field should be visible or <c>false</c> if it should be hidden.
            The parameter indicates whether the option to show hidden fields is enabled (<c>true</c>) or disabled (<c>false</c>).</param>
        </member>
        <member name="T:ModApi.Design.PartProperties.PartPropertiesScript">
            <summary>
            Base class for part properties controls.
            </summary>
        </member>
        <member name="F:ModApi.Design.PartProperties.PartPropertiesScript._initialized">
            <summary>
            A value indicating whether or not the script has been initialized.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.DesignerAttribute">
            <summary>
            Gets the designer attribute for the part modifier type (if any).
            </summary>
            <value>
            The designer attribute for the part modifier type (if any)
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.Flyout">
            <summary>
            Gets the part properties flyout script.
            </summary>
            <value>
            The part properties flyout script.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.HandlesMultipleModifiers">
            <summary>
            Gets a value indicating whether this component handles multiple instances of the same part modifier
            or if one instance of this script should be created for every part modifier to be handled.
            </summary>
            <value>
            <c>true</c> if this component handles multiple instances of the same part modifier; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value>
              <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.ModifierIndex">
            <summary>
            Gets the index of the modifier handled by this component.
            </summary>
            <value>
            The index of the modifier handled by this component.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.ModifierType">
            <summary>
            Gets the type of the part modifier handled by this component.
            </summary>
            <value>
            The type of the part modifier handled by this component.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.PanelOrder">
            <summary>
            Gets or sets the order in which to display this panel in the part properties panel.
            The higher the number, the lower it will appear in the UI panel.
            The default value is 1000.
            </summary>
            <value>
            The order in which to display this panel in the part properties panel.
            The higher the number, the lower it will appear in the UI panel.
            The default value is 1000.
            </value>
        </member>
        <member name="P:ModApi.Design.PartProperties.PartPropertiesScript.Designer">
            <summary>
            Gets the designer script.
            </summary>
            <value>
            The designer script.
            </value>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.Initialize(ModApi.Design.IDesigner,ModApi.Design.PartProperties.IPartPropertiesFlyout,System.Type,System.Int32,ModApi.Craft.Parts.Attributes.DesignerPartModifierAttribute)">
            <summary>
            Initializes the part properties script.
            </summary>
            <param name="designer">The designer reference.</param>
            <param name="flyout">The part properties flyout reference.</param>
            <param name="modifierType">The type of the modifier handled by this component.</param>
            <param name="modifierIndex">The index of the modifier handled by this component.</param>
            <param name="attribute">The attribute associated with this script (if any).</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.OnPartDeselected(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Called when the part is deselected.
            </summary>
            <param name="part">The part that has been deselected.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.OnPartSelected(ModApi.Craft.Parts.IPartScript)">
            <summary>
            Called when a part has been selected.
            </summary>
            <param name="part">The new part that has been selected.</param>
            <returns>True if the control handles this type of part, or false otherwise.</returns>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.OnPropertiesClosed">
            <summary>
            Called when part properties is closed.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.OnPropertiesOpened">
            <summary>
            Called when part properties is opened.
            </summary>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.SetVisible(System.Boolean)">
            <summary>
            Sets the visibility of the panel.
            </summary>
            <param name="visible">If set to <c>true</c>, the part properties panel will be visible.</param>
        </member>
        <member name="M:ModApi.Design.PartProperties.PartPropertiesScript.OnInitialized">
            <summary>
            Called when the script is initialized.
            </summary>
        </member>
        <member name="T:ModApi.Design.PartRaycastResult">
            <summary>
            Contains information about a raycast into the scene for a part.
            </summary>
        </member>
        <member name="P:ModApi.Design.PartRaycastResult.Hit">
            <summary>
            Gets or sets the hit.
            </summary>
            <value>
            The hit.
            </value>
        </member>
        <member name="P:ModApi.Design.PartRaycastResult.PartScript">
            <summary>
            Gets or sets the part script.
            </summary>
            <value>
            The part script.
            </value>
        </member>
        <member name="P:ModApi.Design.PartRaycastResult.Ray">
            <summary>
            Gets or sets the ray.
            </summary>
            <value>
            The ray.
            </value>
        </member>
        <member name="T:ModApi.Design.SymmetryMode">
            <summary>
            List of available symmetry modes.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.None">
            <summary>
            The disabled mode.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.Mirror">
            <summary>
            The mirrored mode.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.Radial2">
            <summary>
            Radial mode 2.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.Radial3">
            <summary>
            Radial mode 3.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.Radial4">
            <summary>
            Radial mode 4.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.Radial5">
            <summary>
            Radial mode 5.
            </summary>
        </member>
        <member name="F:ModApi.Design.SymmetryMode.Radial6">
            <summary>
            Radial mode 6.
            </summary>
        </member>
        <member name="T:ModApi.DevConsole.IArgumentParser`1">
            <summary>
            Interface for a class that handles the parsing of console command arguments to a specified type.
            </summary>
            <typeparam name="T">The type of the argument</typeparam>
        </member>
        <member name="P:ModApi.DevConsole.IArgumentParser`1.HelpMessage">
            <summary>
            Gets the help message for the parser.
            </summary>
            <value>
            The help message for the parser.
            A message that may help a user determine how to format their argument such that the parser can understand it.
            </value>
        </member>
        <member name="P:ModApi.DevConsole.IArgumentParser`1.Priority">
            <summary>
            Gets the priority of the parser.
            </summary>
            <value>
            The priority of the parser.
            Parsers with lower priority numbers can attempt to parse an argument before parsers of larger priority numbers.
            All default parsers have a priority of 10.
            </value>
        </member>
        <member name="M:ModApi.DevConsole.IArgumentParser`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse the argument to argument type handled by this parser.
            </summary>
            <param name="value">The argument value to parse.</param>
            <param name="result">The result of the parsing.</param>
            <returns><c>true</c> if the argument was parsed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.DevConsole.IDevConsole">
            <summary>
            A interface for interacting with the developer console.
            </summary>
        </member>
        <member name="E:ModApi.DevConsole.IDevConsole.Initialized">
            <summary>
            Occurs when the dev console is initialized.
            </summary>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterArgumentParser``1(ModApi.DevConsole.IArgumentParser{``0})">
            <summary>
            Registers the argument parser.
            </summary>
            <typeparam name="T">The type of arguments supported by the parser.</typeparam>
            <param name="parser">The parser being registered.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand(System.String,System.Action)">
            <summary>
            Registers the specified command.
            </summary>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``1(System.String,System.Action{``0})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T">The type of command argument #1.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``2(System.String,System.Action{``0,``1})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T1">The type of command argument #1.</typeparam>
            <typeparam name="T2">The type of command argument #2.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``3(System.String,System.Action{``0,``1,``2})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T1">The type of command argument #1.</typeparam>
            <typeparam name="T2">The type of command argument #2.</typeparam>
            <typeparam name="T3">The type of command argument #3.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``4(System.String,System.Action{``0,``1,``2,``3})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T1">The type of command argument #1.</typeparam>
            <typeparam name="T2">The type of command argument #2.</typeparam>
            <typeparam name="T3">The type of command argument #3.</typeparam>
            <typeparam name="T4">The type of command argument #4.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T1">The type of command argument #1.</typeparam>
            <typeparam name="T2">The type of command argument #2.</typeparam>
            <typeparam name="T3">The type of command argument #3.</typeparam>
            <typeparam name="T4">The type of command argument #4.</typeparam>
            <typeparam name="TResult">The type of command result.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``4(System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T1">The type of command argument #1.</typeparam>
            <typeparam name="T2">The type of command argument #2.</typeparam>
            <typeparam name="T3">The type of command argument #3.</typeparam>
            <typeparam name="TResult">The type of command result.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``3(System.String,System.Func{``0,``1,``2})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T1">The type of command argument #1.</typeparam>
            <typeparam name="T2">The type of command argument #2.</typeparam>
            <typeparam name="TResult">The type of command result.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``2(System.String,System.Func{``0,``1})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="T">The type of command argument.</typeparam>
            <typeparam name="TResult">The type of command result.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.RegisterCommand``1(System.String,System.Func{``0})">
            <summary>
            Registers the specified command.
            </summary>
            <typeparam name="TResult">The type of command result.</typeparam>
            <param name="command">The command to register.</param>
            <param name="commandAction">The command action.</param>
        </member>
        <member name="M:ModApi.DevConsole.IDevConsole.UnregisterCommand(System.String)">
            <summary>
            Unregisters the specified command.
            </summary>
            <param name="command">The command to unregister.</param>
        </member>
        <member name="T:ModApi.Device">
            <summary>
            A class for looking up information about the device on which the game is running.
            </summary>
        </member>
        <member name="M:ModApi.Device.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Device"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Device.Dpi">
            <summary>
            Gets the dpi of the screen.
            </summary>
            <value>
            The dpi of the screen.
            </value>
        </member>
        <member name="P:ModApi.Device.IsAndroidBuild">
            <summary>
            Gets a value indicating whether the application is built for the Android platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the Android platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsAndroidRuntime">
            <summary>
            Gets a value indicating whether the application is running in an Android runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an Android runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsDebugBuild">
            <summary>
            Gets a value indicating whether the application is a debug build.
            </summary>
            <value>
              <c>true</c> if the application is a debug build; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsEducationBuild">
            <summary>
            Gets a value indicating whether the application is an education build.
            </summary>
            <value>
              <c>true</c> if this application is an education build; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsIosBuild">
            <summary>
            Gets a value indicating whether the application is built for the IOS platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the IOS platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsIosRuntime">
            <summary>
            Gets a value indicating whether the application is running in an IOS runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an IOS runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsLinuxBuild">
            <summary>
            Gets a value indicating whether the application is built for the Linux platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the Linux platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsLinuxRuntime">
            <summary>
            Gets a value indicating whether the application is running in a Linux runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a Linux runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsMobileBuild">
            <summary>
            Gets a value indicating whether the application is built for a mobile platform.
            </summary>
            <value>
              <c>true</c> if the application is built for a mobile platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsMobileRuntime">
            <summary>
            Gets a value indicating whether the application is running in a mobile runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a mobile runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsMultiTouchEnabled">
            <summary>
            Gets a value indicating whether the device supports multi-touch inputs.
            </summary>
            <value>
            <c>true</c> if the device supports multi-touch inputs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsOsxBuild">
            <summary>
            Gets a value indicating whether the application is built for the OSX platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the OSX platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsOsxRuntime">
            <summary>
            Gets a value indicating whether the application is running in an OSX runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an OSX runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsTablet">
            <summary>
            Gets a value indicating whether the device is a handheld device with a screen diagonal that is larger than 7".
            </summary>
            <value>
              <c>true</c> if this is a handheld device with a screen diagonal that is larger than 7"; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsTouchEnabled">
            <summary>
            Gets a value indicating whether the device supports touch inputs.
            </summary>
            <value>
            <c>true</c> if the device supports touch inputs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsUnityEditor">
            <summary>
            Gets a value indicating whether the application is running within the Unity editor.
            </summary>
            <value>
            <c>true</c> if the application is running within the Unity editor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsWindowsBuild">
            <summary>
            Gets a value indicating whether the application is built for the Windows platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the Windows platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.IsWindowsRuntime">
            <summary>
            Gets a value indicating whether the application is running in a Windows runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a Windows runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.DeviceCaps">
            <summary>
            Gets the device caps as a formatted string.
            </summary>
            <value>
            The device caps.
            </value>
        </member>
        <member name="P:ModApi.Device.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
            <value>
            The device identifier.
            </value>
        </member>
        <member name="P:ModApi.Device.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
            <value>
            The device model.
            </value>
        </member>
        <member name="P:ModApi.Device.DeviceName">
            <summary>
            Gets the name of the device.
            </summary>
            <value>
            The name of the device.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#Dpi">
            <summary>
            Gets the dpi of the screen.
            </summary>
            <value>
            The dpi of the screen.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsAndroidBuild">
            <summary>
            Gets a value indicating whether the application is built for the Android platform.
            </summary>
            <value>
            <c>true</c> if the application is built for the Android platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsAndroidRuntime">
            <summary>
            Gets a value indicating whether the application is running in an Android runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an Android runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsDebugBuild">
            <summary>
            Gets a value indicating whether the application is a debug build.
            </summary>
            <value>
            <c>true</c> if the application is a debug build; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsEducationBuild">
            <summary>
            Gets a value indicating whether the application is an education build.
            </summary>
            <value>
            <c>true</c> if the application is an education build; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsIosBuild">
            <summary>
            Gets a value indicating whether the application is built for the IOS platform.
            </summary>
            <value>
            <c>true</c> if the application is built for the IOS platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsIosRuntime">
            <summary>
            Gets a value indicating whether the application is running in an IOS runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an IOS runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsLinuxBuild">
            <summary>
            Gets a value indicating whether the application is built for the Linux platform.
            </summary>
            <value>
            <c>true</c> if the application is built for the Linux platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsLinuxRuntime">
            <summary>
            Gets a value indicating whether the application is running in a Linux runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a Linux runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsMobileBuild">
            <summary>
            Gets a value indicating whether the application is built for a mobile platform.
            </summary>
            <value>
            <c>true</c> if the application is built for a mobile platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsMobileRuntime">
            <summary>
            Gets a value indicating whether the application is running in a mobile runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a mobile runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsMultiTouchEnabled">
            <summary>
            Gets a value indicating whether the device supports multi-touch inputs.
            </summary>
            <value>
            <c>true</c> if the device supports multi-touch inputs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsOsxBuild">
            <summary>
            Gets a value indicating whether the application is built for the OSX platform.
            </summary>
            <value>
            <c>true</c> if the application is built for the OSX platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsOsxRuntime">
            <summary>
            Gets a value indicating whether the application is running in an OSX runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an OSX runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsTablet">
            <summary>
            Gets a value indicating whether the device is a handheld device with a screen diagonal that is larger than 7".
            </summary>
            <value>
              <c>true</c> if this is a handheld device with a screen diagonal that is larger than 7"; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsTouchEnabled">
            <summary>
            Gets a value indicating whether the device supports touch inputs.
            </summary>
            <value>
            <c>true</c> if the device supports touch inputs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsUnityEditor">
            <summary>
            Gets a value indicating whether the application is running within the Unity editor.
            </summary>
            <value>
            <c>true</c> if the application is running within the Unity editor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsWindowsBuild">
            <summary>
            Gets a value indicating whether the application is built for the Windows platform.
            </summary>
            <value>
            <c>true</c> if the application is built for the Windows platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Device.ModApi#IDevice#IsWindowsRuntime">
            <summary>
            Gets a value indicating whether the application is running in a Windows runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a Windows runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Device.EnableMobileBuildEmulation(System.Boolean)">
            <summary>
            Enables the mobile build emulation, which will set the IsMobileBuild flag to true, even if the device
            is not a mobile device.
            </summary>
            <param name="isTablet">if set to <c>true</c> them emulate the tablet UI.</param>
        </member>
        <member name="M:ModApi.Device.IsMobileResolution">
            <summary>
            Determines whether the current resolution is a known mobile resolution.
            </summary>
            <returns>
              <c>true</c> if resolution is a mobile resolution; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Device.IsTabletScreen">
            <summary>
            Determines whether the screen is likely a tablet screen.
            </summary>
            <returns>
              <c>true</c> if is tablet resolution; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ModApi.Exceptions.GameException">
            <summary>
            Base exception class.
            </summary>
        </member>
        <member name="M:ModApi.Exceptions.GameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.GameException"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Exceptions.GameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.GameException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ModApi.Exceptions.GameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.GameException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:ModApi.Exceptions.GameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.GameException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:ModApi.Exceptions.InvalidPartTypeException">
            <summary>
            Exception thrown when a part type is not found.
            </summary>
            <seealso cref="T:ModApi.Exceptions.GameException" />
        </member>
        <member name="M:ModApi.Exceptions.InvalidPartTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.InvalidPartTypeException"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Exceptions.InvalidPartTypeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.InvalidPartTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="partId">The part identifier.</param>
        </member>
        <member name="M:ModApi.Exceptions.InvalidPartTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.InvalidPartTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:ModApi.Exceptions.InvalidPartTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.InvalidPartTypeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:ModApi.Exceptions.InvalidPartTypeException.PartId">
            <summary>
            Gets or sets the part identifier.
            </summary>
            <value>
            The part identifier.
            </value>
        </member>
        <member name="M:ModApi.Exceptions.InvalidPartTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:ModApi.Exceptions.XmlVersionException">
            <summary>
            Exception thrown when the XML version is incompatible.
            </summary>
            <seealso cref="T:ModApi.Exceptions.GameException" />
        </member>
        <member name="M:ModApi.Exceptions.XmlVersionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.XmlVersionException"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Exceptions.XmlVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.XmlVersionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ModApi.Exceptions.XmlVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.XmlVersionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:ModApi.Exceptions.XmlVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Exceptions.XmlVersionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:ModApi.Flight.InitializedHandler`1">
            <summary>
            A delegate for initialization related events.
            </summary>
            <typeparam name="T">The type of object being initialized.</typeparam>
            <param name="initializedObject">The initialized object.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.CameraShakeFloat">
            <summary>
            Delegate for float values intended for use by camera shake.
            </summary>
            <returns>Float value intended for a camera shake value</returns>
        </member>
        <member name="T:ModApi.Flight.GameView.ICameraShake">
            <summary>
            The camera shake interface
            </summary>
        </member>
        <member name="M:ModApi.Flight.GameView.ICameraShake.AddShake(ModApi.Flight.GameView.CameraShakeFloat,ModApi.Flight.GameView.CameraShakeFloat)">
            <summary>
            Add the shake.
            </summary>
            <param name="intensity">The intensity.</param>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.ICameraShake.RemoveShake(ModApi.Flight.GameView.CameraShakeFloat,ModApi.Flight.GameView.CameraShakeFloat)">
            <summary>
            Removes the shake.
            </summary>
            <param name="intensity">The intensity.</param>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.ICameraTarget">
            <summary>
            Interface to provide access to information about a camera target.
            </summary>
        </member>
        <member name="P:ModApi.Flight.GameView.ICameraTarget.CameraTarget">
            <summary>
            Gets the transform where the camera should focus when viewing this object.
            </summary>
            <value>
            The transform where the camera should focus when viewing this object.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.ICameraTarget.CameraTargetPlanetPosition">
            <summary>
            Gets the position on the node where the camera should focus, in planet coordinates.
            </summary>
            <value>
            The camera target planet position.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.ICameraTarget.OrbitNode">
            <summary>
            Gets the orbit node for the camera target.
            </summary>
            <value>
            The orbit node for the camera target.
            </value>
        </member>
        <member name="T:ModApi.Flight.GameView.CameraOffset">
            <summary>
            Delegate for adding offset to camera.
            </summary>
            <returns>A Vector3 intended for camera offset.</returns>
        </member>
        <member name="T:ModApi.Flight.GameView.IGameCamera">
            <summary>
            The game camera interface.
            </summary>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.CameraShake">
            <summary>
            Gets the camera shake.
            </summary>
            <value>
            The camera shake.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.CameraTargetPlanetPosition">
            <summary>
            Gets the position on the node where the camera should focus, in planet coordinates.
            </summary>
            <value>
            The camera target planet position.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.FarCamera">
            <summary>
            Gets the far camera.
            </summary>
            <value>
            The far camera.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.FramePosition">
            <summary>
            Gets the frame position.
            </summary>
            <value>
            The frame position.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.IsOffCenter">
            <summary>
            Gets a value indicating whether the camera is off-centered and can be re-centered.
            </summary>
            <value>
              <c>true</c> if this instance can be re-centered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.NearCamera">
            <summary>
            Gets the near camera.
            </summary>
            <value>
            The near camera.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.PlanetPosition">
            <summary>
            Gets the planet position.
            </summary>
            <value>
            The planet position.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameCamera.Transform">
            <summary>
            Gets the camera's transform.
            </summary>
            <value>
            The camera's transform
            </value>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.Recenter(System.Boolean)">
            <summary>
            Recenters the camera.
            </summary>
            <param name="immediate">If set to <c>true</c> the re-center will happen immediately.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.RegisterPositionOffset(ModApi.Flight.GameView.CameraOffset)">
            <summary>
            Registers the position offset from the camera target, in frame coordinates.
            </summary>
            <param name="offset">The position offset.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.RegisterRotationOffset(ModApi.Flight.GameView.CameraOffset)">
            <summary>
            Registers the rotation offset, in camera local space.
            </summary>
            <param name="offset">The rotation offset.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.Rotate(UnityEngine.Vector2)">
            <summary>
            Rotates by the specified delta.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.UnregisterPositionOffset(ModApi.Flight.GameView.CameraOffset)">
            <summary>
            Unregisters the position offset from the camera target.
            </summary>
            <param name="offset">The position offset.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.UnregisterRotationOffset(ModApi.Flight.GameView.CameraOffset)">
            <summary>
            Unregisters the rotation offset from the camera target.
            </summary>
            <param name="offset">The rotation offset.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameCamera.Zoom(System.Single)">
            <summary>
            Zooms the camera by the specified percentage. A percentage less than 1.0 would be zooming in towards
            the target. A percentage greater than 1 would be zooming out.
            </summary>
            <param name="zoomPercentage">The zoom percentage.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.ReferenceFrameRecenteredDelegate">
            <summary>
            Delegate for when the reference frame is recentered.
            </summary>
            <param name="referenceFrame">The reference frame that was recentered.</param>
            <param name="positionDelta">The position delta.</param>
            <param name="velocityDelta">The velocity delta.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.SelectedPartChanged">
            <summary>
            Delegate for when the selected part changes.
            </summary>
            <param name="partScript">The part script.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.IGameView">
            <summary>
            Interface for the game view.
            </summary>
        </member>
        <member name="E:ModApi.Flight.GameView.IGameView.ReferenceFrameRecentered">
            <summary>
            Occurs when the reference frame has been recentered.
            </summary>
        </member>
        <member name="E:ModApi.Flight.GameView.IGameView.SelectedPartChanged">
            <summary>
            Occurs when the selected part changes.
            </summary>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.CameraSolarSystemPosition">
            <summary>
            Gets the camera solar system position.
            </summary>
            <value>
            The camera solar system position.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.CameraSolarSystemRotation">
            <summary>
            Gets the camera solar system rotation.
            </summary>
            <value>
            The camera solar system rotation.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.GameCamera">
            <summary>
            Gets the game camera.
            </summary>
            <value>
            The game camera.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.Planet">
            <summary>
            Gets the planet script.
            </summary>
            <value>
            The planet script.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.PlanetNode">
            <summary>
            Gets the planet the game view is currently attached to.
            </summary>
            <value>
            The planet.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.ReferenceFrame">
            <summary>
            Gets the reference frame.
            </summary>
            <value>
            The reference frame.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.RenderView">
            <summary>
            Gets or sets a value indicating whether the view should be rendered.
            </summary>
            <value>
              <c>true</c> if the view should be rendered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.SelectedPart">
            <summary>
            Gets or sets the selected part.
            </summary>
            <value>
            The selected part.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameView.SunLight">
            <summary>
            Gets the sun light.
            </summary>
            <value>
            The sun light.
            </value>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameView.AddGameViewObject(ModApi.Flight.GameView.IGameViewObject)">
            <summary>
            Adds the game view object.
            </summary>
            <param name="gameViewObject">The game view object.</param>
            <returns>The game view object's transform.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameView.RecenterReferenceFrame">
            <summary>
            Recenters the reference frame.
            </summary>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameView.RemoveGameViewObject(ModApi.Flight.GameView.IGameViewObject,System.Boolean)">
            <summary>
            Removes the game view object.
            </summary>
            <param name="gameViewObject">The game view object.</param>
            <param name="flightEnd">if set to <c>true</c> object is being unloaded due to the flight ending.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.GameViewObjectHandler">
            <summary>
            Delegate for general IGameViewObject notifications.
            </summary>
            <param name="source">The source IGameViewObject.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.PhysicsChangeReason">
            <summary>
            Defines reasons for enabling/disabling physics for a <see cref="T:ModApi.Flight.GameView.IGameViewObject"/>.
            </summary>
        </member>
        <member name="F:ModApi.Flight.GameView.PhysicsChangeReason.FlightEnd">
            <summary>
            Change due to the flight ending.
            </summary>
        </member>
        <member name="F:ModApi.Flight.GameView.PhysicsChangeReason.LoadedIntoGameView">
            <summary>
            Chagne due to object being loaded into game view.
            </summary>
        </member>
        <member name="F:ModApi.Flight.GameView.PhysicsChangeReason.LoadPhysics">
            <summary>
            Change due to physics being loaded.
            </summary>
        </member>
        <member name="F:ModApi.Flight.GameView.PhysicsChangeReason.UnloadedFromGameView">
            <summary>
            Changed due to object being unloaded from game view.
            </summary>
        </member>
        <member name="F:ModApi.Flight.GameView.PhysicsChangeReason.UnloadPhysics">
            <summary>
            Physics being unloaded due to object distance.
            </summary>
        </member>
        <member name="F:ModApi.Flight.GameView.PhysicsChangeReason.Warp">
            <summary>
            Change due to warp.
            </summary>
        </member>
        <member name="T:ModApi.Flight.GameView.IGameViewObject">
            <summary>
            Interface for objects in the game view.
            </summary>
        </member>
        <member name="E:ModApi.Flight.GameView.IGameViewObject.LoadedIntoGameView">
            <summary>
            Occurs when the node is loaded into the game view.
            </summary>
        </member>
        <member name="E:ModApi.Flight.GameView.IGameViewObject.UnloadedFromGameView">
            <summary>
            Occurs when the node is removed from the game view.
            </summary>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameViewObject.FramePosition">
            <summary>
            Gets the frame position.
            </summary>
            <value>
            The frame position.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameViewObject.GameObject">
            <summary>
            Gets the corresponding game object.
            </summary>
            <value>
            The corresponding game object.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameViewObject.IsLoadedInGameView">
            <summary>
            Gets a value indicating whether this instance is loaded in game view.
            </summary>
            <value>
            <c>true</c> if this instance is loaded in game view; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IGameViewObject.IsPhysicsEnabled">
            <summary>
            Gets a value indicating whether physics is enabled.
            </summary>
            <value>
              <c>true</c> if [physics enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameViewObject.LoadIntoGameView(ModApi.Flight.GameView.IGameView)">
            <summary>
            Called when the object should be loaded into the game view.
            </summary>
            <param name="gameView">The game view that the object is being loaded into.</param>
            <returns>The root transform of the game view object.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameViewObject.OnReferenceFrameRecentered(ModApi.Flight.GameView.IReferenceFrame,UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Called when the reference frame has re-centered.
            </summary>
            <param name="referenceFrame">The reference frame.</param>
            <param name="positionDelta">The position delta.</param>
            <param name="velocityDelta">The velocity delta.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameViewObject.RecalculateFrameState(ModApi.Flight.GameView.IReferenceFrame)">
            <summary>
            Called when the <see cref="T:ModApi.Flight.GameView.IGameViewObject" /> should re-calculate its state (position/velocity) within the reference frame.
            This may be called whenever the reference frame has been recentered, when the reference frame is rotated (if it is surface locked), or any time
            this object's coordinates (i.e. orbital params) are manually changed outside the physics simulation (ex. warp).
            </summary>
            <param name="referenceFrame">The reference frame.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameViewObject.SetPhysicsEnabled(System.Boolean,ModApi.Flight.GameView.PhysicsChangeReason)">
            <summary>
            Enables/disables physics for the ship.
            </summary>
            <param name="enabled">if set to <c>true</c> then physics is enabled, otherwise <c>false</c>.</param>
            <param name="reason">The reason for the change.</param>
        </member>
        <member name="M:ModApi.Flight.GameView.IGameViewObject.UnloadFromGameView(System.Boolean)">
            <summary>
            Called when the object should be unloaded from the game view.
            </summary>
            <param name="flightEnd">if set to <c>true</c> ship is being unloaded due to the flight ending.</param>
        </member>
        <member name="T:ModApi.Flight.GameView.IReferenceFrame">
            <summary>
            Frame of reference for objects that are being loaded
            </summary>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.Center">
            <summary>
            Gets the center position of the frame.
            </summary>
            <value>
            The center of the frame.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.FrameSurfaceVelocity">
            <summary>
            Gets the surface velocity of the reference frame in frame coordinates.
            </summary>
            <value>
            The surface velocity of the reference frame in frame coordinates.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.IsSurfaceLocked">
            <summary>
            Gets a value indicating whether the reference frame is locked to the surface of a planet. While surface locked,
            the position and velocity of the reference frame are updated along the surface of the planet.
            </summary>
            <value>
            <c>true</c> if this instance is surface locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.RecenterEnabled">
            <summary>
            Gets or sets a value indicating whether reference frame re-centering is currently enabled.
            </summary>
            <value>
              <c>true</c> if reference frame re-centering is currently enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.RotationAngle">
            <summary>
            Gets the rotation of the frame (in radians). No rotation means the reference frame is aligned with the planet's non-rotated coordinate system.
            </summary>
            <value>
            The frame's rotation.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.SurfaceVelocity">
            <summary>
            Gets the surface velocity of the reference frame, which is the velocity of the reference frame relative
            to the surface of the planet directly below the reference frame.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Flight.GameView.IReferenceFrame.Velocity">
            <summary>
            Gets the velocity of the frame.
            </summary>
            <value>
            The velocity.
            </value>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.FrameToPlanetPosition(UnityEngine.Vector3)">
            <summary>
            Converts a frame position to planet position.
            </summary>
            <param name="framePosition">The frame position.</param>
            <returns>The planet position.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.FrameToPlanetRotation(UnityEngine.Quaternion)">
            <summary>
            Converts from the frame rotation to the planet rotation.
            </summary>
            <param name="frameRotation">The frame rotation.</param>
            <returns>The planet rotation.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.FrameToPlanetVector(UnityEngine.Vector3)">
            <summary>
            Converts fhe vector from frame coordinates to planet coordinates.
            </summary>
            <param name="frameVector">The frame vector.</param>
            <returns>The planet vector.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.FrameToPlanetVelocity(UnityEngine.Vector3)">
            <summary>
            Converts from frame velocity to planet velocity.
            </summary>
            <param name="frameVelocity">The frame velocity.</param>
            <returns>
            The planet velocity.
            </returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.PlanetToFramePosition(UnityEngine.Vector3d)">
            <summary>
            Converts a planet position to frame position.
            </summary>
            <param name="planetPosition">The planet position.</param>
            <returns>The frame position.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.PlanetToFramePositionAtTime(UnityEngine.Vector3d,System.Double)">
             <summary>
             Converts a planet position to the position it will be within the reference frame at a given point in time.  This is useful if you want
             to predict a point that the craft will pass through in the reference frame using the node's orbit.
            
             Note: If you were to simply call the PlanetToFramePosition() with a node's future planet position, it would return a position which is incredibly
             far away from where it will actaully be in the reference frame b/c the reference frame's velocity isn't taken into account.  This method does that.
             </summary>
             <param name="planetPosition">The planet position.</param>
             <param name="time">The time.</param>
             <returns>
             The frame position.
             </returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.PlanetToFramePositiond(UnityEngine.Vector3d)">
            <summary>
            Converts a planet position to frame position. Returns a Vector3d instead
            of a Vector3 for increased precision.
            </summary>
            <param name="planetPosition">The planet position.</param>
            <returns>
            The frame position as double precision Vector3.
            </returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.PlanetToFrameRotation(UnityEngine.Quaterniond)">
            <summary>
            Converts from planet rotation to frame rotation.
            </summary>
            <param name="planetRotation">The planet rotation.</param>
            <returns>The frame rotation.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.PlanetToFrameVector(UnityEngine.Vector3d)">
            <summary>
            Converts the vector from planet coordinates to frame coordinates.
            </summary>
            <param name="planetVector">The planet vector.</param>
            <returns>The vector converted from planet coordinates to frame coordinates.</returns>
        </member>
        <member name="M:ModApi.Flight.GameView.IReferenceFrame.PlanetToFrameVelocity(UnityEngine.Vector3d)">
            <summary>
            Converts from planet velocity to frame velocity.
            </summary>
            <param name="planetVelocity">The velocity in planet coordinates.</param>
            <returns>The frame velocity.</returns>
        </member>
        <member name="T:ModApi.Flight.FlightSceneCraftHandler">
            <summary>
            A delegate used for flight scene events related to a craft node.
            </summary>
            <param name="craftNode">The craft node.</param>
        </member>
        <member name="T:ModApi.Flight.PlayerChangedSoiHandler">
            <summary>
            Handler for when the player changes SOI.
            </summary>
            <param name="playerCraftNode">The player craft node.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="T:ModApi.Flight.IFlightScene">
            <summary>
            Interface for the flight scene.
            </summary>
        </member>
        <member name="E:ModApi.Flight.IFlightScene.ActiveCommandPodChanged">
            <summary>
            Occurs when the player's active command pod has changed.
            </summary>
        </member>
        <member name="E:ModApi.Flight.IFlightScene.CraftChanged">
            <summary>
            Occurs when the craft node has changed.
            </summary>
        </member>
        <member name="E:ModApi.Flight.IFlightScene.FlightEnded">
            <summary>
            Occurs when the flight scene has ended.
            </summary>
        </member>
        <member name="E:ModApi.Flight.IFlightScene.Initialized">
            <summary>
            Occurs when the flight scene has initialized and all nodes have been created. Occurs immediately if it has already been initialized.
            </summary>
        </member>
        <member name="E:ModApi.Flight.IFlightScene.PlayerChangedSoi">
            <summary>
            Occurs when the player changes soi.
            </summary>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.CraftBiomeData">
            <summary>
            Gets the player craft's biome data.
            </summary>
            <value>
            The player craft's biome data.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.CraftNode">
            <summary>
            Gets the craft node.
            </summary>
            <value>
            The craft node.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.FlightSceneUI">
            <summary>
            Gets the flight scene UI.
            </summary>
            <value>
            The flight scene UI.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.FlightState">
            <summary>
            Gets the current flight state.
            </summary>
            <value>
            The current flight state.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.GameLoop">
            <summary>
            Gets the flight scene game loop manager.
            </summary>
            <value>
            The flight scene game loop manager.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.GameObject">
            <summary>
            Gets the game object the flight scene script is attached to.
            </summary>
            <value>
            The flight scene script game object.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.IocContainer">
            <summary>
            Gets the FlightScene's IoC container.
            </summary>
            <value>
            The FlightScene's IoC container.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.SingleSoundManager">
            <summary>
            Gets the single sound manager.
            </summary>
            <value>
            The single sound manager.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.TimeManager">
            <summary>
            Gets the time manager.
            </summary>
            <value>
            The time manager.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightScene.ViewManager">
            <summary>
            Gets the view manager.
            </summary>
            <value>
            The view manager.
            </value>
        </member>
        <member name="M:ModApi.Flight.IFlightScene.ChangePlayersActiveCommandPodImmediate(ModApi.Craft.Parts.ICommandPod,ModApi.Craft.ICraftNode,System.Boolean)">
            <summary>
            Changes the player's currently active command pod immediately without reloading the flight scene.
            </summary>
            <param name="commandPod">The command pod to switch to.</param>
            <param name="craftNode">The craft node that contains the command pod.</param>
            <param name="ignoreDistance">if set to <c>true</c> then ignore distance and switch crafts no matter how far apart they are.</param>
            <returns>
            True if the command pod was switched to successfully; otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Flight.IFlightScene.ChangePlayersActiveCraftNode(ModApi.Craft.ICraftNode)">
            <summary>
            Changes the players active craft node and reloads the scene.
            </summary>
            <param name="craftNode">The selected craft node.</param>
        </member>
        <member name="M:ModApi.Flight.IFlightScene.CreateExplosion(System.Collections.Generic.IEnumerable{ModApi.Craft.Parts.PartData},UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>
            Creates an explosion.
            </summary>
            <param name="parts">The parts that should be considered for adding an explosive force with this explosion.</param>
            <param name="position">The position of the explosion.</param>
            <param name="velocity">The velocity of the explosion.</param>
            <param name="magnitude">The magnitude of the explosion.</param>
            <param name="explosionCascadeCount">The number of explosions that have cascaded to create this explosion.</param>
        </member>
        <member name="M:ModApi.Flight.IFlightScene.ExitFlightScene(System.Boolean)">
            <summary>
            Exits the flight scene.
            </summary>
            <param name="saveFlightState">if set to <c>true</c> then save the flight state.</param>
        </member>
        <member name="M:ModApi.Flight.IFlightScene.SaveLaunchLocationPrompt">
            <summary>
            Prompts the user to save a launch location.
            </summary>
        </member>
        <member name="M:ModApi.Flight.IFlightScene.UpdateActiveControlMaps(ModApi.Craft.ICraftNode)">
            <summary>
            Updates the active control maps to those configured for use with the supplied craft node.
            </summary>
            <param name="craftNode">The craft node used to determine which control maps should be active.</param>
        </member>
        <member name="T:ModApi.Flight.IFlightState">
            <summary>
            Interface for the flight state.
            </summary>
        </member>
        <member name="P:ModApi.Flight.IFlightState.CraftNodes">
            <summary>
            Gets the craft nodes.
            </summary>
            <value>
            The craft nodes.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightState.RootNode">
            <summary>
            Gets the root node.
            </summary>
            <value>
            The root node.
            </value>
        </member>
        <member name="P:ModApi.Flight.IFlightState.Time">
            <summary>
            Gets the time since the beginning of the universe.
            </summary>
            <value>
            The time in seconds.
            </value>
        </member>
        <member name="T:ModApi.Flight.TimeMultiplierModeChangedDelegate">
            <summary>
            Delegate for a time multiplier changed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:ModApi.Flight.ITimeManager">
            <summary>
            Interface for the Time Manager, which manages time in the flight scene and transitions
            between different time multipliers.
            </summary>
        </member>
        <member name="E:ModApi.Flight.ITimeManager.TimeMultiplierModeChanged">
            <summary>
            Occurs when the time multiplier mode has changed.
            </summary>
        </member>
        <member name="E:ModApi.Flight.ITimeManager.TimeMultiplierModeChanging">
            <summary>
            Occurs when the time multiplier mode is about to change.
            </summary>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.CurrentMode">
            <summary>
            Gets the current mode.
            </summary>
            <value>
            The current mode.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.DeltaTime">
            <summary>
            Gets the delta time since the last frame, taking into account the current warp multiplier.
            </summary>
            <value>
            The time in seconds.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.ModeIndex">
            <summary>
            Gets the index of the current mode.
            </summary>
            <value>
            The index of the current mode.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.Modes">
            <summary>
            Gets the modes.
            </summary>
            <value>
            The modes.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.Paused">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Flight.ITimeManager"/> is paused.
            </summary>
            <value>
              <c>true</c> if paused; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.RealTime">
            <summary>
            Gets the 1x real-time mode.
            </summary>
            <value>
            The 1x real-time mode.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeManager.SlowMotion">
            <summary>
            Gets the slow motion mode
            </summary>
            <value>
            The slow motion mode.
            </value>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.DecreaseTimeMultiplier">
            <summary>
            Decreases the time multiplier mode.
            </summary>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.IncreaseTimeMultiplier">
            <summary>
            Increases the time multiplier mode.
            </summary>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.RequestPauseChange(System.Boolean,System.Boolean)">
            <summary>
            Requests the pause change.
            </summary>
            <param name="paused">if set to <c>true</c> request the simulation to be paused, otherwise <c>false</c>.</param>
            <param name="userInitiated">if set to <c>true</c> this request is DIRECTLY user initiated by hitting the pause button, otherwise <c>false</c>.  This should be set to false even if the request is taken as a result of a user action (opening menu)...only when the user directly pauses the game should this be set to true.</param>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.SetFastForwardMode">
            <summary>
            Sets the fast forward mode.
            </summary>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.SetMode(System.Int32,System.Boolean)">
            <summary>
            Sets the time multiplier mode.
            </summary>
            <param name="modeIndex">Index of the mode.</param>
            <param name="forceChange">If set to <c>true</c> change will occur even if it is the same as the current mode.</param>
            <exception cref="T:System.ArgumentException">Mode index out of range.</exception>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.SetMode(ModApi.Flight.ITimeMultiplierMode,System.Boolean)">
            <summary>
            Sets the time multiplier mode.
            </summary>
            <param name="mode">The mode to set to.</param>
            <param name="forceChange">If set to <c>true</c> change will occur even if it is the same as the current mode.</param>
            <exception cref="T:System.ArgumentException">Unknown multiplier mode provided.</exception>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.SetNormalSpeedMode">
            <summary>
            Sets the normal speed mode.
            </summary>
        </member>
        <member name="M:ModApi.Flight.ITimeManager.SetSlowMotionMode">
            <summary>
            Sets the slow motion mode.
            </summary>
        </member>
        <member name="T:ModApi.Flight.ITimeMultiplierMode">
            <summary>
            Interface for a time multiplier mode.
            </summary>
        </member>
        <member name="P:ModApi.Flight.ITimeMultiplierMode.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeMultiplierMode.TimeMultiplier">
            <summary>
            Gets the time multiplier.
            </summary>
            <value>
            The time multiplier.
            </value>
        </member>
        <member name="P:ModApi.Flight.ITimeMultiplierMode.WarpMode">
            <summary>
            Gets a value indicating whether this is a warp mode.
            </summary>
            <value>
              <c>true</c> if [warp mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Flight.IViewManager">
            <summary>
            The interface for the view manager.
            </summary>
        </member>
        <member name="P:ModApi.Flight.IViewManager.GameView">
            <summary>
            Gets the game view.
            </summary>
            <value>
            The game view.
            </value>
        </member>
        <member name="P:ModApi.Flight.IViewManager.MapViewManager">
            <summary>
            Gets the map view manager.
            </summary>
            <value>
            The map view manager.
            </value>
        </member>
        <member name="M:ModApi.Flight.IViewManager.ToggleMapView">
            <summary>
            Toggles the map view.
            </summary>
        </member>
        <member name="T:ModApi.Flight.MapView.ICraftOptions">
            <summary>
            Options related to the player craft.
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.ICraftOptions.ContinuouslyUpdateChain">
            <summary>
            Gets a value indicating whether to continuously update the node chain.
            </summary>
            <value>
              <c>true</c> if the node chain should be continuously updated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.ICraftOptions.ThrustScale">
            <summary>
            Gets the current thrust scale to be used by engines for debugging purposes.
            </summary>
            <value>
            The thrust scale.
            </value>
        </member>
        <member name="T:ModApi.Flight.MapView.IManeuverNodeOptions">
            <summary>
            Options related to maneuver nodes.
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.IManeuverNodeOptions.DisplayInfoWhenAdjusting">
            <summary>
            Gets or sets a value indicating whether to display orbit information when adjusting burn nodes.
            </summary>
            <value>
              <c>true</c> if orbit information should be displayed when adjusting burn nodes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IManeuverNodeOptions.MaxGizmoMultiplier">
            <summary>
            Gets the maximum multiplier that the ui gizmo will provide to deltaV calculations.  ie. dragging the gizmo further than a certain distance away will begin to clamp the values.
            </summary>
            <value>
            The maximum multiplier that the ui gizmo will provide to deltaV calculations.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IManeuverNodeOptions.SensitivityExpo">
            <summary>
            Gets the sensitivity with expo for maneuver node adjustments.
            </summary>
            <value>
            The sensitivity with expo for maneuver node adjustments.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IManeuverNodeOptions.SensitivityLinear">
            <summary>
            Gets or sets the linear sensitivity for maneuver node adjustments.
            </summary>
            <value>
            The linear sensitivity for maneuver node adjustments.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IManeuverNodeOptions.ShowBurnAccuracyDebugGizmos">
            <summary>
            Gets or sets a value indicating whether to show burn accuracy debug gizmos.
            </summary>
            <value>
            The value indicating whether to show burn accuracy debug gizmos
            </value>
        </member>
        <member name="T:ModApi.Flight.MapView.AdjustmentSpaceType">
            <summary>
            Defines the types of burn node adjustment types.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.AdjustmentSpaceType.Relative">
            <summary>
            When relative is used, the burn vector keeps the original prograde/normal/radial magnitudes, and as a result the world-space vector can change (ex: when previous nodes change).
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.AdjustmentSpaceType.World">
            <summary>
            When world is used, the burn vector is a static world-space vector, and as a result the prograde/normal/radial magnitudes can change (ex: when previous nodes change).
            </summary>
        </member>
        <member name="T:ModApi.Flight.MapView.GizmoAlignmentType">
            <summary>
            Defines the types of burn node adjustment types.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.GizmoAlignmentType.ReferenceOrbit">
            <summary>
            The gizmo will align with the reference orbit, and thus will not change when adjusting a maneuver node.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.GizmoAlignmentType.NewOrbit">
            <summary>
            The gizmo will align with the vectors of the orbit resulting from the burn node, and thus can change orientation.
            </summary>
        </member>
        <member name="T:ModApi.Flight.MapView.OrbitUiVerbosity">
            <summary>
            The Orbit UI verbosity level.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.OrbitUiVerbosity.High">
            <summary>
            High verbosity level.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.OrbitUiVerbosity.Medium">
            <summary>
            Medium/default verbosity level.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.OrbitUiVerbosity.Low">
            <summary>
            Low verbosity level.
            </summary>
        </member>
        <member name="F:ModApi.Flight.MapView.OrbitUiVerbosity.Minimal">
            <summary>
            Minimal verbosity level.
            </summary>
        </member>
        <member name="T:ModApi.Flight.MapView.IMapOptions">
            <summary>
            Gives access to interfaces to various map-view options providers.
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.BurnGizmoAlignment">
            <summary>
            Gets or sets the burn gizmo alignment option.
            </summary>
            <value>
            The burn gizmo alignment option.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.Craft">
            <summary>
            Gets the craft options.
            </summary>
            <value>
            The craft options.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.ManeuverNodes">
            <summary>
            Gets the maneuver node options.
            </summary>
            <value>
            The maneuver node options.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.NodeAdjustmentSpace">
            <summary>
            Gets or sets the burn node adjustment space option.
            </summary>
            <value>
            The burn node adjustment space option.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.NodeNav">
            <summary>
            Gets NodeNav options interface.
            </summary>
            <value>
            The Node nav options interface.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.OrbitUiVerbosity">
            <summary>
            Gets or sets the orbit UI verbosity level.
            </summary>
            <value>
            The orbit UI verbosity level.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapOptions.Targeting">
            <summary>
            Gets the targeting options interface.
            </summary>
            <value>
            The targeting options interface.
            </value>
        </member>
        <member name="M:ModApi.Flight.MapView.IMapOptions.GenerateXml">
            <summary>
            Generates XML representing the current map options.
            </summary>
            <returns>XML representing the current map options.</returns>
        </member>
        <member name="M:ModApi.Flight.MapView.IMapOptions.ResetDefaults">
            <summary>
            Resets all user-changeable options to their defaults.
            </summary>
        </member>
        <member name="M:ModApi.Flight.MapView.IMapOptions.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the map options from XML.
            </summary>
            <param name="mapOptionsContainerElement">The map options container element.</param>
        </member>
        <member name="T:ModApi.Flight.MapView.MapViewHandler">
            <summary>
            Delegate for Map View related events.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="T:ModApi.Flight.MapView.IMapView">
            <summary>
            The map view interface.
            </summary>
        </member>
        <member name="E:ModApi.Flight.MapView.IMapView.Initialized">
            <summary>
            Occurs when [map view initialized].
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapView.MapCamera">
            <summary>
            Gets the map camera.
            </summary>
            <value>
            The map camera.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapView.UiPanelsVisible">
            <summary>
            Gets or sets a value indicating whether MapView's UI panels are visible.
            </summary>
            <value>
              <c>true</c> MapView's UI panels are visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapView.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Flight.MapView.IMapView"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Flight.MapView.MapViewForegroundStateChangedHandler">
            <summary>
            Delegate for when map-view foreground state has changed.
            </summary>
            <param name="foreground">If set to <c>true</c> MapView is in the foreground, otherwise; <c>false</c>.</param>
        </member>
        <member name="T:ModApi.Flight.MapView.IMapViewManager">
            <summary>
            The interface for the map view manager.
            </summary>
        </member>
        <member name="E:ModApi.Flight.MapView.IMapViewManager.ForegroundStateChanged">
            <summary>
            Occurs when MapView's foreground state has changed.
            </summary>
        </member>
        <member name="E:ModApi.Flight.MapView.IMapViewManager.ForegroundStateChanging">
            <summary>
            Occurs when MapView's visibility is about to change.
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapViewManager.Ioc">
            <summary>
            Gets the ioc container for map view.
            </summary>
            <value>
            The ioc container for map view.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapViewManager.IsInForeground">
            <summary>
            Gets or sets a value indicating whether the map view is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapViewManager.MapView">
            <summary>
            Gets the map view.
            </summary>
            <value>
            The map view.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.IMapViewManager.MapViewCamera">
            <summary>
            Gets the map view camera.
            </summary>
            <value>
            The map view camera.
            </value>
        </member>
        <member name="T:ModApi.Flight.MapView.INodeNavOptions">
            <summary>
            Options related to node navigation.
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.AutoDeleteManeuverNodes">
            <summary>
            Gets a value indicating whether to delete maneuver nodes after they're completed.
            </summary>
            <value>
              <c>true</c> if maneuver nodes should be auto-deleted after being completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.AutoWarpToNextNode">
            <summary>
            Gets a value indicating whether to automatically warp to the next node after completing a burn.
            </summary>
            <value>
              <c>true</c> if we should automatically warp to the next node after completing a burn.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.ChangeCameraWhenWarping">
            <summary>
            Gets a value indicating whether to change the camera target when warping to a node.
            </summary>
            <value>
              <c>true</c> if the camera target should be changed when warping to a node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.CheatAutoBurns">
            <summary>
            Gets a value indicating whether to cheat auto burns by simply setting the craft's velocity instead of doing the burn.
            </summary>
            <value>
              <c>true</c> if auto-burns should be cheated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.MaxBurnTimePerPass">
            <summary>
            Gets or sets the maximum allowable burn times without breaking into multiple burns.
            </summary>
            <value>
            The maximum allowable burn times without breaking into multiple burns
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.ShowAutoBurnVectors">
            <summary>
            Gets a value indicating whether to show auto-burn related vector lines.
            </summary>
            <value>
              <c>true</c> if auto-burn related vector lines should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.WarpBufferSeconds">
            <summary>
            Gets the number of seconds before a maneuver node to complete the warp.  This buffer is in addition to the auto-calculated burn times.
            </summary>
            <value>
            The number of seconds before a maneuver node to complete the warp.  This buffer is in addition to the auto-calculated burn times.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.INodeNavOptions.WarpSpeedModifier">
            <summary>
            Gets a value indicating how fast to perform the auto-warps. Increasing this value can potentially sacrifice accuracy. A value of 1 indicates default speed.
            </summary>
            <value>
            The speed at which to perform auto-warps. Increasing this value can potentially sacrifice accuracy. A value of 1 indicates default speed.
            </value>
        </member>
        <member name="T:ModApi.Flight.MapView.ITargetingOptions">
            <summary>
            Interface to get options related to targeting other nodes in map view.
            </summary>
        </member>
        <member name="P:ModApi.Flight.MapView.ITargetingOptions.CraftSoiDistance">
            <summary>
            Gets or sets the distance to use as the SOI when calculation encounters between two crafts.
            </summary>
            <value>
            The distance to use as the SOI when calculation encounters between two crafts.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.ITargetingOptions.PeriodsInFutureToBegin">
            <summary>
            Gets the number of periods in the future (for player craft) to being searching for closest encounter info.
            </summary>
            <value>
            The number of periods in the future (for player craft) to being searching for closest encounter info.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.ITargetingOptions.SearchWholeOrbit">
            <summary>
            Gets or sets a value indicating whether to search the whole orbit, or only sections which are determined to potentially have an encounter.
            </summary>
            <value>
              <c>true</c> if the targeting system should search the whole orbit, or only sections which are determined to potentially have an encounter.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.ITargetingOptions.SoiEntryLocalMinimaModifier">
            <summary>
            Gets or sets the local minima modifier. OrbitAnalyser.GetClosestEncoutnerInfoRanged() for more info.
            </summary>
            <value>
            The local minima modifier.
            </value>
        </member>
        <member name="P:ModApi.Flight.MapView.ITargetingOptions.UseBinarySearch">
            <summary>
            Gets or sets a value indicating whether use a binary search for finding closest encounter with target instead regular step intervals.
            </summary>
            <value>
              <c>true</c> if the targeting system should use a binary search for finding closest encounter with target instead regular step intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Flight.Sim.AltitudeType">
            <summary>
            Enumeration of different altitude types.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.AltitudeType.AboveSeaLevel">
            <summary>
            The above sea level altitude type.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.AltitudeType.AboveGroundLevel">
            <summary>
            The above ground level altitude type.
            For celestial bodies with water, this specifies the max value of the terrain height and the sea level.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.AltitudeType.AboveSeaFloorLevel">
            <summary>
            The above sea floor level altitude type.
            This specifies the terrain height regardless of sea level.
            </summary>
        </member>
        <member name="T:ModApi.Flight.Sim.IGameTime">
            <summary>
            Provides access to the game's current time.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IGameTime.Time">
            <summary>
            Gets or sets the game time, in seconds.
            </summary>
            <value>
            The game time, in seconds.
            </value>
        </member>
        <member name="T:ModApi.Flight.Sim.NodeDelegate">
            <summary>
            Delegate for node events.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.INode">
            <summary>
            Base class for different types of orbiting objects.
            </summary>
        </member>
        <member name="E:ModApi.Flight.Sim.INode.Destroyed">
            <summary>
            Occurs when the node is destroyed.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.INode.GameViewLoadDistance">
            <summary>
            Gets the distance in meters at which the node will be loaded into the game view.
            </summary>
            <value>
            The game view load distance.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.INode.GameViewObject">
            <summary>
            Gets the game view object.
            </summary>
            <value>
            The game view object.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.INode.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
              <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.INode.Parent">
            <summary>
            Gets or sets the parent planet.
            </summary>
            <value>
            The parent planet.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.INode.Position">
            <summary>
            Gets the position relative to it's parent.
            </summary>
            <value>
            The position the position relative to it's parent.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.INode.SolarPosition">
            <summary>
            Gets the position of this planet relative to the closest sun.
            </summary>
            <value>
            The solar position.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.INode.FlightEnd">
            <summary>
            Called when the node is being removed from the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.INode.FlightLateUpdate(System.Double)">
            <summary>
            Called at the end of every frame. Elapsed time can vary greatly depending on the current warp mode.
            </summary>
            <param name="elapsedTime">The elapsed time.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.INode.FlightStart">
            <summary>
            Called when the flight scene is starting.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.INode.FlightUpdate(System.Double,System.Double)">
            <summary>
            Updates the node. Called every frame. Elapsed time can vary greatly depending on the current
            warp mode.
            </summary>
            <param name="elapsedTime">The elapsed time.</param>
            <param name="currentTime">The current game time.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.INode.Initialize">
            <summary>
            Called after the node hierarchy has been created and before the simulation has started.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.INode.SynchronizeData">
            <summary>
            Called when the node should synchronize any data objects with the current state of the node
            before those data objects are serialized.
            </summary>
        </member>
        <member name="T:ModApi.Flight.Sim.OrbitHandler">
            <summary>
            Generic handler for orbit related events.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.OrbitType">
            <summary>
            Enumeration of different types of orbits.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitType.Circular">
            <summary>
            The circular
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitType.Elliptical">
            <summary>
            The elliptical
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitType.Parabolic">
            <summary>
            The parabolic
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitType.Hyperbolic">
            <summary>
            The hyperbolic
            </summary>
        </member>
        <member name="T:ModApi.Flight.Sim.IOrbit">
            <summary>
            Interface for the Orbit class.
            </summary>
        </member>
        <member name="E:ModApi.Flight.Sim.IOrbit.UpdatedFromOrbitalElements">
            <summary>
            Occurs when the orbit has been updated from orbital elements.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.AngularMomentum">
            <summary>
            Gets the angular momentum.
            </summary>
            <value>
            The angular momentum.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.AngularMomentumMag">
            <summary>
            Gets the angular momentum mag.
            </summary>
            <value>
            The angular momentum mag.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Apoapsis">
            <summary>
            Gets the apoapsis.
            </summary>
            <value>
            The apoapsis.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.ApoapsisDistance">
            <summary>
            Gets the apoapsis distance.
            </summary>
            <value>
            The apoapsis distance.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.ApoapsisDistanceEffective">
            <summary>
            Gets the effective apoapsis distance for this orbit.  For elliptical orbits, this will be the same as <see cref="P:ModApi.Flight.Sim.IOrbit.ApoapsisDistance"/>.
            For hyperbolic orbits, this will be the value returned when the distance is calculated for <see cref="P:ModApi.Flight.Sim.IOrbit.TrueAnomalyAtApoapsis"/>. For hyperbolics,
            the true distance is infinity, but due to precision anything beyond <see cref="P:ModApi.Flight.Sim.IOrbit.ApoapsisDistanceEffective"/> will result in precision
            issues...things will begin to equate to equal when they should not be, things will begin to fail to converge, etc.
            Note: This is not a guaranteed "safe" distance...it is still far as hell out, and may run into issues.
            </summary>
            <value>
            The effective apoapsis distance for this orbit.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.DebugEnabled">
            <summary>
            Gets or sets a value indicating whether debug is enabled for this orbit.  Its just a flag that can be used to spit out debug info for a specific orbit instead of all of 'em.
            </summary>
            <value>
              <c>true</c> if debug is enabled for this orbit.  Its just a flag that can be used to spit out debug info for a specific orbit instead of all of 'em.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.EccentricAnomaly">
            <summary>
            Gets the eccentric anomaly.
            </summary>
            <value>
            The eccentric anomaly.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.EccentricAnomalyAtApoapsis">
            <summary>
            Gets see <see cref="P:ModApi.Flight.Sim.IOrbit.TrueAnomalyAtApoapsis"/> for more info.
            </summary>
            <value>
            The maximum valid eccentric anomaly for this orbit.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Eccentricity">
            <summary>
            Gets the eccentricity.
            </summary>
            <value>
            The eccentricity.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.EccentricityVector">
            <summary>
            Gets the eccentricity vector.
            </summary>
            <value>
            The eccentricity vector.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.HyperbolicTrueAnomalyLimit">
            <summary>
            Gets the theoretical ceiling for the true anomaly of this orbit if it is hyperbolic.  Hyperbolic orbits have a true anomaly
            limit that they approach, but never obtain, nor cross since hyperbolic orbits never complete a circle.  If the true anomaly is set to
            this value, the position/velocity/time would go to infinity, so it should be used as a non-inclusive ceiling/limit.
            For elliptical orbits it will be NaN and should be ignored.
            </summary>
            <value>
            The maximum valid true anomaly for this orbit.
            </value>
            Use <see cref="P:ModApi.Flight.Sim.IOrbit.MaxHyperbolicTrueAnomaly" /> for the maximum true anomaly value that this orbit should ever be set to.
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Inclination">
            <summary>
            Gets the inclination.
            </summary>
            <value>
            The inclination.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.IsPrograde">
            <summary>
            Gets a value indicating whether this instance is prograde.
            </summary>
            <value>
              <c>true</c> if this instance is prograde; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.IsValid">
            <summary>
            Gets a value indicating whether the orbit is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.MeanAnomaly">
            <summary>
            Gets the mean anomaly.
            </summary>
            <value>
            The mean anomaly.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.MeanMotion">
            <summary>
            Gets the mean motion.
            </summary>
            <value>
            The mean motion.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.NodeLineVector">
            <summary>
            Gets the node line vector.
            </summary>
            <value>
            The node line vector.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.OrbitalPlaneNormal">
            <summary>
            Gets the orbital plane normal.
            </summary>
            <value>
            The orbital plane normal.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.OrbitalPlaneRight">
            <summary>
            Gets the orbital plane's "right" direction vector.
            </summary>
            <value>
            The orbital plane's "right" direction vector.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.OrbitType">
            <summary>
            Gets the type of the orbit.
            </summary>
            <value>
            The type of the orbit.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Periapsis">
            <summary>
            Gets the periapsis.
            </summary>
            <value>
            The periapsis.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.PeriapsisAngle">
            <summary>
            Gets the periapsis angle.
            </summary>
            <value>
            The periapsis angle.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.PeriapsisDistance">
            <summary>
            Gets the periapsis distance.
            </summary>
            <value>
            The periapsis distance.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Period">
            <summary>
            Gets the period.
            </summary>
            <value>
            The period.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Position">
            <summary>
            Gets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.PrimaryMass">
            <summary>
            Gets the primary mass.
            </summary>
            <value>
            The primary mass.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.RightAscensionOfAscendingNode">
            <summary>
            Gets the right ascension of ascending node.
            </summary>
            <value>
            The right ascension of ascending node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.SemiMajorAxis">
            <summary>
            Gets the semi major axis.
            </summary>
            <value>
            The semi major axis.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.SemiMinorAxis">
            <summary>
            Gets the semi minor axis.
            </summary>
            <value>
            The semi minor axis.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Time">
            <summary>
            Gets time of the orbit in its current state.
            </summary>
            <value>
            Time of the orbit in its current state.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.TrueAnomaly">
            <summary>
            Gets the true anomaly.
            </summary>
            <value>
            The true anomaly.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.TrueAnomalyAtApoapsis">
            <summary>
            Gets the true anomaly value when this orbit is at it's apoapsis. For elliptical orbits, it is Mathd.PI, for hyperbolics it is tiny amount smaller
            than <see cref="P:ModApi.Flight.Sim.IOrbit.HyperbolicTrueAnomalyLimit" /> and is always less than Mathd.PI.
            </summary>
            <value>
            The true anomaly value when this orbit is at it's apoapsis distance.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.TrueAnomalyOfAscendingNode">
            <summary>
            Gets the true anomaly of ascending node.
            </summary>
            <value>
            The true anomaly of ascending node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.TrueAnomalyOfDescendingNode">
            <summary>
            Gets the true anomaly of descending node.
            </summary>
            <value>
            The true anomaly of ascending node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.U">
            <summary>
            Gets the u.
            </summary>
            <value>
            The u.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbit.Velocity">
            <summary>
            Gets the velocity.
            </summary>
            <value>
            The velocity.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.AdvanceTime(System.Double,System.Double)">
            <summary>
            Advances the orbit by the specified amount of time.
            </summary>
            <param name="elapsedTime">The number of seconds to advance the orbit by.  Can be negative.</param>///
            <param name="newTime">The time that the orbit will reflect after being advanced by the specified time.</param>
            <returns>
            <c>true</c> if the periapsis was crossed while advancing the orbit, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GenerateOrbitData">
            <summary>
            Generates the OrbitData from the current orbital elements.
            </summary>
            <returns>The OrbitData generated from the current orbital elements.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GetElementsMagnitude">
            <summary>
            Gets the sum of the magnitude of various orbital elements.  Used for comparing very rough "sameness" of orbits.
            </summary>
            <returns>The sum of the magnitude of various orbital elements</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GetOrbitInfo">
            <summary>
            Convenience method to output all data about an orbit.
            </summary>
            <returns>String representing all information about the orbit.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GetPeriodStartTime">
            <summary>
            Gets the start time of the orbit's current orbital period.
            </summary>
            <returns>The start time of the orbit's current orbital period</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GetTimePastPeriapsis">
            <summary>
            Gets the number of seconds past the periapsis from the current position.
            </summary>
            <returns>The time in seconds pas the periapsis.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GetTimeToApoapsis">
            <summary>
            Gets the time from the current true anomaly to the apoapsis, in seconds.
            </summary>
            <returns>The time in seconds.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.GetTimeToPeriapsis">
            <summary>
            Gets the time from the current true anomaly to the periapsis, in seconds.
            </summary>
            <returns>The time in seconds.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.SetTrueAnomaly(System.Double,System.Nullable{System.Double})">
            <summary>
            Sets the true anomaly, and updates with corresponding time.
            </summary>
            <param name="trueAnomaly">The true anomaly.</param>
            <param name="time">The time to use for the specified true anomaly, or null to have the orbit calculate based on the delta from its current location.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.UpdateFromOrbitalElements(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Updates (changes) the orbit from supplied orbital elements.
            </summary>
            <param name="time">The time.</param>
            <param name="e">The eccentricity.</param>
            <param name="a">The semi-major axis.</param>
            <param name="w">The periapsis angle.</param>
            <param name="nu">The true anomaly.</param>
            <param name="inclination">The inclination.</param>
            <param name="ra">The right ascension of the ascending node.</param>
            <param name="primaryMass">The primary mass.</param>
            <param name="prograde">if set to <c>true</c> [prograde].</param>
            <exception cref="T:System.Exception">Not supporting hyperbolic orbits yet for planets</exception>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbit.UpdateFromStateVectors(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double,System.Double)">
            <summary>
            Updates the state vectors.
            </summary>
            <param name="p">The position.</param>
            <param name="v">The velocity.</param>
            <param name="time">The time of the orbit with the specified state vectors.</param>
            <param name="primaryMass">The primary mass of the body the orbit is centered around.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.NodeNameChangedHandler">
            <summary>
            Handler for the <see cref="E:ModApi.Flight.Sim.IOrbitNode.NameChanged"/> event.
            </summary>
            <param name="newName">The new name.</param>
            <param name="oldName">The old name.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.OrbitNodeHandler">
            <summary>
            Handler for events related orbit nodes.
            </summary>
            <param name="source">The source orbit node.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.IOrbitNode">
            <summary>
            Represents a node which can be in orbit.
            </summary>
        </member>
        <member name="E:ModApi.Flight.Sim.IOrbitNode.ChangedSoI">
            <summary>
            Occurs when this node has transitioned to a new soi.
            </summary>
        </member>
        <member name="E:ModApi.Flight.Sim.IOrbitNode.NameChanged">
            <summary>
            Occurs when <see cref="P:ModApi.Flight.Sim.IOrbitNode.Name"/> has changed.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.Apoapsis">
            <summary>
            Gets the orbit's apoapsis point.
            </summary>
            <returns>
            The orbit's apoapsis point.
            </returns>
            <remarks>This is not cached.</remarks>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.MaxChildDistance">
            <summary>
            Gets the maximum distance a child node should be placed from this node.
            </summary>
            <value>
            The maximum distance a child node should be placed from this node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.Name">
            <summary>
            Gets the name of the orbit node.
            </summary>
            <value>
            The name of the orbit node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.NestedDepth">
            <summary>
            Gets the nested depth of this Node.  If the node is the Sun, it is at zero, if it is Droo: 1, Luna: 2, etc.
            </summary>
            <value>
            The nested depth of this node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.NodeExitsSoi">
            <summary>
            Gets a value indicating whether this node will exit its parent's sphere of influence.
            </summary>
            <value>
              <c>true</c> if this node will exit its parent's sphere of influence; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.Orbit">
            <summary>
            Gets the orbit.
            </summary>
            <value>
            The orbit.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.OrbitUpdated">
            <summary>
            Gets or sets a value indicating whether the orbit has updated (TODO: Since when? Is this only used by MapView?)
            </summary>
            <value>
              <c>true</c> if [orbit updated]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.Periapsis">
            <summary>
            Gets the orbit's periapsis point.
            </summary>
            <returns>
            The orbit's periapsis point.
            </returns>
            <remarks>This is not cached.</remarks>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.SolarVelocity">
            <summary>
            Gets the velocity of this node relative to the closest sun.
            </summary>
            <value>
            The velocity of this node relative to the closest sun.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.SphereOfInfluence">
            <summary>
            Gets the sphere of influence.
            </summary>
            <value>
            The sphere of influence.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitNode.Velocity">
            <summary>
            Gets the velocity relative to it's parent.
            </summary>
            <value>
            The velocity relative to it's parent.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetCurrentPoint">
            <summary>
            Gets the orbit's current point.
            </summary>
            <returns>
            The orbit's current point.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetNodeAtDepth(System.Int32)">
            <summary>
            Gets the node at the specified depth in this nodes parent chain (includes checking self).
            </summary>
            <param name="depth">The depth of the parent to get (can be this node's depth).</param>
            <returns>
            The node at the specified depth in this nodes parent chain (includes checking self).
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetPointAbovePlanetCenter(System.Double)">
            <summary>
            Gets the point at a height above the parent planet's center, or <c>null</c> if there is no-such point.
            </summary>
            <param name="height">The above the parent planet's center.</param>
            <returns>The point at a height above the parent planet's center, or <c>null</c> if there is no-such point.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetPointAgl(System.Double)">
            <summary>
            Gets the point at a height above the parent planet's surface (radius), or <c>null</c> if there is no-such point.
            </summary>
            <param name="agl">The above the parent planet's surface.</param>
            <returns>The point at a height above the parent planet's surface, or <c>null</c> if there is no-such point.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetPointAtmosphereEntry">
            <summary>
            Gets the atmosphere entry point for the node.  Returns <c>null</c> if the node is already inside the atmosphere, or it does not enter it.
            </summary>
            <returns>The atmosphere entry point for the node. Returns <c>null</c> if the node is already inside the atmosphere, or it does not enter it.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetPointAtTime(System.Double)">
            <summary>
            Gets the point at the specified time.
            </summary>
            <param name="time">The absolute time to get the point for.</param>
            <returns>
            The point at the specified time.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetSolarPositionAtTime(System.Double)">
            <summary>
            Gets the solar position at the specified time.
            </summary>
            <param name="time">The absolute time to get the point for.</param>
            <returns>The solar position at the specified time.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.GetSolarVelocityAtTime(System.Double)">
            <summary>
            Gets the solar position at the specified time.
            </summary>
            <param name="time">The absolute time to get the point for.</param>
            <returns>The solar position at the specified time.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.IsDescendantOf(ModApi.Flight.Sim.IOrbitNode,System.Boolean)">
            <summary>
            Determines whether this node is a descendant of the supplied node.
            </summary>
            <param name="node">A node to determine if this node is an ancestor of.</param>
            <param name="includeSelf">If set to <c>true</c> will also return true if the supplied node is the same as this node.</param>
            <returns>
              <c>true</c> if this node is a descendant of the supplied node. If includeSelf is true, will also return true if they are the same; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.SetStateVectors(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Sets the state vectors.
            </summary>
            <param name="position">The position.</param>
            <param name="velocity">The velocity.</param>
            <param name="time">The time.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitNode.SetStateVectorsAtDefaultTime(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Sets the state vectors at the default time (current game-time).
            </summary>
            <param name="position">The position.</param>
            <param name="velocity">The velocity.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.IOrbitPoint">
            <summary>
            Represents an orbital point.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPoint.EccentricAnomaly">
            <summary>
            Gets the eccentric anomaly.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPoint.Position">
            <summary>
            Gets the position of the point.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPoint.Time">
            <summary>
            Gets the time of the point.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPoint.TrueAnomaly">
            <summary>
            Gets the true anomaly
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPoint.Velocity">
            <summary>
            Gets the velocity at the point.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPoint.Set(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double,System.Double,System.Double)">
            <summary>
            Sets the orbit point's parameters.
            </summary>
            <param name="p">The position of the point.</param>
            <param name="v">The velocity of the point.</param>
            <param name="nu">The true anomaly of the point.</param>
            <param name="ea">The eccentric anomaly.</param>
            <param name="t">The time of the point.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPoint.Set(ModApi.Flight.Sim.IOrbitPoint)">
            <summary>
            Sets this IOrbitPoint to be the same as the specified IOrbitPoint.
            </summary>
            <param name="point">The point to copy.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPoint.VerifyPoint(System.Double)">
            <summary>
            Verifies that point is valid given an orbit of the specified eccentricity.
            </summary>
            <param name="orbitalEccentricity">The orbital eccentricity to verify the point against.</param>
            <returns><c>true</c> if the point is valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Flight.Sim.IOrbitPointSet">
            <summary>
            Interface that contains a list of points for an orbit.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPointSet.Closed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Flight.Sim.IOrbitPointSet"/> is closed.
            </summary>
            <value>
              <c>true</c> if closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPointSet.Count">
            <summary>
            Gets the number of points in the set.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IOrbitPointSet.IntersectsPlanet">
            <summary>
            Gets or sets a value indicating whether the orbit point set intersects the parent planet.
            </summary>
            <value>
              <c>true</c> if the orbit point set intersects the parent planet.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPointSet.AddPoint(ModApi.Flight.Sim.IOrbitPoint)">
            <summary>
            Adds the point.
            </summary>
            <param name="orbitPoint">The orbit point.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPointSet.GetPoint(System.Int32)">
            <summary>
            Gets the point at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPointSet.Initialize(System.Double)">
            <summary>
            Initializes the time.
            </summary>
            <param name="period">The period.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IOrbitPointSet.Last(System.Int32)">
            <summary>
            Lasts the specified index from end.
            </summary>
            <param name="indexFromEnd">The index from end.</param>
            <returns>The orbit point from the specified index from end.</returns>
        </member>
        <member name="T:ModApi.Flight.Sim.IPlanetNode">
            <summary>
            Node for a planet.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.ChildPlanets">
            <summary>
            Gets the child planets. Excludes the dynamic nodes.
            </summary>
            <value>
            The child planets.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.DynamicNodes">
            <summary>
            Gets the list of dynamic child nodes of this planet. Excludes child planet nodes.
            </summary>
            <value>
            The dynamic nodes.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.PlanetData">
            <summary>
            Gets the planet data.
            </summary>
            <value>
            The planet data.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.Rotation">
            <summary>
            Gets the rotation quaternion. Planet's can only rotate on their Y-axis, so this will be generated
            with a call to Quaternion.Euler(0, RotationAngle, 0).
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.RotationAngle">
            <summary>
            Gets or sets the rotation angle of the reference frame.
            </summary>
            <value>
            The rotation angle.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.RotationInverse">
            <summary>
            Gets the rotation quaternion.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.SphereOfInfluenceExitDistance">
            <summary>
            Gets the sphere of influence distance with a small buffer added which is the optimal SOI transfer distance to preven SOI back/forth swapping.
            </summary>
            <value>
            The sphere of influence distance with a small buffer added which is the optimal SOI transfer distance to preven SOI back/forth swapping.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.TerrainDataLoaded">
            <summary>
            Gets a value indicating whether the terrain data has been loaded.
            </summary>
            <value>
              <c>true</c> if the terrain data has been loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.IPlanetNode.TerrainGenerator">
            <summary>
            Gets the terrain generator.
            </summary>
            <value>
            The terrain generator.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.AddChildNode(ModApi.Flight.Sim.INode)">
            <summary>
            Adds the child node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.CalculateGravityVector(UnityEngine.Vector3d,System.Double)">
            <summary>
            Calculates the gravity force vector at the specified position with the specified mass.
            </summary>
            <param name="position">The position of the orbiting body.</param>
            <param name="mass">The mass of the orbiting body.</param>
            <returns>
            The gravity force vector.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.CalculateSurfaceVelocity(UnityEngine.Vector3d)">
            <summary>
            Calculates the velocity of a point on the surface of the planet. The velocity vector is in surface coordinates. In order
            to convert that to planet coordinates, it needs to be multiplied by the planet's rotation quaternion.
            Here's a very poor diagram: http://imgur.com/852uxET
            </summary>
            <param name="surfacePoint">The surface point. The magnitude of this point should be equal to the radius of the planet.</param>
            <returns>The velocity in surface coordinates.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.FindPlanet(System.String)">
            <summary>
            Finds the planet.
            </summary>
            <param name="name">The name.</param>
            <returns>The planet node, or null if does not exist.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.GetSurfaceCoordinates(UnityEngine.Vector3d,System.Double@,System.Double@)">
            <summary>
            Gets the latitude and longitude from the surface position. Zero lat and zero long would be (0,0,1) on a planet of radius 1.
            </summary>
            <param name="surfacePosition">The surface position.</param>
            <param name="latitude">The latitude in radians, which can be -PI to PI. Zero is the equator.</param>
            <param name="longitude">The longitude in radians, which can be Zero to 2*PI.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.GetSurfacePosition(System.Double,System.Double,ModApi.Flight.Sim.AltitudeType,System.Double)">
            <summary>
            Gets the surface position from lat/long/altitude coordinates. Zero lat and zero long would be (0,0,1) on a planet of radius 1.
            </summary>
            <param name="latitude">The latitude in radians, which can be -PI to PI. Zero is the equator.</param>
            <param name="longitude">The longitude in radians, which can be Zero to 2*PI.</param>
            <param name="altitudeType">Type of the altitude. If AboveGroundLevel is provided, the terrain data must be loaded.</param>
            <param name="altitude">The altitude above sea level or ground level, depending on the altitude type.</param>
            <returns>
            The surface position.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.GetTerrainHeight(UnityEngine.Vector3d)">
            <summary>
            Gets the height of the planet terrain under the specified planet position.
            </summary>
            <param name="planetPosition">The planet position.</param>
            <returns>The height of the terrain.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.GetTerrainVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Gets the terrain vertex data under the specified planet position.
            </summary>
            <param name="planetPosition">The planet position.</param>
            <param name="planetNormal">The planet normal.</param>
            <returns>The terrain vertex data under the specified planet position.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.LoadTerrainData">
            <summary>
            Loads the terrain data and creates the terrain generator.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.PlanetVectorToSurfaceVector(UnityEngine.Vector3d)">
            <summary>
            Converts the vector from planet coordinates to surface coordinates.
            </summary>
            <param name="planetVector">The planet position.</param>
            <returns>The surface position.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.PlanetVectorToSurfaceVectorAtTime(UnityEngine.Vector3d,System.Double)">
            <summary>
            Converts the vector from planet coordinates to surface coordinates, at a specific point in time.
            </summary>
            <param name="planetVector">The planet position.</param>
            <param name="time">The time to calculate the surface vector for.</param>
            <returns>
            The surface position.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.RemoveChildNode(ModApi.Flight.Sim.INode)">
            <summary>
            Removes the child node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.SurfaceVectorToPlanetVector(UnityEngine.Vector3d)">
            <summary>
            Converts the vector from surface coordinates to a planet coordinates.
            </summary>
            <param name="surfaceVector">The surface position.</param>
            <returns>The planet position.</returns>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.UnloadTerrainData">
            <summary>
            Unloads the terrain data and destroys the terrain generator.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.IPlanetNode.UpdateRotation(System.Double)">
            <summary>
            Updates the rotation of the planet.
            </summary>
            <param name="elapsedTime">The elapsed time.</param>
        </member>
        <member name="T:ModApi.Flight.Sim.OrbitData">
            <summary>
            Contains data about an orbit.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._argumentOfPeriapsis">
            <summary>
            The argument of periapsis.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._eccentricity">
            <summary>
            The eccentricity.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._inclination">
            <summary>
            The inclination.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._prograde">
            <summary>
              <c>true</c> if prograde; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._rightAscensionOfAscendingNode">
            <summary>
            The right ascension of ascending node.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._semiMajorAxis">
            <summary>
            The semi major axis.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._time">
            <summary>
            The time.
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.OrbitData._trueAnomaly">
            <summary>
            The true anomaly.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.OrbitData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.Sim.OrbitData"/> class.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.OrbitData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.Sim.OrbitData"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.ArgumentOfPeriapsis">
            <summary>
            Gets or sets the argument of periapsis.
            </summary>
            <value>
            The argument of periapsis.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.Eccentricity">
            <summary>
            Gets or sets the eccentricity.
            </summary>
            <value>
            The eccentricity.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.Inclination">
            <summary>
            Gets or sets the inclination.
            </summary>
            <value>
            The inclination.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.Prograde">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Flight.Sim.OrbitData"/> is prograde.
            </summary>
            <value>
              <c>true</c> if prograde; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.RightAscensionOfAscendingNode">
            <summary>
            Gets or sets the right ascension of ascending node.
            </summary>
            <value>
            The right ascension of ascending node.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.SemiMajorAxis">
            <summary>
            Gets or sets the semi major axis.
            </summary>
            <value>
            The semi major axis.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.Time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.OrbitData.TrueAnomaly">
            <summary>
            Gets or sets the true anomaly.
            </summary>
            <value>
            The true anomaly.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.OrbitData.GenerateXml">
            <summary>
            Saves the orbit data as XML.
            </summary>
            <returns>The XML element representing the orbit data.</returns>
        </member>
        <member name="T:ModApi.Flight.Sim.PlanetNodeData">
            <summary>
            Contains properties of a planet node that need to be serialized.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.PlanetNodeData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.Sim.PlanetNodeData"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.PlanetNodeData.#ctor(ModApi.Planet.PlanetDataScript)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.Sim.PlanetNodeData"/> class.
            </summary>
            <param name="dataScript">The data script.</param>
        </member>
        <member name="M:ModApi.Flight.Sim.PlanetNodeData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.Sim.PlanetNodeData"/> class.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="P:ModApi.Flight.Sim.PlanetNodeData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.PlanetNodeData.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>
            The rotation angle.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.PlanetNodeData.TrueAnomaly">
            <summary>
            Gets or sets the true anomaly.
            </summary>
            <value>
            The true anomaly.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.PlanetNodeData.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The XML element.</returns>
        </member>
        <member name="T:ModApi.Flight.Sim.TrigAngle">
            <summary>
            Class to wrap doubles to be used for trig operations and control the range (-PI to PI or, 0 to 2PI)
            </summary>
        </member>
        <member name="F:ModApi.Flight.Sim.TrigAngle._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.Sim.TrigAngle"/> struct.
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:ModApi.Flight.Sim.TrigAngle.AsDegrees">
            <summary>
            Gets the current angle in degrees.
            </summary>
            <value>
            The current angle in degrees.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.TrigAngle.AsNegativePIToPI">
            <summary>
            Gets as negative pi to pi.
            </summary>
            <value>
            As negative pi to pi.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.TrigAngle.AsZeroTo2PI">
            <summary>
            Gets as zero to2 pi.
            </summary>
            <value>
            As zero to2 pi.
            </value>
        </member>
        <member name="P:ModApi.Flight.Sim.TrigAngle.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_Implicit(ModApi.Flight.Sim.TrigAngle)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Flight.Sim.TrigAngle"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="a">The trig angle.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_Implicit(System.Double)~ModApi.Flight.Sim.TrigAngle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:ModApi.Flight.Sim.TrigAngle"/>.
            </summary>
            <param name="d">The double</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_Inequality(ModApi.Flight.Sim.TrigAngle,ModApi.Flight.Sim.TrigAngle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_Inequality(ModApi.Flight.Sim.TrigAngle,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_LessThan(ModApi.Flight.Sim.TrigAngle,ModApi.Flight.Sim.TrigAngle)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_LessThan(ModApi.Flight.Sim.TrigAngle,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_LessThanOrEqual(ModApi.Flight.Sim.TrigAngle,ModApi.Flight.Sim.TrigAngle)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_LessThanOrEqual(ModApi.Flight.Sim.TrigAngle,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_Equality(ModApi.Flight.Sim.TrigAngle,ModApi.Flight.Sim.TrigAngle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_Equality(ModApi.Flight.Sim.TrigAngle,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_GreaterThan(ModApi.Flight.Sim.TrigAngle,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_GreaterThan(ModApi.Flight.Sim.TrigAngle,ModApi.Flight.Sim.TrigAngle)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_GreaterThanOrEqual(ModApi.Flight.Sim.TrigAngle,ModApi.Flight.Sim.TrigAngle)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.op_GreaterThanOrEqual(ModApi.Flight.Sim.TrigAngle,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:ModApi.Flight.Sim.TrigAngle.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ModApi.Flight.TimeMultiplierModeChangedEvent">
            <summary>
            Class that contains information when the time multiplier mode has changed.
            </summary>
        </member>
        <member name="M:ModApi.Flight.TimeMultiplierModeChangedEvent.#ctor(ModApi.Flight.ITimeMultiplierMode,ModApi.Flight.ITimeMultiplierMode,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Flight.TimeMultiplierModeChangedEvent" /> class.
            </summary>
            <param name="currentMode">The current mode.</param>
            <param name="previousMode">The previous mode.</param>
            <param name="enteredWarp">if set to <c>true</c> [entered warp].</param>
            <param name="exitedWarp">if set to <c>true</c> [exited warp].</param>
        </member>
        <member name="P:ModApi.Flight.TimeMultiplierModeChangedEvent.CurrentMode">
            <summary>
            Gets the current mode.
            </summary>
            <value>
            The current mode.
            </value>
        </member>
        <member name="P:ModApi.Flight.TimeMultiplierModeChangedEvent.EnteredWarpMode">
            <summary>
            Gets a value indicating whether warp mode has been entered.
            </summary>
            <value>
              <c>true</c> if [entered warp mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.TimeMultiplierModeChangedEvent.ExitedWarpMode">
            <summary>
            Gets a value indicating whether warp mode has been exited.
            </summary>
            <value>
              <c>true</c> if [exited warp mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.TimeMultiplierModeChangedEvent.PreviousMode">
            <summary>
            Gets the previous mode.
            </summary>
            <value>
            The previous mode.
            </value>
        </member>
        <member name="T:ModApi.Flight.UI.IFlightSceneUI">
            <summary>
            Interface for the flight scene UI.
            </summary>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.Canvas">
            <summary>
            Gets the IFlightScene UI's canvas.
            </summary>
            <value>
            The IFlightScene UI's canvas.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.Crosshairs">
            <summary>
            Gets the crosshairs.
            </summary>
            <value>
            The crosshairs.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.FlightScene">
            <summary>
            Gets the flight scene.
            </summary>
            <value>
            The flight scene.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.NavSphere">
            <summary>
            Gets the nav sphere.
            </summary>
            <value>
            The nav sphere.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.NavSphereVisible">
            <summary>
            Gets a value indicating whether nav sphere is currently visible.
            </summary>
            <value>
              <c>true</c> if the nav sphere is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IFlightSceneUI.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Flight.UI.IFlightSceneUI"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Flight.UI.IFlightSceneUI.AddInputResponder(ModApi.Flight.UI.IInputResponder)">
            <summary>
            Adds the input responder.
            </summary>
            <param name="inputResponder">The input responder to add.</param>
        </member>
        <member name="M:ModApi.Flight.UI.IFlightSceneUI.RestoreNavSphereVisibility">
            <summary>
            Restores the visibility of the nav sphere in the current view.
            </summary>
        </member>
        <member name="M:ModApi.Flight.UI.IFlightSceneUI.SetNavSphereVisibility(System.Boolean,System.Boolean)">
            <summary>
            Sets the nav sphere visibility.
            </summary>
            <param name="visible">if set to <c>true</c> then set the nav sphere visible. Otherwise, false.</param>
            <param name="updateSettings">if set to <c>true</c> then update settings to remember this setting
            for the nav sphere in the current view.</param>
        </member>
        <member name="M:ModApi.Flight.UI.IFlightSceneUI.ShowMessage(System.String,System.Single)">
            <summary>
            Shows the message.
            </summary>
            <param name="message">The message.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="T:ModApi.Flight.UI.IInputResponder">
            <summary>
            IInputResponder is used to allow an object to respond to input actions in a structured manner.
            </summary>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.IsResponding">
            <summary>
            Gets or sets the delegate to determine if this responder is currently responding to inputs.
            </summary>
            <value>
            The delegate to determine if this responder is currently responding to inputs.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.Name">
            <summary>
            Gets the name of the input responder.
            </summary>
            <value>
            The name of the input responder.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.Priority">
            <summary>
            Gets the priority of the input responder. The higher priority responders are handled first.
            If input handlers share the same priority, then they are handled in order they were added.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnBeginDrag">
            <summary>
            Gets or sets the delegate which is called when a drag has begun.
            </summary>
            <value>
            The delegate which is called when a drag has begun.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnBeginPinch">
            <summary>
            Gets or sets the delegate which is called when the user starts a multi-touch pinch gesture.
            </summary>
            <value>
            The delegate which is called when the user begins a multi-touch pinch gesture.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnDeselect">
            <summary>
            Gets or sets the delegate which is called when an object is de-selected.
            </summary>
            <value>
            The delegate which is called when an object is de-selected.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnDrag">
            <summary>
            Gets or sets the delegate which is called when the pointer is dragged.
            </summary>
            <value>
            The delegate which is called when the pointer is dragged.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnDrop">
            <summary>
            Gets or sets the delegate which is called when an object is dropped.
            </summary>
            <value>
            The delegate which is called when an object is dropped.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnEndDrag">
            <summary>
            Gets or sets the delegate which is called when a drag has ended.
            </summary>
            <value>
            The delegate which is called when a drag has ended.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnEndPinch">
            <summary>
            Gets or sets the delegate which is called when the user ends a multi-touch pinch gesture.
            </summary>
            <value>
            The delegate which is called when the user ends a multi-touch pinch gesture.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnInitializePotentialDrag">
            <summary>
            Gets or sets the delegate which is called when a potential drag is detected.
            </summary>
            <value>
            The delegate which is called when a potential drag is detected.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnPinch">
            <summary>
            Gets or sets the delegate which is called when the user does a multi-touch pinch gesture.
            </summary>
            <value>
            The delegate which is called when the user does a multi-touch pinch gesture.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnPointerClick">
            <summary>
            Gets or sets the delegate which is called when the pointer is clicked.
            </summary>
            <value>
            The delegate which is called when the pointer is clicked.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnPointerDown">
            <summary>
            Gets or sets the delegate which is called when the pointer goes down.
            </summary>
            <value>
            The delegate which is called when the pointer goes down.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnPointerUp">
            <summary>
            Gets or sets the delegate which is called when the pointer goes up.
            </summary>
            <value>
            The delegate which is called when the pointer goes up.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnScroll">
            <summary>
            Gets or sets the delegate which is called when scrolling.
            </summary>
            <value>
            The delegate which is called when sccrolling on scroll.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.IInputResponder.OnSelect">
            <summary>
            Gets or sets the delegate which is called when an object is selected.
            </summary>
            <value>
            The delegate which is called when an object is selected.
            Note: Set to null for default behavior.
            </value>
        </member>
        <member name="T:ModApi.Flight.UI.NavSphereIndicatorType">
            <summary>
            The available indicator types on the nav sphere
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.VelocityPrograde">
            <summary>
            The velocity prograde indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.VelocityRetrograde">
            <summary>
            The velocity retrograde indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.Target">
            <summary>
            The target indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.ManeuverNode">
            <summary>
            The maneuver node indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.RadialIn">
            <summary>
            The radial in indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.RadialOut">
            <summary>
            The radial out indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.Normal">
            <summary>
            The normal indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.AntiNormal">
            <summary>
            The anti-normal indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.AntiTarget">
            <summary>
            The anti-target indicator.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.North">
            <summary>
            The north direction.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.East">
            <summary>
            The east direction.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.South">
            <summary>
            The south direction.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.West">
            <summary>
            The west direction.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.Up">
            <summary>
            The up direction.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereIndicatorType.Down">
            <summary>
            The down direction.
            </summary>
        </member>
        <member name="T:ModApi.Flight.UI.NavSphereVelocityMode">
            <summary>
            The available ways to show the velocity.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereVelocityMode.Surface">
            <summary>
            The surface velocity mode, which subtracts the surface velocity from the velocity vector.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereVelocityMode.Orbit">
            <summary>
            The orbit velocity mode.
            </summary>
        </member>
        <member name="F:ModApi.Flight.UI.NavSphereVelocityMode.Target">
            <summary>
            The target velocity mode, which shows the relative velocity between the craft and its target.
            </summary>
        </member>
        <member name="T:ModApi.Flight.UI.INavSphere">
            <summary>
            The interface for the nav sphere.
            </summary>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.Heading">
            <summary>
            Gets the current heading.
            </summary>
            <value>
            The target heading.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.HeadingLocked">
            <summary>
            Gets a value indicating whether the heading is locked.
            </summary>
            <value>
              <c>true</c> if the heading is locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.LockedIndicator">
            <summary>
            Gets or sets the locked indicator type.
            </summary>
            <value>
            The locked indicator type.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.ManeuverNodeDirection">
            <summary>
            Gets or sets the maneuver node direction. This will be null if the player
            does not currently have a maneuver node.
            </summary>
            <value>
            The maneuver node direction.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.Pitch">
            <summary>
            Gets the current pitch.
            </summary>
            <value>
            The target pitch.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.VelocityMagnitude">
            <summary>
            Gets the magnitude of the velocity of the current velocity mode.
            </summary>
            <value>
            The velocity magnitude.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphere.VelocityMode">
            <summary>
            Gets or sets the velocity mode.
            </summary>
            <value>
            The velocity mode.
            </value>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.GetVector(ModApi.Flight.UI.NavSphereIndicatorType)">
            <summary>
            Gets the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The flight vector.</returns>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.LockCurrentHeading">
            <summary>
            Locks the craft's current heading.
            </summary>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.LockHeading(System.Single,System.Single)">
            <summary>
            Locks the heading / pitch angles.
            </summary>
            <param name="pitch">The pitch angle.</param>
            <param name="heading">The heading angle.</param>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.LockHeading(UnityEngine.Vector3d)">
            <summary>
            Locks the heading direction. The heading direction must be in planet position coordinates.
            </summary>
            <param name="headingDirection">The heading direction.</param>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.ToggleLock(ModApi.Flight.UI.NavSphereIndicatorType)">
            <summary>
            Toggles the lock on or off.
            </summary>
            <param name="mode">The specified mode.</param>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.ToggleProgradeLock">
            <summary>
            Toggles the current prograde lock on or off.
            </summary>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.ToggleRetrogradeLock">
            <summary>
            Toggles the current retrograde lock on or off.
            </summary>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.ToggleTargetLock">
            <summary>
            Toggles the current target lock on or off.
            </summary>
        </member>
        <member name="M:ModApi.Flight.UI.INavSphere.UnlockHeading">
            <summary>
            Unlocks the heading.
            </summary>
        </member>
        <member name="T:ModApi.Flight.UI.INavSphereTarget">
            <summary>
            Interface for a target for the nav sphere.
            </summary>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.IsDestroyed">
            <summary>
            Gets a value indicating whether this instance is destroyed.
            </summary>
            <value>
              <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.Name">
            <summary>
            Gets the name of the orbit node.
            </summary>
            <value>
            The name of the orbit node.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.OrbitNode">
            <summary>
            Gets the orbit node associated with this nav sphere target.
            </summary>
            <value>
            The orbit node associated with this nav sphere target.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.Parent">
            <summary>
            Gets the parent planet.
            </summary>
            <value>
            The parent planet.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.Position">
            <summary>
            Gets the position relative to it's parent.
            </summary>
            <value>
            The position the position relative to it's parent.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.SolarPosition">
            <summary>
            Gets the position of this planet relative to the closest sun.
            </summary>
            <value>
            The solar position.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.INavSphereTarget.Velocity">
            <summary>
            Gets the velocity relative to it's parent.
            </summary>
            <value>
            The velocity relative to it's parent.
            </value>
        </member>
        <member name="T:ModApi.Flight.UI.InputResponderDelegates">
            <summary>
            Delegates used by IInputResponder
            </summary>
        </member>
        <member name="T:ModApi.Flight.UI.InputResponderDelegates.InputPinchResponderDelegate">
            <summary>
            General purpose delegate to respond to pinch events.
            </summary>
            <param name="eventData">The event data.</param>
            <returns><c>true</c> if the event is considered handled (and should not propagate to other responders) otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Flight.UI.InputResponderDelegates.InputResponderDelegate">
            <summary>
            General purpose delegate to respond to input events
            </summary>
            <param name="eventData">The pointer event data.</param>
            <returns><c>true</c> if the event is considered handled (and should not propagate to other responders) otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Flight.UI.InputResponderDelegates.InputSelectionResponderDelegate">
            <summary>
            General purpose delegate to respond to selection input events
            </summary>
            <param name="eventData">The base event data.</param>
            <returns><c>true</c> if the event is considered handled (and should not propagate to other responders) otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Flight.UI.InputResponderDelegates.IsRespondingDelegate">
            <summary>
            Delegate to determine if this responder is currently responding to inputs.
            </summary>
            <returns><c>true</c> if this responder is responding to inputs, otherwise <c>false</c></returns>
        </member>
        <member name="T:ModApi.Flight.UI.PinchEventData">
            <summary>
            The pinch event data.
            </summary>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.AngleDelta">
            <summary>
            Gets or sets the change in angle (in degrees) between the two inputs since the last pinch event.
            </summary>
            <value>
            The angle delta in degrees.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.Distance">
            <summary>
            Gets or sets the distance between the two touch inputs.
            </summary>
            <value>
            The gap.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.DistanceDelta">
            <summary>
            Gets or sets the change in distance since the last pinch event.
            </summary>
            <value>
            The delta distance.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.Midpoint">
            <summary>
            Gets or sets the midpoint of the two touch inputs.
            </summary>
            <value>
            The midpoint of the two touch inputs.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.MidpointDelta">
            <summary>
            Gets or sets the change in midpoint since the last pinch event.
            </summary>
            <value>
            The delta midpoint.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.StartDistance">
            <summary>
            Gets or sets the distance between the two touch inputs when the pinch started.
            </summary>
            <value>
            The start distance.
            </value>
        </member>
        <member name="P:ModApi.Flight.UI.PinchEventData.StartMidpoint">
            <summary>
            Gets or sets the midpoint of the two touch inputs when the pinch started.
            pinch started.
            </summary>
            <value>
            The start midpoint.
            </value>
        </member>
        <member name="T:ModApi.Game">
            <summary>
            Singleton class which provides various functions to the game.
            </summary>
            <remarks>
            This class is duplicated in the 'Common' namespace as a hacky convenience.
            Most of our code can use Game.cs without a namespace or using statement.
            Modders and other code must use 'Common' namespace.
            </remarks>
        </member>
        <member name="F:ModApi.Game._instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="F:ModApi.Game._loop">
            <summary>
            The registrar for the game loop.
            </summary>
        </member>
        <member name="P:ModApi.Game.InDesignerScene">
            <summary>
            Gets a value indicating whether the game is currently in the designer scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the designer scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Game.InFlightScene">
            <summary>
            Gets a value indicating whether the game is currently in the flight scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the flight scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Game.InMenuScene">
            <summary>
            Gets a value indicating whether the game is currently in the menu scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the menu scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Game.InPlanetStudioScene">
            <summary>
            Gets a value indicating whether the game is currently in the planet studio scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the planet studio scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Game.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>
            The singleton instance.
            </value>
        </member>
        <member name="P:ModApi.Game.Loop">
            <summary>
            Gets the registrar for the game loop.
            </summary>
            <value>
            The registrar for the game loop.
            </value>
        </member>
        <member name="P:ModApi.Game.PersistentDataPath">
            <summary>
            Gets the persistent data path.
            </summary>
            <value>
            The persistent data path.
            </value>
        </member>
        <member name="M:ModApi.Game.LoadGameLoopRegistrar(System.Type)">
            <summary>
            Loads the game loop registrar static property from the main game assembly via reflection.
            </summary>
            <param name="gameType">The type of the Game object.</param>
        </member>
        <member name="M:ModApi.Game.LoadInstance">
            <summary>
            Loads the singleton instance from the main game assembly via reflection.
            </summary>
            <returns>The singleton instance.</returns>
        </member>
        <member name="T:ModApi.GameLoop.DesignerFrameData">
            <summary>
            The designer frame data.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.DesignerFrameData.DeltaTime">
            <summary>
            The completion time in seconds since the last frame.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.deltaTime"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.DesignerFrameData.DeltaTimeUnscaled">
            <summary>
            The timeScale-independent interval in seconds from the last frame to the current one.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.unscaledDeltaTime"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.DesignerFrameData.Designer">
            <summary>
            The designer reference.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.DesignerFrameData.FrameCount">
            <summary>
            The total number of frames that have passed.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.frameCount"/>.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.DesignerFrameData.#ctor(ModApi.Design.IDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.GameLoop.DesignerFrameData"/> struct.
            </summary>
            <param name="designer">The designer reference.</param>
        </member>
        <member name="T:ModApi.GameLoop.ExecutionOrder">
            <summary>
            A static class containing constants that define the game loop script execution orders for various script types.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.ExecutionOrder.BodyScript">
            <summary>
            The body script execution order.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.ExecutionOrder.CraftScript">
            <summary>
            The craft script execution order.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.ExecutionOrder.PartGroupScript">
            <summary>
            The part group script execution order.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.ExecutionOrder.PartModifierScript">
            <summary>
            The part modifier script execution order.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.ExecutionOrder.PartScript">
            <summary>
            The part script execution order.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.ExecutionOrder._orderNameLookup">
            <summary>
            The dictionary containing the names of the execution order constants in this class, keyed by execution order.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.ExecutionOrder.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.GameLoop.ExecutionOrder"/> class.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.ExecutionOrder.FindName(System.Int32)">
            <summary>
            Attempts to find the name of the execution order by the execution order value.
            </summary>
            <param name="order">The execution order value.</param>
            <returns>The requested execution order name if it could be found or <c>null</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.GameLoop.FlightFrameData">
            <summary>
            The flight frame data.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.DeltaTime">
            <summary>
            The completion time in seconds since the last frame.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.deltaTime"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.DeltaTimeUnscaled">
            <summary>
            The timeScale-independent interval in seconds from the last frame to the current one.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.unscaledDeltaTime"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.DeltaTimeWorld">
            <summary>
            The delta time in seconds that has elapsed in game world time since the last frame.
            This takes into account warp speeds.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.FlightScene">
            <summary>
            The flight scene reference.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.FrameCount">
            <summary>
            The total number of frames that have passed.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.frameCount"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.IsPaused">
            <summary>
            A value indicating if the game is currently paused.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.IsWarping">
            <summary>
            A value indicating if warp mode is currently enabled.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FlightFrameData.TimeManager">
            <summary>
            The time manager reference.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.FlightFrameData.#ctor(ModApi.Flight.IFlightScene)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.GameLoop.FlightFrameData"/> struct.
            </summary>
            <param name="flightScene">The flight scene reference.</param>
        </member>
        <member name="T:ModApi.GameLoop.FrameData">
            <summary>
            The common frame data.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FrameData.DeltaTime">
            <summary>
            The completion time in seconds since the last frame.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.deltaTime"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FrameData.DeltaTimeUnscaled">
            <summary>
            The timeScale-independent interval in seconds from the last frame to the current one.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.unscaledDeltaTime"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FrameData.FrameCount">
            <summary>
            The total number of frames that have passed.
            This is the equivalent of Unity's <see cref="P:UnityEngine.Time.frameCount"/>.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.FrameData.InDesignerScene">
            <summary>
            Gets a value indicating whether the current scene is the designer scene.
            </summary>
            <value><c>true</c> if the current scene is the designer scene; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ModApi.GameLoop.FrameData.InFlightScene">
            <summary>
            Gets a value indicating whether the current scene is the flight scene.
            </summary>
            <value><c>true</c> if the current scene is the flight scene; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ModApi.GameLoop.FrameData.InMenuScene">
            <summary>
            Gets a value indicating whether the current scene is the menu scene.
            </summary>
            <value><c>true</c> if the current scene is the menu scene; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ModApi.GameLoop.FrameData.#ctor(ModApi.Scenes.ISceneManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.GameLoop.FrameData" /> struct.
            </summary>
            <param name="sceneManager">The scene manager.</param>
        </member>
        <member name="T:ModApi.GameLoop.GameLoopExecutionOrderAttribute">
            <summary>
            An attribute used to specify the script execution order for a game loop update method.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:ModApi.GameLoop.GameLoopExecutionOrderAttribute.DefaultExecutionOrder">
            <summary>
            The default execution order.
            </summary>
        </member>
        <member name="F:ModApi.GameLoop.GameLoopExecutionOrderAttribute.ExecutionOrder">
            <summary>
            The execution order.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.GameLoopExecutionOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.GameLoop.GameLoopExecutionOrderAttribute"/> class.
            </summary>
            <param name="executionOrder">The execution order.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerEndOfFramePostUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame, after other game loop end of frame methods, in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerEndOfFramePostUpdate.DesignerEndOfFramePostUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            An end of frame update method, called after other game loop end of frame update methods, that is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerEndOfFramePreUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame, before other game loop end of frame methods, in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerEndOfFramePreUpdate.DesignerEndOfFramePreUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            An end of frame update method, called before other game loop end of frame update methods, that is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerEndOfFrameUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerEndOfFrameUpdate.DesignerEndOfFrameUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            An end of frame Update method that is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerFixedUpdate">
            <summary>
            An interface for an object that is updated during the FixedUpdate loop in the designer.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerFixedUpdate.DesignerFixedUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            FixedUpdate method that is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerGameLoop">
            <summary>
            The designer game loop.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoop" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerGameLoop.Register(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Registers the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerGameLoop.Unregister(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Unregisters the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerLateUpdate">
            <summary>
            An interface for an object that is updated during the LateUpdate loop in the designer.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerLateUpdate.DesignerLateUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            LateUpdate method that is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPostFixedUpdate">
            <summary>
            An interface for an object that is updated after the FixedUpdate methods
            of other game loop scripts during the FixedUpdate loop in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPostFixedUpdate.DesignerPostFixedUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            FixedUpdate method that executes after other game loop FixedUpdate methods and is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPostLateUpdate">
            <summary>
            An interface for an object that is updated after the LateUpdate methods
            of other game loop scripts during the LateUpdate loop in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPostLateUpdate.DesignerPostLateUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            LateUpdate method that executes after other game loop LateUpdate methods and is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPostStart">
            <summary>
            An interface for an object that runs a one-time 'DesignerPostStart' method in the designer scene
            before any update method is called but after the current set of 'DesignerStart' methods have executed.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPostStart.DesignerPostStart(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            Called once in the designer scene before running any update methods on
            this object but after running the current set of 'DesignerStart' methods.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPostUpdate">
            <summary>
            An interface for an object that is updated after the Update methods
            of other game loop scripts during the Update loop in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPostUpdate.DesignerPostUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            Update method that executes after other game loop Update methods and is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPreFixedUpdate">
            <summary>
            An interface for an object that is updated before the FixedUpdate methods
            of other game loop scripts during the FixedUpdate loop in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPreFixedUpdate.DesignerPreFixedUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            FixedUpdate method that executes before other game loop FixedUpdate methods and is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPreLateUpdate">
            <summary>
            An interface for an object that is updated before the LateUpdate methods
            of other game loop scripts during the LateUpdate loop in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPreLateUpdate.DesignerPreLateUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            LateUpdate method that executes before other game loop LateUpdate methods and is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerPreUpdate">
            <summary>
            An interface for an object that is updated before the Update methods
            of other game loop scripts during the Update loop in the designer scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerPreUpdate.DesignerPreUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            Update method that executes before other game loop Update methods and is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerStart">
            <summary>
            An interface for an object that runs a one-time 'Start' method in the designer scene before any update method is called.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerStart.DesignerStart(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            Called once in the designer scene before running any update methods on this object.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IDesignerUpdate">
            <summary>
            An interface for an object that is updated during the Update loop in the designer.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IDesignerUpdate.DesignerUpdate(ModApi.GameLoop.DesignerFrameData@)">
            <summary>
            Update method that is only called in the designer scene.
            </summary>
            <param name="frame">The designer frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IEndOfFrameUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IEndOfFrameUpdate.EndOfFrameUpdate(ModApi.GameLoop.FrameData@)">
            <summary>
            An end of frame Update method that is called in all scenes.
            </summary>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFixedUpdate">
            <summary>
            An interface for an object that is updated during the FixedUpdate loop.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFixedUpdate.FixedUpdate(ModApi.GameLoop.FrameData@)">
            <summary>
            FixedUpdate method that is called in all scenes.
            </summary>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightEndOfFramePostUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame, after other game loop end of frame methods, in the flight scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightEndOfFramePostUpdate.FlightEndOfFramePostUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            An end of frame update method, called after other game loop end of frame update methods, that is only called in the flight scene.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightEndOfFramePreUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame, before other game loop end of frame methods, in the flight scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightEndOfFramePreUpdate.FlightEndOfFramePreUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            An end of frame update method, called before other game loop end of frame update methods, that is only called in the flight scene.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightEndOfFrameUpdate">
            <summary>
            An interface for an object that is updated at the end of each frame in the flight scene.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightEndOfFrameUpdate.FlightEndOfFrameUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            An end of frame Update method that is only called in the flight scene.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightFixedUpdate">
            <summary>
            An interface for an object that is updated during the FixedUpdate loop in
            the flight scene when the game is not paused and the player is not warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightFixedUpdate.FlightFixedUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that is only called in the flight scene when the game is not paused and when not warping.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightFixedUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, during the
            FixedUpdate loop in the flight scene when the game is not paused and the player is not warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightFixedUpdateParallel.FlightFixedUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that is only called in the flight scene when the game is not paused and when not warping.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightFixedUpdateWarp">
            <summary>
            An interface for an object that is updated during the FixedUpdate loop in
            the flight scene when the game is not paused and only when the player is warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightFixedUpdateWarp.FlightFixedUpdateWarp(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that is only called in the flight scene when the game is not paused and only when warping.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightGameLoop">
            <summary>
            The flight scene game loop.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoop" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightGameLoop.Register(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Registers the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightGameLoop.Unregister(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Unregisters the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightLateUpdate">
            <summary>
            An interface for an object that is updated during the LateUpdate loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightLateUpdate.FlightLateUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that is only called in the flight scene when the game is not paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightLateUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, during the
            LateUpdate loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightLateUpdateParallel.FlightLateUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that is only called in the flight scene when the game is not paused.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightLateUpdatePaused">
            <summary>
            An interface for an object that is updated during the LateUpdate loop in the flight scene only while the game is paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightLateUpdatePaused.FlightLateUpdatePaused(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that is only called in the flight scene when the game is paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostFixedUpdate">
            <summary>
            An interface for an object that is updated after the FixedUpdate method of other game loop scripts
            during the FixedUpdate loop in the flight scene when the game is not paused and the player is not warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostFixedUpdate.FlightPostFixedUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that executes after other game loop FixedUpdate methods
            and is only called in the flight scene when the game is not paused and when not warping.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostFixedUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, after the FixedUpdate method of other game loop scripts
            during the FixedUpdate loop in the flight scene when the game is not paused and the player is not warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostFixedUpdateParallel.FlightPostFixedUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that executes after other game loop FixedUpdate methods
            and is only called in the flight scene when the game is not paused and when not warping.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostLateUpdate">
            <summary>
            An interface for an object that is updated after the LateUpdate method of other game loop scripts
            during the LateUpdate loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostLateUpdate.FlightPostLateUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that executes after other game loop FixedUpdate methods
            and is only called in the flight scene when the game is not paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostLateUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, after the LateUpdate method of other game loop scripts
            during the LateUpdate loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostLateUpdateParallel.FlightPostLateUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that executes after other game loop FixedUpdate methods
            and is only called in the flight scene when the game is not paused.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostStart">
            <summary>
            An interface for an object that runs a one-time 'FlightPostStart' method in the flight scene
            before any update method is called but after the current set of 'FlightStart' methods have executed.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostStart.FlightPostStart(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Called once in the flight scene before running any update methods on
            this object but after running the current set of 'FlightStart' methods.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostUpdate">
            <summary>
            An interface for an object that is updated after the Update method of other game loop scripts in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostUpdate.FlightPostUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that executes after other game loop Update methods
            and is only called in the flight scene when the game is not paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPostUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, after the
            Update method of other game loop scripts in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPostUpdateParallel.FlightPostUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that executes after other game loop Update methods
            and is only called in the flight scene when the game is not paused.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPreFixedUpdate">
            <summary>
            An interface for an object that is updated prior to the FixedUpdate method of other game loop scripts
            during the FixedUpdate loop in the flight scene when the game is not paused and the player is not warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPreFixedUpdate.FlightPreFixedUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that executes before other game loop FixedUpdate methods
            and is only called in the flight scene when the game is not paused and when not warping.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPreFixedUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, prior to the FixedUpdate method of other game loop scripts
            during the FixedUpdate loop in the flight scene when the game is not paused and the player is not warping.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPreFixedUpdateParallel.FlightPreFixedUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            FixedUpdate method that executes before other game loop FixedUpdate methods
            and is only called in the flight scene when the game is not paused and when not warping.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPreLateUpdate">
            <summary>
            An interface for an object that is updated prior to the LateUpdate method of other game loop scripts
            during the LateUpdate loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPreLateUpdate.FlightPreLateUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that executes before other game loop LateUpdate methods
            and is only called in the flight scene when the game is not paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPreLateUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, prior to the LateUpdate method of other game loop scripts
            during the LateUpdate loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPreLateUpdateParallel.FlightPreLateUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            LateUpdate method that executes before other game loop LateUpdate methods
            and is only called in the flight scene when the game is not paused.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPreUpdate">
            <summary>
            An interface for an object that is updated prior to the Update method of other game loop scripts in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPreUpdate.FlightPreUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that executes before other game loop Update methods
            and is only called in the flight scene when the game is not paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightPreUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, prior to the
            Update method of other game loop scripts in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightPreUpdateParallel.FlightPreUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that executes before other game loop Update methods
            and is only called in the flight scene when the game is not paused.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightStart">
            <summary>
            An interface for an object that runs a one-time 'Start' method in the flight scene before any update method is called.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightStart.FlightStart(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Called once in the flight scene before running any update methods on this object.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightUpdate">
            <summary>
            An interface for an object that is updated during the Update loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightUpdate.FlightUpdate(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that is only called in the flight scene when the game is not paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightUpdateParallel">
            <summary>
            An interface for an object that is updated, potentially in parallel, during the Update loop in the flight scene while the game is not paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightUpdateParallel.FlightUpdateParallel(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that is only called in the flight scene when the game is not paused.
            This may or may not be executed in parallel on background threads.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IFlightUpdatePaused">
            <summary>
            An interface for an object that is updated during the Update loop in the flight scene only while the game is paused.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IFlightUpdatePaused.FlightUpdatePaused(ModApi.GameLoop.FlightFrameData@)">
            <summary>
            Update method that is only called in the flight scene when the game is paused.
            </summary>
            <param name="frame">The flight frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IGameLoop">
            <summary>
            Base interface for a game loop.
            </summary>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IGameLoopItem">
            <summary>
            The base interface for a game loop item.
            These are items that are updated as a group in a game loop.
            </summary>
        </member>
        <member name="P:ModApi.GameLoop.Interfaces.IGameLoopItem.StartMethodCalled">
            <summary>
            Gets or sets a value indicating whether the start method called for the game loop item has been called.
            </summary>
            <value>
              <c>true</c> if the start method for the game loop item has been called; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IGameLoopItem.GetInstanceID">
            <summary>
            Gets the instance id of the object. The instance id of an object is always guaranteed to be unique.
            </summary>
            <returns>The instance id of the object.</returns>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IGameLoopRegistrar">
            <summary>
            The game loop registrar.
            This handles the registration of various game loop items with the appropriate current game loop.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IGameLoopRegistrar.Register(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Registers the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IGameLoopRegistrar.Unregister(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Unregisters the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IGenericGameLoop">
            <summary>
            The generic game loop.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoop" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IGenericGameLoop.Register(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Registers the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IGenericGameLoop.Unregister(ModApi.GameLoop.Interfaces.IGameLoopItem)">
            <summary>
            Unregisters the specified script.
            </summary>
            <param name="script">The script to register.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.ILateUpdate">
            <summary>
            An interface for an object that is updated during the LateUpdate loop.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.ILateUpdate.LateUpdate(ModApi.GameLoop.FrameData@)">
            <summary>
            LateUpdate method that is called in all scenes.
            </summary>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IPostStart">
            <summary>
            An interface for an object that runs a one-time 'PostStart' method before any
            update method is called but after the current set of 'Start' methods have executed.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IPostStart.PostStart(ModApi.GameLoop.FrameData@)">
            <summary>
            Called once before running any update methods on this object but after running the current set of 'Start' methods.
            </summary>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IStart">
            <summary>
            An interface for an object that runs a one-time 'Start' method before any update method is called.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IStart.Start(ModApi.GameLoop.FrameData@)">
            <summary>
            Called once before running any update methods on this object.
            </summary>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.Interfaces.IUpdate">
            <summary>
            An interface for an object that is updated during the Update loop.
            </summary>
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="M:ModApi.GameLoop.Interfaces.IUpdate.Update(ModApi.GameLoop.FrameData@)">
            <summary>
            Update method that is called in all scenes.
            </summary>
            <param name="frame">The frame data.</param>
        </member>
        <member name="T:ModApi.GameLoop.MonoBehaviourBase">
            <summary>
            A base class for MonoBehaviours.
            This is primarily intended to be used by MonoBehaviours that hook in to the custom game loop system.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
            <seealso cref="T:ModApi.GameLoop.Interfaces.IGameLoopItem" />
        </member>
        <member name="P:ModApi.GameLoop.MonoBehaviourBase.ModApi#GameLoop#Interfaces#IGameLoopItem#StartMethodCalled">
            <summary>
            Gets or sets a value indicating whether the start method called for the game loop item has been called.
            </summary>
            <value>
              <c>true</c> if the start method for the game loop item has been called; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.GameLoop.MonoBehaviourBase.OnDisable">
            <summary>
            This function is called when the behavior becomes disabled or inactive.
            </summary>
        </member>
        <member name="M:ModApi.GameLoop.MonoBehaviourBase.OnEnable">
            <summary>
            This function is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="T:ModApi.IDevice">
            <summary>
            An interface for looking up information about the device on which the game is running.
            </summary>
        </member>
        <member name="P:ModApi.IDevice.DeviceCaps">
            <summary>
            Gets the device caps.
            </summary>
            <value>
            The device caps.
            </value>
        </member>
        <member name="P:ModApi.IDevice.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
            <value>
            The device identifier.
            </value>
        </member>
        <member name="P:ModApi.IDevice.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
            <value>
            The device model.
            </value>
        </member>
        <member name="P:ModApi.IDevice.DeviceName">
            <summary>
            Gets the name of the device.
            </summary>
            <value>
            The name of the device.
            </value>
        </member>
        <member name="P:ModApi.IDevice.Dpi">
            <summary>
            Gets the dpi of the screen.
            </summary>
            <value>
            The dpi of the screen.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsAndroidBuild">
            <summary>
            Gets a value indicating whether the application is built for the Android platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the Android platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsAndroidRuntime">
            <summary>
            Gets a value indicating whether the application is running in an Android runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an Android runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsDebugBuild">
            <summary>
            Gets a value indicating whether the application is a debug build.
            </summary>
            <value>
              <c>true</c> if the application is a debug build; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsEducationBuild">
            <summary>
            Gets a value indicating whether the application is an education build.
            </summary>
            <value>
            <c>true</c> if the application is an education build; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsIosBuild">
            <summary>
            Gets a value indicating whether the application is built for the IOS platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the IOS platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsIosRuntime">
            <summary>
            Gets a value indicating whether the application is running in an IOS runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an IOS runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsLinuxBuild">
            <summary>
            Gets a value indicating whether the application is built for the Linux platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the Linux platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsLinuxRuntime">
            <summary>
            Gets a value indicating whether the application is running in a Linux runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a Linux runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsMobileBuild">
            <summary>
            Gets a value indicating whether the application is built for a mobile platform.
            </summary>
            <value>
              <c>true</c> if the application is built for a mobile platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsMobileRuntime">
            <summary>
            Gets a value indicating whether the application is running in a mobile runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a mobile runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsMultiTouchEnabled">
            <summary>
            Gets a value indicating whether the device supports multi-touch inputs.
            </summary>
            <value>
            <c>true</c> if the device supports multi-touch inputs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsOsxBuild">
            <summary>
            Gets a value indicating whether the application is built for the OSX platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the OSX platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsOsxRuntime">
            <summary>
            Gets a value indicating whether the application is running in an OSX runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in an OSX runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsTablet">
            <summary>
            Gets a value indicating whether the device is a handheld device with a screen diagonal that is larger than 7".
            </summary>
            <value>
              <c>true</c> if this is a handheld device with a screen diagonal that is larger than 7"; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsTouchEnabled">
            <summary>
            Gets a value indicating whether the device supports touch inputs.
            </summary>
            <value>
            <c>true</c> if the device supports touch inputs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsUnityEditor">
            <summary>
            Gets a value indicating whether the application is running within the Unity editor.
            </summary>
            <value>
            <c>true</c> if the application is running within the Unity editor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsWindowsBuild">
            <summary>
            Gets a value indicating whether the application is built for the Windows platform.
            </summary>
            <value>
              <c>true</c> if the application is built for the Windows platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.IDevice.IsWindowsRuntime">
            <summary>
            Gets a value indicating whether the application is running in a Windows runtime environment.
            </summary>
            <value>
            <c>true</c> if the application is running in a Windows runtime environment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.IGame">
            <summary>
            An interface for a manager class containing references to many useful features and functionality for the game.
            </summary>
        </member>
        <member name="P:ModApi.IGame.AudioPlayer">
            <summary>
            Gets the audio player.
            </summary>
            <value>
            The audio player.
            </value>
        </member>
        <member name="P:ModApi.IGame.CelestialDatabase">
            <summary>
            Gets the celestial database.
            </summary>
            <value>
            The celestial database.
            </value>
        </member>
        <member name="P:ModApi.IGame.Designer">
            <summary>
            Gets the designer, or null if the game is not currently in the designer scene.
            </summary>
            <value>
            The designer.
            </value>
        </member>
        <member name="P:ModApi.IGame.Device">
            <summary>
            Gets information about the current device on which the game is running.
            </summary>
            <value>
            Information about the current device on which the game is running.
            </value>
        </member>
        <member name="P:ModApi.IGame.FlightScene">
            <summary>
            Gets the flight scene.
            </summary>
            <value>
            The flight scene.
            </value>
        </member>
        <member name="P:ModApi.IGame.GameState">
            <summary>
            Gets the current game state.
            </summary>
            <value>
            The current game state.
            </value>
        </member>
        <member name="P:ModApi.IGame.Inputs">
            <summary>
            Gets the game inputs.
            </summary>
            <value>
            The game inputs.
            </value>
        </member>
        <member name="P:ModApi.IGame.ModManager">
            <summary>
            Gets the mod manager.
            </summary>
            <value>
            The mod manager.
            </value>
        </member>
        <member name="P:ModApi.IGame.PartStyleManager">
            <summary>
            Gets the part style manager.
            </summary>
            <value>
            The part style manager.
            </value>
        </member>
        <member name="P:ModApi.IGame.PropulsionData">
            <summary>
            Gets the propulsion data.
            </summary>
            <value>
            The propulsion data.
            </value>
        </member>
        <member name="P:ModApi.IGame.QualitySettings">
            <summary>
            Gets the game quality settings.
            </summary>
            <value>
            The game quality settings.
            </value>
        </member>
        <member name="P:ModApi.IGame.ResolutionScale">
            <summary>
            Gets the resolution scale.
            </summary>
            <value>
            The resolution scale.
            </value>
        </member>
        <member name="P:ModApi.IGame.ResourceLoader">
            <summary>
            Gets the resource loader that handles the loading of all resources for the game.
            </summary>
            <value>
            The resource loader that handles the loading of all resources for the game.
            </value>
        </member>
        <member name="P:ModApi.IGame.SceneManager">
            <summary>
            Gets the scene manager.
            </summary>
            <value>
            The scene manager.
            </value>
        </member>
        <member name="P:ModApi.IGame.Settings">
            <summary>
            Gets the application settings.
            </summary>
            <value>
            The application settings.
            </value>
        </member>
        <member name="P:ModApi.IGame.UserInterface">
            <summary>
            Gets the user interface.
            </summary>
            <value>
            The user interface.
            </value>
        </member>
        <member name="P:ModApi.IGame.Version">
            <summary>
            Gets the version number for the game.
            </summary>
            <value>
            The version number for the game.
            </value>
        </member>
        <member name="T:ModApi.IResourceLoader">
            <summary>
            An interface for a resource manager that is used for the loading of all resources.
            </summary>
        </member>
        <member name="M:ModApi.IResourceLoader.InstantiatePrefab(System.String,System.Boolean)">
            <summary>
            Loads the prefab at the specified path and then instantiates and returns it.
            </summary>
            <param name="path">The path of the prefab to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The instantiated prefab at the specified path or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.InstantiatePrefab``1(System.String,System.Boolean)">
            <summary>
            Loads the prefab at the specified path and then instantiates it, returning the specified component.
            </summary>
            <typeparam name="T">The type of the component to return.</typeparam>
            <param name="path">The path of the prefab to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The requested component on the instantiated prefab at the specified path or <c>null</c> if the component could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.Load``1(System.String,System.Boolean)">
            <summary>
            Loads the asset at the specified path.
            </summary>
            <typeparam name="T">The type of the asset to load.</typeparam>
            <param name="path">The path of the asset to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The requested asset or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadAirfoil(System.String)">
            <summary>
            Loads the airfoil with the speficied name.
            </summary>
            <param name="airfoilName">Name of the airfoil.</param>
            <returns>The requested airfoil.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadAll``1(System.String,System.Boolean)">
            <summary>
            Loads all assets in a folder or file at path in a Resources folder.
            </summary>
            <typeparam name="T">The resource type to load.</typeparam>
            <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
            <param name="logErrors">if set to <c>true</c> [log errors].</param>
            <returns>The resources in the folder.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadAsync``1(System.String,System.Boolean)">
            <summary>
            Loads the requested resource asynchronously.
            </summary>
            <typeparam name="T">The type of the requested resource.</typeparam>
            <param name="path">The path of the requested resource.</param>
            <param name="logErrors">If set to <c>true</c>, an error will be logged if the resource could not be found..</param>
            <returns>A wrapper for Unity's asynchronous resource request.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadAudio(System.String,System.Boolean)">
            <summary>
            Loads the audio clip asset at the specified path.
            </summary>
            <param name="path">The path of the asset to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The requested audio clip asset or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadMaterial(System.String,System.Boolean)">
            <summary>
            Loads the material at the specified path.
            </summary>
            <param name="path">The path of the material to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The requested material asset or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadPrefab(System.String,System.Boolean)">
            <summary>
            Loads the prefab (not instantiated) at the specified path.
            </summary>
            <param name="path">The path of the prefab to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The uninstantiated prefab at the specified path or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadScriptableObject``1(System.String,System.Boolean)">
            <summary>
            Loads the scriptable object at the specified path and returns it as the requested type.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="path">The path of the object to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The requested object or <c>null</c> if it could not be found or was not of the expected type.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadText(System.String,System.Boolean)">
            <summary>
            Loads the text asset at the specified path.
            </summary>
            <param name="path">The path of the text asset to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The text requested or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.IResourceLoader.LoadTexture(System.String,System.Boolean)">
            <summary>
            Loads the texture at the specified path.
            </summary>
            <param name="path">The path of the texture to load.</param>
            <param name="logErrors">If set to <c>true</c>, errors will be logged to the console.</param>
            <returns>The requested texture asset or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="T:ModApi.Input.Events.FingerToolMode">
            <summary>
            The available finger tool modes.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.FingerToolMode.None">
            <summary>
            The finger tool currently does not have a mode.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.FingerToolMode.SelectPart">
            <summary>
            The select part mode.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.FingerToolMode.MovePart">
            <summary>
            The move part mode.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.FingerToolMode.ClonePart">
            <summary>
            The clone part mode.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.FingerToolMode.CloneGroup">
            <summary>
            The clone group mode.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.FingerToolMode.DetachPart">
            <summary>
            The detach part mode.
            </summary>
        </member>
        <member name="T:ModApi.Input.Events.InputButton">
            <summary>
            Possible buttons for an input.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.InputButton.Primary">
            <summary>
            The primary input, which is left mouse button or a touch input.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.InputButton.Secondary">
            <summary>
            The secondary button (i.e. right mouse button).
            </summary>
        </member>
        <member name="T:ModApi.Input.Events.InputState">
            <summary>
            Possible states for an input.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.InputState.Begin">
            <summary>
            The mouse button (or touch) was pressed.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.InputState.Updated">
            <summary>
            The mouse button (or touch) has been updated.
            </summary>
        </member>
        <member name="F:ModApi.Input.Events.InputState.End">
            <summary>
            The mouse button (or touch) has been released.
            </summary>
        </member>
        <member name="T:ModApi.Input.Events.ClickEventArgs">
            <summary>
            Input class for describing a single mouse click or touch input.
            </summary>
        </member>
        <member name="M:ModApi.Input.Events.ClickEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Input.Events.ClickEventArgs"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.DeltaPosition">
            <summary>
            Gets or sets the delta position.
            </summary>
            <value>
            The delta position.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.DragDistanceSinceBegin">
            <summary>
            Gets or sets the drag distance since begin.
            </summary>
            <value>
            The drag distance since begin.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.FingerToolMode">
            <summary>
            Gets or sets the current state of the finger tool.
            </summary>
            <value>
            The finger tool mode.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.InputButton">
            <summary>
            Gets or sets the button.
            </summary>
            <value>
            The button.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.InputState">
            <summary>
            Gets or sets the state of the click.
            </summary>
            <value>
            The state of the click.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.ClickEventArgs.Ray">
            <summary>
            Gets or sets the ray from the screen position into world space.
            </summary>
            <value>
            The ray.
            </value>
        </member>
        <member name="T:ModApi.Input.Events.PinchEventArgs">
            <summary>
            Event args for pinching the screen on a device that supports multi-touch.
            </summary>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.Distance">
            <summary>
            Gets or sets the distance between the two touch inputs.
            </summary>
            <value>
            The gap.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.DistanceDelta">
            <summary>
            Gets or sets the change in distance since the last pinch event.
            </summary>
            <value>
            The delta distance.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.InputState">
            <summary>
            Gets or sets the state of the input.
            </summary>
            <value>
            The state of the input.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.Midpoint">
            <summary>
            Gets or sets the midpoint of the two touch inputs.
            </summary>
            <value>
            The midpoint of the two touch inputs.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.MidpointDelta">
            <summary>
            Gets or sets the delta between the midpoint of the two touch inputs since the last frame.
            </summary>
            <value>
            The midpoint of the two touch inputs.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.StartDistance">
            <summary>
            Gets or sets the distance between the two touch inputs when the pinch started.
            </summary>
            <value>
            The start distance.
            </value>
        </member>
        <member name="P:ModApi.Input.Events.PinchEventArgs.StartMidpoint">
            <summary>
            Gets or sets the midpoint of the two touch inputs when the pinch started.
            pinch started.
            </summary>
            <value>
            The start midpoint.
            </value>
        </member>
        <member name="T:ModApi.Input.Events.ScrollEventArgs">
            <summary>
            Event args for a mouse scroll.
            </summary>
        </member>
        <member name="P:ModApi.Input.Events.ScrollEventArgs.Delta">
            <summary>
            Gets or sets the delta.
            </summary>
            <value>
            The delta.
            </value>
        </member>
        <member name="T:ModApi.Input.IGameInput">
            <summary>
            An interface for a game input.
            </summary>
        </member>
        <member name="P:ModApi.Input.IGameInput.DescriptiveName">
            <summary>
            Gets the descriptive name of the input.
            </summary>
            <value>
            The descriptive name of the input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInput.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Input.IGameInput"/> is enabled.
            A disabled input can still return valid values. Code can ignore the fact that an
            input has been disabled and continue to use it anyway.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInput.Id">
            <summary>
            Gets the identifier for the input.
            </summary>
            <value>
            The identifier for the input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInput.IsBound">
            <summary>
            Gets or sets a value indicating whether this GameInput is bound to at least one input.
            </summary>
            <value>
              <c>true</c> if this GameInput is bound to at least one input; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetAxis">
            <summary>
            Gets the value of the input axis.
            </summary>
            <returns>The value of the input axis.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetAxisIfEnabled">
            <summary>
            Gets the value of the input axis or zero if the input has been disabled.
            </summary>
            <returns>The value of the input axis or zero if the input has been disabled.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButton">
            <summary>
            Gets the state of the input button.
            </summary>
            <returns><c>true</c> if the input button is active; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonDown">
            <summary>
            Gets a value indicating if the input button was activated this frame.
            </summary>
            <returns><c>true</c> if the input button was activated this frame; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonDownIfEnabled">
            <summary>
            Gets a value indicating if the input button was activated this frame. This returns <c>false</c> if the input is disabled.
            </summary>
            <returns><c>true</c> if the input button was activated this frame and the input is enabled; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonIfEnabled">
            <summary>
            Gets the state of the input button.
            </summary>
            <returns><c>true</c> if the input button is active and enabled; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonRepeating">
            <summary>
            Gets the repeating button state of this input button.
            </summary>
            <returns>
              <c>true</c> when immediately pressed, then <c>false</c> until the input behavior repeat delay has elapsed, then <c>true</c> for a 1-frame duration repeating at the interval of the specified in the InputBehavior assigned to the input button.
            </returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonTimePressed">
            <summary>
            Gets the length of time in seconds that the input button has been continuously held down.
            Returns 0 if the button is not currently pressed.
            </summary>
            <returns>The duration of the button hold.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonUp">
            <summary>
            Gets a value indicating if the input button was deactivated this frame.
            </summary>
            <returns><c>true</c> if the input button was deactivated this frame; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetButtonUpIfEnabled">
            <summary>
            Gets a value indicating if the input button was deactivated this frame. This returns <c>false</c> if the input is disabled.
            </summary>
            <returns><c>true</c> if the input button was deactivated this frame and the input is enabled; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetControllerBindingText">
            <summary>
            Gets the controller binding text.
            </summary>
            <returns>The controller binding text or <c>null</c> if no binding exists.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetFirstBindingText">
            <summary>
            Gets the first binding text that can be found.
            </summary>
            <returns>The first binding text that can be found or <c>null</c> if no bindings can be found.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetKeyboardPrimaryBindingText">
            <summary>
            Gets the keyboard primary binding text.
            </summary>
            <returns>The keyboard primary binding text or <c>null</c> if no binding exists.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetKeyboardPrimaryNegativeBindingText">
            <summary>
            Gets the text of the primary keyboard binding for this input on the negative pole.
            </summary>
            <returns>The text of the primary keyboard binding for this input on the negative pole.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetKeyboardPrimaryPositiveBindingText">
            <summary>
            Gets the text of the primary keyboard binding for this input on the positive pole.
            </summary>
            <returns>The text of the primary keyboard binding for this input on the positive pole.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetKeyboardSecondaryBindingText">
            <summary>
            Gets the keyboard secondary binding text.
            </summary>
            <returns>The keyboard secondary binding text or <c>null</c> if no binding exists.</returns>
        </member>
        <member name="M:ModApi.Input.IGameInput.GetMouseBindingText">
            <summary>
            Gets the mouse binding text.
            </summary>
            <returns>The mouse binding text or <c>null</c> if no binding exists.</returns>
        </member>
        <member name="T:ModApi.Input.IGameInputs">
            <summary>
            An interface that provides a collection of game inputs to interact with.
            </summary>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivateCameraLook">
            <summary>
            Gets the activate camera look input.
            </summary>
            <value>
            The activate camera look input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivateStage">
            <summary>
            Gets the activate stage input.
            </summary>
            <value>
            The activate stage input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup1">
            <summary>
            Gets the activation group 1 input.
            </summary>
            <value>
            The activation group 1 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup10">
            <summary>
            Gets the activation group 10 input.
            </summary>
            <value>
            The activation group 10 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup2">
            <summary>
            Gets the activation group 2 input.
            </summary>
            <value>
            The activation group 2 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup3">
            <summary>
            Gets the activation group 3 input.
            </summary>
            <value>
            The activation group 3 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup4">
            <summary>
            Gets the activation group 4 input.
            </summary>
            <value>
            The activation group 4 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup5">
            <summary>
            Gets the activation group 5 input.
            </summary>
            <value>
            The activation group 5 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup6">
            <summary>
            Gets the activation group 6 input.
            </summary>
            <value>
            The activation group 6 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup7">
            <summary>
            Gets the activation group 7 input.
            </summary>
            <value>
            The activation group 7 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup8">
            <summary>
            Gets the activation group 8 input.
            </summary>
            <value>
            The activation group 8 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ActivationGroup9">
            <summary>
            Gets the activation group 9 input.
            </summary>
            <value>
            The activation group 9 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.AllInputs">
            <summary>
            Gets all of the game inputs.
            </summary>
            <value>
            All of the game inputs.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Brake">
            <summary>
            Gets the brake input.
            </summary>
            <value>
            The brake input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.CameraLookLeftRight">
            <summary>
            Gets the camera look left/right input.
            </summary>
            <value>
            The camera look left/right input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.CameraLookUpDown">
            <summary>
            Gets the camera look up/down input.
            </summary>
            <value>
            The camera look up/down input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.CameraLookZoom">
            <summary>
            Gets the camera zoom in/out input.
            </summary>
            <value>
            The camera zoom in/out input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.CommandPodNext">
            <summary>
            Gets the command pod next input.
            </summary>
            <value>
            The command pod next input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.CommandPodPrevious">
            <summary>
            Gets the command pod previous input.
            </summary>
            <value>
            The command pod previous input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.DeleteSelectedPart">
            <summary>
            Gets the delete selected part input.
            </summary>
            <value>
            The delete selected part input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.DeveloperConsole">
            <summary>
            Gets the toggle developer console input.
            </summary>
            <value>
            The toggle developer console input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaEnableJetpackMovement">
            <summary>
            Gets the eva jetpack movement.
            </summary>
            <value>
            The eva jetpack movement.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaJump">
            <summary>
            Gets the eva jump.
            </summary>
            <value>
            The eva jump.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaMoveFwdAft">
            <summary>
            Gets the fwd/aft movement input.
            </summary>
            <value>
            The fwd/aft movement input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaMoveUpDown">
            <summary>
            Gets the up/down movement input.   Only used w/jetpacks.
            </summary>
            <value>
            The up/down movement input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaPitch">
            <summary>
            Gets the eva pitch.  Only used w/jetpacks.
            </summary>
            <value>
            The eva pitch.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaRoll">
            <summary>
            Gets the eva roll.  Only used w/jetpacks.
            </summary>
            <value>
            The eva roll.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaShootTether">
            <summary>
            Gets the eva shoot tether input.
            </summary>
            <value>
            The eva shoot tether input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaStrafe">
            <summary>
            Gets the eva strafe.
            </summary>
            <value>
            The eva strafe.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaTetherLength">
            <summary>
            Gets the value indicating how much to extend/retract the astronaut's tether by.
            </summary>
            <value>
            The value indicating how much to extend/retract the astronaut's tether by.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaToggleWalk">
            <summary>
            Gets the EVA toggle walk input.
            </summary>
            <value>
            The EVA toggle walk input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.EvaTurn">
            <summary>
            Gets the eva turn.
            </summary>
            <value>
            The eva turn.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.FullThrottle">
            <summary>
            Gets the full throttle input.
            </summary>
            <value>
            The full throttle input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.GroupParts">
            <summary>
            Gets the group parts input.
            </summary>
            <value>
            The group parts input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.KillThrottle">
            <summary>
            Gets the kill throttle input.
            </summary>
            <value>
            The kill throttle input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.LoadContentFromClipboardUrl">
            <summary>
            Gets the load content from clipboard URL input.
            </summary>
            <value>
            The load content from clipboard URL input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.LockHeading">
            <summary>
            Gets the lock heading input.
            </summary>
            <value>
            The lock heading input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.LockPrograde">
            <summary>
            Gets the lock prograde input.
            </summary>
            <value>
            The lock prograde input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.LockRetrograde">
            <summary>
            Gets the lock retrograde input.
            </summary>
            <value>
            The lock retrograde input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.LockTarget">
            <summary>
            Gets the lock target input.
            </summary>
            <value>
            The lock target input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.MapSetTargetModifier">
            <summary>
            Gets the map set target modifier.
            </summary>
            <value>
            The map set target modifier.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.MirrorSelectedPart">
            <summary>
            Gets the mirror selected part input.
            </summary>
            <value>
            The mirror selected part input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NextCameraMode">
            <summary>
            Gets the next camera mode input.
            </summary>
            <value>
            The next camera mode input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NudgePartNegativeX">
            <summary>
            Gets the nudge part negative x input.
            </summary>
            <value>
            The nudge part negative x input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NudgePartNegativeY">
            <summary>
            Gets the nudge part negative y input.
            </summary>
            <value>
            The nudge part negative y input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NudgePartNegativeZ">
            <summary>
            Gets the nudge part negative z input.
            </summary>
            <value>
            The nudge part negative z input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NudgePartPositiveX">
            <summary>
            Gets the nudge part positive x input.
            </summary>
            <value>
            The nudge part positive x input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NudgePartPositiveY">
            <summary>
            Gets the nudge part positive y input.
            </summary>
            <value>
            The nudge part positive y input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.NudgePartPositiveZ">
            <summary>
            Gets the nudge part positive z input.
            </summary>
            <value>
            The nudge part positive z input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.OpenPhotoLibrary">
            <summary>
            Gets the open photo library input
            </summary>
            <value>
            The open photo library input
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.OpenSymmetryTool">
            <summary>
            Gets the open symmetry tool input.
            </summary>
            <value>
            The open symmetry tool input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Pause">
            <summary>
            Gets the pause input.
            </summary>
            <value>
            The pause input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Pitch">
            <summary>
            Gets the pitch.
            </summary>
            <value>
            The pitch input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.PreventPartSelection">
            <summary>
            Gets the prevent part selection input.
            </summary>
            <value>
            The prevent part selection input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.PreviousCameraMode">
            <summary>
            Gets the previous camera input.
            </summary>
            <value>
            The previous camera input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.QuickLoad">
            <summary>
            Gets the quick load input.
            </summary>
            <value>
            The quick load input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.QuickSave">
            <summary>
            Gets the quick save input.
            </summary>
            <value>
            The quick save input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ReattachSelectedPart">
            <summary>
            Gets the reattach selected part input.
            </summary>
            <value>
            The reattach selected part input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Redo">
            <summary>
            Gets the redo input.
            </summary>
            <value>
            The redo input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Roll">
            <summary>
            Gets the roll input.
            </summary>
            <value>
            The roll input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.RotateNegativeX">
            <summary>
            Gets the rotate negative x input.
            </summary>
            <value>
            The rotate negative x input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.RotateNegativeY">
            <summary>
            Gets the rotate negative y input.
            </summary>
            <value>
            The rotate negative y input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.RotateNegativeZ">
            <summary>
            Gets the rotate negative z input.
            </summary>
            <value>
            The rotate negative z input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.RotatePositiveX">
            <summary>
            Gets the rotate positive x input.
            </summary>
            <value>
            The rotate positive x input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.RotatePositiveY">
            <summary>
            Gets the rotate positive y input.
            </summary>
            <value>
            The rotate positive y input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.RotatePositiveZ">
            <summary>
            Gets the rotate positive z input.
            </summary>
            <value>
            The rotate positive z input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SaveDesign">
            <summary>
            Gets the save design input.
            </summary>
            <value>
            The save design input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SaveLaunchLocation">
            <summary>
            Gets the save launch location input.
            </summary>
            <value>
            The save launch location input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SelectFuselageShapeTool">
            <summary>
            Gets the select fuselage shape tool input.
            </summary>
            <value>
            The select fuselage tool shape input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SelectMovePartTool">
            <summary>
            Gets the select move part tool input.
            </summary>
            <value>
            The select move part tool input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SelectNudgeTool">
            <summary>
            Gets the select nudge tool input.
            </summary>
            <value>
            The select nudge tool input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SelectPaintTool">
            <summary>
            Gets the select paint tool input.
            </summary>
            <value>
            The select paint tool input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SelectRotateTool">
            <summary>
            Gets the select rotate tool input.
            </summary>
            <value>
            The select rotate tool input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Slider1">
            <summary>
            Gets the slider 1 input.
            </summary>
            <value>
            The slider 1 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Slider2">
            <summary>
            Gets the slider 2 input.
            </summary>
            <value>
            The slider 2 input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SymmetryModeNext">
            <summary>
            Gets the symmetry mode next input.
            </summary>
            <value>
            The symmetry mode next input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.SymmetryModePrevious">
            <summary>
            Gets the symmetry mode previous input.
            </summary>
            <value>
            The symmetry mode previous input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Throttle">
            <summary>
            Gets the throttle input.
            </summary>
            <value>
            The throttle input
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.TimeWarpDecrease">
            <summary>
            Gets the time warp decrease input.
            </summary>
            <value>
            The time warp decrease input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.TimeWarpIncrease">
            <summary>
            Gets the time warp increase input.
            </summary>
            <value>
            The time warp increase input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ToggleHideUI">
            <summary>
            Gets the toggle hide UI input.
            </summary>
            <value>
            The toggle hide UI input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ToggleMapView">
            <summary>
            Gets the toggle map view input.
            </summary>
            <value>
            The toggle map view input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ToggleMusic">
            <summary>
            Gets the toggle music input.
            </summary>
            <value>
            The toggle music input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ToggleNavSphere">
            <summary>
            Gets the toggle nav sphere input.
            </summary>
            <value>
            The toggle nav sphere input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.TogglePartConnectionsPanel">
            <summary>
            Gets the toggle part connections panel input.
            </summary>
            <value>
            The toggle part connections panel input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.TogglePerformanceAnalyzer">
            <summary>
            Gets the toggle performance analyzer input.
            </summary>
            <value>
            The toggle performance analyzer input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ToggleTranslationMode">
            <summary>
            Gets the toggle translation mode input.
            </summary>
            <value>
            The toggle translation mode input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.ToolModifier">
            <summary>
            Gets the tool modifier input.
            </summary>
            <value>
            The tool modifier input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.UICancel">
            <summary>
            Gets the UI cancel input.
            </summary>
            <value>
            The UI cancel input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.UIHorizontal">
            <summary>
            Gets the UI horizontal input.
            </summary>
            <value>
            The UI horizontal input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.UISubmit">
            <summary>
            Gets the UI submit input.
            </summary>
            <value>
            The UI submit input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.UIVertical">
            <summary>
            Gets the UI vertical input.
            </summary>
            <value>
            The UI vertical input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Undo">
            <summary>
            Gets the undo input.
            </summary>
            <value>
            The undo input.
            </value>
        </member>
        <member name="P:ModApi.Input.IGameInputs.Yaw">
            <summary>
            Gets the yaw.
            </summary>
            <value>
            The yaw input.
            </value>
        </member>
        <member name="M:ModApi.Input.IGameInputs.FindById(System.String)">
            <summary>
            Looks up an input by its id.
            </summary>
            <param name="id">The input identifier.</param>
            <returns>The input with the specified id or <c>null</c> if a matching input could not be found.</returns>
        </member>
        <member name="T:ModApi.Ioc.IContext">
            <summary>
            ioc contexts can be any object type (not just IContext).  However, it may be helpful to use this interface as a base to identify that a
            class is intended to be used as an IOC context (see ICraftContext).
            </summary>
        </member>
        <member name="T:ModApi.Ioc.IIocContainer">
            <summary>
            Interface for accessing an IoC container.
            </summary>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.Register``1(``0)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.Register``1(``0,ModApi.Ioc.IContext)">
            <summary>
            Registers the specified instance and associates it with the specified context.
            </summary>
            <typeparam name="T">The type of the instance to be registered.</typeparam>
            <param name="instance">The instance to be registered.</param>
            <param name="context">The context to associate the instance with.</param>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.RegisterContext(ModApi.Ioc.IContext)">
            <summary>
            Registers the object as a valid ioc context.  Allows callers to register instances associated with the given context.
            </summary>
            <remarks>
            To free resources, <see cref="M:ModApi.Ioc.IIocContainer.UnregisterContext(ModApi.Ioc.IContext)" /> should be called when the context is no-longer valid.
            </remarks>
            <param name="context">The context to register.</param>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.Resolve``1(ModApi.Ioc.IContext,System.Boolean)">
            <summary>
            Returns the instance registered for the specified type and context.
            </summary>
            <typeparam name="T">The type to retrieve the registered instance of.</typeparam>
            <param name="context">The context the instance returned should be associated with.</param>
            <param name="suppressWarnings">If set to <c>true</c> warnings will be suppressed.</param>
            <returns>
            The resolved instance of the given type.
            </returns>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.Resolve``1(System.Boolean)">
            <summary>
            Returns the instance registered for the specified type.
            </summary>
            <typeparam name="T">The type to retrieve the registered instance of.</typeparam>
            <param name="suppressWarnings">If set to <c>true</c> warnings will be suppressed.</param>
            <returns>
            The resolved instance of the given type.
            </returns>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.UnRegister``1">
            <summary>
            Un-registers the instance for the type.
            </summary>
            <typeparam name="T">The type to unregister.</typeparam>
        </member>
        <member name="M:ModApi.Ioc.IIocContainer.UnregisterContext(ModApi.Ioc.IContext)">
            <summary>
            Unregisters all items associated with the specified context.
            </summary>
            <param name="context">The context to remove registered items for.</param>
        </member>
        <member name="T:ModApi.Ioc.IocContainer">
            <summary>
            Very basic IOC container functionality.
            </summary>
        </member>
        <member name="F:ModApi.Ioc.IocContainer._contextContainer">
            <summary>
            The registered items associated with a context.
            </summary>
        </member>
        <member name="F:ModApi.Ioc.IocContainer._singletonContainer">
            <summary>
            The context-less references container.
            </summary>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.Register``1(``0,ModApi.Ioc.IContext)">
            <summary>
            Registers the specified instance and associates it with the specified context.
            </summary>
            <typeparam name="T">The type of the instance to be registered.</typeparam>
            <param name="instance">The instance to be registered.</param>
            <param name="context">The context to associate the instance with.</param>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.Register``1(``0)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.RegisterContext(ModApi.Ioc.IContext)">
            <summary>
            Registers the object as a valid ioc context.  Allows callers to register instances associated with the given context.
            </summary>
            <param name="context">The context to register.</param>
            <remarks>
            To free resources, <see cref="M:ModApi.Ioc.IIocContainer.UnregisterContext(ModApi.Ioc.IContext)" /> should be called when the context is no-longer valid.
            </remarks>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.Resolve``1(System.Boolean)">
            <summary>
            Returns the instance registered for the specified type.
            </summary>
            <typeparam name="T">The type to retrieve the registered instance of.</typeparam>
            <param name="suppressWarnings">If set to <c>true</c> warnings will be suppressed.</param>
            <returns>
            The resolved instance of the given type.
            </returns>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.Resolve``1(ModApi.Ioc.IContext,System.Boolean)">
            <summary>
            Returns the instance registered for the specified type and context.
            </summary>
            <typeparam name="T">The type to retrieve the registered instance of.</typeparam>
            <param name="context">The context the instance returned should be associated with.</param>
            <param name="suppressWarnings">If set to <c>true</c> warnings will be suppressed.</param>
            <returns>
            The resolved instance of the given type.
            </returns>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.UnRegister``1">
            <summary>
            Un-registers the instance for the type.
            </summary>
            <typeparam name="T">The type to unregister.</typeparam>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.UnRegister``1(ModApi.Ioc.IContext)">
            <summary>
            Un-registers any registered instance of the given type associated with the specied context.
            </summary>
            <typeparam name="T">The type to unregister.</typeparam>
            <param name="context">The context to unregister the specified type from.</param>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.UnregisterContext(ModApi.Ioc.IContext)">
            <summary>
            Unregisters all items associated with the specified context.
            </summary>
            <param name="context">The context to remove registered items for.</param>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.GetContainerForContext(System.Object,System.Boolean)">
            <summary>
            Gets the container associated with the specified context.
            </summary>
            <param name="context">The context which owns the container.</param>
            <param name="suppressWarnings">If set to <c>true</c> warnings will be suppressed.</param>
            <returns>
            The container associated with the specified context.
            </returns>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.Register``1(``0,System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            Registers the specified instance within the specified container.
            </summary>
            <typeparam name="T">The type of the instance being registered.</typeparam>
            <param name="instance">The instance to be registered.</param>
            <param name="container">The container to register the instance within.</param>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.Resolve``1(System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            Resolves the instance of the specified type within the provided container.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <param name="container">The container used to resolve the type.</param>
            <returns>The instance of the type within the provided container.</returns>
        </member>
        <member name="M:ModApi.Ioc.IocContainer.UnRegister``1(System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            Unregisters the instance of the associated type within the provided container.
            </summary>
            <typeparam name="T">The type of instance to unregister.</typeparam>
            <param name="container">The container to remove the instance from.</param>
        </member>
        <member name="T:ModApi.Layers">
            <summary>
            Layers used in the game.
            </summary>
        </member>
        <member name="F:ModApi.Layers.CraftLayer">
            <summary>
            The layer that the craft and its parts use.
            </summary>
        </member>
        <member name="F:ModApi.Layers.IgnoreCraft">
            <summary>
            The ignore craft layer. Objects in this layer will not collide with the craft.
            </summary>
        </member>
        <member name="F:ModApi.Layers.PartPicture">
            <summary>
            The layer used for taking part pictures.
            </summary>
        </member>
        <member name="T:ModApi.Layers.BuiltIn">
            <summary>
            Unity's built-in layers.
            </summary>
        </member>
        <member name="F:ModApi.Layers.BuiltIn.Default">
            <summary>
            The Default layer
            </summary>
        </member>
        <member name="F:ModApi.Layers.BuiltIn.IgnoreRaycast">
            <summary>
            The IgnoreRaycast layer
            </summary>
        </member>
        <member name="F:ModApi.Layers.BuiltIn.TransparentFX">
            <summary>
            The TransparentFX layer
            </summary>
        </member>
        <member name="F:ModApi.Layers.BuiltIn.UI">
            <summary>
            The UI layer
            </summary>
        </member>
        <member name="F:ModApi.Layers.BuiltIn.Water">
            <summary>
            The Water layer
            </summary>
        </member>
        <member name="T:ModApi.Layers.Design">
            <summary>
            Layers only used in the designer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Design.AttachPointLayer">
            <summary>
            The normal attach point layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Design.AttachPointLayerCantReceive">
            <summary>
            The layer for attach points that don't accepting incoming attachments...they require affirmative consent and only attach themselves to something else.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Design.AttachPointLayerSurface">
            <summary>
            The layer for surface attach points. Only used in Designer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Design.GizmosInteractive">
            <summary>
            The layer for items which are part of an interactive gizmo (like fuselage, wing, etc).
            </summary>
        </member>
        <member name="F:ModApi.Layers.Design.GizmosNonInteractive">
            <summary>
            The layer for items which are part of an non-interactive gizmo (like CoM, CoL, etc).  They don't block ray-casts.
            </summary>
        </member>
        <member name="T:ModApi.Layers.Flight">
            <summary>
            Layers only used in flight.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.CraftCollisionNone">
            <summary>
            The craft collision none.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.DockingPort">
            <summary>
            The docking port collider layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.MapView">
            <summary>
            The map view layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.MapViewItem">
            <summary>
            The map view item layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.ScaledSpace">
            <summary>
            The scaled space layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.Terrain">
            <summary>
            The terrain layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.TerrainFeature">
            <summary>
            The terrain feature layer.
            </summary>
        </member>
        <member name="F:ModApi.Layers.Flight.Water">
            <summary>
            The water layer.
            </summary>
        </member>
        <member name="T:ModApi.Levels.Events.LevelCompletedEventArgs">
            <summary>
            Event arguments for events raised when a level is completed.
            </summary>
            <seealso cref="T:ModApi.Levels.Events.LevelEventArgs" />
        </member>
        <member name="M:ModApi.Levels.Events.LevelCompletedEventArgs.#ctor(ModApi.Levels.ILevel,ModApi.Levels.Scores.LevelScore)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Levels.Events.LevelCompletedEventArgs"/> class.
            </summary>
            <param name="level">The level associated with the event.</param>
            <param name="score">The score for the level.</param>
        </member>
        <member name="P:ModApi.Levels.Events.LevelCompletedEventArgs.Score">
            <summary>
            Gets the score for the level.
            </summary>
            <value>
            The score for the level.
            </value>
        </member>
        <member name="T:ModApi.Levels.Events.LevelEventArgs">
            <summary>
            Event arguments for events associated with a level.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Levels.Events.LevelEventArgs.#ctor(ModApi.Levels.ILevel)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Levels.Events.LevelEventArgs"/> class.
            </summary>
            <param name="level">The level associated with the event.</param>
        </member>
        <member name="P:ModApi.Levels.Events.LevelEventArgs.Level">
            <summary>
            Gets the level associated with the event.
            </summary>
            <value>
            The level associated with the event.
            </value>
        </member>
        <member name="T:ModApi.Levels.FuelMonitor">
            <summary>
            Monitors fuel usage in a craft.
            </summary>
        </member>
        <member name="F:ModApi.Levels.FuelMonitor._fuelUsed">
            <summary>
            The fuel used
            </summary>
        </member>
        <member name="F:ModApi.Levels.FuelMonitor._craftScript">
            <summary>
            The craft script.
            </summary>
        </member>
        <member name="M:ModApi.Levels.FuelMonitor.#ctor(ModApi.Craft.ICraftScript)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Levels.FuelMonitor" /> class.
            </summary>
            <param name="craftScript">The craft script.</param>
        </member>
        <member name="P:ModApi.Levels.FuelMonitor.FuelUsed">
            <summary>
            Gets the fuel used.
            </summary>
            <value>
            The fuel used.
            </value>
        </member>
        <member name="P:ModApi.Levels.FuelMonitor.OutOfFuel">
            <summary>
            Gets a value indicating whether the craft is completely out of fuel (except battery power).
            </summary>
            <value>
              <c>true</c> if the craft is completely out of fuel (except battery power); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Levels.FuelMonitor.Update">
            <summary>
            Updates this instance. Should be called every frame to keep information up-to-date.
            </summary>
        </member>
        <member name="M:ModApi.Levels.FuelMonitor.OnFuelUsed(System.Double,ModApi.Craft.Propulsion.FuelType)">
            <summary>
            Called when fuel is used.
            </summary>
            <param name="fuel">The fuel.</param>
            <param name="fuelType">Type of the fuel.</param>
        </member>
        <member name="T:ModApi.Levels.ILevel">
            <summary>
            The interface for a Level.
            </summary>
        </member>
        <member name="E:ModApi.Levels.ILevel.LevelEnded">
            <summary>
            Occurs when the level has ended.
            </summary>
        </member>
        <member name="E:ModApi.Levels.ILevel.LevelFailed">
            <summary>
            Occurs when the level is failed.
            </summary>
        </member>
        <member name="E:ModApi.Levels.ILevel.LevelPassed">
            <summary>
            Occurs when the level is passed.
            </summary>
        </member>
        <member name="P:ModApi.Levels.ILevel.DisplayCraftFuelInDesigner">
            <summary>
            Gets a value indicating whether this level should display craft fuel in the designer.
            </summary>
            <value>
              <c>true</c> if [display craft fuel in designer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.FlightScene">
            <summary>
            Gets the flight scene reference.
            This will be <c>null</c> when not in the flight scene.
            </summary>
            <value>
            The flight scene reference.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.FlightStateDataLoader">
            <summary>
            Gets the flight state data loader, which is responsible for loading the flight
            state data.
            </summary>
            <value>
            The flight state data loader.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.FuelUsed">
            <summary>
            Gets the fuel used by the player craft, in liters.
            </summary>
            <value>
            The fuel used.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.GameObject">
            <summary>
            Gets the game object assocaited with the level.
            </summary>
            <value>
            The game object associated with the level.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.LaunchLocation">
            <summary>
            Gets the launch location used when launching craft.
            This will be <c>null</c> on flight only levels.
            </summary>
            <value>
            The launch location used when launching craft.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.LevelData">
            <summary>
            Gets the level data.
            </summary>
            <value>
            The level data.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.LevelRequirements">
            <summary>
            Gets the level requirements.
            </summary>
            <value>
            The level requirements.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.PlayerCraft">
            <summary>
            Gets the player's craft.
            </summary>
            <value>
            The player's craft.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.Timer">
            <summary>
            Gets the timer.
            </summary>
            <value>
            The timer.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevel.UI">
            <summary>
            Gets the level UI.
            </summary>
            <value>
            The level UI.
            </value>
        </member>
        <member name="M:ModApi.Levels.ILevel.Cleanup">
            <summary>
            Informs the level to do any cleanup necessary before destroying the level.
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevel.GetPersistentMessage">
            <summary>
            Gets the persistent message that is always displayed throughout the duration of the level.
            This is typically used to display the current score for the level.
            </summary>
            <returns>The persistent message that is always displayed throughout the duration of the level.</returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.GetUIXml">
            <summary>
            Gets the UI XML defining the custom level UI for the current scene.
            This returns <c>null</c> if the default UI should be used.
            </summary>
            <returns>The UI XML defining the custom level UI for the current scene.</returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.HasRequiredParts(ModApi.Craft.ICraftScript,System.String@)">
            <summary>
            Determines whether the specified craft has the required parts for this level.
            </summary>
            <param name="craft">The craft.</param>
            <param name="missingPartsMessage">The message displayed if there are required parts missing.</param>
            <returns>
              <c>true</c> if the specified craft has the required parts for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.Initialize(ModApi.Levels.ILevelUI)">
            <summary>
            Initializes the level with the specified level UI.
            </summary>
            <param name="levelUI">The level UI with which to initialize the level.</param>
        </member>
        <member name="M:ModApi.Levels.ILevel.Initialize(ModApi.Levels.ILevelData,System.Func{ModApi.State.IFlightStateData},ModApi.Scenes.ISceneManager)">
            <summary>
            Initializes the level.
            </summary>
            <param name="levelData">The level data.</param>
            <param name="flightStateDataLoader">The flight state data loader.</param>
            <param name="sceneManager">The scene manager.</param>
        </member>
        <member name="M:ModApi.Levels.ILevel.IsLegalCraft(ModApi.Craft.ICraftScript)">
            <summary>
            Determines whether the specified craft is allowed for this level.
            </summary>
            <param name="craft">The craft to check.</param>
            <returns>
              <c>true</c> if the specified craft is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.IsLegalCraftPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Determines whether the specified craft part is allowed for this level.
            </summary>
            <param name="part">The craft part to check.</param>
            <returns>
              <c>true</c> if the specified craft part is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.IsLevelScene(System.String)">
            <summary>
            Determines whether the specified scene is part of the level.
            </summary>
            <param name="sceneName">The name of the scene.</param>
            <returns>
              <c>true</c> if the specified scene is part of the level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.IsPartTypeAllowed(ModApi.Craft.Parts.PartType)">
            <summary>
            Determines whether the specified part type is allowed for this level.
            </summary>
            <param name="partType">The part type to check.</param>
            <returns>
              <c>true</c> if the specified part type is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.ILevel.OnFixedUpdate">
            <summary>
            This function is called every fixed framerate frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevel.OnLateUpdate">
            <summary>
            LateUpdate is called every frame after all Update functions have been called if the behavior is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevel.OnUpdate">
            <summary>
            Update is called every frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevel.OverrideFlightSceneLoadParameters(ModApi.Scenes.Parameters.FlightSceneLoadParameters)">
            <summary>
            Allows the level to override the flight scene load parameters.
            </summary>
            <param name="loadParameters">The flight scene load parameters.</param>
        </member>
        <member name="T:ModApi.Levels.ILevelData">
            <summary>
            An interface for a class containing level related data.
            </summary>
        </member>
        <member name="P:ModApi.Levels.ILevelData.Category">
            <summary>
            Gets the level category.
            </summary>
            <value>
            The level category.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.Description">
            <summary>
            Gets the level description.
            </summary>
            <value>
            The level description.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.DisplayName">
            <summary>
            Gets the level display name.
            </summary>
            <value>
            The level display name.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.FlightStateId">
            <summary>
            Gets the flight state identifier.
            </summary>
            <value>
            The flight state identifier.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.Icon">
            <summary>
            Gets the icon.
            </summary>
            <value>
            The icon.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.Id">
            <summary>
            Gets the unique level identifier.
            </summary>
            <value>
            The unique level identifier.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.LaunchCraftId">
            <summary>
            Gets the identifier for the craft design to launch for this level for Flight level types. If this
            is null then the player will use a craft that is already included inside the flight state.
            </summary>
            <value>
            The launch craft identifier.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.LevelType">
            <summary>
            Gets the type of the level.
            </summary>
            <value>
            The type of the level.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.ScoreData">
            <summary>
            Gets the score data for the level.
            </summary>
            <value>
            The score data for the level.
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelData.Script">
            <summary>
            Gets the type name of the script that manages the level.
            </summary>
            <value>
            The type name of the script that manages the level.
            </value>
        </member>
        <member name="T:ModApi.Levels.ILevelManager">
            <summary>
            An inteface for the level manager.
            </summary>
        </member>
        <member name="P:ModApi.Levels.ILevelManager.CurrentLevel">
            <summary>
            Gets the current level (if any).
            </summary>
            <value>
            The current level (if any).
            </value>
        </member>
        <member name="P:ModApi.Levels.ILevelManager.Levels">
            <summary>
            Gets the levels that have been loaded by the game.
            </summary>
            <value>
            The levels that have been loaded by the game.
            </value>
        </member>
        <member name="M:ModApi.Levels.ILevelManager.EndLevel">
            <summary>
            Ends the current level (if any).
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevelManager.StartLevel(ModApi.Levels.ILevelData)">
            <summary>
            Starts the specified level.
            </summary>
            <param name="level">The level to start.</param>
            <returns><c>true</c> if the level is successfully starting; <c>false</c> if an error occurred.</returns>
        </member>
        <member name="T:ModApi.Levels.ILevelUI">
            <summary>
            An interface for interacting with a level UI.
            </summary>
            <seealso cref="T:ModApi.Ui.IXmlLayoutController" />
        </member>
        <member name="P:ModApi.Levels.ILevelUI.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Levels.ILevelUI"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Levels.ILevelUI.OnSceneLoaded">
            <summary>
            Called when the scene has finished loading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevelUI.OnSceneUnloading">
            <summary>
            Called when the scene is unloading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.ILevelUI.ShowMessage(System.String,System.Single)">
            <summary>
            Shows a message in the current scene's UI that will fade out after a specified duration.
            </summary>
            <param name="message">The message to show.</param>
            <param name="duration">The duration of the message.</param>
        </member>
        <member name="T:ModApi.Levels.Level">
            <summary>
            The base class for all levels in the game.
            </summary>
            <seealso cref="T:ModApi.Levels.ILevel" />
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Levels.Level._allowedPartTypes">
            <summary>
            The allowed part types.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._disallowedPartTypes">
            <summary>
            The disallowed part types.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._disposed">
            <summary>
            A value indicating whether or not this instance has been disposed (cleanup has been called).
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._firstStageActivated">
            <summary>
            The first stage activated flag.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._fuelMonitor">
            <summary>
            The fuel monitor.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._levelRequirements">
            <summary>
            The level requirements.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._sceneManager">
            <summary>
            The scene manager.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Level._timer">
            <summary>
            The level timer.
            </summary>
        </member>
        <member name="E:ModApi.Levels.Level.ModApi#Levels#ILevel#LevelEnded">
            <summary>
            Occurs when the level has ended.
            </summary>
        </member>
        <member name="E:ModApi.Levels.Level.ModApi#Levels#ILevel#LevelFailed">
            <summary>
            Occurs when the level is failed.
            </summary>
        </member>
        <member name="E:ModApi.Levels.Level.ModApi#Levels#ILevel#LevelPassed">
            <summary>
            Occurs when the level is passed.
            </summary>
        </member>
        <member name="E:ModApi.Levels.Level._levelEnded">
            <summary>
            Occurs when the level has ended.
            </summary>
        </member>
        <member name="E:ModApi.Levels.Level._levelFailed">
            <summary>
            Occurs when the level is failed.
            </summary>
        </member>
        <member name="E:ModApi.Levels.Level._levelPassed">
            <summary>
            Occurs when the level is passed.
            </summary>
        </member>
        <member name="P:ModApi.Levels.Level.AllRequirementsPassed">
            <summary>
            Gets a value indicating whether all requirements have been passed.
            </summary>
            <value>
              <c>true</c> if all requirements are passed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.AnyRequirementFailed">
            <summary>
            Gets a value indicating whether any requirement is currently failed.
            </summary>
            <value>
              <c>true</c> if any requirement is failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.ContinueFlightUpdateEventsAfterCompletion">
            <summary>
            Gets or sets a value indicating whether flight update events (Update, FixedUpdate, LateUpdate)
            continue to be called  after the level is completed. The default value is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if flight update events continue to be called after the level is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.DisplayCraftFuelInDesigner">
            <summary>
            Gets or sets a value indicating whether this level should display craft fuel in the designer.
            </summary>
            <value>
              <c>true</c> if [display craft fuel in designer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.FlightScene">
            <summary>
            Gets the flight scene reference.
            This will be <c>null</c> when not in the flight scene.
            </summary>
            <value>
            The flight scene reference.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.FlightStateDataLoader">
            <summary>
            Gets the flight state data loader, which is responsible for loading the flight
            state data.
            </summary>
            <value>
            The flight state data loader.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.FuelUsed">
            <summary>
            Gets the fuel used by the player craft, in liters.
            </summary>
            <value>
            The fuel used.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.ModApi#Levels#ILevel#GameObject">
            <summary>
            Gets the game object assocaited with the level.
            </summary>
            <value>
            The game object associated with the level.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.IsComplete">
            <summary>
            Gets a value indicating whether this level is complete.
            </summary>
            <value>
              <c>true</c> if this level is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.LaunchLocation">
            <summary>
            Gets the launch location used when launching craft.
            This will be <c>null</c> on flight only levels.
            </summary>
            <value>
            The launch location used when launching craft.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.LevelData">
            <summary>
            Gets the level data.
            </summary>
            <value>
            The level data.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.LevelRequirements">
            <summary>
            Gets the level requirements.
            </summary>
            <value>
            The level requirements.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.OutOfFuel">
            <summary>
            Gets a value indicating whether the player craft is completely out of fuel (except battery power).
            </summary>
            <value>
              <c>true</c> if the player craft is completely out of fuel (except battery power); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.PlayerCraft">
            <summary>
            Gets the player's craft.
            </summary>
            <value>
            The player's craft.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.Score">
            <summary>
            Gets or sets the current score for the level.
            </summary>
            <value>
            The current score for the level.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.Timer">
            <summary>
            Gets the level timer.
            </summary>
            <value>
            The level timer.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.UI">
            <summary>
            Gets the level UI.
            </summary>
            <value>
            The level UI.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.CurrentScene">
            <summary>
            Gets the current scene name.
            </summary>
            <value>
            The current scene name.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.DesignerScene">
            <summary>
            Gets the designer scene reference.
            This will be <c>null</c> when not in the designer.
            </summary>
            <value>
            The designer scene reference.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.FailLevelIfCraftDestroyed">
            <summary>
            Gets or sets a value indicating whether the level fails if the player's craft is destroyed.
            </summary>
            <value>
              <c>true</c> if the level fails if the player's craft is destroyed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.FailLevelIfFuelEmpty">
            <summary>
            Gets or sets a value indicating whether the level fails if the player's craft runs out of fuel.
            </summary>
            <value>
              <c>true</c> if the level fails if the player's craft runs out of fuel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.Level.SceneTransitionInProgress">
            <summary>
            Gets a value indicating whether a scene transition is in progress.
            </summary>
            <value>
              <c>true</c> if a scene transition is in progress; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#Cleanup">
            <summary>
            Informs the level to do any cleanup necessary before destroying the level.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.GetPersistentMessage">
            <summary>
            Gets the persistent message that is always displayed throughout the duration of the level.
            This is typically used to display the current score for the level.
            </summary>
            <returns>
            The persistent message that is always displayed throughout the duration of the level.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#GetUIXml">
            <summary>
            Gets the UI XML defining the custom level UI for the current scene.
            This returns <c>null</c> if the default UI should be used.
            </summary>
            <returns>
            The UI XML defining the custom level UI for the current scene.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.HasRequiredParts(ModApi.Craft.ICraftScript,System.String@)">
            <summary>
            Determines whether the specified craft has the required parts for this level.
            </summary>
            <param name="craft">The craft.</param>
            <param name="missingPartsMessage">The message displayed if there are required parts missing.</param>
            <returns>
              <c>true</c> if the specified craft has the required parts for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#Initialize(ModApi.Levels.ILevelData,System.Func{ModApi.State.IFlightStateData},ModApi.Scenes.ISceneManager)">
            <summary>
            Initializes the level.
            </summary>
            <param name="levelData">The level data.</param>
            <param name="flightStateDataLoader">The flight state data loader.</param>
            <param name="sceneManager">The scene manager.</param>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#Initialize(ModApi.Levels.ILevelUI)">
            <summary>
            Initializes the level with the specified level UI.
            </summary>
            <param name="levelUI">The level UI with which to initialize the level.</param>
        </member>
        <member name="M:ModApi.Levels.Level.InitializeRequirements">
            <summary>
            Initializes the requirements for the level.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.IsLegalCraft(ModApi.Craft.ICraftScript)">
            <summary>
            Determines whether the specified craft is allowed for this level.
            </summary>
            <param name="craft">The craft to check.</param>
            <returns>
              <c>true</c> if the specified craft is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.IsLegalCraftPart(ModApi.Craft.Parts.PartData)">
            <summary>
            Determines whether the specified craft part is allowed for this level.
            </summary>
            <param name="part">The craft part to check.</param>
            <returns>
              <c>true</c> if the specified craft part is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.IsLevelScene(System.String)">
            <summary>
            Determines whether the specified scene is part of the level.
            </summary>
            <param name="sceneName">The name of the scene.</param>
            <returns>
              <c>true</c> if the specified scene is part of the level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#IsPartTypeAllowed(ModApi.Craft.Parts.PartType)">
            <summary>
            Determines whether the specified part type is allowed for this level.
            </summary>
            <param name="partType">The part type to check.</param>
            <returns>
              <c>true</c> if the specified part type is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#OnFixedUpdate">
            <summary>
            This function is called every fixed framerate frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#OnLateUpdate">
            <summary>
            LateUpdate is called every frame after all Update functions have been called if the behavior is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#OnUpdate">
            <summary>
            Update is called every frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.ModApi#Levels#ILevel#OverrideFlightSceneLoadParameters(ModApi.Scenes.Parameters.FlightSceneLoadParameters)">
            <summary>
            Allows the level to override the flight scene load parameters.
            </summary>
            <param name="loadParameters">The flight scene load parameters.</param>
        </member>
        <member name="M:ModApi.Levels.Level.AddLevelRequirement(ModApi.Levels.Requirements.ILevelRequirement)">
            <summary>
            Adds the level requirement.
            </summary>
            <param name="levelRequirement">The level requirement.</param>
            <returns>The level requirement, for that sweet fluent API.</returns>
        </member>
        <member name="M:ModApi.Levels.Level.CompleteLevel(System.Boolean,System.Single)">
            <summary>
            Called to inform the game that the user has completed the level.
            This will save the user's score if the level was completed successfully.
            This should show the level complete dialog and raise any necssary events.
            </summary>
            <param name="success">A value indicating if the user successfully completed the level.</param>
            <param name="score">The user's score for the level.</param>
        </member>
        <member name="M:ModApi.Levels.Level.GetDesignerUIXml">
            <summary>
            Gets the UI XML defining the custom level UI for the designer scene.
            This returns <c>null</c> if the default UI should be used.
            </summary>
            <returns>
            The UI XML defining the custom level UI for the designer scene.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.GetFlightUIXml">
            <summary>
            Gets the UI XML defining the custom level UI for the flight scene.
            This returns <c>null</c> if the default UI should be used.
            </summary>
            <returns>
            The UI XML defining the custom level UI for the flight scene.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.IsPartTypeAllowed(ModApi.Craft.Parts.PartType)">
            <summary>
            Determines whether the specified part type is allowed for this level.
            </summary>
            <param name="partType">The part type to check.</param>
            <returns>
              <c>true</c> if the specified part type is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.OnCleanup">
            <summary>
            Called when the level is cleaning up anything that is necessary before the level is destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignFixedUpdate">
            <summary>
            Called every frame during the fixed update cycle when in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignLateUpdate">
            <summary>
            Called every frame during the late update cycle when in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignSceneExit">
            <summary>
            Called when the designer scene is about to exit.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignSceneLoaded">
            <summary>
            Called when the designer scene has been loaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignSceneLoading">
            <summary>
            Called when the designer scene is loading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignSceneReady">
            <summary>
            Called when the designer scene is ready.
            This will be several frames after the scene has loaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignSceneUnloaded">
            <summary>
            Called when the designer scene has been unloaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignSceneUnloading">
            <summary>
            Called when the designer scene is unloading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDesignUpdate">
            <summary>
            Called every frame during the update cycle when in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFirstStageActivated">
            <summary>
            Called when the player activates the first stage of their craft.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFixedUpdate">
            <summary>
            This function is called every fixed framerate frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightFixedUpdate">
            <summary>
            Called every frame during the fixed update cycle when in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightLateUpdate">
            <summary>
            Called every frame during the late update cycle when in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightSceneExit">
            <summary>
            Called when the flight scene is about to exit.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightSceneLoaded">
            <summary>
            Called when the flight scene has been loaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightSceneLoading">
            <summary>
            Called when the flight scene is loading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightSceneReady">
            <summary>
            Called when the flight scene is ready.
            This will be several frames after the scene has loaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightSceneUnloaded">
            <summary>
            Called when the flight scene has been unloaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightSceneUnloading">
            <summary>
            Called when the flight scene is unloading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnFlightUpdate">
            <summary>
            Called every frame during the update cycle when in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnInitialized">
            <summary>
            Called when the level is initialized.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnLateUpdate">
            <summary>
            LateUpdate is called every frame after all Update functions have been called if the behavior is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnLevelFailed(ModApi.Levels.Scores.LevelScore)">
            <summary>
            Called when the user fails to pass the level.
            </summary>
            <param name="score">The user's score for the level.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnLevelPassed(ModApi.Levels.Scores.LevelScore)">
            <summary>
            Called when the user passes the level successfully.
            </summary>
            <param name="score">The user's score for the level.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnLevelUIInitialized">
            <summary>
            Called when the level UI is initialized.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnPlayerCraftChanged(ModApi.Craft.ICraftScript,ModApi.Craft.ICraftScript)">
            <summary>
            Called when the player's craft script changes.
            </summary>
            <param name="previousCraft">The previous craft script.</param>
            <param name="newCraft">The new craft script.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnPlayerCraftDestroyed">
            <summary>
            Called when the player's craft is destroyed in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneLoaded(System.String)">
            <summary>
            Called when a scene has been loaded.
            </summary>
            <param name="scene">The name of the scene.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneLoading(System.String)">
            <summary>
            Called when a scene is loading.
            </summary>
            <param name="scene">The name of the scene.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneTransitionCompleted(System.String,System.String)">
            <summary>
            Called when a scene transition has completed.
            </summary>
            <param name="fromScene">The scene from which the game is transitioning.</param>
            <param name="toScene">The scene to which the game is transitioning.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneTransitionStarted(System.String,System.String)">
            <summary>
            Called when a scene transition has started.
            </summary>
            <param name="fromScene">The scene from which the game is transitioning.</param>
            <param name="toScene">The scene to which the game is transitioning.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneUnloaded(System.String)">
            <summary>
            Called when a scene has been unloaded.
            </summary>
            <param name="scene">The name of the scene.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneUnloading(System.String)">
            <summary>
            Called when a scene is unloading.
            </summary>
            <param name="scene">The name of the scene.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnUpdate">
            <summary>
            Update is called every frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.OverrideFlightSceneLoadParameters(ModApi.Scenes.Parameters.FlightSceneLoadParameters)">
            <summary>
            Allows the level to override the flight scene load parameters.
            </summary>
            <param name="loadParameters">The flight scene load parameters.</param>
        </member>
        <member name="M:ModApi.Levels.Level.InvokeSceneAction(System.String,System.Action,System.Action)">
            <summary>
            Invokes the flight scene action if the specified scene name is the flight scene.
            Invokes the design scene action if the specified scene name is the design scene.
            </summary>
            <param name="scene">The name of the scene which determines which action to invoke.</param>
            <param name="flightSceneAction">The flight scene action.</param>
            <param name="designerSceneAction">The designer scene action.</param>
        </member>
        <member name="M:ModApi.Levels.Level.InvokeSceneFunction``1(System.String,System.Func{``0},System.Func{``0})">
            <summary>
            Invokes the flight scene function if the specified scene name is the flight scene.
            Invokes the design scene function if the specified scene name is the design scene.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="scene">The name of the scene which determines which action to invoke.</param>
            <param name="flightSceneFunction">The flight scene function.</param>
            <param name="designerSceneFunction">The designer scene function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:ModApi.Levels.Level.InvokeSceneFunction``2(System.String,System.Func{``0,``1},System.Func{``0,``1},``0)">
            <summary>
            Invokes the flight scene function if the specified scene name is the flight scene.
            Invokes the design scene function if the specified scene name is the design scene.
            </summary>
            <typeparam name="T1">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="scene">The name of the scene which determines which action to invoke.</param>
            <param name="flightSceneFunction">The flight scene function.</param>
            <param name="designerSceneFunction">The designer scene function.</param>
            <param name="value">The value to be passed to the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:ModApi.Levels.Level.DesignerSceneCraftLoaded">
            <summary>
            Called when a craft is loaded in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignFixedUpdate">
            <summary>
            Called every frame during the fixed update cycle when in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignLateUpdate">
            <summary>
            Called every frame during the late update cycle when in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignSceneLoaded">
            <summary>
            Called when the design scene is loaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignSceneLoading">
            <summary>
            Called when the design scene is loading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignSceneUnloaded">
            <summary>
            Called when the design scene is unloaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignSceneUnloading">
            <summary>
            Called when the design scene is unloading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.DesignUpdate">
            <summary>
            Called every frame during the update cycle when in the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightFixedUpdate">
            <summary>
            Called every frame during the fixed update cycle when in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightLateUpdate">
            <summary>
            Called every frame during the late update cycle when in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightSceneCraftChanged(ModApi.Craft.ICraftNode)">
            <summary>
            Called when the player craft node changes in the flight scene.
            </summary>
            <param name="craftNode">The craft node.</param>
        </member>
        <member name="M:ModApi.Levels.Level.FlightSceneLoaded">
            <summary>
            Called when the flight scene is loaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightSceneLoading">
            <summary>
            Called when the flight scene is loading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightSceneUnloaded">
            <summary>
            Called when the flight scene is unloaded.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightSceneUnloading">
            <summary>
            Called when the flight scene is unloading.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.FlightUpdate">
            <summary>
            Called every frame during the update cycle when in the flight scene.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Level.IsPartTypeAllowedWithCachedLookup(ModApi.Craft.Parts.PartType)">
            <summary>
            Determines whether the specified part type is allowed for this level.
            This will first check its own cached values if they are available.
            </summary>
            <param name="partType">The part type to check.</param>
            <returns>
              <c>true</c> if the specified part type is allowed for this level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneLoaded(System.Object,ModApi.Scenes.Events.SceneEventArgs)">
            <summary>
            Called when a scene has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Scenes.Events.SceneEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneLoading(System.Object,ModApi.Scenes.Events.SceneEventArgs)">
            <summary>
            Called when a scene is loading.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Scenes.Events.SceneEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneTransitionCompleted(System.Object,ModApi.Scenes.Events.SceneTransitionEventArgs)">
            <summary>
            Called when a scene transition has completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Scenes.Events.SceneTransitionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneTransitionStarted(System.Object,ModApi.Scenes.Events.SceneTransitionEventArgs)">
            <summary>
            Called when a scene transition has started.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Scenes.Events.SceneTransitionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneUnloaded(System.Object,ModApi.Scenes.Events.SceneEventArgs)">
            <summary>
            Called when a scene has been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Scenes.Events.SceneEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Levels.Level.OnSceneUnloading(System.Object,ModApi.Scenes.Events.SceneEventArgs)">
            <summary>
            Called when a scene is unloading.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Scenes.Events.SceneEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Levels.Level.PlayerCraftDestroyed(ModApi.Flight.Sim.INode)">
            <summary>
            Called when the player's craft is destroyed in the flight scene.
            </summary>
            <param name="node">The node of the player's craft.</param>
        </member>
        <member name="T:ModApi.Levels.LevelTimer">
            <summary>
            A simple timer class used to record level time.
            </summary>
        </member>
        <member name="F:ModApi.Levels.LevelTimer._seconds">
            <summary>
            The recorded number of seconds since the timer started.
            </summary>
        </member>
        <member name="M:ModApi.Levels.LevelTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Levels.LevelTimer"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Levels.LevelTimer.Elapsed">
            <summary>
            Gets the elapsed timespan recorded by the timer.
            </summary>
            <returns>The elapsed timespan recorded by the timer.</returns>
        </member>
        <member name="P:ModApi.Levels.LevelTimer.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds recorded by the timer.
            </summary>
            <returns>The elapsed milliseconds recorded by the timer.</returns>
        </member>
        <member name="P:ModApi.Levels.LevelTimer.ElapsedSeconds">
            <summary>
            Gets the elapsed seconds recorded by the timer.
            </summary>
            <returns>The elapsed seconds recorded by the timer.</returns>
        </member>
        <member name="P:ModApi.Levels.LevelTimer.IsRunning">
            <summary>
            Gets a value indicating whether this timer is running.
            </summary>
            <value>
              <c>true</c> if this timer is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Levels.LevelTimer.UseUnscaledTime">
            <summary>
            Gets a value indicating whether unscaled time is used by this timer.
            </summary>
            <value>
              <c>true</c> if unscaled time is used by this timer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Levels.LevelTimer.Reset">
            <summary>
            Stops and resets this timer.
            </summary>
        </member>
        <member name="M:ModApi.Levels.LevelTimer.Start(System.Boolean)">
            <summary>
            Starts the timer.
            </summary>
            <param name="useUnscaledTime">If set to <c>true</c>, unscaled time will be used by the timer.</param>
        </member>
        <member name="M:ModApi.Levels.LevelTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:ModApi.Levels.LevelTimer.Update">
            <summary>
            Updates the timer. This should be called every Unity update cycle.
            </summary>
        </member>
        <member name="T:ModApi.Levels.LevelType">
            <summary>
            An enumeration defining the different types of levels.
            </summary>
        </member>
        <member name="F:ModApi.Levels.LevelType.Unknown">
            <summary>
            An unknown level type.
            </summary>
        </member>
        <member name="F:ModApi.Levels.LevelType.Design">
            <summary>
            A level type in which the player must design a craft.
            </summary>
        </member>
        <member name="F:ModApi.Levels.LevelType.Flight">
            <summary>
            A level type in which the player must control a craft provided by the game.
            </summary>
        </member>
        <member name="T:ModApi.Levels.Requirements.LevelRequirementStatus">
            <summary>
            Available statuses for a level requirement.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Requirements.LevelRequirementStatus.Incomplete">
            <summary>
            Requirement is not complete.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Requirements.LevelRequirementStatus.Pass">
            <summary>
            The player has currently passed the requirement
            </summary>
        </member>
        <member name="F:ModApi.Levels.Requirements.LevelRequirementStatus.Fail">
            <summary>
            The player has currently failed the requirement
            </summary>
        </member>
        <member name="T:ModApi.Levels.Requirements.LevelRequirementVisibilityType">
            <summary>
            Available view types for a level requirement.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Requirements.LevelRequirementVisibilityType.Visible">
            <summary>
            Always visible.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Requirements.LevelRequirementVisibilityType.Hidden">
            <summary>
            Always hidden.
            </summary>
        </member>
        <member name="F:ModApi.Levels.Requirements.LevelRequirementVisibilityType.HiddenWhenPassed">
            <summary>
            Hidden while passed, but visible if not.
            </summary>
        </member>
        <member name="T:ModApi.Levels.Requirements.ILevelRequirement">
            <summary>
            Interface for a level requirement.
            </summary>
        </member>
        <member name="P:ModApi.Levels.Requirements.ILevelRequirement.Dependencies">
            <summary>
            Gets or sets the requirements that must be passing before this requirement will evaluate.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="P:ModApi.Levels.Requirements.ILevelRequirement.DisplayValue">
            <summary>
            Gets the current display value, or null if the requirement does not need to
            display its current value in the UI.
            </summary>
            <value>
            The display value.
            </value>
        </member>
        <member name="P:ModApi.Levels.Requirements.ILevelRequirement.Level">
            <summary>
            Gets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:ModApi.Levels.Requirements.ILevelRequirement.Name">
            <summary>
            Gets or sets the name of the requirement.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Levels.Requirements.ILevelRequirement.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:ModApi.Levels.Requirements.ILevelRequirement.VisibilityType">
            <summary>
            Gets or sets the type of the view.
            </summary>
            <value>
            The type of the view.
            </value>
        </member>
        <member name="M:ModApi.Levels.Requirements.ILevelRequirement.AddDependency(ModApi.Levels.Requirements.ILevelRequirement)">
            <summary>
            Adds the dependency (a requirement that must pass before this requirement will evaluate).
            </summary>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:ModApi.Levels.Requirements.ILevelRequirement.FlightUpdate">
            <summary>
            Called every frame during the update cycle when in the flight scene.
            </summary>
        </member>
        <member name="T:ModApi.Levels.Scores.ILevelScoreComparer">
            <summary>
            An interface for a comparer used to sort level scores.
            </summary>
            <seealso cref="T:System.Collections.Generic.IComparer`1" />
        </member>
        <member name="T:ModApi.Levels.Scores.ILevelScoreData">
            <summary>
            A interface for a class that handles level score related data.
            </summary>
        </member>
        <member name="P:ModApi.Levels.Scores.ILevelScoreData.Comparer">
            <summary>
            Gets the score comparer used for sorting scores from best to worst.
            </summary>
            <value>
            The score comparer used for sorting scores from best to worst.
            </value>
        </member>
        <member name="P:ModApi.Levels.Scores.ILevelScoreData.Formatter">
            <summary>
            Gets the formatter used for formatting scores into user friendly text strings.
            </summary>
            <value>
            The formatter used for formatting scores into user friendly text strings.
            </value>
        </member>
        <member name="P:ModApi.Levels.Scores.ILevelScoreData.LevelData">
            <summary>
            Gets the level data associated with this score data.
            </summary>
            <value>
            The level data associated with this score data.
            </value>
        </member>
        <member name="P:ModApi.Levels.Scores.ILevelScoreData.Scores">
            <summary>
            Gets the collection of scores (sorted best to worst).
            </summary>
            <value>
            The collection of scores (sorted best to worst).
            </value>
        </member>
        <member name="P:ModApi.Levels.Scores.ILevelScoreData.ShowTopScores">
            <summary>
            Gets a value indicating whether the top scores for the level should be shown in the UI.
            </summary>
            <value>
              <c>true</c> if the top scores for the level should be shown in the UI; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Levels.Scores.ILevelScoreFormatter">
            <summary>
            A class that handles the formatting of a level's score.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Scores.ILevelScoreFormatter.FormatScore(ModApi.Levels.Scores.LevelScore)">
            <summary>
            Formats the level score in to a display string for the score.
            </summary>
            <param name="score">The score to format.</param>
            <returns>The display string of the score.</returns>
        </member>
        <member name="T:ModApi.Levels.Scores.LevelScore">
            <summary>
            A user score entry associated with a level.
            </summary>
        </member>
        <member name="M:ModApi.Levels.Scores.LevelScore.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Levels.Scores.LevelScore"/> class.
            </summary>
            <param name="score">The score value.</param>
            <param name="dateTime">The local date and time that the score was obtained.</param>
        </member>
        <member name="P:ModApi.Levels.Scores.LevelScore.DateTime">
            <summary>
            Gets the local date and time that the score was obtained.
            </summary>
            <value>
            The local date and time that the score was obtained.
            </value>
        </member>
        <member name="P:ModApi.Levels.Scores.LevelScore.Score">
            <summary>
            Gets the score value.
            </summary>
            <value>
            The score value.
            </value>
        </member>
        <member name="T:ModApi.Masks">
            <summary>
            Flight scene layer masks.
            </summary>
        </member>
        <member name="M:ModApi.Masks.IsLayerInMask(System.Int32,System.Int32)">
            <summary>
            Checks if the layer is in the specified mask.
            </summary>
            <param name="layer">The layer to check if it is in the mask.</param>
            <param name="mask">The mask .</param>
            <returns><c>true</c> if the layer is in the specified mask, otherwise; <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Masks.Flight">
            <summary>
            Flight scene layer masks.
            </summary>
        </member>
        <member name="F:ModApi.Masks.Flight.TerrainAndFeatures">
            <summary>
            The Terrain and TerrainFeatures layer masks, combined.
            </summary>
        </member>
        <member name="T:ModApi.Math.FastAvg">
            <summary>
            Provides a relatively fast method of tracking a running average of X float values, and automatically removing the oldest from the average when maxValues has been reached.
            </summary>
        </member>
        <member name="F:ModApi.Math.FastAvg._avg">
            <summary>
            The average
            </summary>
        </member>
        <member name="F:ModApi.Math.FastAvg._count">
            <summary>
            The count
            </summary>
        </member>
        <member name="F:ModApi.Math.FastAvg._maxValues">
            <summary>
            The maximum values
            </summary>
        </member>
        <member name="F:ModApi.Math.FastAvg._sum">
            <summary>
            The sum
            </summary>
        </member>
        <member name="F:ModApi.Math.FastAvg._valueQueue">
            <summary>
            The value queue
            </summary>
        </member>
        <member name="M:ModApi.Math.FastAvg.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Math.FastAvg"/> class.
            </summary>
            <param name="maxValues">The maximum values to average.  When greater than this number of values are added, the oldest one is removed from the running average.</param>
        </member>
        <member name="P:ModApi.Math.FastAvg.Avg">
            <summary>
            Gets the average of all the values which have been added.
            </summary>
            <value>
            The average of all the values which have been added.
            </value>
        </member>
        <member name="P:ModApi.Math.FastAvg.Count">
            <summary>
            Gets the number of values currently being averaged.
            </summary>
            <value>
            The number of items currently being averaged.
            </value>
        </member>
        <member name="P:ModApi.Math.FastAvg.Sum">
            <summary>
            Gets the sum of the values which have been added.
            </summary>
            <value>
            The sum of the values which have been added.
            </value>
        </member>
        <member name="M:ModApi.Math.FastAvg.AddValue(System.Single)">
            <summary>
            Adds the value to the running average.  If needed, it will remove the oldest value from the average if > maxValues items have been added.
            </summary>
            <param name="value">The value to add to the running average.</param>
            <returns>The average after the new value is added.</returns>
        </member>
        <member name="T:ModApi.Math.MathUtils">
            <summary>
            Math utility methods.
            </summary>
        </member>
        <member name="M:ModApi.Math.MathUtils.CalculateBurnDuration(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the burn duration necessary to accelerate to the specified change in velocity.
            </summary>
            <param name="thrust">The thrust.</param>
            <param name="mass">The mass.</param>
            <param name="deltaV">The delta velocity.</param>
            <returns>The burn duration in seconds.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.CalculateDeltaV(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the delta v in m/s.
            </summary>
            <param name="startingMass">The starting mass in kg.</param>
            <param name="endingMass">The ending mass in kg.</param>
            <param name="isp">The specific impulse of the engines in seconds.</param>
            <returns>The Delta-V in m/s.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.CalculateIsp(System.Single,System.Single)">
            <summary>
            Calculates the specific impulse.
            </summary>
            <param name="thrust">The thrust in Newtons.</param>
            <param name="massFlowRate">The mass flow rate in kg/s.</param>
            <returns>The specific impulse (Isp) in seconds.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.ComputeRotationContributions(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Calculates which rotational axes (x=pitch, y=yaw, z=roll) a force at the supplied position and in the given direction would primarily contribute to, relative to the CoM.  1 = max amount, 0 = none.
            </summary>
            <param name="forcePos">The position where the force is applied, in world coordinates.</param>
            <param name="forceDir">The normalized force direction, in world coordinates.</param>
            <param name="axisOrientedCom">Center of mass transform which is positioned at the CoM and aligned with the desired control orientation from
            the pilot's perspective of: forward=roll, up=yaw, and right=pitch.</param>
            <param name="invertContributions">If set to <c>true</c> the contribution values will be inverted.</param>
            <param name="singleAxis">If set to <c>true</c> only the greatest contributing axis will be used.</param>
            <param name="contributionThreshold">Threshold which must be achieved to register a contribution for a particular axis.  Lower number means contribution will be more easily registered.</param>
            <returns>
            Vector3 containing -1, 0, or 1 for each axis (x=Pitch, y=Yaw, z=Roll), identifying which control inputs would be
            primarily contributed to if a force were applied at the given position/direction.
            </returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.ComputeTranslationContributions(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Calculates which translational axes (x=right/left, y=up/down, z=forward/back) a force at the supplied position and in the given direction would primarily contribute to, relative to the CoM.  1 = max amount, 0 = none.
            </summary>
            <param name="forcePos">The position where the force is applied, in world coordinates.</param>
            <param name="forceDir">The normalized force direction, in world coordinates.</param>
            <param name="axisOrientedCom">Center of mass transform which is positioned at the CoM and aligned with the desired control orientation from
            the pilot's perspective of: forward=toward the front of the pilot, up=toward pilot's head, and right=toward the pilot's right.</param>
            <param name="invertContributions">If set to <c>true</c> the contribution values will be inverted.</param>
            <param name="singleAxis">If set to <c>true</c> only the greatest contributing axis will be used.</param>
            <param name="contributionThreshold">Threshold which must be achieved to register a contribution for a particular axis.  Lower number means contribution will be more easily registered.</param>
            <returns>
            Vector3 containing -1, 0, or 1 for each axis (x=right/left, y=up/down, z=forward/back), identifying which control inputs would be
            primarily contributed to if a force were applied at the given position/direction.
            </returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.ConvertAngularToLinearVelocity(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Converts an angular velocity to a linear velocity, sampled at the given point.
            As long as all the inputs are relative to the same reference (world or local) it doesn't matter, linear velocity returned will match.
            </summary>
            <param name="angularVelocity">The angular velocity.</param>
            <param name="centerOfRotation">The center of rotation.</param>
            <param name="linearVelocitySamplePoint">The position to sample linear velocity from.</param>
            <returns>The linear velocity of a point at the provided sample point.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.GetFirstExternalRayIntersectionWithSphere(UnityEngine.Vector3d,System.Double,UnityEngine.Ray3d,UnityEngine.Vector3d@)">
            <summary>
            Gets the first point of a ray intersecting a sphere. This only works for ray origins external to the sphere.
            This will return <c>true</c> if the ray origin is outside of the sphere and the ray intersects the sphere.
            http://kylehalladay.com/blog/tutorial/math/2013/12/24/Ray-Sphere-Intersection.html
            </summary>
            <param name="spherePosition">The sphere position.</param>
            <param name="sphereRadius">The sphere radius.</param>
            <param name="ray">The ray.</param>
            <param name="result">The first intersection point if the function returns <c>true</c>.</param>
            <returns><c>true</c> if the ray origin is outside of the sphere and the ray intersects the sphere, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.GetIntersectionWithRadius(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Gets the intersection with radius.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="r">The r.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if there is an intersection; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.GetIntersectionWithSphere(UnityEngine.Vector3d,System.Double,UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@)">
            <summary>
            Gets the point on the outside of the sphere which intersects with intersectingRay. The ray's origin must be inside the sphere.
            </summary>
            <param name="sphereCenter">The center of the sphere.</param>
            <param name="sphereRadius">The radius of the sphere.</param>
            <param name="pointInsideSphere">A point inside the sphere.</param>
            <param name="directionToOutside">A direction outside the sphere, pointing to the desired intersection point.</param>
            <param name="intersectionPoint">The intersection point.</param>
            <returns>
            <c>true</c> if an intersection is found, otherwise <f>false</f>.
            </returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.LatitudeLongitudeToSphereUnitVector(System.Double,System.Double)">
            <summary>
            Converts the latitude and longitude to a unit vector in a sphere.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The sphere unit vector representing the specified latitude and longitude.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.LimitAngle0to2PI(System.Double)">
            <summary>
            Limits the angle between 0 and 2 * PI.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The requested angle.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.LimitAngleNegPItoPI(System.Double)">
            <summary>
            Limits the angle between -PI and PI.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The angle between -PI and PI.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.PercentBetween(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Calculates the percent that the value is between the min/max values.
            </summary>
            <param name="val">The value to determine its percentage between the min/max.</param>
            <param name="min">The minimum value of the range (0 percent).</param>
            <param name="max">The maximum value of the range (100 percent).</param>
            <param name="clamp">if set to <c>true</c> the output will be clamped between 0...1, othewise it will not.</param>
            <returns>
            The percent that the value is between the min/max values.
            </returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.RotatePointAroundOrigin(UnityEngine.Vector2d,System.Double)">
            <summary>
            Rotates the point around the origin by the specified angle.
            </summary>
            <param name="point">The point.</param>
            <param name="angle">The angle.</param>
            <returns>
            The rotated point.
            </returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.RoundToGrid(UnityEngine.Vector3,System.Single)">
            <summary>
            Rounds a vector to a certain "grid" size.
            </summary>
            <param name="vector">The vector to round.</param>
            <param name="gridSize">Size of the grid.</param>
            <returns>The vector rounded to a certain "grid" size.</returns>
        </member>
        <member name="M:ModApi.Math.MathUtils.RoundToGrid(System.Single,System.Single)">
            <summary>
            Rounds a number to a certain "grid" size.
            If the gridSize is zero, then number will be returned.
            </summary>
            <param name="number">The number.</param>
            <param name="gridSize">Size of the grid.</param>
            <returns>The number rounded to a certain "grid" size.</returns>
        </member>
        <member name="T:ModApi.Math.Polar2d">
            <summary>
            Polar coordinate for 2D.
            </summary>
        </member>
        <member name="M:ModApi.Math.Polar2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Math.Polar2d"/> struct.
            </summary>
            <param name="angle">The angle.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:ModApi.Math.Polar2d.#ctor(UnityEngine.Vector2d)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Math.Polar2d"/> struct from a Cartesian coordinates.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="P:ModApi.Math.Polar2d.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
            <value>
            The angle.
            </value>
        </member>
        <member name="P:ModApi.Math.Polar2d.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="M:ModApi.Math.Polar2d.ToVector2d">
            <summary>
            Converts polar coordinates to Cartesian and returns a Vector2d.
            </summary>
            <returns>The Cartesian coordinates.</returns>
        </member>
        <member name="T:ModApi.Math.Units">
            <summary>
            Provides methods to convert between metric and imperial unit systems.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.FeetToMeters">
            <summary>
            The feet to meters conversion.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.FuelMassInKgPerLiter">
            <summary>
            The conversion constant going from liters to KG of fuel.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.KilogramsToPounds">
            <summary>
            The conversion constant going from kilograms to pounds.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.MetersPerSecondToMilesPerHour">
            <summary>
            Constant to convert from m/s to mph.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.MetersToFeet">
            <summary>
            The meters to feet conversion.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.MetersToMiles">
            <summary>
            The meters to miles conversion.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.PoundsToKilograms">
            <summary>
            The conversion constant going from pounds to kilograms.
            </summary>
        </member>
        <member name="M:ModApi.Math.Units.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Math.Units"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Math.Units.UnitPrecisionMode">
            <summary>
            Enumeration of available modes of precision for methods that support precision.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.UnitPrecisionMode.Normal">
            <summary>
            The normal precision mode.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.UnitPrecisionMode.High">
            <summary>
            The high precision mode.
            </summary>
        </member>
        <member name="T:ModApi.Math.Units.UnitSystem">
            <summary>
            The unit systems.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.UnitSystem.Metric">
            <summary>
            The metric system.
            </summary>
        </member>
        <member name="F:ModApi.Math.Units.UnitSystem.Imperial">
            <summary>
            The imperial system.
            </summary>
        </member>
        <member name="P:ModApi.Math.Units.CurrentUnitSystem">
            <summary>
            Gets or sets the current unit system.
            </summary>
            <value>
            The current unit system.
            </value>
        </member>
        <member name="P:ModApi.Math.Units.MetersOrFeetStringLower">
            <summary>
            Gets the lower case string of 'meters' or 'feet' depending on the current unit system.
            </summary>
            <value>
            The lower case string of 'meters' or 'feet' depending on the current unit system.
            </value>
        </member>
        <member name="P:ModApi.Math.Units.MetersOrFeetStringUpper">
            <summary>
            Gets the upper case string of 'Meters' or 'Feet' depending on the current unit system.
            </summary>
            <value>
            The upper case string of 'Meters' or 'Feet' depending on the current unit system.
            </value>
        </member>
        <member name="M:ModApi.Math.Units.GetAccelerationString(System.Single)">
            <summary>
            Gets the acceleration string.
            </summary>
            <param name="acceleration">The acceleration in m/s^2.</param>
            <returns>The acceleration string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetAngleString(System.Single,System.Int32)">
            <summary>
            Gets the angle string.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns>The angle string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetAngularVelocityString(System.Single)">
            <summary>
            Gets the angular velocity string.
            </summary>
            <param name="v">The velocity in degrees per second.</param>
            <returns>The angular velocity string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetDensityString(System.Single)">
            <summary>
            Gets the density string.
            </summary>
            <param name="density">The density in kg/m^3.</param>
            <returns>The air density string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetDistanceString(System.Single)">
            <summary>
            Gets the distance string.
            </summary>
            <param name="distanceInMeters">The distance in meters.</param>
            <returns>The distance as a string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetEnergyString(System.Single)">
            <summary>
            Gets the energy string.
            </summary>
            <param name="energy">The energy in Joules.</param>
            <returns>The energy string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetForceString(System.Single)">
            <summary>
            Gets the force string.
            </summary>
            <param name="forceInScaledNewtons">The force in scaled newtons.</param>
            <returns>The force string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetIspString(System.Single)">
            <summary>
            Gets the Isp string.
            </summary>
            <param name="isp">The isp in seconds.</param>
            <returns>
            The Isp string
            </returns>
        </member>
        <member name="M:ModApi.Math.Units.GetMassFlowRateString(System.Single)">
            <summary>
            Gets the mass flow rate string.
            </summary>
            <param name="currentMassFlowRate">The current mass flow rate.</param>
            <returns>The mass flow rate string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetMassString(System.Single)">
            <summary>
            Gets the mass string.
            </summary>
            <param name="massInScaledKg">The mass in scaled kg.</param>
            <returns>The mass string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetMemoryString(System.Int64)">
            <summary>
            Gets the memory string.
            </summary>
            <param name="size">The size.</param>
            <returns>The string representing a nicely formatted memory size.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetPercentageString(System.Single)">
            <summary>
            Gets the percentage string
            </summary>
            <param name="percentage">The percentage from 0 to 1.</param>
            <returns>
            The percentage string.
            </returns>
        </member>
        <member name="M:ModApi.Math.Units.GetPercentageString(System.Single,System.Single)">
            <summary>
            Gets the percentage string of value divided by total.
            </summary>
            <param name="value">The current value.</param>
            <param name="total">The total.</param>
            <returns>The percentage string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetPowerString(System.Single)">
            <summary>
            Gets the power string.
            </summary>
            <param name="power">The power in Watts.</param>
            <returns>The power string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetPressureString(System.Single)">
            <summary>
            Gets the pressure string.
            </summary>
            <param name="pressure">The pressure in Pascals.</param>
            <returns>The pressure string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetPriceString(System.Int64)">
            <summary>
            Gets the price string.
            </summary>
            <param name="price">The price in dollars.</param>
            <returns>The price string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetRatioString(System.Single,System.Single)">
            <summary>
            Gets the ratio string.
            </summary>
            <param name="num">The numerator.</param>
            <param name="den">The denominator.</param>
            <returns>
            The ratio as a string.
            </returns>
        </member>
        <member name="M:ModApi.Math.Units.GetRatioString(System.Single)">
            <summary>
            Gets the ratio string.
            </summary>
            <param name="ratio">The ratio.</param>
            <returns>
            The ratio as a string.
            </returns>
        </member>
        <member name="M:ModApi.Math.Units.GetRelativeTimeString(System.Double)">
            <summary>
            Gets the relative time string.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns>The time string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetStopwatchTimeString(System.Double)">
            <summary>
            Gets the stopwatch time string (days:hh:mm:ss.xxx format).
            </summary>
            <param name="seconds">The seconds.</param>
            <returns>The time string in stopwatch format (days:hh:mm:ss.xxx)</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetTemperatureString(System.Single)">
            <summary>
            Gets the temperature string.
            </summary>
            <param name="temperatureInKelvin">The temperature in Kelvin.</param>
            <returns>The temperature string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.GetVelocityString(System.Single,ModApi.Math.Units.UnitPrecisionMode)">
            <summary>
            Gets the velocity string.
            </summary>
            <param name="v">The velocity in m/s.</param>
            <param name="precision">The precision mode.</param>
            <returns>
            The velocity string.
            </returns>
        </member>
        <member name="M:ModApi.Math.Units.GetVolumeString(System.Single)">
            <summary>
            Gets the volume string.
            </summary>
            <param name="volumeInLiters">The fuel in liters.</param>
            <returns>The volume string.</returns>
        </member>
        <member name="M:ModApi.Math.Units.IsFinite(System.Double)">
            <summary>
            Determines whether the specified value is finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is finite; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ModApi.Mods.AddModRequirementDelegate">
            <summary>
            A delegate used for registering a required mod.
            </summary>
            <param name="requiredMod">The mod that is required.</param>
            <param name="requiresCodeExecution">A value indicating if the mod requires code execution in order to function.</param>
        </member>
        <member name="T:ModApi.Mods.GameMod">
            <summary>
            The base class for a singleton object representing a mod that is instantiated and initialize when the mod is loaded.
            </summary>
        </member>
        <member name="M:ModApi.Mods.GameMod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.GameMod"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Mods.GameMod.IsModRequiredForCelestialBody(ModApi.Planet.PlanetDataScript)">
            <summary>
            Determines whether this mod is required to be installed and enabled
            in order for the game to be able to properly load and use this celestial body.
            Implementing this method is not required for custom planet modifiers
            as they will automatically cause the mod to be considered required for the celestial body.
            </summary>
            <param name="celestialBody">The celestial body data.</param>
            <returns><c>true</c> if the mod is required for the specified celestial body; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Mods.GameMod.IsModRequiredForCraft(ModApi.Craft.CraftData)">
            <summary>
            Determines whether this mod is required to be installed and enabled
            in order for the game to be able to properly load and use this craft.
            Implementing this method is not required for custom parts and part modifiers
            as they will automatically cause the mod to be considered required for the craft.
            </summary>
            <param name="craft">The craft data.</param>
            <returns><c>true</c> if the mod is required for the specified craft; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Mods.GameMod.IsModRequiredForFlightState(ModApi.State.IFlightStateData)">
            <summary>
            Determines whether this mod is required to be installed and enabled
            in order for the game to be able to properly load and use this flight state.
            Flights states with modded crafts will automatically consider the crafts' required mods as required for the flight state.
            Implementing this should only be necessary if the mod somehow affects the flight state itself, not just modding crafts.
            </summary>
            <param name="flightState">The flight state data.</param>
            <returns><c>true</c> if the mod is required for the specified flight state; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Mods.GameMod.IsModRequiredForPlanetarySystem(ModApi.Planet.SolarSystemDataScript)">
            <summary>
            Determines whether this mod is required to be installed and enabled
            in order for the game to be able to properly load and use this planetary system.
            Implementing this method is not required for custom planet modifiers
            as they will automatically cause the mod to be considered required for the celestial body.
            </summary>
            <param name="planetarySystem">The planetary system data.</param>
            <returns><c>true</c> if the mod is required for the specified planetary system; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Mods.IModManager">
            <summary>
            An interface for the mod manager.
            </summary>
        </member>
        <member name="P:ModApi.Mods.IModManager.GameMods">
            <summary>
            Gets the collection of all game mod objects that have been initialized.
            </summary>
            <value>
            The collection of all game mod objects that have been initialized.
            </value>
        </member>
        <member name="P:ModApi.Mods.IModManager.KnownMods">
            <summary>
            Gets the mods known, but not necessarily loaded, by the system.
            </summary>
            <value>
            The mods known, but not necessarily loaded, by the system.
            </value>
        </member>
        <member name="P:ModApi.Mods.IModManager.LoadedMods">
            <summary>
            Gets the mods that have been loaded.
            </summary>
            <value>
            The mods that have been loaded
            </value>
        </member>
        <member name="P:ModApi.Mods.IModManager.SupportsCodeExecution">
            <summary>
            Gets a value indicating whether the current platform/build supports code execution from mods.
            </summary>
            <value>
              <c>true</c> if the current platform/build supports code execution from mods; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Mods.IModManager.GetModAssemblies">
            <summary>
            Gets all of the currently loaded mod assemblies.
            </summary>
            <returns>All of the currently loaded mod assemblies.</returns>
        </member>
        <member name="T:ModApi.Mods.ModRequirementType">
            <summary>
            An enumeration defining the different types of mod requirements.
            </summary>
        </member>
        <member name="F:ModApi.Mods.ModRequirementType.None">
            <summary>
            A value indicating that there is no mod requirement.
            </summary>
        </member>
        <member name="F:ModApi.Mods.ModRequirementType.Restricted">
            <summary>
            A value indicating that a mod is required but it can run in a restricted build (no code execution is required).
            </summary>
        </member>
        <member name="F:ModApi.Mods.ModRequirementType.Full">
            <summary>
            A value indicating that a mod is required and it must run in an unrestricted build (code execution is required).
            </summary>
        </member>
        <member name="T:ModApi.Mods.RequiredMod">
            <summary>
            A class representing information about a mod requirement for a specific feature, such as a modded part.
            </summary>
        </member>
        <member name="M:ModApi.Mods.RequiredMod.#ctor(Jundroo.ModTools.ModInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredMod"/> class.
            </summary>
            <param name="mod">The mod that is required.</param>
            <param name="requiresCodeExecution">If set to <c>true</c>, code execution from the mod is a requirement.</param>
        </member>
        <member name="P:ModApi.Mods.RequiredMod.Mod">
            <summary>
            Gets or sets the mod that is required.
            </summary>
            <value>
            The mod that is required.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredMod.RequiresCodeExecution">
            <summary>
            Gets or sets a value indicating whether code execution from the mod is a requirement.
            </summary>
            <value>
              <c>true</c> if code execution from the mod is a requirement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Mods.RequiredModData">
            <summary>
            A class containing data related to a mod requirement.
            </summary>
        </member>
        <member name="F:ModApi.Mods.RequiredModData.XmlElementName">
            <summary>
            The XML root element name used when generating the XML data.
            </summary>
        </member>
        <member name="M:ModApi.Mods.RequiredModData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModData"/> class.
            </summary>
            <param name="xml">The XML from which to create the object.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredModData.#ctor(ModApi.Mods.RequiredMod)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModData"/> class.
            </summary>
            <param name="requiredMod">The required mod.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredModData.#ctor(Jundroo.ModTools.ModInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModData"/> class.
            </summary>
            <param name="modInfo">The mod information.</param>
            <param name="requiresCodeExecution">A value indicating whether the mod requires code execution.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredModData.#ctor(System.String,System.String,System.Version,System.DateTime,System.Nullable{System.UInt64},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModData" /> class.
            </summary>
            <param name="name">The name of the mod.</param>
            <param name="author">The author of the mod.</param>
            <param name="version">The version of the mod.</param>
            <param name="lastModified">The last modified date time of the mod.</param>
            <param name="steamWorkshopId">The Steam Workshop item identifier if the mod is from the Steam Workshop. (<c>null</c> otherwise)</param>
            <param name="requiresCodeExecution">A value indicating whether the mod requires code execution.</param>
        </member>
        <member name="P:ModApi.Mods.RequiredModData.Author">
            <summary>
            Gets the author of the mod.
            </summary>
            <value>
            The author of the mod.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModData.LastModified">
            <summary>
            Gets the last modified date time of the mod.
            </summary>
            <value>
            The last modified date time of the mod.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModData.Name">
            <summary>
            Gets the name of the mod.
            </summary>
            <value>
            The name of the mod.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModData.RequiresCodeExecution">
            <summary>
            Gets or sets a value indicating whether the mod requires code execution.
            </summary>
            <value>
              <c>true</c> if the mod requires code execution; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModData.SteamWorkshopItemId">
            <summary>
            Gets the steam workshop item identifier.
            </summary>
            <value>
            The steam workshop item identifier.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModData.Version">
            <summary>
            Gets the version of the mod.
            </summary>
            <value>
            The version of the mod.
            </value>
        </member>
        <member name="M:ModApi.Mods.RequiredModData.GenerateXml">
            <summary>
            Generates the XML representing this instance.
            </summary>
            <returns>The XML representing this instance.</returns>
        </member>
        <member name="T:ModApi.Mods.RequiredMods">
            <summary>
            A collection of required mod objects.
            </summary>
        </member>
        <member name="F:ModApi.Mods.RequiredMods._mods">
            <summary>
            The required mods.
            </summary>
        </member>
        <member name="M:ModApi.Mods.RequiredMods.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredMods"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Mods.RequiredMods.Mods">
            <summary>
            Gets the required mods.
            </summary>
            <value>
            The required mods.
            </value>
        </member>
        <member name="M:ModApi.Mods.RequiredMods.Add(ModApi.Mods.RequiredMods)">
            <summary>
            Adds the specified required mods to this collection of required mods.
            </summary>
            <param name="requiredMods">The required mods.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredMods.Add(Jundroo.ModTools.ModInfo,System.Boolean)">
            <summary>
            Adds or updates the specified mod to the collection of required mods.
            </summary>
            <param name="mod">The required mod.</param>
            <param name="requiresCodeExecution">A value indicating whether code execution from the mod is a requirement.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredMods.Remove(Jundroo.ModTools.ModInfo)">
            <summary>
            Removes the specified required mod from the collection of required mods.
            </summary>
            <param name="mod">The required mod to remove.</param>
            <returns><c>true</c> if removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.Mods.RequiredModsCheck">
            <summary>
            A class used to compare a collection of required mods to the currently
            installed and enabled mods, generating a report failed/passed mod requirements.
            </summary>
        </member>
        <member name="M:ModApi.Mods.RequiredModsCheck.#ctor(ModApi.Mods.RequiredModsData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModsCheck"/> class.
            </summary>
            <param name="requiredMods">The required mods to check.</param>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.AllRequiredMods">
            <summary>
            Gets the collection of all of the mod requirements.
            </summary>
            <value>
            The collection of all of the mod requirements.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.AllRequirementsMet">
            <summary>
            Gets a value indicating whether all mod requirements have been met.
            </summary>
            <value>
              <c>true</c> if all mod requirements have been met; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.DisabledMods">
            <summary>
            Gets the collection of required mods that are currently installed and but not enabled.
            </summary>
            <value>
            The collection of required mods that are currently installed and but not enabled.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.DisabledOutdatedMods">
            <summary>
            Gets the collection of required mods that are currently installed and but not enabled and are outdated as well.
            </summary>
            <value>
            The collection of required mods that are currently installed and but not enabled and are outdated as well.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.EnabledMods">
            <summary>
            Gets the collection of required mods that are currently installed and enabled.
            </summary>
            <value>
            The collection of required mods that are currently installed and enabled.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.EnabledOutdatedMods">
            <summary>
            Gets the collection of required mods that are currently installed and enabled but outdated.
            </summary>
            <value>
            The collection of required mods that are currently installed and enabled but outdated.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.MissingMods">
            <summary>
            Gets the collection of required mods that are not currently installed.
            </summary>
            <value>
            The collection of required mods that are not currently installed.
            </value>
        </member>
        <member name="P:ModApi.Mods.RequiredModsCheck.ModsMissingCodeExecutionRequirement">
            <summary>
            Gets the collection of required mods in which code execution is required but not available.
            </summary>
            <value>
            The collection of required mods in which code execution is required but not available.
            </value>
        </member>
        <member name="M:ModApi.Mods.RequiredModsCheck.BuildFailedRequirementsReport">
            <summary>
            Builds the failed requirements report.
            </summary>
            <returns>The string containing information about the mod requirements that were not met.</returns>
        </member>
        <member name="T:ModApi.Mods.RequiredModsData">
            <summary>
            A collection of required mod data objects.
            </summary>
        </member>
        <member name="F:ModApi.Mods.RequiredModsData.XmlRootName">
            <summary>
            The XML root element name used when generating the XML data.
            </summary>
        </member>
        <member name="F:ModApi.Mods.RequiredModsData._mods">
            <summary>
            The required mods.
            </summary>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModsData"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModsData"/> class.
            </summary>
            <param name="xml">The XML from which to create the required mods data.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.#ctor(ModApi.Mods.RequiredMods)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Mods.RequiredModsData"/> class.
            </summary>
            <param name="requiredMods">The required mods.</param>
        </member>
        <member name="P:ModApi.Mods.RequiredModsData.Mods">
            <summary>
            Gets the required mods.
            </summary>
            <value>
            The required mods.
            </value>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.Add(ModApi.Mods.RequiredModsData)">
            <summary>
            Adds or updates the specified required mods collection to this collection of required mods.
            </summary>
            <param name="requiredMods">The required mod collection to add.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.Add(ModApi.Mods.RequiredModData)">
            <summary>
            Adds or updates the specified required mod to the collection of required mods.
            </summary>
            <param name="requiredMod">The required mod.</param>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.GenerateXml">
            <summary>
            Generates the XML for the collection of required mods or <c>null</c> if the set of required mods is empty.
            </summary>
            <returns>
            The XML for the collection of required mods or <c>null</c> if the set of required mods is empty.
            </returns>
        </member>
        <member name="M:ModApi.Mods.RequiredModsData.Remove(ModApi.Mods.RequiredModData)">
            <summary>
            Removes the specified required mod from the collection of required mods.
            </summary>
            <param name="requiredMod">The required mod to remove.</param>
            <returns><c>true</c> if removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.Packages.FastNoise.FastNoise">
            <summary>
            A class used to generate various forms of noise.
            </summary>
            <seealso cref="T:ModApi.Packages.FastNoise.IFastNoise" />
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.SetFractalAmplitudes(System.Double[])">
            <summary>
            Sets the fractal amplitudes.
            </summary>
            <param name="fractalAmplitudes">The fractal amplitudes.</param>
        </member>
        <member name="F:ModApi.Packages.FastNoise.FastNoise._fastNoiseNativeType">
            <summary>
            The fast noise native class type.
            </summary>
        </member>
        <member name="F:ModApi.Packages.FastNoise.FastNoise._nativeCodeSupportedField">
            <summary>
            The native code supported field for the fast noise native class.
            </summary>
        </member>
        <member name="F:ModApi.Packages.FastNoise.FastNoise._disposed">
            <summary>
            A value indicating whether this object has been disposed.
            </summary>
        </member>
        <member name="P:ModApi.Packages.FastNoise.FastNoise.NativeCodeSupported">
            <summary>
            Gets a value indicating whether native code is supported on the current platform.
            </summary>
            <value>
              <c>true</c> if native code is supported on the current platform; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateCellularNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.CellularDistanceFunction,ModApi.Packages.FastNoise.CellularReturnType)">
            <summary>
            Creates an instance of a cellular noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="distanceFunction">The distance function.</param>
            <param name="returnType">The return type.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateCraterNoise(System.Int32,System.Double,System.Double)">
            <summary>
            Creates an instance of a crater noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="randomness">The randomness value.</param>
            <returns>The requested noise generator.</returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateCubicFractalNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.FractalType,System.Int32,System.Double,System.Double)">
            <summary>
            Creates an instance of a cubic fractal noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="fractalType">Type of the fractal.</param>
            <param name="octaves">The octaves.</param>
            <param name="lacunarity">The lacunarity.</param>
            <param name="gain">The gain.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateCubicNoise(System.Int32,System.Double)">
            <summary>
            Creates an instance of a cubic noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateNoise(System.Int32)">
            <summary>
            Creates an instance of a noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <returns>The requested noise generator.</returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreatePerlinFractalNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.FractalType,System.Int32,System.Double,System.Double,ModApi.Packages.FastNoise.Interpolation)">
            <summary>
            Creates an instance of a perlin fractal noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="fractalType">Type of the fractal.</param>
            <param name="octaves">The octaves.</param>
            <param name="lacunarity">The lacunarity.</param>
            <param name="gain">The gain.</param>
            <param name="interpolation">The interpolation method.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreatePerlinNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.Interpolation)">
            <summary>
            Creates an instance of a perlin noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="interpolation">The interpolation method.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateSimplexFractalNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.FractalType,System.Int32,System.Double,System.Double)">
            <summary>
            Creates an instance of a simplex fractal noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="fractalType">Type of the fractal.</param>
            <param name="octaves">The octaves.</param>
            <param name="lacunarity">The lacunarity.</param>
            <param name="gain">The gain.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateSimplexNoise(System.Int32,System.Double)">
            <summary>
            Creates an instance of a simplex noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateValueFractalNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.FractalType,System.Int32,System.Double,System.Double,ModApi.Packages.FastNoise.Interpolation)">
            <summary>
            Creates an instance of a value fractal noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="fractalType">Type of the fractal.</param>
            <param name="octaves">The octaves.</param>
            <param name="lacunarity">The lacunarity.</param>
            <param name="gain">The gain.</param>
            <param name="interpolation">The interpolation method.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateValueNoise(System.Int32,System.Double,ModApi.Packages.FastNoise.Interpolation)">
            <summary>
            Creates an instance of a value noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <param name="interpolation">The interpolation method.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateWhiteNoise(System.Int32,System.Double)">
            <summary>
            Creates an instance of a white noise generator.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="frequency">The frequency.</param>
            <returns>
            The requested noise generator.
            </returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.CreateFastNoiseNative(System.Int32)">
            <summary>
            Creates an instance of the fast noise native class.
            </summary>
            <param name="seed">The seed.</param>
            <returns>An instance of the fast noise native class.</returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.FastNoise.GetFastNoiseNativeType">
            <summary>
            Gets the type of the fast noise native class.
            </summary>
            <returns>The type of the fast noise native class.</returns>
        </member>
        <member name="T:ModApi.Packages.FastNoise.IFastNoise">
            <summary>
            An interface for the FastNoise library.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.GetCraterNoise(System.Double,System.Double,System.Double)">
            <summary>
            Gets the crater noise value (from zero to 1+).
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <returns>The requested noise value.</returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.GetSeed">
            <summary>
            Gets the seed value.
            </summary>
            <returns>The seed value.</returns>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.GradientPerturb(System.Double@,System.Double@,System.Double@)">
            <summary>
            Warps the input position based on the current noise settings.
            </summary>
            <param name="x">The x input to warp.</param>
            <param name="y">The y input to warp.</param>
            <param name="z">The z input to warp.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.GradientPerturb(System.Double@,System.Double@)">
            <summary>
            Warps the input position based on the current noise settings.
            </summary>
            <param name="x">The x input to warp.</param>
            <param name="y">The y input to warp.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.GradientPerturbFractal(System.Double@,System.Double@,System.Double@)">
            <summary>
            Warps the input position based on the current noise settings using a configurable number of octaves.
            </summary>
            <param name="x">The x input to warp.</param>
            <param name="y">The y input to warp.</param>
            <param name="z">The z input to warp.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.GradientPerturbFractal(System.Double@,System.Double@)">
            <summary>
            Warps the input position based on the current noise settings using a configurable number of octaves.
            </summary>
            <param name="x">The x input to warp.</param>
            <param name="y">The y input to warp.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.InitializeCraterNoise(System.Double)">
            <summary>
            Initializes the crater noise.
            </summary>
            <param name="randomness">The randomness value.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetCellularDistanceFunction(ModApi.Packages.FastNoise.CellularDistanceFunction)">
            <summary>
            Sets the cellular distance function.
            </summary>
            <param name="distanceFunction">The distance function.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetCellularReturnType(ModApi.Packages.FastNoise.CellularReturnType)">
            <summary>
            Sets the return type of cellular noise.
            </summary>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalAmplitudes(System.Double[])">
            <summary>
            Sets the fractal amplitudes.
            </summary>
            <param name="fractalAmplitudes">The fractal amplitudes.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalGain(System.Double)">
            <summary>
            Sets the octave gain for all fractal noise types.
            </summary>
            <param name="gain">The gain.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalLacunarities(System.Double[])">
            <summary>
            Sets the octave lacunarity values for all fractal noise types.
            The size should be octave count minus one (as this value does not apply to the first octave).
            </summary>
            <param name="lacunarity">The lacunarity values.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalLacunarity(System.Double)">
            <summary>
            Sets the octave lacunarity for all fractal noise types.
            </summary>
            <param name="lacunarity">The lacunarity.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalOctaves(System.Int32)">
            <summary>
            Sets the octave count for all fractal noise types.
            </summary>
            <param name="octaves">The octaves.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalPowerExponent(System.Double)">
            <summary>
            Sets the fractal power exponent.
            </summary>
            <param name="powerExponent">The power exponent.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalType(ModApi.Packages.FastNoise.FractalType)">
            <summary>
            Sets method for combining octaves in all fractal noise types
            </summary>
            <param name="fractalType">The fractal type.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFractalWithDerivativeType(ModApi.Packages.FastNoise.FractalWithDerivativeType)">
            <summary>
            Sets method for combining octaves in all fractal noise types that make use of derivatives.
            </summary>
            <param name="fractalWithDerivativeType">The fractal with derivative type.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetFrequency(System.Double)">
            <summary>
            Sets the frequency for all noise types.
            </summary>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetGradientPerturbAmp(System.Double)">
            <summary>
            Sets the maximum perturb distance from original location when using GradientPerturb.
            </summary>
            <param name="gradientPerturbAmp">The gradient perturb amplitude.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetInterpolation(ModApi.Packages.FastNoise.Interpolation)">
            <summary>
            Changes the interpolation method used to smooth between noise values.
            </summary>
            <param name="interpolation">The interpolation method.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetNoiseType(ModApi.Packages.FastNoise.NoiseType)">
            <summary>
            Sets the noise return type of GetNoise.
            </summary>
            <param name="noiseType">Type of the noise.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetSeed(System.Int32)">
            <summary>
            Sets the seed value.
            </summary>
            <param name="seed">The seed value.</param>
        </member>
        <member name="M:ModApi.Packages.FastNoise.IFastNoise.SetSlopeErosionStrength(System.Double)">
            <summary>
            Sets the slope erosion strength.
            </summary>
            <param name="slopeErosionStrength">The slope erosion strength.</param>
        </member>
        <member name="T:ModApi.Packages.INoiseGenerator">
            <summary>
            A generic interface for a noise generator.
            </summary>
        </member>
        <member name="M:ModApi.Packages.INoiseGenerator.GetNoise(System.Double,System.Double)">
            <summary>
            Gets a noise value for 2 dimensions.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="M:ModApi.Packages.INoiseGenerator.GetNoise(System.Double,System.Double,System.Double)">
            <summary>
            Gets a noise value for 3 dimensions.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="T:ModApi.Planet.AtmosphereSample">
            <summary>
            Contains data about a sample from the atmosphere.
            </summary>
        </member>
        <member name="P:ModApi.Planet.AtmosphereSample.AirDensity">
            <summary>
            Gets or sets the air density.
            </summary>
            <value>
            The air density.
            </value>
        </member>
        <member name="P:ModApi.Planet.AtmosphereSample.AirPressure">
            <summary>
            Gets or sets the air pressure.
            </summary>
            <value>
            The air pressure.
            </value>
        </member>
        <member name="P:ModApi.Planet.AtmosphereSample.AtmosphereHeight">
            <summary>
            Gets or sets the height of the atmosphere.
            </summary>
            <value>
            The height of the atmosphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.AtmosphereSample.SampleAltitude">
            <summary>
            Gets or sets the altitude that was sampled.
            </summary>
            <value>
            The altitude sampled.
            </value>
        </member>
        <member name="P:ModApi.Planet.AtmosphereSample.SpeedOfSound">
            <summary>
            Gets or sets the speed of sound.
            </summary>
            <value>
            The speed of sound.
            </value>
        </member>
        <member name="P:ModApi.Planet.AtmosphereSample.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="T:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData">
            <summary>
            A class containing information related to a celestial body that is defined by a planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData._initialRotation">
            <summary>
            The initial rotation of the celestial body.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData._orbit">
            <summary>
            The orbit for the celestial body within the planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData._overrideDescription">
            <summary>
            The description of the celestial body that overrides the description defined in the celestial body XML. <c>null</c> if no override.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData._overrideName">
            <summary>
            The name of the celestial body that overrides the name defined in the celestial body XML. <c>null</c> if no override.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData._scale">
            <summary>
            The scale to be applied to the celestial body.
            </summary>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData"/> class.
            </summary>
            <param name="xml">The XML from which to load the data.</param>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.InitialRotation">
            <summary>
            Gets or sets the initial rotation of the celestial body.
            </summary>
            <value>The initial rotation of the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.Orbit">
            <summary>
            Gets or sets the orbit for the celestial body within the planetary system.
            </summary>
            <value>The orbit for the celestial body within the planetary system.</value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.OverrideDescription">
            <summary>
            Gets or sets the description of the celestial body that overrides the description defined in the celestial body XML. <c>null</c> if no override.
            </summary>
            <value>The description of the celestial body that overrides the description defined in the celestial body XML. <c>null</c> if no override.</value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.OverrideName">
            <summary>
            Gets or sets the name of the celestial body that overrides the name defined in the celestial body XML. <c>null</c> if no override.
            </summary>
            <value>The name of the celestial body that overrides the name defined in the celestial body XML. <c>null</c> if no override.</value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.Scale">
            <summary>
            Gets or sets the scale to be applied to the celestial body.
            </summary>
            <value>The scale to be applied to the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.SphereOfInfluence">
            <summary>
            Gets or sets the sphere of influence, or <c>null</c> to use the auto-calculated value.
            </summary>
            <value>
            The sphere of influence, or <c>null</c> to use the auto-calculated value.
            </value>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyPlanetarySystemDefinedData.GenerateXml(System.String,System.Boolean)">
            <summary>
            Generates the XML representing the data.
            </summary>
            <param name="xmlElementName">Name of the root XML element.</param>
            <param name="saveOrbit">If set to <c>true</c>, the orbit data will be saved (otherwise it will be skipped when generating XML).</param>
            <returns>The XML element representing the data.</returns>
        </member>
        <member name="T:ModApi.Planet.CelestialBodyScaleData">
            <summary>
            The celestial body scale data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyScaleData._angularVelocityScale">
            <summary>
            The angular velocity scale.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyScaleData._atmosphereScale">
            <summary>
            The atmosphere scale.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyScaleData._gravityScale">
            <summary>
            The gravity scale.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyScaleData._orbitScale">
            <summary>
            The orbit scale.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyScaleData._planetScale">
            <summary>
            The planet scale.
            </summary>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyScaleData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.CelestialBodyScaleData"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyScaleData.AngularVelocityScale">
            <summary>
            Gets the planet angular velocity scale.
            </summary>
            <value>
            The planet angular velocity scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyScaleData.AtmosphereScale">
            <summary>
            Gets the planet atmosphere scale.
            </summary>
            <value>
            The planet atmosphere scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyScaleData.GravityScale">
            <summary>
            Gets the planet gravity scale.
            </summary>
            <value>
            The planet gravity scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyScaleData.OrbitScale">
            <summary>
            Gets the planet orbit scale.
            </summary>
            <value>
            The planet orbit scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.CelestialBodyScaleData.PlanetScale">
            <summary>
            Gets the planet radius scale.
            </summary>
            <value>
            The planet radius scale.
            </value>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyScaleData.op_Multiply(ModApi.Planet.CelestialBodyScaleData,ModApi.Planet.CelestialBodyScaleData)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">The first object to multiply.</param>
            <param name="b">The second object to multiply.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyScaleData.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates the celestial body scale data from the scale XML data.
            </summary>
            <param name="scaleXml">The scale XML data.</param>
            <returns>The celestial body scale data.</returns>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyScaleData.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyScaleData.GenerateXml(System.String)">
            <summary>
            Generates the XML representing the celestial body scale data.
            </summary>
            <param name="xmlElementName">The name of the XML element.</param>
            <returns>The XML representing the celestial body scale data.</returns>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyScaleData.IsOne">
            <summary>
            Determines whether this scale is one for all components.
            </summary>
            <returns><c>true</c> if this scale is one for all components; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Planet.CelestialBodyXmlVersionUpdater">
            <summary>
            A class used for upgrading celestial body XML from previous XML versions.
            </summary>
        </member>
        <member name="F:ModApi.Planet.CelestialBodyXmlVersionUpdater._upgradeActions">
            <summary>
            The upgrade actions, one for each XML version.
            </summary>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyXmlVersionUpdater.Upgrade(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Upgrades the XML to the latest version.
            </summary>
            <param name="xml">The XML to upgrade.</param>
            <param name="version">The version of the XML being upgraded.</param>
        </member>
        <member name="M:ModApi.Planet.CelestialBodyXmlVersionUpdater.UpgradeToVersion1(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 1.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="T:ModApi.Planet.Events.PlanetNodeChangeEventArgs">
            <summary>
            Event arguments for events raised when the planet node changes.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Planet.Events.PlanetNodeChangeEventArgs.#ctor(ModApi.Planet.IPlanet,ModApi.Flight.Sim.IPlanetNode,ModApi.Flight.Sim.IPlanetNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Events.PlanetNodeChangeEventArgs"/> class.
            </summary>
            <param name="planet">The planet object for which the planet node change is happening.</param>
            <param name="previousPlanetNode">The previous planet node.</param>
            <param name="newPlanetNode">The new planet node.</param>
        </member>
        <member name="P:ModApi.Planet.Events.PlanetNodeChangeEventArgs.NewPlanetNode">
            <summary>
            Gets the new planet node.
            </summary>
            <value>
            The new planet node.
            </value>
        </member>
        <member name="P:ModApi.Planet.Events.PlanetNodeChangeEventArgs.Planet">
            <summary>
            Gets the planet object for which the planet node change is happening.
            </summary>
            <value>
            The planet object for which the planet node change is happening.
            </value>
        </member>
        <member name="P:ModApi.Planet.Events.PlanetNodeChangeEventArgs.PreviousPlanetNode">
            <summary>
            Gets the previous planet node.
            </summary>
            <value>
            The previous planet node.
            </value>
        </member>
        <member name="T:ModApi.Planet.Events.PlanetQuadSphereEventArgs">
            <summary>
            Event arguments for events related to planet quad spheres.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Planet.Events.PlanetQuadSphereEventArgs.#ctor(ModApi.Planet.IPlanet,ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Events.PlanetQuadSphereEventArgs"/> class.
            </summary>
            <param name="planet">The planet associated with the quad sphere..</param>
            <param name="quadSphere">The quad sphere associated with the event.</param>
        </member>
        <member name="P:ModApi.Planet.Events.PlanetQuadSphereEventArgs.Planet">
            <summary>
            Gets the planet associated with the quad sphere.
            </summary>
            <value>
            The planet associated with the quad sphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.Events.PlanetQuadSphereEventArgs.QuadSphere">
            <summary>
            Gets the quad sphere associated with the event.
            </summary>
            <value>
            The quad sphere associated with the event.
            </value>
        </member>
        <member name="T:ModApi.Planet.IPlanet">
            <summary>
            Interface for a planet.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.PlanetNodeChanged">
            <summary>
            Occurs when a planet node has been changed.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.PlanetNodeChanging">
            <summary>
            Occurs when a planet node is changing.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.QuadSphereEnabledStateChanged">
            <summary>
            Occurs when the quad sphere enabled state changes.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.QuadSphereLoaded">
            <summary>
            Occurs when a quad sphere has been loaded.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.QuadSphereLoading">
            <summary>
            Occurs when a quad sphere is loading.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.QuadSphereUnloaded">
            <summary>
            Occurs when a quad sphere has been unloaded.
            </summary>
        </member>
        <member name="E:ModApi.Planet.IPlanet.QuadSphereUnloading">
            <summary>
            Occurs when a quad sphere is unloading.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IPlanet.IsHidden">
            <summary>
            Gets a value indicating whether this planet is hidden.
            </summary>
            <value><c>true</c> if this planet is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanet.PlanetData">
            <summary>
            Gets the planet data.
            </summary>
            <value>
            The planet data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanet.PlanetNode">
            <summary>
            Gets the planet node.
            </summary>
            <value>
            The planet node.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanet.QuadSphere">
            <summary>
            Gets the quad sphere.
            </summary>
            <value>
            The quad sphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanet.QuadSphereEnabled">
            <summary>
            Gets a value indicating whether the quad sphere is enabled.
            </summary>
            <value>
              <c>true</c> if the quad sphere is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanet.QuadSphereTransitionStrength">
            <summary>
            Gets the quad sphere transition strength. A value of 1 is full quad-sphere, value of 0 is full scaled-space.
            </summary>
            <value>
            The quad sphere transition amount. A value of 1 is full quad-sphere, value of 0 is full scaled-space.
            </value>
        </member>
        <member name="T:ModApi.Planet.IQuadSphere">
            <summary>
            Interface for a quad sphere.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.Camera">
            <summary>
            Gets the camera.
            </summary>
            <value>
            The camera.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.ClosestWaterQuadToCameraSqr">
            <summary>
            Gets the closest water quad to camera, squared.
            </summary>
            <value>
            The closest water quad to camera, squared.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.DirectionalLight">
            <summary>
            Gets the sun.
            </summary>
            <value>
            The sun.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.MaxSubdivisionLevel">
            <summary>
            Gets the maximum subdivision level.
            </summary>
            <value>
            The maximum subdivision level.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.MinSubdivisionLevel">
            <summary>
            Gets the minimum subdivision level.
            </summary>
            <value>
            The minimum subdivision level.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.PlanetData">
            <summary>
            Gets the planet data.
            </summary>
            <value>
            The planet data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.PlanetPosition">
            <summary>
            Gets the planet position.
            </summary>
            <value>
            The planet position.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.TerrainGenerator">
            <summary>
            Gets the terrain generator.
            </summary>
            <value>
            The terrain generator.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.Transform">
            <summary>
            Gets the transform associated with the quad sphere's game object.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphere.Unloaded">
            <summary>
            Gets a value indicating whether the quad sphere is unloaded.
            </summary>
            <value>
              <c>true</c> if unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Planet.IQuadSphere.RefreshAllQuads">
            <summary>
            Refreshes all quads.
            </summary>
        </member>
        <member name="M:ModApi.Planet.IQuadSphere.RefreshQuads(UnityEngine.Vector3d,System.Double)">
            <summary>
            Refreshes the quads within a specified distance from a position.
            </summary>
            <param name="spherePosition">The sphere position.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:ModApi.Planet.IQuadSphereQuad">
            <summary>
            An interface for a quad in a planet quad sphere.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.HasWater">
            <summary>
            Gets a value indicating whether this quad has water.
            </summary>
            <value>
              <c>true</c> if this quad has water; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.IsRefreshPending">
            <summary>
            Gets a value indicating whether this quad has a refresh that is currently pending.
            </summary>
            <value>
            <c>true</c> if this quad has a refresh that is currently pending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.IsRefreshRequired">
            <summary>
            Gets a value indicating whether this quad needs to be refreshed.
            </summary>
            <value>
            <c>true</c> if this quad should be refreshed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.IsShore">
            <summary>
            Gets a value indicating whether this quad contains a shore.
            </summary>
            <value>
              <c>true</c> if this quad contains a shore; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.IsSubdivided">
            <summary>
            Gets a value indicating whether this quad is subdivided.
            </summary>
            <value>
            <c>true</c> if this quad is subdivided; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.IsSubdivisionPending">
            <summary>
            Gets a value indicating whether this quad has a subdivision that is currently pending.
            </summary>
            <value>
            <c>true</c> if this quad has a subdivision that is currently pending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.Parent">
            <summary>
            Gets the parent quad script.
            </summary>
            <value>
            The parent quad script.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.PhysicsEnabled">
            <summary>
            Gets a value indicating whether physics are enabled for the quad.
            </summary>
            <value>
              <c>true</c> if physics are enabled for the quad; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.PlanetPosition">
            <summary>
            Gets the planet position.
            </summary>
            <value>
            The planet position.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.QuadPosition">
            <summary>
            Gets the position of this quad in cube space.
            </summary>
            <value>
            The quad position.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.QuadRotation">
            <summary>
            Gets the rotation of this quad in cube space.
            </summary>
            <value>
            The quad rotation.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.QuadScale">
            <summary>
            Gets the scale of this quad in cube space.
            </summary>
            <value>
            The quad scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.QuadSphere">
            <summary>
            Gets the quad sphere.
            </summary>
            <value>
            The quad sphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.SphereNormal">
            <summary>
            Gets sphere normal of this quad, which is the normalized vector defining its position relative to the center of the planet.
            </summary>
            <value>
            The sphere normal.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.SubdivisionLevel">
            <summary>
            Gets the subdivision level. One is the root level subdivision level.
            </summary>
            <value>
            The subdivision level.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.UvCenter">
            <summary>
            Gets the center of the UV coordinates.
            </summary>
            <value>
            The minimum UV.
            </value>
        </member>
        <member name="P:ModApi.Planet.IQuadSphereQuad.UvSize">
            <summary>
            Gets the size of the UV.
            </summary>
            <value>
            The size of the UV.
            </value>
        </member>
        <member name="T:ModApi.Planet.ITerrainGenerator">
            <summary>
            Interface for a terrain generator.
            </summary>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.BiomeCount">
            <summary>
            Gets the number of biomes on the planet.
            </summary>
            <value>
            The number of biomes on the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.HeightMax">
            <summary>
            Gets the maximum height of the planet.
            </summary>
            <value>
            The maximum height of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.HeightMin">
            <summary>
            Gets the minimum height of the planet.
            </summary>
            <value>
            The minimum height of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.SeaLevel">
            <summary>
            Gets the sea level.
            </summary>
            <value>
            The sea level.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.TerrainData">
            <summary>
            Gets the terrain data.
            </summary>
            <value>
            The terrain data.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.TerrainMaterialModifier">
            <summary>
            Gets the terrain material modifier.
            </summary>
            <value>
            The terrain material modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.TerrainQuadVertexCount">
            <summary>
            Gets the terrain quad vertex count.
            </summary>
            <value>
            The terrain quad vertex count.
            </value>
        </member>
        <member name="P:ModApi.Planet.ITerrainGenerator.WaterMaterialModifier">
            <summary>
            Gets the water material modifier.
            </summary>
            <value>
            The water material modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetCacheData">
            <summary>
            Gets the terrain generator cache data for the current thread.
            </summary>
            <returns>The terrain generator cache data for the current thread.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetHeight(UnityEngine.Vector3d)">
            <summary>
            Gets the height at the specified normalized position.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <returns>The height of the terrain at the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetHeight(UnityEngine.Vector3d,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the height at the specified normalized position.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>The height of the terrain at the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>The required terrain mesh data flags.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetRequiredWaterMeshData">
            <summary>
            Gets the required water mesh data flags.
            </summary>
            <returns>The required terrain mesh data flags.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetTerrainMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the terrain material.
            </summary>
            <param name="quad">The quad for which to get the terrain material.</param>
            <returns>The requested terrain material.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexData(UnityEngine.Vector3d,System.Boolean)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            The vertex data will assume a surface normal based on the planet position only.
            This should only be called from the main thread.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexData(UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            The vertex data will assume a surface normal based on the planet position only.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            This should only be called from the main thread.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexDataBiomeAndHeightPass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Biome' pass and the 'Height' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexDataBiomePass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Biome' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexDataFinalPass(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Final' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexDataHeightPass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Height' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexDataWaterPass(ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Water' pass.
            This assumes previous passes have previously been invoked for a single vertex with the specified cache data
            (<see cref="M:ModApi.Planet.ITerrainGenerator.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)"/>).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetVertexDataWaterPass(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Water' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.GetWaterMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the water material.
            </summary>
            <param name="quad">The quad for which to get the water material.</param>
            <returns>The requested water material.</returns>
        </member>
        <member name="M:ModApi.Planet.ITerrainGenerator.InitializeQuadSphere(ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes the terrain generator for the quad sphere.
            </summary>
            <param name="quadSphere">The planet quad sphere.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Attributes.PlanetModifierTypeIdAttribute">
            <summary>
            An attribute used to map a planet modifier type ID to a specific planet modifier class.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Attributes.PlanetModifierTypeIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Attributes.PlanetModifierTypeIdAttribute"/> class.
            </summary>
            <param name="typeId">The type identifier for the planet modifier.</param>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Attributes.PlanetModifierTypeIdAttribute.Id">
            <summary>
            Gets the type identifier for the planet modifier.
            </summary>
            <value>
            The type identifier for the planet modifier.
            </value>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Common.ISingleChannelTextureDataSampler">
            <summary>
            An interface for a single channel texture data sampler.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.ISingleChannelTextureDataSampler.SampleBicubic(System.Single,System.Single,System.Single[][])">
            <summary>
            Performs bicubic sampling of the texture data for the specified uv.
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <param name="preallocatedArray">The preallocated array (5x4) used during the interpolation.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.ISingleChannelTextureDataSampler.SampleBilinear(System.Single,System.Single)">
            <summary>
            Performs bilinear sampling of the texture data for the specified uv.
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.ISingleChannelTextureDataSampler.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the data to the specified stream.
            </summary>
            <param name="writer">The binary writer used to write to the stream.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler">
            <summary>
            A class used for performing cubemap sampling on the CPU for a single 8-bit channel of texture data (R, G, B, or A).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler._data">
            <summary>
            The 6 cubemap face texture data arrays.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler._faceSize">
            <summary>
            The width and height of an individual face texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler._faceSizeMinusOne">
            <summary>
            The width and height of an individual face texture minus one.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler._faceSizePadded">
            <summary>
            The padded width and height of an individual face texture.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.#ctor(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler"/> class.
            </summary>
            <param name="texture">The cubemap texture in horizontal format (X+, X-, Y+, Y-, Z+, Z-).</param>
            <param name="colorChannel">The texture color channel (0 - 3 corresponding to RGBA).</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.#ctor(UnityEngine.Color32[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler"/> class.
            </summary>
            <param name="colors">The cubemap texture color data in horizontal format (X+, X-, Y+, Y-, Z+, Z-).</param>
            <param name="colorChannel">The texture color channel (0 - 3 corresponding to RGBA).</param>
            <param name="faceSize">The width/height of an individual face texture data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.#ctor(System.Byte[][],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="faceSize">The unpadded size of an individual face.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.Load(System.IO.BinaryReader)">
            <summary>
            Loads the data from the specified stream.
            </summary>
            <param name="reader">The reader from which to read data from the stream.</param>
            <returns>The instance that was created from data read from the stream.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.SampleBicubic(UnityEngine.Vector3d,System.Single[][])">
            <summary>
            Performs bicubic sampling on the cubemap at the specified normal position.
            </summary>
            <param name="normal">The normal position. (normalized vector)</param>
            <param name="preallocatedArray">The preallocated array (5x4) used during the interpolation.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.SampleBilinear(UnityEngine.Vector3d)">
            <summary>
            Performs bilinear sampling on the cubemap at the specified normal position.
            </summary>
            <param name="normal">The normal position. (normalized vector)</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the data to the specified stream.
            </summary>
            <param name="writer">The binary writer used to write to the stream.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.CubicInterpolate(System.Single[],System.Single)">
            <summary>
            The cubic interpolation function.
            </summary>
            <param name="p">The source points.</param>
            <param name="x">The value.</param>
            <returns>The cubic interpolation result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.FixupSeam(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Stitches up the specified seam of the cubemap
            </summary>
            <param name="dataA">The 'A' face of the cubemap.</param>
            <param name="pixelA">The index of the pixel on face 'A'.</param>
            <param name="incrementA">The increment value to add to the 'A' face index to progress into the padding.</param>
            <param name="dataB">The 'B' face of the cubemap.</param>
            <param name="pixelB">The index of the pixel on face 'B'.</param>
            <param name="incrementB">The increment value to add to the 'B' face index to progress into the padding.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.FixupSeamCornerPoint(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Fixes up the seam corner point, using the average value of all three faces at the corner pixels.
            </summary>
            <param name="dataA">The first face.</param>
            <param name="pixelA">The pixel index of the first face corner pixel.</param>
            <param name="dataB">The second face.</param>
            <param name="pixelB">The pixel index of the second face corner pixel.</param>
            <param name="dataC">The third face.</param>
            <param name="pixelC">The pixel index of the third face corner pixel.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.FixupSeamCorningPadding(System.Byte[])">
            <summary>
            Fixes the cubemap seam at the corner padding.
            </summary>
            <param name="data">The cubemap face.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.FixupSeams">
            <summary>
            Fixups the seams so there are no inconsistencies between faces.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.GetCubeFaceAndPosition(UnityEngine.Vector3d,System.Byte[]@,UnityEngine.Vector2d@)">
            <summary>
            Gets the cube face data and position given the specified normalized sphere position.
            </summary>
            <param name="position">The normalized sphere position.</param>
            <param name="faceData">The cube face data.</param>
            <param name="facePosition">The cube face position.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.SampleBicubic(System.Byte[],System.Single,System.Single,System.Single[][])">
            <summary>
            Performs bicubic sampling of the specified face data for the specified uv.
            </summary>
            <param name="faceData">The face data.</param>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <param name="preallocatedArray">The preallocated array (5x4) used during the interpolation.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.SampleBilinear(System.Byte[],System.Single,System.Single)">
            <summary>
            Performs bilinear sampling of the specified face data for the specified uv.
            </summary>
            <param name="faceData">The face data.</param>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteCubemapDataSampler.SaveDebugTexture">
            <summary>
            Saves a debug texture with the padded and seam stitched data.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler">
            <summary>
            A class used for performing texture sampling on the CPU for a single 8-bit channel of texture data (R, G, B, or A).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._data">
            <summary>
            The texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._height">
            <summary>
            The height of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._heightMinusOne">
            <summary>
            The height of the texture data minus one.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._paddedHeight">
            <summary>
            The padded height of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._paddedWidth">
            <summary>
            The padded width of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._width">
            <summary>
            The width of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler._widthMinusOne">
            <summary>
            The width of the texture data minus one.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.#ctor(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler"/> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="colorChannel">The texture color channel (0 - 3 corresponding to RGBA).</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.#ctor(UnityEngine.Color32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler"/> class.
            </summary>
            <param name="colors">The Texture color data.</param>
            <param name="colorChannel">The texture color channel (0 - 3 corresponding to RGBA).</param>
            <param name="width">The width of the texture data.</param>
            <param name="height">The height of the texture data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="width">The unpadded width.</param>
            <param name="height">The unpadded height.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.Load(System.IO.BinaryReader)">
            <summary>
            Loads the data from the specified stream.
            </summary>
            <param name="reader">The reader from which to read data from the stream.</param>
            <returns>The instance that was created from data read from the stream.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.SampleBicubic(System.Single,System.Single,System.Single[][])">
            <summary>
            Performs bicubic sampling of the texture data for the specified uv.
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <param name="preallocatedArray">The preallocated array (5x4) used during the interpolation.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.SampleBilinear(System.Single,System.Single)">
            <summary>
            Performs bilinear sampling of the texture data for the specified uv.
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the data to the specified stream.
            </summary>
            <param name="writer">The binary writer used to write to the stream.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelByteTextureDataSampler.CubicInterpolate(System.Single[],System.Single)">
            <summary>
            The cubic interpolation function.
            </summary>
            <param name="p">The source points.</param>
            <param name="x">The value.</param>
            <returns>The cubic interpolation result.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler">
            <summary>
            A class used for performing texture sampling on the CPU for a single 32-bit channel of texture data (R, G, B, or A).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._data">
            <summary>
            The texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._height">
            <summary>
            The height of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._heightMinusOne">
            <summary>
            The height of the texture data minus one.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._paddedHeight">
            <summary>
            The padded height of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._paddedWidth">
            <summary>
            The padded width of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._width">
            <summary>
            The width of the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler._widthMinusOne">
            <summary>
            The width of the texture data minus one.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.#ctor(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler"/> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="colorChannel">The texture color channel (0 - 3 corresponding to RGBA).</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.#ctor(UnityEngine.Color[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler"/> class.
            </summary>
            <param name="colors">The Texture color data.</param>
            <param name="colorChannel">The texture color channel (0 - 3 corresponding to RGBA).</param>
            <param name="width">The width of the texture data.</param>
            <param name="height">The height of the texture data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.#ctor(System.Single[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="width">The unpadded width.</param>
            <param name="height">The unpadded height.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.Load(System.IO.BinaryReader)">
            <summary>
            Loads the data from the specified stream.
            </summary>
            <param name="reader">The reader from which to read data from the stream.</param>
            <returns>The instance that was created from data read from the stream.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.SampleBicubic(System.Single,System.Single,System.Single[][])">
            <summary>
            Performs bicubic sampling of the texture data for the specified uv.
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <param name="preallocatedArray">The preallocated array (5x4) used during the interpolation.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.SampleBilinear(System.Single,System.Single)">
            <summary>
            Performs bilinear sampling of the texture data for the specified uv.
            </summary>
            <param name="u">The u coordinate from 0.0 to 1.0.</param>
            <param name="v">The v coordinate from 0.0 to 1.0.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the data to the specified stream.
            </summary>
            <param name="writer">The binary writer used to write to the stream.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Common.SingleChannelFloatTextureDataSampler.CubicInterpolate(System.Single[],System.Single)">
            <summary>
            The cubic interpolation function.
            </summary>
            <param name="p">The source points.</param>
            <param name="x">The value.</param>
            <returns>The cubic interpolation result.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Common.TextureDataSampleMode">
            <summary>
            An enumeration defining the different sampling modes for texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.TextureDataSampleMode.Bilinear">
            <summary>
            Bilinear sampling.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Common.TextureDataSampleMode.Bicubic">
            <summary>
            Bicubic sampling.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration">
            <summary>
            A class containing configuration information for distance blended textures.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.TileLevelCount">
            <summary>
            The tile level count.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration._distanceAdjustment">
            <summary>
            The distance adjustment value that is added to the distance which determines the tiling level.
            This adjustment is applied after the distance scalar is applied.
            Example: If the first tiling level lasts until about 100 meters and this adjustment
            value is -500, then the first tiling level will last until about 600 meters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration._distanceScalar">
            <summary>
            The distance scalar used to adjust the distance at which the levels begin.
            Doubling this value will cause tiling levels to begin twice as early as normal.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration._scaledUvStartLevel">
            <summary>
            The tiling level at which scaled UV coordinates start being used.
            If this is set to 3, then tiling levels 1, 2 and 3 will use scaled UV coordinates.
            The remaining tiling levels will used standard UV coordinates.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration._levels">
            <summary>
            The tiling levels.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.Levels">
            <summary>
            Gets the levels.
            </summary>
            <value>
            The levels.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.ScaledUvStartLevel">
            <summary>
            Gets the tiling level at which scaled UV coordinates start being used.
            If this is set to 3, then tiling levels 1, 2 and 3 will use scaled UV coordinates.
            The remaining tiling levels will used standard UV coordinates.
            </summary>
            <value>
            The scaled uv start level.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.CopyFrom(ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration)">
            <summary>
            Copies the configuration from the specified object.
            </summary>
            <param name="tilingConfiguration">The tiling configuration to copy.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.GetData(System.Single,UnityEngine.Vector4@,UnityEngine.Vector4@)">
            <summary>
            Gets the output data as calculated by the shader for the specified distance.
            </summary>
            <param name="distance">The distance for which to calculate the data.</param>
            <param name="outputStrengths">The output strengths.</param>
            <param name="outputData">The output data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.GetShaderData(System.Single)">
            <summary>
            Gets the shader data based on this configuration.
            </summary>
            <param name="planetScale">The planet scale.</param>
            <returns>The shader data based on this configuration.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.InitializeLevels">
            <summary>
            Initializes the tiling levels.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance using the specified XML.
            </summary>
            <param name="xml">The XML from which to restore this instance.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the configuration in the specified XML element.
            </summary>
            <param name="xml">The XML element to which to serialize the data.</param>
            <returns>
            The XML element to which the data was saved. (Same element as was passed to the method.)
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.OnAfterDeserialize">
            <summary>
            Called after the object has been deserialized.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel">
            <summary>
            Configuration settings for a distance blended texture tiling level.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel._tiling">
            <summary>
            The texture tiling value for this tile level.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel._strength">
            <summary>
            The texture strength for this tile level.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel._data1">
            <summary>
            The first generic data field that may hold an additional value for the tiling level.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel._data2">
            <summary>
            The second generic data field that may hold an additional value for the tiling level.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel.#ctor(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel" /> class.
            </summary>
            <param name="tiling">The texture tiling value for this tile level.</param>
            <param name="strength">The texture strength for this tile level.</param>
            <param name="data1">The first generic data field that may hold an additional value for the tiling level.</param>
            <param name="data2">The second generic data field that may hold an additional value for the tiling level.</param>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel.Data1">
            <summary>
            Gets or sets the first generic data field that may hold an additional value for the tiling level.
            </summary>
            <value>
            The first generic data field that may hold an additional value for the tiling level.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel.Data2">
            <summary>
            Gets or sets the second generic data field that may hold an additional value for the tiling level.
            </summary>
            <value>
            The second generic data field that may hold an additional value for the tiling level.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel.Strength">
            <summary>
            Gets or sets the texture strength for this tile level.
            </summary>
            <value>
            The texture strength for this tile level.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration.DistanceBlendedTextureLevel.Tiling">
            <summary>
            Gets or sets the texture tiling value for this tile level.
            </summary>
            <value>
            The texture tiling value for this tile level.
            </value>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap">
            <summary>
            A planet modifier that provides a material with a splat map of detail textures.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._distanceBlendedTexture1">
            <summary>
            The first distance blended splatmap texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._distanceBlendedTexture2">
            <summary>
            The second distance blended splatmap texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._distanceBlendedTextures">
            <summary>
            The distance blended splatmap textures defined for this modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._groundDetailTexture1">
            <summary>
            The first ground detail splatmap texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._groundDetailTexture2">
            <summary>
            The second ground detail splatmap texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._groundDetailTextures">
            <summary>
            The ground detail splatmap textures defined for this modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._shaderDistanceBlendDataInitialized">
            <summary>
            A value indicating whether the shader distance blend data has been initialized.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._splatTexturesInitialized">
            <summary>
            A value indicating whether or not splat textures have been initialized.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._useDistanceBlendedSplatmaps">
            <summary>
            A value indicating whether distance blended splat maps should be used.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._useFullPbr">
            <summary>
            A value indicating if full PBR lighting is used (with metallic / smoothness values embedded in mesh vertices).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap._useGroundDetailSplatmaps">
            <summary>
            A value indicating whether ground detail splat maps should be used.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.TerrainDetailSplatmapType">
            <summary>
            An enumeration defining the types of detail splat maps.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.TerrainDetailSplatmapType.DistanceBlendedScales">
            <summary>
            The detail splatmap is used for distance blended scaled textures.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.TerrainDetailSplatmapType.FadedMipMaps">
            <summary>
            The detail splatmap is used for ground level detail using faded mipmaps.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedTextures">
            <summary>
            Gets the distance blended textures.
            </summary>
            <value>
            The distance blended textures.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.InitializeQuadSphere(ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes the modifier for the quad sphere.
            </summary>
            <param name="quadSphere">The planet quad sphere.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.UpdateTilingConfiguration(ModApi.Planet.Modifiers.Material.DistanceBlendedTexturesConfiguration)">
            <summary>
            Updates the tiling configuration.
            </summary>
            <param name="tilingConfiguration">The new tiling configuration.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.OnApplicationFocus(System.Boolean)">
            <summary>
            Called when the application gains or loses focus.
            </summary>
            <param name="focus"><c>true</c> if the application has focus; <c>false</c> otherwise.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.OnValidate">
            <summary>
            Called when the unity editor performs validation on the component.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.ApplyQualitySettings(ModApi.Settings.TerrainQualitySettings)">
            <summary>
            Applies the quality settings.
            </summary>
            <param name="quality">The quality settings.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.CreateSplatTexture(ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures,System.Int32)">
            <summary>
            Creates the splatmap texture.
            </summary>
            <param name="splatTextures">The splat map texture set.</param>
            <param name="index">The index of the texture.</param>
            <returns>The splatmap texture.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.InitializeSplatTexture(ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures,System.String,System.Int32)">
            <summary>
            Initializes the splatmap texture.
            This will load the texture from the disk or create it if it doesn't already exist.
            </summary>
            <param name="splatTextures">The splatmap texture set.</param>
            <param name="name">The name of the texture.</param>
            <param name="index">The index of the texture.</param>
            <returns>The initialized texture.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.InitializeSplatTextures">
            <summary>
            Initializes the splatmap textures.
            This will load the textures from the disk or create them if they do not already exist.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.OnTerrainQualityChanged(System.Object,ModApi.Settings.Core.Events.SettingsChangedEventArgs{ModApi.Settings.TerrainQualitySettings})">
            <summary>
            Called when the terrain quality changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.UpdateQualitySettings(ModApi.Settings.TerrainQualitySettings)">
            <summary>
            Updates the quality settings.
            </summary>
            <param name="quality">The quality settings.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.UpdateShaderDistanceBlendData">
            <summary>
            Updates the shader distance blend data for the shared material.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures">
            <summary>
            A set of splatmap textures used for the distance blended splatmap approach.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures._tilingConfiguration">
            <summary>
            The tiling configuration settings.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.SplatmapType">
            <summary>
            Gets the type of the splatmap.
            </summary>
            <value>
            The type of the splatmap.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.TilingConfiguration">
            <summary>
            Gets the tiling configuration settings.
            </summary>
            <value>
            The tiling configuration settings.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates the texture collection from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the texture collection.</param>
            <returns>The requested texture collection.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.OnAfterDeserialize">
            <summary>
            Called after the object has been deserialized.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.OnBeforeSerialize">
            <summary>
            Called before the object is Serialized.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the texture collection as XML.
            </summary>
            <param name="xml">The XML element to which to serialize the data.</param>
            <returns>
            The XML element to which the data was saved. (Same element as was passed to the method.)
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.DistanceBlendedSplatTextures.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance using the specified XML.
            </summary>
            <param name="xml">The XML from which to restore this instance.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures">
            <summary>
            A set of splatmap textures used for the ground detail splatmap approach.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures._mipmapFadeRange">
            <summary>
            The mipmap fade range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures._tilingScale">
            <summary>
            The tiling scale for the textures.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures.MipmapFadeRange">
            <summary>
            Gets or sets the mipmap fade range.
            </summary>
            <value>
            The mipmap fade range.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures.SplatmapType">
            <summary>
            Gets the type of the splatmap.
            </summary>
            <value>
            The type of the splatmap.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures.TilingScale">
            <summary>
            Gets or sets the tiling scale for the textures.
            </summary>
            <value>
            The tiling scale for the textures.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates the texture collection from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the texture collection.</param>
            <returns>The requested texture collection.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the texture collection as XML.
            </summary>
            <param name="xml">The XML element to which to serialize the data.</param>
            <returns>
            The XML element to which the data was saved. (Same element as was passed to the method.)
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.GroundDetailSplatTextures.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance using the specified XML.
            </summary>
            <param name="xml">The XML from which to restore this instance.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures">
            <summary>
            A collection of splatmap textures.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures._textures">
            <summary>
            The textures.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.Count">
            <summary>
            Gets the number of textures.
            </summary>
            <value>
            The number of textures.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatmapType">
            <summary>
            Gets the type of the splatmap.
            </summary>
            <value>
            The type of the splatmap.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.Textures">
            <summary>
            Gets or sets the textures.
            </summary>
            <value>
            The textures.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.TexturesLoaded">
            <summary>
            Gets a value indicating whether the textures are loaded.
            </summary>
            <value>
              <c>true</c> if textures are loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.LoadTextures(ModApi.Planet.PlanetTerrainDataScript)">
            <summary>
            Loads the textures.
            </summary>
            <param name="terrainData">The terrain data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the texture collection as XML.
            </summary>
            <param name="xml">The XML element to which to serialize the data.</param>
            <returns>The XML element to which the data was saved. (Same element as was passed to the method.)</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.UnloadTextures">
            <summary>
            Unloads the textures.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance using the specified XML.
            </summary>
            <param name="xml">The XML from which to restore this instance.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture">
            <summary>
            A splatmap texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture._colorAdjustment">
            <summary>
            The grayscale color adjustment for the texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture._colorStrength">
            <summary>
            The detail color strength.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture._convertToGrayscale">
            <summary>
            A value indicating whether or not the texture should be converted to grayscale.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture._texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.ColorAdjustment">
            <summary>
            Gets or sets the grayscale color adjustment for the texture.
            </summary>
            <value>
            The grayscale color adjustment for the texture.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.ColorStrength">
            <summary>
            Gets or sets the detail color strength.
            </summary>
            <value>
            The detail color strength.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.ConvertToGrayscale">
            <summary>
            Gets or sets a value indicating whether the texture should be converted to grayscale.
            </summary>
            <value>
              <c>true</c> if the texture should be converted to grayscale; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.Path">
            <summary>
            Gets or sets the path of the texture.
            </summary>
            <value>
            The path of the texture.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a splatmap texture data object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the texture data object.</param>
            <returns>The requested splatmap texture data object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainDetailSplatmap.SplatTextures.SplatTexture.CreateXml">
            <summary>
            Creates the XML for this texture data.
            </summary>
            <returns>The XML for this texture data.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier">
            <summary>
            A planet modifier that provides terrain materials for a planet.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.PlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier._sharedMaterial">
            <summary>
            The material shared by all terrain quads on the planet.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.SharedMaterial">
            <summary>
            Gets or sets the material shared by all terrain quads on the planet.
            </summary>
            <value>
            The material shared by all terrain quads on the planet.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.GetMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the terrain material.
            </summary>
            <param name="quad">The quad for which to get the terrain material.</param>
            <returns>The requested terrain material.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.InitializeQuadSphere(ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes the modifier for the quad sphere.
            </summary>
            <param name="quadSphere">The planet quad sphere.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.TerrainMaterialModifier.CreateRenderer">
            <summary>
            Creates a mesh renderer for the purposes of being able to edit the material in the Unity editor inspector.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.Material.WaterMaterialModifier">
            <summary>
            A planet modifier that provides water materials for a planet.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.PlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._sharedMaterial">
            <summary>
            The material shared by all water quads on the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._foamColor">
            <summary>
            The foam color. Foam is applied on top of reflection/refraction in very shallow water.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._foamDepth">
            <summary>
            The maximum depth at which foam is applied.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._foamStrength">
            <summary>
            The intensity of the foam (from no foam at zero to 100% foam color at one).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._planetNormalWeight">
            <summary>
            The weight of the surface normal when adjusting the normals based on the normal maps.
            The higher the value, the weaker the normal map contribution will be to the overall surface normal.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._transparencyDepth">
            <summary>
            The depth at which the water's transparency fully fades out to opaque.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._transparencyStrength">
            <summary>
            The water's maximum transparency strength at the surface.
            This is a value from zero (not transparent) to one (fully transparent).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._tilingConfiguration">
            <summary>
            The tiling configuration for the water textures.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._fresnelBias">
            <summary>
            The minimum fresnel value. The higher this value, the stronger the reflections will be at a given viewing angle.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._normalMapType">
            <summary>
            The normal map approach used for the water.
            Blended is the highest quality. BlendedFast is the same as Blended but faster due to
            more work done in the vertex shader, however it results in some visual artifacts.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._reflectionDistortion">
            <summary>
            The reflection distortion value. The higher the value, the more distortion due to reflection.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._reflectionsEnabled">
            <summary>
            A value indicating whether water reflections are enabled.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._reflectionStrength">
            <summary>
            The strength of the reflection in the water's surface.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._refractionDistortion">
            <summary>
            The refraction distortion value. The higher the value, the more distortion due to refraction.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._refractionEnabled">
            <summary>
            A value indicating whether water refraction is enabled.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.Material.WaterMaterialModifier._shaderDistanceBlendDataInitialized">
            <summary>
            A value indicating whether the shader distance blend data has been initialized.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.Material.WaterMaterialModifier"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.SharedMaterial">
            <summary>
            Gets or sets the material shared by all water quads on the planet.
            </summary>
            <value>
            The material shared by all water quads on the planet.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.GetMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the water material.
            </summary>
            <param name="quad">The quad for which to get the water material.</param>
            <returns>The requested water material.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.GetRequiredWaterMeshData">
            <summary>
            Gets the required water mesh data flags.
            </summary>
            <returns>
            The required water mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.GetSpecularity(System.Single)">
            <summary>
            Calculates the approximate specularity (smoothness) of the water at the specified distance from it.
            </summary>
            <param name="distance">The distance for which to calculate the specularity.</param>
            <returns>The approximate specularity (smoothness) of the water at the specified distance from it.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.InitializeQuadSphere(ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes the modifier for the quad sphere.
            </summary>
            <param name="quadSphere">The planet quad sphere.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            <summary>
            Called after the object has been deserialized.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            <summary>
            Called before the object is Serialized.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.ApplyQualitySettings(ModApi.Settings.WaterQualitySettings)">
            <summary>
            Applies the current quality settings.
            </summary>
            <param name="quality">The quality settings.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.OnApplicationFocus(System.Boolean)">
            <summary>
            Called when the application gains or loses focus.
            </summary>
            <param name="focus"><c>true</c> if the application has focus; <c>false</c> otherwise.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.OnValidate">
            <summary>
            Called when the unity editor performs validation on the component.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.CreateRenderer">
            <summary>
            Creates a mesh renderer for the purposes of being able to edit the material in the Unity editor inspector.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.OnWaterQualityChanged(System.Object,ModApi.Settings.Core.Events.SettingsChangedEventArgs{ModApi.Settings.WaterQualitySettings})">
            <summary>
            Called when the water quality setting changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.UpdateShaderData">
            <summary>
            Updates the shader data based on the current settings.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.Material.WaterMaterialModifier.UpdateShaderDistanceBlendData">
            <summary>
            Updates the shader distance blend data for the shared material.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags">
            <summary>
            The flags defining the different settings that can be randomized on planet modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags.None">
            <summary>
            No settings.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags.SeedValues">
            <summary>
            The seed values for random functions.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags.NoiseSettings">
            <summary>
            The various noise settings (excluding seed).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags.All">
            <summary>
            All settings.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.PlanetModifier">
            <summary>
            The base class for all planet modifiers.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._stringSplitComma">
            <summary>
            A string split array with a comma.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._planetModifierModMap">
            <summary>
            A dictionary of mods keyed by planet modifier types. This is used to look up the mod responsible for a planet modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._planetModifierTypes">
            <summary>
            A dictionary of planet modifier types keyed by planet modifier type ids.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._registeredAssemblies">
            <summary>
            The list of assemblies that have been scanned for planet modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._typeIDLookup">
            <summary>
            The cached planet modifier type id lookup table associating planet modifier types with their type ids.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._disabledWithSymbols">
            <summary>
            The symbols that, if any are specified, any one that is defined will cause the modifier to be disabled.
            If no symbols are specified, the modifier is considered enable (unless explicitly disabled).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._enabledWithSymbols">
            <summary>
            The symbols that, if any are specified, all must be defined for the modifier to be enabled.
            If no symbols are specified, the modifier is considered enable (unless explicitly disabled).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._name">
            <summary>
            The name of the modifier
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._order">
            <summary>
            The order of the modifier.
            Modifiers with a lower order will run before those with a higher order.
            If the order of two modifiers is the same, they will run based on which one comes first in the hierarchy.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifier._typeId">
            <summary>
            The planet modifier type id.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.#ctor(ModApi.Planet.Modifiers.PlanetModifierType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.PlanetModifier"/> class.
            </summary>
            <param name="modifierType">The type of the modifier.</param>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.Biome">
            <summary>
            Gets the biome associated with this modifier or <c>null</c> if this modifier is not biome specific.
            </summary>
            <value>
            The biome associated with this modifier or <c>null</c> if this modifier is not biome specific.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.DisabledWithSymbols">
            <summary>
            Gets the symbols that, if any are specified, any one that is defined will cause the modifier to be disabled.
            If no symbols are specified, the modifier is considered enable (unless explicitly disabled).
            </summary>
            <value>
            The symbols that, if any are specified, any one that is defined will cause the modifier to be disabled.
            If no symbols are specified, the modifier is considered enable (unless explicitly disabled).
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.EnabledWithSymbols">
            <summary>
            Gets the symbols that, if any are specified, all must be defined for the modifier to be enabled.
            If no symbols are specified, the modifier is considered enable (unless explicitly disabled).
            </summary>
            <value>
            The symbols that, if any are specified, all must be defined for the modifier to be enabled.
            If no symbols are specified, the modifier is considered enable (unless explicitly disabled).
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.Mod">
            <summary>
            Gets the mod associated with this planet modifier (if any).
            This returns <c>null</c> if this is a stock modifier.
            </summary>
            <value>
            The mod associated with this planet modifier (if any).
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.ModifierType">
            <summary>
            Gets the type of the modifier.
            </summary>
            <value>
            The type of the modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.Name">
            <summary>
            Gets the name of the modifier.
            </summary>
            <value>
            The name of the modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.Order">
            <summary>
            Gets the order of the modifier.
            </summary>
            <value>
            The order of the modifier.
            Modifiers with a lower order will run before those with a higher order.
            If the order of two modifiers is the same, they will run based on which one comes first in the hierarchy..
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.SupportsRandomization">
            <summary>
            Gets a value indicating whether this modifier supports randomization.
            </summary>
            <value>
              <c>true</c> if this modifier supports randomization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.TypeId">
            <summary>
            Gets the type identifier of the modifier.
            </summary>
            <value>
            The type identifier of the modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.OrderFallback">
            <summary>
            Gets or sets the fall-back order.
            </summary>
            <value>
            The fall-back order.
            This is used as the tie-breaker when two modifiers have the same order.
            This is set based on the hierarchy order of modifiers.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.PlanetScale">
            <summary>
            Gets the planet scale.
            </summary>
            <value>
            The planet scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.PlanetModifier.TerrainData">
            <summary>
            Gets the terrain data to which this modifier belongs.
            </summary>
            <value>
            The terrain data to which this modifier belongs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.CreateFromXml(System.Xml.Linq.XElement,UnityEngine.Transform,ModApi.Planet.PlanetTerrainDataScript,ModApi.Planet.PlanetBiome)">
            <summary>
            Creates and returns a modifier based of the specified XML.
            </summary>
            <param name="xml">The XML from which to create the modifier.</param>
            <param name="root">The root transform of the hierarchy to which the modifier is being added.</param>
            <param name="terrainData">The terrain data to which this modifier belongs.</param>
            <param name="biome">The biome associated with this planet modifier (if any).</param>
            <returns>The created planet modifier.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.GetTypeId(System.Type)">
            <summary>
            Gets the planet modifier type identifier.
            </summary>
            <param name="type">The planet modifier type.</param>
            <returns>The planet modifier type identifier.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.Register(System.Reflection.Assembly,Jundroo.ModTools.ILoadedMod)">
            <summary>
            Registers the specified assembly, scanning it for planet modifiers.
            </summary>
            <param name="assembly">The assembly to be registered.</param>
            <param name="mod">The mod from which the assembly is being registered (or <c>null</c> for the stock assembly).</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.GetModRequirements(ModApi.Mods.AddModRequirementDelegate)">
            <summary>
            Gets the mod requirement for this planet modifier.
            By default, this will automatically add a mod requirement (with code execution) if the modifier was defined in a mod.
            </summary>
            <param name="addModRequirement">The add mod requirement.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>The required terrain mesh data flags.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.GetRequiredWaterMeshData">
            <summary>
            Gets the required water mesh data flags.
            </summary>
            <returns>The required water mesh data flags.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.Initialize(ModApi.Planet.PlanetTerrainDataScript)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="terrainData">The terrain data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.Randomize(ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags)">
            <summary>
            Randomizes the settings for this modifier.
            </summary>
            <param name="flags">The flags specifying what settings should be randomized.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.GetDefaultTypeId(System.Type)">
            <summary>
            Gets the default type ID for the specified planet modifier type.
            </summary>
            <param name="type">The planet modifier type.</param>
            <returns>The default type ID for the specified planet modifier type.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.PlanetModifier.GetTypeId">
            <summary>
            Gets the planet modifier type identifier.
            </summary>
            <returns>The planet modifier type identifier.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.PlanetModifierType">
            <summary>
            An enumeration defining the different types of planet modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierType.Default">
            <summary>
            The default planet modifier type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierType.VertexData">
            <summary>
            A planet modifier type that provides vertex data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierType.VertexDataSupport">
            <summary>
            A planet modifier type that supports vertex data planet modifiers.
            It does not directly provide vertex data but may be utilized by vertex data modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierType.TerrainMaterial">
            <summary>
            A planet modifier type that provides terrain materials.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.PlanetModifierType.WaterMaterial">
            <summary>
            A planet modifier type that provides water materials.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.AddColor">
            <summary>
            A simple vertex data modifier that adds the value stored in the data slots
            specified by the inputs to the current color value for the associated input.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AddColor._dataIndexBlue">
            <summary>
            The index of the data value to use as the blue input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AddColor._dataIndexGreen">
            <summary>
            The index of the data value to use as the green input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AddColor._dataIndexRed">
            <summary>
            The index of the data value to use as the red input.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddColor.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddColor.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddColor.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddColor.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.AddHeight">
            <summary>
            A vertex data planet modifier that adds a constant height value to the planet or biome.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AddHeight._height">
            <summary>
            The height to add.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.AddHeight.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddHeight.GetMinMaxHeight(UnityEngine.Vector2d)">
            <summary>
            Adjusts the minimum and maximum heights of the planet based on the possible results of this modifier.
            The x component of the vector represents the minimum height and the y component represents the maximum height.
            </summary>
            <param name="minMaxHeight">The current minimum and maximum height of the planet.</param>
            <returns>
            The new minimum and maximum heights of the planet based on the current min max plus this modifier.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddHeight.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AddHeight.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient">
            <summary>
            A vertex color data planet modifier that colors vertices based on a color gradient and the vertex altitude.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._altitudeRange">
            <summary>
            The altitude range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._color">
            <summary>
            The color gradient that is evaluated based on altitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._colorLinear">
            <summary>
            The color gradient in linear color space that is evaluated based on altitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._maxAltitude">
            <summary>
            The maximum altitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._minAltitude">
            <summary>
            The minimum altitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._textureIndex">
            <summary>
            The texture index.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient._textureIndexSplatmap">
            <summary>
            The texture index in the splatmap data array.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeColorGradient.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture">
            <summary>
            A planet modifier that generates a vertex color based on the altitude, slope, and a biome data value.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture._biomeValueDataIndex">
            <summary>
            The data index for the value that determines the biome within a height range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture._heightVarianceAmount">
            <summary>
            The maximum height variance amount.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture._heightVarianceBlend">
            <summary>
            The heights that the height variance blending starts and ends (reaches full strength).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture._heightVarianceBlendRange">
            <summary>
            The height variance blend range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture._heightVarianceDataIndex">
            <summary>
            The data index of the value containing the height variance multiplier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture._colors">
            <summary>
            The altitude ranges that define the different possible colors for vertices.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange">
            <summary>
            An altitude range that defines vertex color possibilities that represent different biomes.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.Name">
            <summary>
            The name of the range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.AltitudeMax">
            <summary>
            The altitude maximum value
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.AltitudeMin">
            <summary>
            The altitude minimum value
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.Biomes">
            <summary>
            The collection of biomes defined for this altitude range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.BlendRange">
            <summary>
            The blend range between this altitude range and the one prior to this.
            In other words, this is the previous.AltitudeMax - this.AltitudeMin.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a altitude range object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a altitude range object.</param>
            <returns>The altitude range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.UpdateSplatmapAndGetColor(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Updates the splatmap values and gets the color for the specified input.
            </summary>
            <param name="splatmapData">The splatmap data.</param>
            <param name="biomeValue">The biome value.</param>
            <param name="slope">The slope.</param>
            <param name="strength">The strength of this altitude range.</param>
            <returns>The color for this altitude range based on the specified inputs.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.AltitudeRange.SaveXml">
            <summary>
            Saves the XML representing this altitude range.
            </summary>
            <returns>The XML representing this altitude range.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange">
            <summary>
            An object representing a biome defined within a range of biome data values.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.Name">
            <summary>
            The name of the biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.MaxValue">
            <summary>
            The maximum data value at which the biome ends.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.MinValue">
            <summary>
            The minimum data value at which the biome starts.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.PrimaryColor">
            <summary>
            The primary color for this biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange._primaryColorLinear">
            <summary>
            The primary color for this altitude range in linear color space.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange._primaryTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this biome's primary texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.PrimaryTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this biome's primary texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.SlopeColor">
            <summary>
            The slope color for this biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange._slopeColorLinear">
            <summary>
            The slope color for this altitude range in linear color space.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange._slopeTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this biome's slope texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.SlopeTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this biome's slope texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.SlopeBlend">
            <summary>
            The slope blend range for this biome.
            The values used here represent the dot product of the terrain normal and the planet sphere normal.
            The minimum value is when the slope color/texture starts blending in.
            The maximums value is when the slope color/texture is at full strength.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.SlopeBlendRange">
            <summary>
            The slope blend range.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a biome range from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a biome range object.</param>
            <returns>The requested biome range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.SaveXml">
            <summary>
            Saves the XML representing the biome.
            </summary>
            <returns>The XML representing the biome.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.AltitudeSlopeBiomeColorAndTexture.BiomeRange.UpdateSplatmapAndGetColor(System.Single[],System.Single,System.Single)">
            <summary>
            Updates the splatmap values and gets the color for the specified inputs.
            </summary>
            <param name="splatmapData">The splatmap data.</param>
            <param name="slope">The slope.</param>
            <param name="strength">The strength of this biome range.</param>
            <returns>The color of this biome range based on the specified inputs.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ApplyStandardMapSet">
            <summary>
            Applies the standard map set data which includes height values and biome strengths.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.ApplyStandardMapSet.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ApplyStandardMapSet.GetMinMaxHeight(UnityEngine.Vector2d)">
            <summary>
            Adjusts the minimum and maximum heights of the planet based on the possible results of this modifier.
            The x component of the vector represents the minimum height and the y component represents the maximum height.
            </summary>
            <param name="minMaxHeight">The current minimum and maximum height of the planet.</param>
            <returns>
            The new minimum and maximum heights of the planet based on the current min max plus this modifier.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ApplyStandardMapSet.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ApplyStandardMapSet.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType">
            <summary>
            An enumeration defining the different types of arithmetic operations that are available.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Add_A_PLUS_B">
            <summary>
            Add the A and B inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Add_A_PLUS_C">
            <summary>
            Add the A and C inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Subtract_A_MINUS_B">
            <summary>
            Subtract the B input from the A input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Subtract_A_MINUS_C">
            <summary>
            Subtract the C input from the A input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Subtract_C_MINUS_A">
            <summary>
            Subtract the A input from the C input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Multiply_A_TIMES_B">
            <summary>
            Multiply the A and B inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Multiply_A_TIMES_C">
            <summary>
            Multiply the A and C inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Divide_A_By_B">
            <summary>
            Divide the A input by the B input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Divide_A_By_C">
            <summary>
            Divide the A input by the C input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Divide_C_By_A">
            <summary>
            Divide the C input by the A input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Exponent_A_POW_B">
            <summary>
            Raise the A input to the power of the B input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Exponent_A_POW_C">
            <summary>
            Raise the A input to the power of the C input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Exponent_C_POW_A">
            <summary>
            Raise the C input to the power of the A input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.AbsoluteValue_A">
            <summary>
            Take the absolute value of the A input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Min_AB">
            <summary>
            Take the minimum value between the A and B inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Min_AC">
            <summary>
            Take the minimum value between the A and C inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Max_AB">
            <summary>
            Take the maximum value between the A and B inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Max_AC">
            <summary>
            Take the maximum value between the A and C inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmeticType.Sign_A">
            <summary>
            Get the sign of the A input (output should be -1 or 1).
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.BasicArithmetic">
            <summary>
            A vertex data planet modifier that performs a basic arithmetic operation.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmetic._arithmeticType">
            <summary>
            The arithmetic operation type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmetic._constantValueC">
            <summary>
            The constant value used in the operation.
            This is the 'C' input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmetic._dataIndexInputA">
            <summary>
            The index of the first data value used in the operation.
            This is the 'A' input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmetic._dataIndexInputB">
            <summary>
            The index of the second data value used in the operation.
            This is the 'B' input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BasicArithmetic._dataIndexOutput">
            <summary>
            The index of the data value to use as the output of the operation.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BasicArithmetic.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BasicArithmetic.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BasicArithmetic.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BasicArithmetic.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture">
            <summary>
            A planet modifier that generates a vertex color based on the altitude, slope, and a biome data value.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture._biomeValueDataIndex">
            <summary>
            The data index for the value that determines the biome within a height range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture._heightVarianceAmount">
            <summary>
            The maximum height variance amount.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture._heightVarianceBlend">
            <summary>
            The heights that the height variance blending starts and ends (reaches full strength).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture._heightVarianceBlendRange">
            <summary>
            The height variance blend range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture._heightVarianceDataIndex">
            <summary>
            The data index of the value containing the height variance multiplier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture._biomes">
            <summary>
            The biome ranges that define the different possible colors for vertices.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange">
            <summary>
            An object representing a biome defined within a range of biome data values.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.Name">
            <summary>
            The name of the biome range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.BiomeMin">
            <summary>
            The biome minimum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.BiomeMax">
            <summary>
            The biome maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.Altitudes">
            <summary>
            The collection of altitude ranges defined for this biome range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.BlendRange">
            <summary>
            The blend range between this biome range and the one prior to this.
            In other words, this is the previous.BiomeMax - this.BiomeMin.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a biome range object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a biome range object.</param>
            <returns>The biome range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.UpdateSplatmapAndGetColor(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Updates the splatmap values and gets the color for the specified input.
            </summary>
            <param name="splatmapData">The splatmap data.</param>
            <param name="height">The height.</param>
            <param name="slope">The slope.</param>
            <param name="strength">The strength of this altitude range.</param>
            <returns>The color for this altitude range based on the specified inputs.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.BiomeRange.SaveXml">
            <summary>
            Saves the XML representing this biome range.
            </summary>
            <returns>The XML representing this biome range.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange">
            <summary>
            An object representing an altitude range defined within a biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.Name">
            <summary>
            The name of the altitude range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.AltitudeMin">
            <summary>
            The minimum data value at which the altitude range starts.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.AltitudeMax">
            <summary>
            The maximum data value at which the altitude range ends.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.PrimaryColor">
            <summary>
            The primary color for this altitude range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange._primaryColorLinear">
            <summary>
            The primary color for this altitude range in linear color space.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange._primaryTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this altitude range's primary texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.PrimaryTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this altitude range's primary texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.SlopeColor">
            <summary>
            The slope color for this altitude range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange._slopeColorLinear">
            <summary>
            The slope color for this altitude range in linear color space.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange._slopeTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this altitude range's slope texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.SlopeTextureIndex">
            <summary>
            The index of the texture in the planet's texture array to be used for this altitude range's slope texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.SlopeBlend">
            <summary>
            The slope blend range for this altitude range.
            The values used here represent the dot product of the terrain normal and the planet sphere normal.
            The minimum value is when the slope color/texture starts blending in.
            The maximums value is when the slope color/texture is at full strength.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.SlopeBlendRange">
            <summary>
            The slope blend range.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a altitude range from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a altitude range object.</param>
            <returns>The requested altitude range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.SaveXml">
            <summary>
            Saves the XML representing the altitude range.
            </summary>
            <returns>The XML representing the altitude range.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.BiomeAltitudeSlopeColorAndTexture.AltitudeRange.UpdateSplatmapAndGetColor(System.Single[],System.Single,System.Single)">
            <summary>
            Updates the splatmap values and gets the color for the specified inputs.
            </summary>
            <param name="splatmapData">The splatmap data.</param>
            <param name="slope">The slope.</param>
            <param name="strength">The strength of this altitude range.</param>
            <returns>The color of this altitude range based on the specified inputs.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome">
            <summary>
            A vertex data planet modifier that runs in the biome pass and adds a biome on top of any existing biomes.
            The new biome will blend with existing biomes but it has full priority, so 100% of the input value is added
            to the strength of the specified biome being added.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome._dataIndexInput">
            <summary>
            The data index input
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome._biomeIndex">
            <summary>
            The index of the biome being added.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AddBiome.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes">
            <summary>
            A sub-biome planet modifier that updates the vertex biome data objects with the 2 strongest altitude based sub-biomes.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes._heightVarianceAmount">
            <summary>
            The maximum height variance amount.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes._heightVarianceBlend">
            <summary>
            The heights that the height variance blending starts and ends (reaches full strength).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes._heightVarianceDataIndex">
            <summary>
            The data index of the value containing the height variance multiplier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes._heightVarianceUsesCommonData">
            <summary>
            A value indicating whether the height variance input data comes from the common data array or the biome data array.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes._heightVarianceOneOverBlendRange">
            <summary>
            One divided by the height variance blend range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes._subBiomes">
            <summary>
            The sub biomes and their altitude ranges for this biome.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.SubBiomes">
            <summary>
            Gets the sub biomes and their altitude ranges for this biome.
            </summary>
            <value>
            The sub biomes and their altitude ranges for this biome.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.AltitudeRange">
            <summary>
            A class representing a range of altitude values defining a sub biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.AltitudeRange.Altitude">
            <summary>
            The altitude range for the sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.AltitudeRange.OneOverBlendRange">
            <summary>
            Gets or sets the value that is one over the blend range between this altitude range and the one prior to this.
            In other words, this is <c>1 / (previous.Altitude.MaxValue - this.Altitude.MinValue)</c>.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.AltitudeRange.SubBiome">
            <summary>
            The sub-biome data.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.AltitudeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a altitude range object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a altitude range object.</param>
            <returns>The altitude range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.AltitudeBasedSubBiomes.AltitudeRange.SaveXml">
            <summary>
            Saves the XML representing this altitude range.
            </summary>
            <returns>The XML representing this altitude range.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.ApplyBiomeData">
            <summary>
            A vertex data planet modifier that applies the current biome data to the vertex data output object.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.ApplyBiomeData.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.ApplyBiomeData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.ApplyBiomeData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.ApplyBiomeData.UpdateBiomeData(ModApi.Planet.PlanetVertexData,ModApi.Planet.SubBiomeTerrainData,System.Single)">
            <summary>
            Updates the biome data.
            </summary>
            <param name="data">The data to update.</param>
            <param name="biomeData">The biome data to which to apply.</param>
            <param name="strength">The strength of the biome data to apply.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.ApplyBiomeData.UpdateBiomeData(ModApi.Planet.PlanetBiomeVertexData,ModApi.Planet.SubBiomeTerrainData,System.Single)">
            <summary>
            Updates the biome data.
            </summary>
            <param name="data">The data to update.</param>
            <param name="biomeData">The biome data to which to apply.</param>
            <param name="strength">The strength of the biome data to apply.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.DebugVisualizeBiomes">
            <summary>
            A vertex data planet modifier used when debugging that helps visualize biome values.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.DebugVisualizeBiomes._biomeColors">
            <summary>
            The biome colors used to visualize the biome strengths.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.DebugVisualizeBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.DebugVisualizeBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.DebugVisualizeBiomes.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.DebugVisualizeBiomes.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength">
            <summary>
            A vertex data planet modifier that gets the strength of a specified biome and stores it the data array.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength._biomeIndex">
            <summary>
            The index of the biome for which to get the strength.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetBiomeStrength.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength">
            <summary>
            A vertex data planet modifier that sums up the strength of multiple biomes.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength._biomeIndexes">
            <summary>
            The biome indexes.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCombinedBiomeStrength.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData">
            <summary>
            A biome specific vertex data planet modifier that gets a data value from the common data array
            and stores it as a data value for the biome specific data array.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData._dataIndexInput">
            <summary>
            The index of the data value to retrieve from the common data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCommonData.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength">
            <summary>
            A biome specific vertex data planet modifier that gets the strength of the current biome and stores it the data array.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.GetCurrentBiomeStrength.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap">
            <summary>
            A vertex data planet modifier that swaps one biome for another biome in the southern hemisphere.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap._sourceBiomeIndex">
            <summary>
            The index of the source biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap._targetBiomeIndex">
            <summary>
            The index of the source biome.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.HemisphereBiomeSwap.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes">
            <summary>
            A planet vertex data biome pass modifier that takes sets of inputs and converts them into biome strengths.
            Biome inputs are applied in layers with the higher priority ones taking precedence.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes._biomeLayers">
            <summary>
            The biome layers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes._defaultBiomeIndex">
            <summary>
            The index of the default biome.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputType">
            <summary>
            An enumeration defining the different type of biome layer inputs.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputType.SingleBiome">
            <summary>
            The biome input value represents the strength of a single biome from 0% at 0 to 100% at 1.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputType.DualBiome_NegativeAndPositive">
            <summary>
            The biome input value represents two biomes.
            The primary biome strength is represented by values from 0 (0%) to 1 (100%).
            The other biome strength is represented by values from 0 (0%) to -1 (100%).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputType.DualBiome_PositiveAndRemainder">
            <summary>
            The biome input value represents two biomes.
            The primary biome strength is represented by values from 0 (0%) to 1 (100%).
            The other biome strengths is 100% minus the strength of the primary biome.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInput">
            <summary>
            An object representing a biome input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInput.InputDataIndex">
            <summary>
            The index of the data value containing the biome input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInput.InputType">
            <summary>
            The biome input type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInput.PrimaryBiomeIndex">
            <summary>
            The index of the primary biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInput.OtherBiomeIndex">
            <summary>
            The index of the other biome.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputLayer">
            <summary>
            An object representing a biome layer in which all biome inputs have the same priority.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputLayer.BiomeInputs">
            <summary>
            The biome inputs in this layer.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputLayer.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a biome layer object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the biome layer object.</param>
            <returns>The biome layer object created from the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.LayeredBiomes.BiomeInputLayer.GenerateXml">
            <summary>
            Generates the XML representing this biome layer.
            </summary>
            <returns>The XML representing this biome layer.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution">
            <summary>
            A vertex data modifier used to redistribute the strength of a biome to multiple different biomes at a given planet surface position.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution._biomeIndex">
            <summary>
            The index of the biome to redistribute.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution._dataIndexInput">
            <summary>
            The index of the data value to use as the biome selection value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution._biomes">
            <summary>
            The biome ranges for a given vertex.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.OnValidate">
            <summary>
            Called when inspector properties change.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.UpdateBiomeNames">
            <summary>
            Updates the biome names.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange">
            <summary>
            A class representing a range of values defining a biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange.BiomeIndex">
            <summary>
            The biome index.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange.Name">
            <summary>
            The name of the biome range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange.OneOverBlendRange">
            <summary>
            Gets or sets the value that is one over the blend range between this biome range and the one prior to this.
            In other words, this is <c>1 / (previous.Range.MaxValue - this.Range.MinValue)</c>.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange.Range">
            <summary>
            The min/max biome value range.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a biome range object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a biome range object.</param>
            <returns>The biome range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomeRedistribution.BiomeRange.SaveXml">
            <summary>
            Saves the XML representing this biome range.
            </summary>
            <returns>The XML representing this biome range.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes">
            <summary>
            A vertex data modifier used to determine the strength of biomes at a given planet surface position.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes._dataIndexInput">
            <summary>
            The index of the data value to use as the biome selection value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes._biomes">
            <summary>
            The biome ranges for a given vertex.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.OnValidate">
            <summary>
            Called when inspector properties change.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.UpdateBiomeNames">
            <summary>
            Updates the biome names.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange">
            <summary>
            A class representing a range of values defining a biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange.Name">
            <summary>
            The name of the biome range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange.Index">
            <summary>
            The index of the biome for this biome range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange.OneOverBlendRange">
            <summary>
            Gets or sets the value that is one over the blend range between this biome range and the one prior to this.
            In other words, this is <c>1 / (previous.Range.MaxValue - this.Range.MinValue)</c>.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange.Range">
            <summary>
            The min/max biome value range.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a biome range object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a biome range object.</param>
            <returns>The biome range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SimpleBiomes.BiomeRange.SaveXml">
            <summary>
            Saves the XML representing this biome range.
            </summary>
            <returns>The XML representing this biome range.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome">
            <summary>
            A sub-biome planet modifier that updates the vertex biome data objects with a single sub-biome.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome._subBiome">
            <summary>
            The sub-biome data.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleSubBiome.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes">
            <summary>
            A sub-biome planet modifier that updates the vertex biome data objects with the 2 strongest sub-biomes based on a single value range.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes._dataIndexInput">
            <summary>
            The index of the data value to use as the input value used to determine the sub-biomes.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes._subBiomes">
            <summary>
            The sub biomes and their value ranges for this biome.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.SubBiomes">
            <summary>
            Gets the sub biomes and their value ranges for this biome.
            </summary>
            <value>
            The sub biomes and their value ranges for this biome.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.ValueRange">
            <summary>
            A class representing a range of values defining a sub biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.ValueRange.OneOverBlendRange">
            <summary>
            Gets or sets the value that is one over the blend range between this value range and the one prior to this.
            In other words, this is <c>1 / (previous.Range.MaxValue - this.Range.MinValue)</c>.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.ValueRange.Range">
            <summary>
            The value range for the sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.ValueRange.SubBiome">
            <summary>
            The sub-biome data.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.ValueRange.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a value range object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create a value range object.</param>
            <returns>The value range object.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Biomes.SingleValueBasedSubBiomes.ValueRange.SaveXml">
            <summary>
            Saves the XML representing this value range.
            </summary>
            <returns>The XML representing this value range.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Clamp">
            <summary>
            A vertex data planet modifier that clamps a value between a min and max value.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Clamp._clampMax">
            <summary>
            The maximum clamp value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Clamp._clampMin">
            <summary>
            The minimum clamp value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Clamp._dataIndexInput">
            <summary>
            The index of the data value to use as the input being clamped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Clamp._dataIndexOutput">
            <summary>
            The index of the data value to use as the output after being clamped.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Clamp.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Clamp.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Clamp.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Clamp.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ColorBands">
            <summary>
            A vertex data modifier used to create colored bands across a planet based on latitude.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._colorBands">
            <summary>
            The color bands for the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._colorBandsLookup">
            <summary>
            The precomputed color band lookup table used at runtime.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._dataIndex">
            <summary>
            The index of the data value to use as the input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._inputRange">
            <summary>
            The input range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._maxInputValue">
            <summary>
            The expected maximum input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._minInputValue">
            <summary>
            The expected minimum input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._randomColorBandsInput">
            <summary>
            The input data used to generate random color bands.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands._totalWeight">
            <summary>
            The total weight of the bands.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.GenerateRandomBands">
            <summary>
            Generates random color bands based on the random color band input data.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand">
            <summary>
            A color band object.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand.Color">
            <summary>
            The color of the band.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand.CoreWeight">
            <summary>
            The core weight of the band (weight value used for the primary color only with no blending).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand.LowerBlendWeight">
            <summary>
            The lower blend weight of the band (weight value used for blending half way to the band below it).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand.UpperBlendWeight">
            <summary>
            The upper blend weight of the band (weight value used for blending half way to the band above it).
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement into a color band instance.
            </summary>
            <param name="xml">The XML.</param>
            <returns>The color band represented by the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBand.ToXElement">
            <summary>
            Generates an XElement object representing the current state of this instance.
            </summary>
            <returns>An XElement object representing the current state of this instance.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem">
            <summary>
            A class used as a color band entry in the runtime lookup table.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem.BlendMax">
            <summary>
            The maximum blend value for this band.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem.BlendMin">
            <summary>
            The minimum blend value for this band.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem.PrimaryColor">
            <summary>
            The primary color of this band.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem.SecondaryColor">
            <summary>
            The secondary color of this band (if it is a blended band).
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem.#ctor(UnityEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem"/> class.
            </summary>
            <param name="color">The primary color.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem.#ctor(UnityEngine.Color,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.ColorBands.ColorBandItem"/> class.
            </summary>
            <param name="primary">The primary color.</param>
            <param name="secondary">The secondary color.</param>
            <param name="blendMin">The minimum blend value for this band.</param>
            <param name="blendMax">The maximum blend value for this band.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput">
            <summary>
            A single input band used to randomly generate multiple different color bands.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.BandCountRange">
            <summary>
            The minimum/maximum number of color bands to be generated by this input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.BlendWeightRange">
            <summary>
            The minimum/maximum blend weight for color bands generated by this input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.Color">
            <summary>
            The primary color for the band.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.CoreWeightRange">
            <summary>
            The minimum/maximum core weight for color bands generated by this input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.HsvVariance">
            <summary>
            The HSV color variance for bands randomly generated by this input.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement into a random color band input instance.
            </summary>
            <param name="xml">The XML.</param>
            <returns>The random color band instance represented by the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBands.RandomColorBandInput.ToXElement">
            <summary>
            Generates an XElement object representing the current state of this instance.
            </summary>
            <returns>An XElement object representing the current state of this instance.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ColorBlendType">
            <summary>
            An enumeration defining the color blend types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.One">
            <summary>
            The value of one - use this to let either the source or the destination color come through fully.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.Zero">
            <summary>
            The value zero - use this to remove either the source or the destination values.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.SourceColor">
            <summary>
            The value of this stage is multiplied by the source color value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.SourceAlpha">
            <summary>
            The value of this stage is multiplied by the source alpha value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.DestinationColor">
            <summary>
            The value of this stage is multiplied by frame buffer source color value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.DestinationAlpha">
            <summary>
            The value of this stage is multiplied by frame buffer source alpha value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.OneMinusSourceColor">
            <summary>
            The value of this stage is multiplied by (1 - source color).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.OneMinusSourceAlpha">
            <summary>
            The value of this stage is multiplied by (1 - source alpha).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.OneMinusDestinationColor">
            <summary>
            The value of this stage is multiplied by (1 - destination color).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlendType.OneMinusDestinationAlpha">
            <summary>
            The value of this stage is multiplied by (1 - destination alpha).
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.ColorBlend">
            <summary>
            A vertex data modifier that blends the existing color value with a new color value based on the specified configuration.
            Implements the <see cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlend._color">
            <summary>
            The blend color.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlend._dataIndexAlpha">
            <summary>
            The index of the data value to use as the source alpha channel value rather than its own alpha channel value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlend._destination">
            <summary>
            The destination color blend type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.ColorBlend._source">
            <summary>
            The source color blend type.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBlend.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBlend.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBlend.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBlend.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.ColorBlend.GetColor(UnityEngine.Color,ModApi.Planet.Modifiers.VertexData.ColorBlendType,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Gets the color based on the blend type.
            </summary>
            <param name="color">The color input.</param>
            <param name="blendType">The color blend type.</param>
            <param name="sourceColor">Color of the source.</param>
            <param name="destinationColor">Color of the destination.</param>
            <returns>The color result.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Craters">
            <summary>
            A vertex data modifier used for generating craters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterCurve">
            <summary>
            The crater animation curve.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterFrequency">
            <summary>
            The crater noise frequency.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterMaxDepth">
            <summary>
            The maximum depth of the craters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterNoisePowerValue">
            <summary>
            The power value used for crater noise to prevent seams between craters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterNoiseStrength">
            <summary>
            The crater noise strength.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterPasses">
            <summary>
            The number of crater passes to perform
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterSeed">
            <summary>
            The crater noise seed.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._curveSampler">
            <summary>
            The animation curve sampler used to evaluate the curve on background threads.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._maxHeightColorVariance">
            <summary>
            The color variation at the maximum height of the crater.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._minHeightColorVariance">
            <summary>
            The color variation at the minimum height of the crater.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._craterMaskDataIndex">
            <summary>
            The crater mask data index input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._heightNoiseOutputDataIndex">
            <summary>
            The index of the data slot used to store the final noise output used for the height of the crater (if desired).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._noise">
            <summary>
            The FastNoise reference for the cellular noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._oneOverMaxHeightColorVarianceRange">
            <summary>
            The one over the result range of the crater curve in which the value is above the surface height.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._oneOverMinHeightColorVarianceRange">
            <summary>
            The one over the result range of the crater curve in which the value is below the surface height.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Craters._surfaceHeight">
            <summary>
            The surface height value based on the final height result of the crater curve.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.Craters.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.GetMinMaxHeight(UnityEngine.Vector2d)">
            <summary>
            Adjusts the minimum and maximum heights of the planet based on the possible results of this modifier.
            The x component of the vector represents the minimum height and the y component represents the maximum height.
            </summary>
            <param name="minMaxHeight">The current minimum and maximum height of the planet.</param>
            <returns>
            The new minimum and maximum heights of the planet based on the current min max plus this modifier.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Craters.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.CratersFast">
            <summary>
            A vertex data modifier used for generating craters.
            This runs faster than the original crater modifier, at the cost of crater quality.
            It does not include a built in noise call and is more configurable than the original however.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._maskDataIndex">
            <summary>
            The crater mask data index input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._craterNoiseADataIndex">
            <summary>
            The data index of the crater noise 'A' input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._craterNoiseBDataIndex">
            <summary>
            The data index of the crater noise 'B' input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._heightNoiseMinOutputDataIndex">
            <summary>
            The optional index of the data slot used to store the minimum noise output used for the height of the craters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._maxHeightColorVariance">
            <summary>
            The color variation at +MaxDepth of the crater.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._minHeightColorVariance">
            <summary>
            The color variation at -MaxDepth of the crater.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._curve">
            <summary>
            The default crater animation curve.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast._craterPasses">
            <summary>
            The crater passes.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.CratersFast.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.GetMinMaxHeight(UnityEngine.Vector2d)">
            <summary>
            Adjusts the minimum and maximum heights of the planet based on the possible results of this modifier.
            The x component of the vector represents the minimum height and the y component represents the maximum height.
            </summary>
            <param name="minMaxHeight">The current minimum and maximum height of the planet.</param>
            <returns>
            The new minimum and maximum heights of the planet based on the current min max plus this modifier.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.OnValidate">
            <summary>
            Called when inspector properties change.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.UpdatePassNames">
            <summary>
            Updates the pass names.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.CratersFast.PassCurve">
            <summary>
            A crater animation curve used for a specific pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.PassCurve.Enabled">
            <summary>
            A value indicating if the pass curve is enabled and should be used in place of the default crater curve;.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.PassCurve.Curve">
            <summary>
            The crater curve specific to the pass.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass">
            <summary>
            The configuration for a single crater pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Name">
            <summary>
            The name of the pass for use in the inspector only.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Enabled">
            <summary>
            A value indicating whether the pass is enabled (useful for debugging).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Seed">
            <summary>
            The crater noise seed value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Frequency">
            <summary>
            The crater noise frequency.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.MaxDepth">
            <summary>
            The maximum depth of the craters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.CurveSampler">
            <summary>
            The crater animation curve sampler.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.CustomCurve">
            <summary>
            The custom crater curve for this pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Noise">
            <summary>
            The crater noise reference.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.NoiseLerp">
            <summary>
            The lerp value that lerps in the crater noise input between the A and B input noise values.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.NoiseStrength">
            <summary>
            The strength of the noise applied to the craters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Randomness">
            <summary>
            The randomness in the crater noise.
            Less randomness means more consistent (and larger) craters but they will be more grid like in alignment.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.Rotation">
            <summary>
            The rotation to be applied to the input position.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.RotationAngle">
            <summary>
            The angle of the rotation to be applied to the input position.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.RotationAxis">
            <summary>
            The axis of the rotation to be applied to the input position.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.LoadXml(System.Xml.Linq.XElement)">
            <summary>
            Loads crater passes from the specified XML.
            </summary>
            <param name="xml">The XML from which to load crater passes.</param>
            <returns>The crater passes loaded from the XML.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass.SaveXml(System.Xml.Linq.XElement,ModApi.Planet.Modifiers.VertexData.CratersFast.CraterPass[])">
            <summary>
            Saves the crater pass data as XML.
            </summary>
            <param name="xml">The XML to which to save the data.</param>
            <param name="passes">The crater passes to be saved.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.CubemapData">
            <summary>
            A planet modifier used to read data from a cubemap texture and store the result in a data index.
            The cubemap texture should be in horizontal format (X+, X-, Y+, Y-, Z+, Z-).
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._mapColorGradientDefault">
            <summary>
            The map color gradient default value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._buildCubemapId">
            <summary>
            An ID that is used in the hacky process of generating a default cubemap.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._cubemap">
            <summary>
            The cubemap sampler.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._defaultMapDataIndexInput">
            <summary>
            The input data index to use for the generation of a default cubemap.
            This is -1 if the generation of a default cubemap is not supported.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._mapColorGradient">
            <summary>
            The color gradient used in planet studio when using a brush on this cubemap.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._mapName">
            <summary>
            The cubemap display name associated with this modifier (if any).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._mapSampleMode">
            <summary>
            The map sample mode.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._maxValue">
            <summary>
            The maximum output value when the cubemap value is one.
            This also defines the maximum value of the source data when generating a default cubemap.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._minValue">
            <summary>
            The minimum output value when the cubemap value is zero.
            This also defines the minimum value of the source data when generating a default cubemap.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._range">
            <summary>
            The maximum value minus the minimum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData._textureId">
            <summary>
            The texture id, which points to the local id of a referenced file.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.CubemapData.MapColorGradient">
            <summary>
            Gets the color gradient used in planet studio when using a brush on this cubemap.
            </summary>
            <value>The color gradient used in planet studio when using a brush on this cubemap.</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.CubemapData.MapDisplayName">
            <summary>
            Gets the cubemap display name associated with this modifier (if any).
            </summary>
            <value>The cubemap display name associated with this modifier (if any).</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.CubemapData.MapId">
            <summary>
            Gets the cubemap id associated with this modifier (if any).
            This should be unique between all modifiers of a celestial body.
            </summary>
            <value>The cubemap id associated with this modifier (if any).</value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.GenerateMap(System.Int32)">
            <summary>
            Generates a default cubemap for this modifier.
            The cubemap will be a linear grayscale texture with 6 faces positioned in a single horizontal row in the order of X+, X-, Y+, Y-, Z+, Z-.
            </summary>
            <param name="size">The size (width/height) of the individual cubemap face textures.</param>
            <returns>The byte array representing the cubemap encoded as a PNG.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.BuildDefaultCubemap(System.Int32)">
            <summary>
            Builds the default cubemap, which is based on the data at a particular data index at the point in time that this modifier would execute.
            This implementation is pretty hacky...
            The basic idea is to create new planet/terrain data scripts, but swap this modifier out for another.
            We then grab a reference to that modifier, which tracks the data value we care about every time vertex data is generated.
            Then we simple build the texture, grabbing the pixel values from the new terrain generator after generating each vertex data.
            </summary>
            <param name="size">The size (width/height) of the individual cubemap face textures.</param>
            <returns>The cubemap texture.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.InitializeCubemapSampler(System.String)">
            <summary>
            Initializes the cubemap sampler.
            </summary>
            <param name="id">The texture/cubemap id.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier">
            <summary>
            A modifier that replaces the cubemap modifier to be used in the generation of a default cubemap.
            Implements the <see cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier._dataIndexInput">
            <summary>
            The data index input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier._maxValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier._minValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier._oneOverRange">
            <summary>
            One over the max value minus the min value.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.Id">
            <summary>
            Gets the identifier of the modifier.
            </summary>
            <value>The identifier of the modifier.</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.LastValue">
            <summary>
            Gets the last value generated by the modifier.
            </summary>
            <value>The last value generated by the modifier.</value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.Initialize(ModApi.Planet.Modifiers.VertexData.CubemapData,System.Guid)">
            <summary>
            Initializes the modifier based on the source modifier.
            </summary>
            <param name="sourceModifier">The source modifier.</param>
            <param name="id">The identifier used by the source modifier to identify this modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.CubemapData.CubemapBuilderModifier.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.DebugFlatten">
            <summary>
            A vertex data planet modifier used in debugging to flatten sections of the planet's surface.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten._axis1">
            <summary>
            The first axis on which to flatten.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten._axis2">
            <summary>
            The second axis on which to flatten.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten._axis3">
            <summary>
            The third axis on which to flatten.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten._flattenType">
            <summary>
            The flatten type.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis">
            <summary>
            An enumeration defining the different axes on which to flatten.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.None">
            <summary>
            No axis specified.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.XPositive">
            <summary>
            The positive X axis.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.XNegative">
            <summary>
            The negative X axis.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.YPositive">
            <summary>
            The positive Y axis.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.YNegative">
            <summary>
            The negative Y axis.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.ZPositive">
            <summary>
            The positive Z axis.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis.ZNegative">
            <summary>
            The negative Z axis.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenType">
            <summary>
            An enumeration defining the flattening types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenType.Height">
            <summary>
            The height should be flattened.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenType.Color">
            <summary>
            The color should be flattened.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenType.HeightAndColor">
            <summary>
            The both height and color should be flattened.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.DebugFlatten.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugFlatten.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugFlatten.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugFlatten.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugFlatten.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugFlatten.AxisMatch(UnityEngine.Vector3d,ModApi.Planet.Modifiers.VertexData.DebugFlatten.FlattenAxis)">
            <summary>
            Determines if the specified position is a match for the specified axis.
            </summary>
            <param name="position">The position.</param>
            <param name="axis">The axis.</param>
            <returns><c>true</c> if the position is a match for the axis; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.DebugVisualize">
            <summary>
            A vertex data planet modifier used when debugging that helps visualize data values.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugVisualize._dataIndex">
            <summary>
            The index of the data value to visualize.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugVisualize._gradient">
            <summary>
            The gradient used to visualize the data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugVisualize._gradientLinear">
            <summary>
            The gradient (in linear color space) used to visualize the data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugVisualize._maxInputValue">
            <summary>
            The expected maximum input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DebugVisualize._minInputValue">
            <summary>
            The expected minimum input value.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugVisualize.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugVisualize.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugVisualize.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.DebugVisualize.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.GenerateHeightType">
            <summary>
            The height generation type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeightType.LerpMinToMax">
            <summary>
            The generated height is a result of linearly interpolating from
            the minimum height to the maximum height based off the input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeightType.LerpToFromZero">
            <summary>
            The generated height is a result of linearly interpolating from
            the minimum height to zero if the input value is negative or
            linearly interpolating from zero to the maximum height if the
            input value is positive. This should not be used if the minimum
            and maximum heights to not span across zero.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.GenerateHeight">
            <summary>
            A vertex data planet modifier used to generate height values.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._dataIndexInput">
            <summary>
            The index of the data value to use as the input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._inputMaxValue">
            <summary>
            The maximum expected value of the input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._inputMinValue">
            <summary>
            The minimum expected value of the input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._inputRange">
            <summary>
            The range of the input values (max - min).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._maxHeight">
            <summary>
            The maximum height to be generated.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._minHeight">
            <summary>
            The minimum height to be generated.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GenerateHeight._generateHeightType">
            <summary>
            The generate height type.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.GenerateHeight.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GenerateHeight.GetMinMaxHeight(UnityEngine.Vector2d)">
            <summary>
            Adjusts the minimum and maximum heights of the planet based on the possible results of this modifier.
            The x component of the vector represents the minimum height and the y component represents the maximum height.
            </summary>
            <param name="minMaxHeight">The current minimum and maximum height of the planet.</param>
            <returns>
            The new minimum and maximum heights of the planet based on the current min max plus this modifier.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GenerateHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GenerateHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GenerateHeight.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GenerateHeight.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GenerateHeight.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.GetConstant">
            <summary>
            A vertex data plant modifier that loads a constant value into the data array at the specified index.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GetConstant._dataIndexOutput">
            <summary>
            The index of the data value to use as the output for the constant.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GetConstant._value">
            <summary>
            The constant value to load.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetConstant.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetConstant.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetConstant.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetConstant.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.GetHeight">
            <summary>
            A vertex data plant modifier that loads the current height value into the data array at the specified index.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GetHeight._dataIndexOutput">
            <summary>
            The index of the data value to use as the output for the height.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetHeight.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetHeight.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.GetPosition">
            <summary>
            A planet vertex data modifier used to get the x, y, and/or z inputs and store them in the data array.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GetPosition._dataIndexX">
            <summary>
            The data index at which to store the X input. No input will be stored if the data index is set to -1.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GetPosition._dataIndexY">
            <summary>
            The data index at which to store the Y input. No input will be stored if the data index is set to -1.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.GetPosition._dataIndexZ">
            <summary>
            The data index at which to store the Z input. No input will be stored if the data index is set to -1.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetPosition.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetPosition.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetPosition.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.GetPosition.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.IBrushCubemapModifier">
            <summary>
            An interface for a modifier that can generate a textured cubemap and use it in place of its typical result.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.IBrushCubemapModifier.MapColorGradient">
            <summary>
            Gets the color gradient used in planet studio when using a brush on this cubemap.
            </summary>
            <value>The color gradient used in planet studio when using a brush on this cubemap.</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.IBrushCubemapModifier.MapDisplayName">
            <summary>
            Gets the cubemap display name associated with this modifier (if any).
            </summary>
            <value>The cubemap display name associated with this modifier (if any).</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.IBrushCubemapModifier.MapId">
            <summary>
            Gets the cubemap id associated with this modifier (if any).
            This should be unique between all modifiers of a celestial body.
            </summary>
            <value>The cubemap id associated with this modifier (if any).</value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.IBrushCubemapModifier.GenerateMap(System.Int32)">
            <summary>
            Generates a default cubemap for this modifier.
            The cubemap will be a linear grayscale texture with 6 faces positioned in a single horizontal row in the order of X+, X-, Y+, Y-, Z+, Z-.
            </summary>
            <param name="size">The size (width/height) of the individual cubemap face textures.</param>
            <returns>The byte array representing the cubemap encoded as a PNG.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Interpolate">
            <summary>
            A vertex data planet modifier that performs a basic interpolate operation.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._dataIndexInputA">
            <summary>
            The index of the data value from which to interpolate.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._dataIndexInputB">
            <summary>
            The index of the data value to which to interpolate.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._dataIndexInputC">
            <summary>
            The index of the data value indicating the position within the interpolation.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._dataIndexOutput">
            <summary>
            The index of the data value to use as the output of the operation.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._inputMaxValue">
            <summary>
            The input maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._inputMinValue">
            <summary>
            The input minimum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._inputRange">
            <summary>
            The input range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Interpolate._powerExponent">
            <summary>
            The power exponent to which to raise the interpolation input value.
            A value of 1 would result in linear interpolation.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Interpolate.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Interpolate.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Interpolate.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Interpolate.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Interpolate.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData">
            <summary>
            A planet vertex data modifier that takes 8 textures, mapping them to the surface of the planet
            and outputs into a data slot the value from one of the texture channels.
            https://visibleearth.nasa.gov/grid.php
            ArrayIndex   Column/Row   Upper Left   Lower Right
                0           A1         90N 180W       0N  90W
                1           B1         90N  90W       0N   0W
                2           C1         90N   0W       0N  90E
                3           D1         90N  90E       0N 180E
                4           A2          0N 180W      90S  90W
                5           B2          0N  90W      90S   0W
                6           C2          0N   OW      90S  90E
                7           D2          0N  90E      90S 180E
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData._textureChannel">
            <summary>
            The texture channel (0 to 3 corresponding to RGBA).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData._textureChannelBitsPerPixel">
            <summary>
            The number of bits per pixel in the selected texture channel.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData._textures">
            <summary>
            The textures configured for this planet modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData._textureSamplers">
            <summary>
            The texture samplers from which to read texture data.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.OnValidate">
            <summary>
            Called when inspector properties change.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.CreateSamplerFromTexture(ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem)">
            <summary>
            Creates the texture sampler from the specified texture data item.
            </summary>
            <param name="textureDataItem">The texture data item.</param>
            <returns>The requested texture sampler.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.InitializeTextureSampler(ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem)">
            <summary>
            Initializes the texture sampler for the specified texture data item.
            </summary>
            <param name="textureDataItem">The texture data item.</param>
            <returns>The requested texture sampler.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.InitializeTextureSamplers">
            <summary>
            Initializes the texture samplers.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem">
            <summary>
            A texture and related information to be mapped to a cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.Path">
            <summary>
            The path to the source texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem"/> class.
            </summary>
            <param name="xml">The XML from which to instantiate the object.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.CreateXml">
            <summary>
            Creates the XML element representing this instance.
            </summary>
            <returns>The XML element representing this instance.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.LoadTexture(ModApi.Planet.PlanetTerrainDataScript)">
            <summary>
            Loads the texture.
            </summary>
            <param name="terrainData">The terrain data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance based on the specified XML element.
            </summary>
            <param name="xml">The XML element used to restore this instance.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LatLong8TextureData.TextureDataItem.UnloadTexture">
            <summary>
            Unloads the texture.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01">
            <summary>
            A vertex data planet modifier that performs a basic linear interpolate operation.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01._dataIndexInputA">
            <summary>
            The index of the data value from which to interpolate.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01._dataIndexInputB">
            <summary>
            The index of the data value to which to interpolate.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01._dataIndexInputC">
            <summary>
            The index of the data value indicating the position within the interpolation.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01._dataIndexOutput">
            <summary>
            The index of the data value to use as the output of the operation.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LinearInterpolate01.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.LongitudeLines">
            <summary>
            A vertex data planet modifier that creates longitudinal lines with noise applied.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._angleBetweenLines">
            <summary>
            The angle between lines.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._dataIndexInput">
            <summary>
            The index of the data value to use as the input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._halfLineWidth">
            <summary>
            Half the line width in degrees.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._lineCount">
            <summary>
            The line count.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._lineWidth">
            <summary>
            The line width in degrees.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._noise">
            <summary>
            The fast noise module.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._warpAmplitude">
            <summary>
            The domain warping amplitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._warpFrequency">
            <summary>
            The domain warping frequency.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._warpGain">
            <summary>
            The domain warping gain.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._warpLacunarity">
            <summary>
            The domain warping lacunarity.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.LongitudeLines._warpOctaves">
            <summary>
            The domain warping octaves.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LongitudeLines.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LongitudeLines.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LongitudeLines.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LongitudeLines.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LongitudeLines.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.LongitudeLines.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.PolarCapMask">
            <summary>
            A vertex data planet modifier used to create a mask value for polar caps.
            The north pole mask is from zero to 1 and the south pole mask is from 0 to -1.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask._dataIndexOutput">
            <summary>
            The index of the data value to use as the output of the operation.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask._northPole">
            <summary>
            The north pole configuration.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask._southPole">
            <summary>
            The south pole configuration.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config">
            <summary>
            An object containing the configuration for a single pole.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._dataIndexInputNoise">
            <summary>
            The index of the data value containing the noise input value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueInner">
            <summary>
            The adjustment value that is added to the input noise value at the inner radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueOuter">
            <summary>
            The adjustment value that is added to the input noise value at the outer radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueInnerAngle">
            <summary>
            The angle in degrees that defines the inner radius for the adjustment value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueOuterAngle">
            <summary>
            The angle in degrees that defines the outer radius for the adjustment value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeInner">
            <summary>
            The noise fade factor at the inner radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeOuter">
            <summary>
            The noise fade factor at the outer radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeInnerAngle">
            <summary>
            The angle in degrees that defines the inner radius for the noise fade factor.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeOuterAngle">
            <summary>
            The angle in degrees that defines the outer radius for the noise fade factor.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._linearRemapMax">
            <summary>
            The maximum value used in the linear remapping of the output, mapping it in to the zero to one range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._linearRemapMin">
            <summary>
            The minimum value used in the linear remapping of the output, mapping it in to the zero to one range.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._linearRemapMaxClamped">
            <summary>
            A value indicating if the linear remapping of the output should be clamped at one, or if it can extend beyond one.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueInnerY">
            <summary>
            The normalized world position 'Y' coordinate for the adjustment value's inner radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueOuterY">
            <summary>
            The normalized world position 'Y' coordinate for the adjustment value's outer radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._adjustmentValueRangeFactor">
            <summary>
            A pre-calculated value used in lerping the adjustment value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeInnerY">
            <summary>
            The normalized world position 'Y' coordinate for the noise fade factor's inner radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeOuterY">
            <summary>
            The normalized world position 'Y' coordinate for the noise fade factor's outer radius.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._noiseFadeRangeFactor">
            <summary>
            A pre-calculated value used in lerping the noise fade factor.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config._oneOverLinearRemapRange">
            <summary>
            A pre-calculated value representing one divided by the linear remapping range.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates the configuration from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the configuration.</param>
            <returns>The configuration created from the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config.GetResult(System.Double,System.Double[])">
            <summary>
            Gets mask value result at the specified 'Y' position.
            </summary>
            <param name="y">The world position normalized 'Y' position at which to get the value.</param>
            <param name="data">The data array.</param>
            <returns>The mask value result.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.PolarCapMask.Config.SaveToXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the configuration to XML.
            </summary>
            <param name="xml">The XML to which to save the configuration.</param>
            <returns>The XML containing the configuration. this should be the same as the XML element passed in.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.RadialFlatten">
            <summary>
            A vertex data planet modifier that flattens the terrain in a radius around a specific latitude/longitude coordinate.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._latlong">
            <summary>
            The latitude and longitude at which the flattening should occur.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._elevation">
            <summary>
            The elevation at which the flattening should occur.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._innerRadius">
            <summary>
            The inner radius of the area to flatten.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._outerRadius">
            <summary>
            The outer radius of the area to flatten.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._falloffPower">
            <summary>
            The falloff power used when lerping between the target elevation and original elevation.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._position">
            <summary>
            The sphere unit vector position at which the flattening should occur.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._unitSphereInnerRadius">
            <summary>
            The inner radius of the flattening on a unit sphere.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._unitSphereOuterRadiusSquared">
            <summary>
            The outer radius squared of the flattening on a unit sphere.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RadialFlatten._unitSphereOuterToInnerRadiusDistance">
            <summary>
            The distance between the outer and inner radius values on a unit sphere.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.RadialFlatten.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RadialFlatten.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RadialFlatten.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RadialFlatten.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RadialFlatten.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RadialFlatten.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.RemapCurve">
            <summary>
            A vertex data planet modifier that remaps a data value based on a curve.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapCurve._dataIndexInput">
            <summary>
            The index of the data value to use as the input being remapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapCurve._dataIndexOutput">
            <summary>
            The index of the data value to use as the output after being remapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapCurve._remapCurve">
            <summary>
            The curve used to remap the value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapCurve._remapCurveSampler">
            <summary>
            The animation curve sampler used to evaluate the curve on background threads.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapCurve.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapCurve.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapCurve.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapCurve.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapCurve.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.RemapLinear">
            <summary>
            A vertex data planet modifier that remaps a data value linearly.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._dataIndexInput">
            <summary>
            The index of the data value to use as the input being remapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._dataIndexOutput">
            <summary>
            The index of the data value to use as the output after being remapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._fromMaxValue">
            <summary>
            The starting maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._fromMinValue">
            <summary>
            The starting minimum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._oneOverLerpFromRange">
            <summary>
            One over the range of the original min max values (used when linearly interpolating).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._toMaxValue">
            <summary>
            The maximum value after remapping.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinear._toMinValue">
            <summary>
            The minimum value after remapping.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinear.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinear.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinear.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinear.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinear.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.RemapLinearDual">
            <summary>
            A vertex data planet modifier that remaps a data value linearly above and below zero.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._dataIndexInput">
            <summary>
            The index of the data value to use as the input being remapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._dataIndexOutput">
            <summary>
            The index of the data value to use as the output after being remapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._fromMaxValue">
            <summary>
            The starting maximum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._fromMinValue">
            <summary>
            The starting minimum value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._lerpToRange">
            <summary>
            The range between the min/max values to which we are lerping.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._oneOverLerpFromRange">
            <summary>
            One over the range of the original min max values (used when linearly interpolating).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._toMaxValue">
            <summary>
            The maximum value after remapping.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.RemapLinearDual._toMinValue">
            <summary>
            The minimum value after remapping.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinearDual.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinearDual.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinearDual.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinearDual.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.RemapLinearDual.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.Terraces">
            <summary>
            A planet vertex data modifier used to create terraces.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Terraces._dataIndexInput">
            <summary>
            The index of the data value to use as the input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Terraces._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Terraces._powerExponent">
            <summary>
            The power exponent that dampens the noise between terraces.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.Terraces._terraces">
            <summary>
            The terrace positions (between -1.0 and 1.0) in order.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Terraces.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Terraces.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Terraces.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Terraces.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.Terraces.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData">
            <summary>
            A planet modifier used to read data from a texture and store the result in a data index.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData._cubeFaceTextures">
            <summary>
            The dictionary of loaded textures keyed by the cube face they are associated with.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData._textures">
            <summary>
            The textures configured for this planet modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData._textureSamplers">
            <summary>
            The texture samplers keyed by texture path and channel.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace">
            <summary>
            An enumeration used for defining cube faces.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace.Xpos">
            <summary>
            The positive X cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace.Xneg">
            <summary>
            The negative X cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace.Ypos">
            <summary>
            The positive Y cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace.Yneg">
            <summary>
            The negative Y cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace.Zpos">
            <summary>
            The positive Z cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace.Zneg">
            <summary>
            The negative Z cube face.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation">
            <summary>
            An enumeration defining the 4 basic rotation of a cube face texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation.RotateDefault">
            <summary>
            The default (zero) rotation of a cube face texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation.Rotate90">
            <summary>
            The 90 degree rotation of a cube face texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation.Rotate180">
            <summary>
            The 180 degree rotation of a cube face texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation.Rotate270">
            <summary>
            The 270 degree rotation of a cube face texture.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.CreateSamplerFromTexture(ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem)">
            <summary>
            Creates the texture sampler from the specified texture data item.
            </summary>
            <param name="textureDataItem">The texture data item.</param>
            <returns>The requested texture sampler.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.GetCubeFaceAndPosition(UnityEngine.Vector3d,ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace@,UnityEngine.Vector2d@)">
            <summary>
            Gets the cube face and position given the specified normalized sphere position.
            </summary>
            <param name="position">The normalized sphere position.</param>
            <param name="face">The cube face.</param>
            <param name="facePosition">The cube face position.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.InitializeTextureSampler(ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem)">
            <summary>
            Initializes the texture sampler for the specified texture data item.
            </summary>
            <param name="textureDataItem">The texture data item.</param>
            <returns>The requested texture sampler.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.InitializeTextureSamplers">
            <summary>
            Initializes the texture samplers.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.RotationLeft(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation)">
            <summary>
            Get the new rotation of a cube face texture given the
            current specified rotation and rotating it to the left.
            </summary>
            <param name="rotation">The current rotation.</param>
            <returns>The new rotation.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.RotationRight(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTextureRotation)">
            <summary>
            Get the new rotation of a cube face texture given the
            current specified rotation and rotating it to the right.
            </summary>
            <param name="rotation">The current rotation.</param>
            <returns>The new rotation.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.WrapDown(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture)">
            <summary>
            Wraps the cube face texture downwards.
            </summary>
            <param name="texture">The texture to wrap.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.WrapLeft(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture)">
            <summary>
            Wraps the cube face texture to the left.
            </summary>
            <param name="texture">The texture to wrap.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.WrapRight(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture)">
            <summary>
            Wraps the cube face texture to the right.
            </summary>
            <param name="texture">The texture to wrap.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.WrapUp(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture)">
            <summary>
            Wraps the cube face texture upwards.
            </summary>
            <param name="texture">The texture to wrap.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceComparer">
            <summary>
            A equality comparer for the cube face enumeration.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceComparer.Equals(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace,ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <cref name="CubeFace" /> to compare.</param>
            <param name="y">The second object of type <cref name="CubeFace" /> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceComparer.GetHashCode(ModApi.Planet.Modifiers.VertexData.TextureData.CubeFace)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture">
            <summary>
            A texture that has been mapped to a cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.Bounds">
            <summary>
            The bounds of the texture in cube face coordinates
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.Face">
            <summary>
            The cube face of the texture's center position.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.InterpolationMethod">
            <summary>
            The interpolation method for querying the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.MaxOutputValue">
            <summary>
            The maximum output value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.Rotation">
            <summary>
            The rotation of the texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.Sampler">
            <summary>
            The texture sampler
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.Size">
            <summary>
            The size of the texture relative to the cube face.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.CubeFaceTexture.Sample(UnityEngine.Vector2d,System.Single[][])">
            <summary>
            Samples the texture for the specified cube face position.
            </summary>
            <param name="cubePosition">The cube face position.</param>
            <param name="tempArray">The temporary array used for bicubic sampling.</param>
            <returns>The sample result.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem">
            <summary>
            A texture and related information to be mapped to a cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Face">
            <summary>
            The cube face of the texture's center position.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.InterpolationMethod">
            <summary>
            The interpolation method for querying the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.MaxOutputValue">
            <summary>
            The maximum output value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Path">
            <summary>
            The path to the source texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Position">
            <summary>
            The position of the texture on the cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Rotation">
            <summary>
            The rotation of the texture in degrees.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Size">
            <summary>
            The size of the texture relative to the cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.TextureChannel">
            <summary>
            The texture channel (0 to 3 corresponding to RGBA).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.TextureChannelBitsPerPixel">
            <summary>
            The number of bits per pixel in the selected texture channel.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem"/> class.
            </summary>
            <param name="xml">The XML from which to instantiate the object.</param>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.Sampler">
            <summary>
            Gets or sets the texture sampler
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.CreateXml">
            <summary>
            Creates the XML element representing this instance.
            </summary>
            <returns>The XML element representing this instance.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.LoadTexture(ModApi.Planet.PlanetTerrainDataScript)">
            <summary>
            Loads the texture.
            </summary>
            <param name="terrainData">The terrain data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance based on the specified XML element.
            </summary>
            <param name="xml">The XML element used to restore this instance.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData.TextureDataItem.UnloadTexture">
            <summary>
            Unloads the texture.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData2">
            <summary>
            A planet modifier used to read data from a texture and store the result in a data index.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2._dataIndexOutput">
            <summary>
            The index of the data value to use as the output.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2._textures">
            <summary>
            The textures configured for this planet modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2._textureSamplers">
            <summary>
            The texture samplers keyed by texture path and channel.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2._textureStamps">
            <summary>
            The texture stamps.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.CreateSamplerFromTexture(ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem)">
            <summary>
            Creates the texture sampler from the specified texture data item.
            </summary>
            <param name="textureDataItem">The texture data item.</param>
            <returns>The requested texture sampler.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.InitializeTextureSampler(ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem)">
            <summary>
            Initializes the texture sampler for the specified texture data item.
            </summary>
            <param name="textureDataItem">The texture data item.</param>
            <returns>The requested texture sampler.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.InitializeTextureSamplers">
            <summary>
            Initializes the texture samplers.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem">
            <summary>
            A texture and related information to be mapped to a cube face.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.InterpolationMethod">
            <summary>
            The interpolation method for querying the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Latitude">
            <summary>
            The latitude of the center position of the texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Longitude">
            <summary>
            The longitude of the center position of the texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.MaxOutputValue">
            <summary>
            The maximum output value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Path">
            <summary>
            The path to the source texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Rotation">
            <summary>
            The rotation of the texture in degrees.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Size">
            <summary>
            The size of the texture in unit sphere space.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.TextureChannel">
            <summary>
            The texture channel (0 to 3 corresponding to RGBA).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.TextureChannelBitsPerPixel">
            <summary>
            The number of bits per pixel in the selected texture channel.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem"/> class.
            </summary>
            <param name="xml">The XML from which to instantiate the object.</param>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.Sampler">
            <summary>
            Gets or sets the texture sampler
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.CreateXml">
            <summary>
            Creates the XML element representing this instance.
            </summary>
            <returns>The XML element representing this instance.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.LoadTexture(ModApi.Planet.PlanetTerrainDataScript)">
            <summary>
            Loads the texture.
            </summary>
            <param name="terrainData">The terrain data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores this instance based on the specified XML element.
            </summary>
            <param name="xml">The XML element used to restore this instance.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem.UnloadTexture">
            <summary>
            Unloads the texture.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp">
            <summary>
            A class containing the data need to apply a texture to quadsphere vertices at runtime.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.BiTangent">
            <summary>
            The bitangent vector to the sphere position.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.Height">
            <summary>
            The texture height (in tangent plane space).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.InterpolationMethod">
            <summary>
            The interpolation method for querying the texture data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.MaxOutputValue">
            <summary>
            The maximum output value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.MinimumDotProduct">
            <summary>
            The minimum required dot product of the input position and plane normal in order to apply the texture stamp.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.Position">
            <summary>
            The sphere position at which the texture is centered on the unit sphere.
            This is also the normal of the plane to which the texture is mapped.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.Sampler">
            <summary>
            The texture sampler.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.Tangent">
            <summary>
            The tangent vector to the sphere position.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.Width">
            <summary>
            The texture width (in tangent plane space).
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp.#ctor(ModApi.Planet.Modifiers.VertexData.TextureData2.TextureDataItem)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.TextureData2.TextureStamp"/> class.
            </summary>
            <param name="textureData">The texture data.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight">
            <summary>
            A vertex data planet modifier that updates the height of a vertex.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight._dataIndex">
            <summary>
            The index of the data value containing the change in height for the vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight._ignoreBiomeStrengthScale">
            <summary>
            If this is a biome specific modifier, the biome strength scale will not be applied to this height.
            In other words, the height will be updated on the common vertex data object and not the biome vertex data object.
            This has no effect if this is a non-biome specific modifier.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.UpdateFinalHeight.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier">
            <summary>
            A base class for a vertex data planet modifier than can run in more than one vertex data pass type.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier._allPassTypes">
            <summary>
            All pass types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier._pass">
            <summary>
            The pass in which this modifier should run.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier.Pass">
            <summary>
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier.SupportedPassTypes">
            <summary>
            Gets the pass types supported by this modifier.
            </summary>
            <value>
            The pass types supported by this modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.DomainWarpingType">
            <summary>
            The type of domain warping to use with the noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DomainWarpingType.None">
            <summary>
            No domain warping.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DomainWarpingType.Basic">
            <summary>
            Basic domain warping.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DomainWarpingType.Fractal">
            <summary>
            Fractal domain warping.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.DomainWarpingType.Scaled">
            <summary>
            The scaled domain warping.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.FractalAmplitudeType">
            <summary>
            An enumeration defining the different fractal amplitude types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.FractalAmplitudeType.Default">
            <summary>
            The default fractal amplitude type (based on gain and octaves).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.FractalAmplitudeType.Manual">
            <summary>
            The manual fractal amplitude type (manually set per octave).
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.FractalLacunarityType">
            <summary>
            An enumeration defining the different fractal lacunarity types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.FractalLacunarityType.Default">
            <summary>
            The default fractal lacunarity type (single value).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.FractalLacunarityType.Manual">
            <summary>
            The manual fractal lacunarity type (manually set per octave).
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.NoiseType">
            <summary>
            An enumeration defining the different types of noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.None">
            <summary>
            No noise type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.Cellular">
            <summary>
            Cellular noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.Cubic">
            <summary>
            Cubic noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.CubicFractal">
            <summary>
            Cubic fractal noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.Perlin">
            <summary>
            Perlin noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.PerlinFractal">
            <summary>
            Perlin fractal noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.Simplex">
            <summary>
            Simplex noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.SimplexFractal">
            <summary>
            Simplex fractal noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.Value">
            <summary>
            Value noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.ValueFractal">
            <summary>
            Value fractal noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.ValueFractalWithDerivative">
            <summary>
            Value fractal noise with derivatives.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.WhiteNoise">
            <summary>
            White noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.NoiseType.CellularLN">
            <summary>
            Cellular noise using LibNoise.
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.VertexDataNoise">
            <summary>
            A vertex data planet modifier used to generate noise values.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataCommonPassPlanetModifier" />
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._mapColorGradientDefault">
            <summary>
            The map color gradient default value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._typeFieldMap">
            <summary>
            The dictionary mapping the fields of this class to the associated noise types and other settings that require them.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._cellularDistanceFunction">
            <summary>
            The cellular distance function value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._cellularReturnType">
            <summary>
            The cellular return type value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._cubemap">
            <summary>
            The cubemap to use (if any).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._dataIndex">
            <summary>
            The index in the vertex data array at which the noise result is stored.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._displacement">
            <summary>
            The displacement value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._domainWarping">
            <summary>
            The domain warping noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._fractalAmplitudes">
            <summary>
            The fractal amplitudes for the manual fractal amplitude type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._fractalAmplitudeType">
            <summary>
            The fractal amplitude type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._fractalLacunarityType">
            <summary>
            The fractal lacunarity type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._fractalType">
            <summary>
            The fractal type value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._fractalWithDerivativeType">
            <summary>
            The fractal with derivative type value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._frequency">
            <summary>
            The frequency value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._gain">
            <summary>
            The gain value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._interpolation">
            <summary>
            The interpolation value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._lacunarities">
            <summary>
            The manual lacunarity values.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._lacunarity">
            <summary>
            The lacunarity value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._mapColorGradient">
            <summary>
            The color gradient used in planet studio when using a brush on this cubemap.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._mapIgnore">
            <summary>
            A value that, if <c>true</c>, will cause the modifier to ignore the cubemap if it exists.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._mapName">
            <summary>
            The cubemap name associated with this noise modifier (if any).
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._mapSampleMode">
            <summary>
            The map sampling mode.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._maskDataIndex">
            <summary>
            The mask data index input.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._noise">
            <summary>
            The FastNoise reference if using FastNoise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._noiseGenerator">
            <summary>
            The noise generator interface.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._noiseType">
            <summary>
            The noise type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._octaves">
            <summary>
            The octaves value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._powerExponent">
            <summary>
            The power exponent used in some noise types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._seed">
            <summary>
            The seed value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._slopeErosionStrength">
            <summary>
            The slope erosion strength.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._strength">
            <summary>
            The strength (scale) of the noise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise._useDistance">
            <summary>
            The use distance flag.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.MapColorGradient">
            <summary>
            Gets the color gradient used in planet studio when using a brush on this cubemap.
            </summary>
            <value>The color gradient used in planet studio when using a brush on this cubemap.</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.MapDisplayName">
            <summary>
            Gets the cubemap display name associated with this noise modifier (if any).
            </summary>
            <value>The cubemap display name associated with this noise modifier (if any).</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.MapId">
            <summary>
            Gets the cubemap id associated with this modifier (if any).
            This should be unique between all modifiers of a celestial body.
            </summary>
            <value>The cubemap id associated with this modifier (if any).</value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.SupportsRandomization">
            <summary>
            Gets a value indicating whether this modifier supports randomization.
            </summary>
            <value>
              <c>true</c> if this modifier supports randomization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DataIndex">
            <summary>
            Gets the index in the vertex data array at which the noise result is stored.
            </summary>
            <value>
            The index in the vertex data array at which the noise result is stored.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GenerateMap(System.Int32)">
            <summary>
            Generates a default cubemap for this modifier.
            The cubemap will be a linear grayscale texture with 6 faces positioned in a single horizontal row in the order of X+, X-, Y+, Y-, Z+, Z-.
            </summary>
            <param name="size">The size (width/height) of the individual cubemap face textures.</param>
            <returns>The byte array representing the cubemap encoded as a PNG.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetCurrentNoiseFields">
            <summary>
            Gets the required fields for the current noise type.
            </summary>
            <returns>The required fields for the current noise type.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.Initialize(ModApi.Planet.IPlanetData)">
            <summary>
            Initializes the modifier.
            </summary>
            <param name="planetData">The planet data.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.Randomize(ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags)">
            <summary>
            Randomizes the settings for this modifier.
            </summary>
            <param name="flags">The flags specifying what settings should be randomized.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the modifier as XML.
            </summary>
            <param name="xml">The XML element to which to save the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetNoise(System.Double,System.Double,System.Double,System.Double[],ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the noise value.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <param name="data">The data array.</param>
            <param name="cacheData">The cache data.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.OnValidate">
            <summary>
            Called when the unity editor performs validation on the component.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the modifier from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the modifier.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.FastNoiseType">
            <summary>
            Converts the noise type enumeration to the equivalent FastNoise noise type enumeration.
            </summary>
            <returns>The FastNoise noise type enumeration.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetCurrentNoiseFields(System.Collections.Generic.List{System.Reflection.FieldInfo})">
            <summary>
            Gets the required fields for the current noise type.
            </summary>
            <param name="fields">The list of fields.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetField``1(System.Linq.Expressions.Expression{System.Func{ModApi.Planet.Modifiers.VertexData.VertexDataNoise,``0}})">
            <summary>
            Gets the specified field info.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector.</param>
            <returns>The requested field info.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.GetVertexDataForMap(System.Double,System.Double,System.Double)">
            <summary>
            Gets the vertex data at the specified position for a cubemap.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.InitializeCubemapSampler">
            <summary>
            Initializes the cubemap sampler (if necessary).
            </summary>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping">
            <summary>
            The class wrapping the domain warping functionality.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._typeFieldMap">
            <summary>
            The dictionary mapping the fields of this class to the associated domain warping types that require them.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._amplitude">
            <summary>
            The domain warping amplitude value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._domainWarpingType">
            <summary>
            The domain warping type.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._frequency">
            <summary>
            The domain warping frequency value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._gain">
            <summary>
            The domain warping gain value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._interpolation">
            <summary>
            The domain warping interpolation value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._lacunarity">
            <summary>
            The domain warping lacunarity value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._noise">
            <summary>
            The FastNoise reference if using FastNoise.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._octaves">
            <summary>
            The domain warping octaves value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._seed">
            <summary>
            The domain warping seed value.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping._warpScale">
            <summary>
            The domain warping scale for scaled type domain warping.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.DomainWarpingType">
            <summary>
            Gets the type of the domain warping.
            </summary>
            <value>
            The type of the domain warping.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.GetCurrentFields">
            <summary>
            Gets the required fields for the current domain warping type.
            </summary>
            <returns>The required fields for the current domain warping type.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.Randomize(ModApi.Planet.Modifiers.PlanetModifierRandomizationFlags)">
            <summary>
            Randomizes the settings for the domain warping.
            </summary>
            <param name="flags">The flags specifying what settings should be randomized.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.RestoreXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the settings from the specified XML.
            </summary>
            <param name="xml">The XML element from which to restore the settings.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the settings as XML.
            </summary>
            <param name="xml">The XML element to which to save the settings.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.Warp(System.Double@,System.Double@,System.Double@)">
            <summary>
            Warps the specified inputs.
            </summary>
            <param name="x">The x input to warp.</param>
            <param name="y">The y input to warp.</param>
            <param name="z">The z input to warp.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.GetCurrentFields(System.Collections.Generic.List{System.Reflection.FieldInfo})">
            <summary>
            Gets the required fields for the current domain warping type.
            </summary>
            <param name="fields">The list of fields.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping.GetField``1(System.Linq.Expressions.Expression{System.Func{ModApi.Planet.Modifiers.VertexData.VertexDataNoise.DomainWarping,``0}})">
            <summary>
            Gets the specified field info.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="fieldSelector">The field selector.</param>
            <returns>The requested field info.</returns>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier">
            <summary>
            The base class for planet modifiers that provide vertex data.
            </summary>
            <seealso cref="T:ModApi.Planet.Modifiers.PlanetModifier" />
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.Pass">
            <summary cref="T:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType">
            Gets the pass in which this modifier runs.
            </summary>
            <value>
            The pass in which this modifier runs.
            </value>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.BenchmarkVertexDataPlanetModifiers">
            <summary>
            Editor utility benchmarks the vertex data planet modifiers.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.GetMinMaxHeight(UnityEngine.Vector2d)">
            <summary>
            Adjusts the minimum and maximum heights of the planet based on the possible results of this modifier.
            The x component of the vector represents the minimum height and the y component represents the maximum height.
            </summary>
            <param name="minMaxHeight">The current minimum and maximum height of the planet.</param>
            <returns>The new minimum and maximum heights of the planet based on the current min max plus this modifier.</returns>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Gets the vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.GetVertexData(ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetBiomeVertexData)">
            <summary>
            Gets the biome-specific vertex data for the specified vertex.
            </summary>
            <param name="input">The input data needed to generate vertex data.</param>
            <param name="data">The vertex data object to be updated.</param>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem">
            <summary>
            A class representing a single modifier benchmark item.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem.#ctor(ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem"/> class.
            </summary>
            <param name="modifier">The modifier associated with this item.</param>
            <param name="name">The name of the modifier.</param>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem.Modifier">
            <summary>
            Gets the modifier.
            </summary>
            <value>
            The modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem.Name">
            <summary>
            Gets the name of the modifier.
            </summary>
            <value>
            The name of the modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem.Percentage">
            <summary>
            Gets or sets the percentage of the total benchmarking time used exclusively by this modifier.
            </summary>
            <value>
            The percentage of the total benchmarking time used exclusively by this modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem.Stopwatch">
            <summary>
            Gets the stopwatch used to benchmark the modifier.
            </summary>
            <value>
            The stopwatch used to benchmark the modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier.ModifierBenchmarkItem.TotalTime">
            <summary>
            Gets or sets the total time spent benchmarking the modifier.
            </summary>
            <value>
            The total time spent benchmarking the modifier.
            </value>
        </member>
        <member name="T:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType">
            <summary>
            The vertex data planet modifier pass types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType.Biome">
            <summary>
            The 'Biome' pass which runs first.
            This pass is responsible for setting the biome strength values.
            It may also set any other output data as well.
            The input position is available in this pass but the normal is not available.
            This pass is only ran for common modifiers and will not be executed for biome specific modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType.Height">
            <summary>
            The 'Height' pass which runs second.
            This pass runs after the 'Biome' pass and is responsible for setting the height value.
            It may also set any other output data as well other than the biome strength values.
            The input position is available in this pass but the normal is not available.
            This pass is ran for common modifiers first and then executed for biome specific modifiers second.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType.HeightFinal">
            <summary>
            The 'HeightFinal' pass which runs third.
            This pass is just like the Height pass but it runs after it and is useful for
            common modifiers that need to run after biome specific height pass modifiers.
            The input position is available in this pass but the normal is not available.
            This pass is only ran for common modifiers and will not be executed for biome specific modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType.Final">
            <summary>
            The 'Final' pass which runs last for the terrain.
            This pass runs after all other terrain passes and is responsible for setting any remaining vertex data that has not been set.
            It may set any data other than the biome strength values and the height value.
            The input position and the normal position are both available in this pass.
            This pass is ran for common modifiers first and then executed for biome specific modifiers second.
            </summary>
        </member>
        <member name="F:ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType.Water">
            <summary>
            The 'Water' pass which runs after the 'TerrainFinal' pass.
            This pass is responsible for setting water related data such as color.
            This pass is ran for common modifiers first and then executed for biome specific modifiers second.
            </summary>
        </member>
        <member name="T:ModApi.Planet.IPlanetAtmosphereData">
            <summary>
            Atmospheric data for a planet.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.CrushAltitude">
            <summary>
            Gets the atmospheric pressure crush altitude.
            </summary>
            <value>
            The atmospheric pressure crush altitude.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.Description">
            <summary>
            Gets the description of the atmosphere.
            </summary>
            <value>The description of the atmosphere.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.HasPhysicsAtmosphere">
            <summary>
            Gets a value indicating whether this planet has an atmosphere.
            </summary>
            <value>
            <c>true</c> if this planet has an atmosphere; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.Height">
            <summary>
            Gets the height of the atmosphere.
            </summary>
            <value>
            The height of the atmosphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.MeanGamma">
            <summary>
            Gets the ideal gas mean gamma/specific heat value for the atmospheric composition.
            </summary>
            <value>
            The ideal gas mean gamma/specific heat value for the atmospheric composition.
            </value>
            <remarks>
            https://en.wikipedia.org/wiki/Heat_capacity_ratio
            https://www.engineeringtoolbox.com/specific-heat-ratio-d_608.html
            </remarks>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.MeanMassPerMolecule">
            <summary>
            Gets the mean mass per molecule of atmosphere.
            </summary>
            <value>
            The mean mass per molecule of atmosphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.MeanSurfaceTemperature">
            <summary>
            Gets the mean surface temperature, in Kelvin.
            </summary>
            <value>
            The mean surface temperature, in Kelvin.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.MeanSurfaceTemperatureDay">
            <summary>
            Gets the mean surface temperature at noon, in Kelvin.
            </summary>
            <value>
            The mean surface temperature at noon, in Kelvin.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.MeanSurfaceTemperatureNight">
            <summary>
            Gets the mean surface temperature at midnight, in Kelvin.
            </summary>
            <value>
            The mean surface temperature at midnight, in Kelvin.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.ScaleHeight">
            <summary>
            Gets the scale height of the atmosphere.
            </summary>
            <value>
            The scale height of the atmosphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetAtmosphereData.SurfaceAirDensity">
            <summary>
            Gets the air density (kg/m^3) of the atmosphere at sea level.
            </summary>
            <value>
            The air density (kg/m^3) of the atmosphere at sea level.
            </value>
        </member>
        <member name="M:ModApi.Planet.IPlanetAtmosphereData.SampleAltitude(System.Double)">
            <summary>
            Calculates the atmosphere at the specified altitude.
            </summary>
            <param name="altitude">The altitude.</param>
            <returns>The atmosphere sample.</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetAtmosphereData">
            <summary>
            Atmospheric data for a planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData.EarthSurfaceAirDensity">
            <summary>
            The earth atmospheric density at sea level in kg/m^3
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData.BoltzmannConstant">
            <summary>
            The Boltzmann constant
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData.MinAirDensity">
            <summary>
            The minimum surface air density in kg/m^3
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._crushAltitude">
            <summary>
            The atmospheric pressure crush altitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._description">
            <summary>
            The description of the atmosphere.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._hasPhysicsAtmosphere">
            <summary>
            A value indicating whether this planet has an atmosphere.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._meanAtomicMassPerMolecule">
            <summary>
            The mean mass per molecule of atmosphere, in daltons.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._meanGamma">
            <summary>
            The ideal gas mean gamma/specific heat value for the atmospheric composition.
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Heat_capacity_ratio
            https://www.engineeringtoolbox.com/specific-heat-ratio-d_608.html
            </remarks>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._meanSurfaceTemperatureDay">
            <summary>
            The mean surface temperature at noon, in Kelvin.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._meanSurfaceTemperatureNight">
            <summary>
            The mean surface temperature at midnight, in Kelvin.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetAtmosphereData._surfaceAirDensity">
            <summary>
            The air density (kg/m^3) of the atmosphere at sea level.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetAtmosphereData"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.CrushAltitude">
            <summary>
            Gets or sets the atmospheric pressure crush altitude.
            </summary>
            <value>
            The atmospheric pressure crush altitude.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.Description">
            <summary>
            Gets or sets the description of the atmosphere.
            </summary>
            <value>The description of the atmosphere.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.HasPhysicsAtmosphere">
            <summary>
            Gets or sets a value indicating whether this planet has an atmosphere.
            </summary>
            <value>
            <c>true</c> if this planet has an atmosphere; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.Height">
            <summary>
            Gets the height of the atmosphere.
            </summary>
            <value>
            The height of the atmosphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.MeanGamma">
            <summary>
            Gets the ideal gas mean gamma/specific heat value for the atmospheric composition.
            </summary>
            <value>
            The ideal gas mean gamma/specific heat value for the atmospheric composition.
            </value>
            <remarks>
            https://en.wikipedia.org/wiki/Heat_capacity_ratio
            https://www.engineeringtoolbox.com/specific-heat-ratio-d_608.html
            </remarks>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.MeanMassPerMolecule">
            <summary>
            Gets the mean mass per molecule of atmosphere, in kg.
            </summary>
            <value>
            The mean mass per molecule of atmosphere, in kg.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.MeanSurfaceTemperature">
            <summary>
            Gets the mean surface temperature, in Kelvin.
            </summary>
            <value>
            The mean surface temperature, in Kelvin.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.MeanSurfaceTemperatureDay">
            <summary>
            Gets the mean surface temperature at noon, in Kelvin.
            </summary>
            <value>
            The mean surface temperature at noon, in Kelvin.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.MeanSurfaceTemperatureNight">
            <summary>
            Gets the mean surface temperature at midnight, in Kelvin.
            </summary>
            <value>
            The mean surface temperature at midnight, in Kelvin.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.ScaleHeight">
            <summary>
            Gets the scale height of the atmosphere.
            </summary>
            <value>
            The scale height of the atmosphere.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetAtmosphereData.SurfaceAirDensity">
            <summary>
            Gets or sets air density (kg/m^3) of the atmosphere at sea level.
            </summary>
            <value>
            The air density (kg/m^3) of the atmosphere at sea level.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CalculateAirDensity(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the air density at the specified altitude.  Note: This method returns the true calculated density and does not "round" down to zero when density becomes very low.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="scaleHeight">The atmosphere's scale height</param>
            <param name="surfaceAirDensity">The density of the atmosphere at the surface (or 1bar if gas planet).</param>
            <returns>
            The air density.
            </returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CalculateAirPressure(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the air pressure at the specified altitude.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="scaleHeight">The atmosphere's scale height.</param>
            <param name="surfaceAirDensity">The density of the atmosphere at the surface (or 1bar if gas planet).</param>
            <param name="surfaceAirTemperature">The temperature of the atmosphere at the surface.</param>
            <param name="meanMassPerMolecule">The mean mass per molecule of atmosphere, in kg.</param>
            <returns>The air pressure in Pa.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CalculateAtmosphereHeight(System.Double,System.Double)">
            <summary>
            Calculates the height of the atmosphere, in meters.
            </summary>
            <param name="scaleHeight">The scale-height of the atmosphere.</param>
            <param name="surfaceAirDensity">The density of the atmosphere at the surface (or 1bar if gas planet).</param>
            <returns>The height of the atmosphere, in meters.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CalculateScaleHeight(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the scale height of the atmosphere.
            </summary>
            <param name="surfaceGravity">The surface gravity.</param>
            <param name="meanMassPerMolecule">The mean mass of a single molecule of atmosphere, in kg.</param>
            <param name="meanSurfaceTemperature">The mean surface temperature.</param>
            <returns>The scale height of the atmosphere.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CalculateSpeedOfSound(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the speed of sound.
            </summary>
            <param name="temperature">The temperature, in Kelvin.</param>
            <param name="meanGamma">The mean gamma value for the ideal gasses which make up the atmosphere.</param>
            <param name="meanMassPerMolecule">The mean mass of a single molecule of atmosphere, in kg.</param>
            <returns>The speed of sound.</returns>
            <remarks>
            See: https://en.wikipedia.org/wiki/Speed_of_sound#Speed_of_sound_in_ideal_gases_and_air
            </remarks>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CalculateTemperature(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the temperature.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="height">The height in meters.</param>
            <param name="surfaceTemperature">The surface temperature in Kelvin.</param>
            <returns>
            The temperature in Kelvin.
            </returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.CreateFromXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetDataScript)">
            <summary>
            Creates an atmosphere data object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the object.</param>
            <param name="planet">The planet to which the atmosphere belongs.</param>
            <returns>The atmosphere data object represented by the XML.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.GenerateInspectorModel(ModApi.Ui.Inspector.GroupModel,ModApi.Planet.PlanetDataScript)">
            <summary>
            Generates the inspector models and adds it to the group model.
            </summary>
            <param name="group">The group model.</param>
            <param name="planet">The planet.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.RecalculateDependentParameters(System.Double)">
            <summary>
            Recalculates the specified surface gravity.
            </summary>
            <param name="surfaceGravity">The surface gravity.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.SampleAltitude(System.Double)">
            <summary>
            Samples the atmosphere at the specified altitude.
            </summary>
            <param name="altitude">The altitude.</param>
            <returns>The atmosphere sample.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetAtmosphereData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the atmosphere data as XML.
            </summary>
            <param name="xml">The XML element to which to save the data.</param>
            <returns>The XML element representing the atmosphere data (same instance as was passed in to the class).</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetBiome">
            <summary>
            A script defining a biome for a planet.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Planet.PlanetBiome._initialized">
            <summary>
            A value indicating whether the biome has been initialized.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetBiome._name">
            <summary>
            The name of the biome.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetBiome.Modifiers">
            <summary>
            Gets the planet modifiers associated with the biome.
            </summary>
            <value>
            The planet modifiers associated with the biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetBiome.Name">
            <summary>
            Gets the name of the biome.
            </summary>
            <value>
            The name of the biome.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetBiome.CreateDefaultBiome(UnityEngine.GameObject)">
            <summary>
            Creates a default biome object.
            </summary>
            <param name="biomeObject">The object on which to add the biome script.</param>
            <returns>The default biome that was created.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetBiome.CreateFromXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetTerrainDataScript)">
            <summary>
            Creates a biome object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the biome.</param>
            <param name="terrainData">The terrain data script associated with this terrain biome object.</param>
            <returns>The created biome.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetBiome.Initialize">
            <summary>
            Initializes the biome.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetBiome.RefreshModifiersList">
            <summary>
            Refreshes the mods list.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetBiome.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the biome data as XML.
            </summary>
            <param name="xml">The XML to which to save the biome.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetBiome.GetModifiers(System.Collections.Generic.List{ModApi.Planet.Modifiers.PlanetModifier},System.Collections.Generic.List{ModApi.Planet.Modifiers.PlanetModifier},UnityEngine.Transform)">
            <summary>
            Gets the planet modifiers associated with the specified object.
            </summary>
            <param name="modifierList">The biome modifier list.</param>
            <param name="tempList">The temporary list used to get components and avoid garbage generation.</param>
            <param name="obj">The object from which the get planet modifiers.</param>
        </member>
        <member name="T:ModApi.Planet.PlanetBiomeVertexData">
            <summary>
            An object containing information related to a single vertex in a single biome on a planet quad.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetBiomeVertexData.BiomeIndex">
            <summary>
            The index of the biome associated with this data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetBiomeVertexData.Color">
            <summary>
            The color of the planet at this vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetBiomeVertexData.CommonData">
            <summary>
            The vertex data from the common vertex data passes (non-biome-specific data).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetBiomeVertexData.Data">
            <summary>
            A temporary array used for storing data passed between vertex data mods (such as noise results).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetBiomeVertexData.Height">
            <summary>
            The height of the planet at this vertex.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetBiomeVertexData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetBiomeVertexData"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetCubemapDetailType">
            <summary>
            An enumeration defining the different cubemap detail types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemapDetailType.HighDetail">
            <summary>
            A cubemap with high detail (used for close viewing).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemapDetailType.LowDetail">
            <summary>
            A cubemap with low detail (used for distant viewing).
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetCubemapType">
            <summary>
            An enumeration defining the different cubemap types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemapType.Color">
            <summary>
            A cubemap containing color data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemapType.Normal">
            <summary>
            A cubemap containing normal data.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetCubemaps">
            <summary>
            A static utility class for working with planet cubemaps.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemaps.CubemapFileSuffixes">
            <summary>
            The cubemap file suffixes, used when saving and loading a cubemap from the file system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemaps.EquirectangularMapDownsampleIterations">
            <summary>
            The equirectangular maps downsample iterations.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemaps.EquirectangularMapHeight">
            <summary>
            The equirectangular maps max height.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemaps.EquirectangularMapWidth">
            <summary>
            The equirectangular maps max width.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetCubemaps.ByteToFloat">
            <summary>
            A lookup table for converting bytes to floats.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Planet.PlanetCubemaps"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.CreateCubemaps(ModApi.Planet.IPlanetData)">
            <summary>
            Creates the cubemaps for the specified planet.
            </summary>
            <param name="planet">The planet data for which to create cubemaps.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.CreateEquirectangularMap(ModApi.Planet.IPlanetData,System.Single)">
            <summary>
            Creates the equirectangular maps for the planet.
            </summary>
            <param name="planet">The planet.</param>
            <param name="brightnessAdjustment">The brightness adjustment value.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.CreateEquirectangularMap(ModApi.Planet.IPlanetData,System.Int32,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Creates the equirectangular maps for the planet.
            </summary>
            <param name="planet">The planet.</param>
            <param name="width">The width of the map in pixels.</param>
            <param name="height">The height of the map in pixels.</param>
            <param name="downsampleIterations">The number of downsampled images that are created (halving in size each time).</param>
            <param name="brightnessAdjustment">The brightness adjustment value.</param>
            <param name="lighting">if set to <c>true</c> then apply artificial lighting to the map.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.Exists(ModApi.Planet.IPlanetData,ModApi.Planet.PlanetCubemapType,System.Int32)">
            <summary>
            Gets a value indicating if the all cubemap texture files exist.
            </summary>
            <param name="planetData">The planet data.</param>
            <param name="type">The type of the cubemap.</param>
            <param name="size">The size of the cubemap.</param>
            <returns><c>true</c> if all cubemap texture files exist, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.Exists(ModApi.Planet.IPlanetData)">
            <summary>
            Gets a value indicating if the all cubemap texture files exist.
            </summary>
            <param name="planetData">The planet data.</param>
            <returns><c>true</c> if all cubemap texture files exist, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.ExistsEquirectangular(ModApi.Planet.IPlanetData)">
            <summary>
            Determines if the equirectangular maps exist for the specified planet.
            </summary>
            <param name="planet">The planet.</param>
            <returns><c>true</c> if all the equirectangular maps exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.GetBaseFileName(ModApi.Planet.PlanetCubemapType,System.Int32)">
            <summary>
            Gets the base file name for a cubemap.
            </summary>
            <param name="type">The type of the cubemap.</param>
            <param name="size">The size of the cubemap.</param>
            <returns>The base file name for a cubemap.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.GetCubemapSize(ModApi.Planet.PlanetCubemapType,ModApi.Planet.PlanetCubemapDetailType)">
            <summary>
            Gets the size of the cubemap for the specified type.
            </summary>
            <param name="type">The type of the cubemap.</param>
            <param name="detailType">The detail type of the cubemap.</param>
            <returns>The cubemap size.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.LoadCubemap(ModApi.Planet.IPlanetData,ModApi.Planet.PlanetCubemapType,ModApi.Planet.PlanetCubemapDetailType,System.Boolean)">
            <summary>
            Loads a planet cubemap.
            </summary>
            <param name="planet">The planet data.</param>
            <param name="type">The planet cubemap type.</param>
            <param name="detailType">The planet cubemap detail type.</param>
            <param name="create">If set to <c>true</c> and the cubemap does not already exist, it will be created.</param>
            <returns>The cubemap loaded from the file system or <n>null</n> if it could not be loaded or is not supported.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.DownSample(System.Int32,System.Int32,Unity.Collections.NativeArray{UnityEngine.Color32},Unity.Collections.NativeArray{UnityEngine.Color32})">
            <summary>
            Downsamples the source texture to a target texture of half size.
            </summary>
            <param name="targetWidth">The width of the target texture.</param>
            <param name="targetHeight">The height of the target texture.</param>
            <param name="source">The source texture data.</param>
            <param name="target">The target texture data.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.GenerateCubemapFaceData(System.Int32,System.Int32,UnityEngine.Vector3d[],Unity.Collections.NativeArray{UnityEngine.Color32}[],ModApi.Planet.ITerrainGenerator,System.Boolean,System.Byte)">
            <summary>
            Generates the color and height data for a single face in a cubemap.
            </summary>
            <param name="faceIndex">Index of the face.</param>
            <param name="size">The size of the cubemap face.</param>
            <param name="heightSamples">The height samples.</param>
            <param name="textureData">The texture data in which to store the color data.
            Each array element should be a texture half the size of the previous.
            The textures will be downsampled from the previous array element texture.</param>
            <param name="terrainGenerator">The terrain generator.</param>
            <param name="hasWater">A value indicating if the planet has water.</param>
            <param name="waterSmoothness">The smoothness value to use for the water (if applicable).</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.GenerateCubemapFaceNormals(System.Int32,System.Int32,UnityEngine.Vector3d[],Unity.Collections.NativeArray{UnityEngine.Color32}[])">
            <summary>
            Generates normals for the specified cubemap face.
            </summary>
            <param name="faceIndex">Index of the face.</param>
            <param name="size">The size of the cubemap textures.</param>
            <param name="heightSamples">The height samples.</param>
            <param name="textureData">The texture data in which the generated normals should be stored.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.GenerateCubemapsSegment(System.Int32,System.Int32,System.Int32,UnityEngine.CubemapFace,ModApi.Planet.ITerrainGenerator,System.Double,System.Boolean,System.Byte,UnityEngine.Vector3d[],Unity.Collections.NativeArray{UnityEngine.Color32})">
            <summary>
            Generates one segment of the cubemaps.
            This is intended to be used to divide cubemap generation work over multiple threads.
            </summary>
            <param name="yStart">The Y pixel start position.</param>
            <param name="yEnd">The Y pixel end position.</param>
            <param name="size">The size of the cubemaps in pixels ('256', '512', etc).</param>
            <param name="face">The face of the cubemap.</param>
            <param name="terrainGenerator">The terrain generator used to generate the cubemap.</param>
            <param name="radius">The radius of the planet.</param>
            <param name="hasWater">A value indicating if the planet has water.</param>
            <param name="waterSmoothness">The smoothness value to use for the water (if applicable).</param>
            <param name="heightSamples">The samples set used to store height data results.</param>
            <param name="colors">The texture data set used to store color data results.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetCubemaps.GetWrappedIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index, and wraps the coordinates if necessary.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>
            The index.
            </returns>
        </member>
        <member name="T:ModApi.Planet.IPlanetData">
            <summary>
            Data about a planetary body.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.AngularVelocity">
            <summary>
            Gets the angular velocity (rotation rate) of the planet in rad/s.
            </summary>
            <value>
            The angular velocity in radians per second.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.AtmosphereData">
            <summary>
            Gets the atmosphere data.
            </summary>
            <value>
            The atmosphere data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Author">
            <summary>
            Gets the author of the celestial body.
            </summary>
            <value>
            The author of the celestial body.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.DefaultLaunchLocations">
            <summary>
            Gets the default launch locations for the celestial body.
            </summary>
            <value>The default launch locations for the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Description">
            <summary>
            Gets the description or the planet.
            </summary>
            <value>
            The description of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.EscapeVelocity">
            <summary>
            Gets the escape velocity.
            </summary>
            <value>
            The escape velocity.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.FileData">
            <summary>
            Gets the file data for the celestial body.
            </summary>
            <value>The file data for the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.GeneratedData">
            <summary>
            Gets the generated data object for the planet which is used for saving and loading data at runtime.
            </summary>
            <value>The generated data object for the planet which is used for saving and loading data at runtime.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.HasTerrainPhysics">
            <summary>
            Gets a value indicating whether this planet has terrain physics.
            </summary>
            <value>
              <c>true</c> if this planet has terrain physics; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.HasWater">
            <summary>
            Gets a value indicating whether this planet has water.
            </summary>
            <value>
              <c>true</c> if this planet has water; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Id">
            <summary>
            Gets the ID of the celestial body.
            </summary>
            <value>The ID of the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Mass">
            <summary>
            Gets the mass of the planet.
            </summary>
            <value>
            The mass of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.MusicKeywords">
            <summary>
            Gets the music keywords, used to determine what music may be played for this planet. Music with *any* of the given keywords may play.
            </summary>
            <value>
            The music keywords, used to determine what music may be played for this planet. Music with *any* of the given keywords may play.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Name">
            <summary>
            Gets the name of the planet.
            </summary>
            <value>
            The name of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.NavballColorOverride">
            <summary>
            Gets the navball color override.
            </summary>
            <value>
            The navball color override.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.OrbitData">
            <summary>
            Gets the orbit data for the planet.
            </summary>
            <value>
            The orbit data for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Parent">
            <summary>
            Gets the parent planet.
            </summary>
            <value>
            The parent planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.QuadSphereActivationDistance">
            <summary>
            Gets the distance from the center of the planet at which the quad sphere is enabled. If this is left at zero,
            then a default value will be used, which is the diameter of the planet.
            </summary>
            <value>
            The distance from the center of the planet that under which, the quad sphere is enabled.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.QuadSphereTransitionDistance">
            <summary>
            Gets the distance over which the rendering is transitioned between the quad sphere and the scaled space renderer. The quad sphere
            is 100% visible at QuadSphereActivationDistance and the scaled space renderer is 100% visible at QuadSphereActivationDistance +
            QuadSphereTransitionDistance. If this is left at zero, then a default value will be used, which is the diameter of the planet.
            </summary>
            <value>
            The quad sphere transition distance.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Radius">
            <summary>
            Gets the radius of the planet.
            </summary>
            <value>
            The radius of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.RadiusScaledSpace">
            <summary>
            Gets the radius of the planet in scaled space.
            </summary>
            <value>
            The radius of the planet in scaled space.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.RadiusSquared">
            <summary>
            Gets the radius squared.
            </summary>
            <value>
            The radius squared.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.RingsData">
            <summary>
            Gets the planet rings data.
            </summary>
            <value>
            The planet rings data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Scale">
            <summary>
            Gets the celestial body scale data.
            </summary>
            <value>
            The celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.ScaleDefaults">
            <summary>
            Gets the default celestial body scale data.
            </summary>
            <value>
            The default celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SeaLevel">
            <summary>
            Gets the sea level of the planet.
            </summary>
            <value>
            The sea level of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SkyShaderData">
            <summary>
            Gets the sky shader data.
            </summary>
            <value>
            The sky shader data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SkyShaderEnabled">
            <summary>
            Gets a value indicating whether [sky shader enabled].
            </summary>
            <value>
              <c>true</c> if [sky shader enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SolarSystemData">
            <summary>
            Gets the solar system data.
            </summary>
            <value>
            The solar system data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SphereOfInfluence">
            <summary>
            Gets the sphere of influence, or <c>null</c> to use the auto-calculated value.
            </summary>
            <value>
            The sphere of influence, or <c>null</c> to use the auto-calculated value.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.StructureNodes">
            <summary>
            Gets the structure nodes on the planet.
            </summary>
            <value>
            The structure nodes on the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SurfaceGravity">
            <summary>
            Gets the surface gravity of the planet.
            </summary>
            <value>
            The surface gravity of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.SyncPropertiesFromTerrain">
            <summary>
            Gets a value indicating whether [terrain render properties master].
            </summary>
            <value>
              <c>true</c> if [terrain render properties master]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.TerrainData">
            <summary>
            Gets the terrain data.
            </summary>
            <value>
            The terrain data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.TerrainShaderData">
            <summary>
            Gets the terrain shader data.
            </summary>
            <value>
            The terrain shader data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.UniformHeight">
            <summary>
            Gets a value indicating whether the planet has a uniform height.
            </summary>
            <value>
              <c>true</c> if the planet has a uniform height; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.Version">
            <summary>
            Gets the version number for the celestial body.
            </summary>
            <value>The version number for the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.IPlanetData.VersionTag">
            <summary>
            Gets the version tag for the celestial body.
            </summary>
            <value>The version tag for the celestial body.</value>
        </member>
        <member name="M:ModApi.Planet.IPlanetData.LoadTerrainData">
            <summary>
            Loads the terrain data objects.
            </summary>
            <returns>A reference to the loaded terrain data.</returns>
        </member>
        <member name="M:ModApi.Planet.IPlanetData.UnloadTerrainData">
            <summary>
            Unloads the terrain data objects if currently loaded.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetDataScript">
            <summary>
            Data about a planetary body.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript.CurrentXmlVersion">
            <summary>
            The current XML version.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._angularVelocity">
            <summary>
            The angular velocity in radians per second.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._atmosphereData">
            <summary>
            The atmosphere data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._author">
            <summary>
            The author of this celestial body.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._defaultLaunchLocations">
            <summary>
            The default launch locations for the celestial body.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._description">
            <summary>
            The description of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._hasTerrainPhysics">
            <summary>
            A value indicating whether or not this planet has terrain physics.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._hasWater">
            <summary>
            A value indicating whether or not this planet has water.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._mass">
            <summary>
            The mass of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._musicKeywords">
            <summary>
            The music keywords, used to determine what music may be played for this planet. Music with *any* of the given keywords may play.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._name">
            <summary>
            The name of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._navballColor">
            <summary>
            The navball color override.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._parentAncestryId">
            <summary>
            The parent ancestry identifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._planetarySystemDefinedData">
            <summary>
            The planetary system defined data for this celestial body.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._quadSphereActivationDistance">
            <summary>
            The distance from the center of the planet at which the quad sphere is enabled.
            If this is left at zero, then a default value will be used, which is the diameter of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._quadSphereTransitionDistance">
            <summary>
            The distance over which the rendering is transitioned between the quad sphere and the scaled space renderer.
            The quad sphere is 100% visible at QuadSphereActivationDistance and the scaled space renderer is 100% visible at
            QuadSphereActivationDistance + QuadSphereTransitionDistance. If this is left at zero, then a default value will be used,
            which is the diameter of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._radius">
            <summary>
            The radius of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._radiusScaledSpaceHeightAdjustment">
            <summary>
            The height adjustment value to use when determining the radius of the planet in scaled space.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._ringsData">
            <summary>
            The rings data
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._scaleDefaults">
            <summary>
            The default celestial body scale data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._seaLevel">
            <summary>
            The sea level of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._skyShaderData">
            <summary>
            The sky shader data
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._skyShaderEnabled">
            <summary>
            The sky shader enabled
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._structureNodes">
            <summary>
            The structure nodes
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._surfaceGravity">
            <summary>
            The surface gravity of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._syncPropertiesFromTerrain">
            <summary>
            Used in inspector to copy some terrain properties to the sky shader.  Used to keep color and some other items in sync.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._terrainDataXml">
            <summary>
            The terrain data XML.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._terrainShaderData">
            <summary>
            The terrain shader data
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._uniformHeight">
            <summary>
            A value indicating whether the planet has a uniform height.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._version">
            <summary>
            The version number for the celestial body.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetDataScript._versionTag">
            <summary>
            The version tag for the celestial body.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ModApi.Planet.PlanetDataScript"/> class from being created.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.AngularVelocity">
            <summary>
            Gets or sets the angular velocity (rotation rate) of the planet in rad/s.
            </summary>
            <value>
            The angular velocity in radians per second.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.AtmosphereData">
            <summary>
            Gets or sets the atmosphere data.
            </summary>
            <value>
            The atmosphere data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.ModApi#Planet#IPlanetData#AtmosphereData">
            <summary>
            Gets the atmosphere data.
            </summary>
            <value>
            The atmosphere data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Author">
            <summary>
            Gets or sets the author of the celestial body.
            </summary>
            <value>
            The author of the celestial body.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.DefaultLaunchLocations">
            <summary>
            Gets the default launch locations for the celestial body.
            </summary>
            <value>The default launch locations for the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Description">
            <summary>
            Gets or sets the description or the planet.
            </summary>
            <value>
            The description of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.EscapeVelocity">
            <summary>
            Gets the escape velocity.
            </summary>
            <value>
            The escape velocity.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.File">
            <summary>
            Gets the celestial file from which the celestial body was created.
            </summary>
            <value>The celestial file from which the celestial body was created.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.FileData">
            <summary>
            Gets the file data for the celestial body.
            </summary>
            <value>The file data for the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.GeneratedData">
            <summary>
            Gets the generated data object for the planet which is used for saving and loading data at runtime.
            </summary>
            <value>The generated data object for the planet which is used for saving and loading data at runtime.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.HasTerrainPhysics">
            <summary>
            Gets or sets a value indicating whether this planet has terrain physics.
            </summary>
            <value>
              <c>true</c> if this planet has terrain physics; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.HasWater">
            <summary>
            Gets or sets a value indicating whether this planet has water.
            </summary>
            <value>
              <c>true</c> if this planet has water; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Id">
            <summary>
            Gets the ID of the celestial body.
            </summary>
            <value>The ID of the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Mass">
            <summary>
            Gets or sets the mass of the planet.
            </summary>
            <value>
            The mass of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.MusicKeywords">
            <summary>
            Gets the music keywords, used to determine what music may be played for this planet. Music with *any* of the given keywords may play.
            </summary>
            <value>
            The music keywords, used to determine what music may be played for this planet. Music with *any* of the given keywords may play.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Name">
            <summary>
            Gets or sets the name of the planet.
            </summary>
            <value>
            The name of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.NavballColorOverride">
            <summary>
            Gets the navball color override.
            </summary>
            <value>
            The navball color override.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.OrbitData">
            <summary>
            Gets or sets the orbit data for the planet.
            </summary>
            <value>
            The orbit data for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Parent">
            <summary>
            Gets the parent planet.
            </summary>
            <value>
            The parent planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.ModApi#Planet#IPlanetData#Parent">
            <summary>
            Gets the parent planet.
            </summary>
            <value>
            The parent planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.ParentAncestryId">
            <summary>
            Gets or sets the parent ancestry ID.
            </summary>
            <value>
            The parent ancestry ID.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.PlanetarySystemDefinedData">
            <summary>
            Gets the planetary system defined data for this celestial body.
            </summary>
            <value>The planetary system defined data for this celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.QuadSphereActivationDistance">
            <summary>
            Gets the distance from the center of the planet at which the quad sphere is enabled. If this is left at zero,
            then a default value will be used, which is the diameter of the planet.
            </summary>
            <value>
            The distance from the center of the planet that under which, the quad sphere is enabled.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.QuadSphereTransitionDistance">
            <summary>
            Gets the distance over which the rendering is transitioned between the quad sphere and the scaled space renderer. The quad sphere
            is 100% visible at QuadSphereActivationDistance and the scaled space renderer is 100% visible at QuadSphereActivationDistance +
            QuadSphereTransitionDistance. If this is left at zero, then a default value will be used, which is the diameter of the planet.
            </summary>
            <value>
            The quad sphere transition distance.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Radius">
            <summary>
            Gets or sets the radius of the planet.
            </summary>
            <value>
            The radius of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.RadiusScaledSpace">
            <summary>
            Gets the radius of the planet in scaled space.
            </summary>
            <value>
            The radius of the planet in scaled space.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.RadiusSquared">
            <summary>
            Gets the radius squared.
            </summary>
            <value>
            The radius squared.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.ModApi#Planet#IPlanetData#RingsData">
            <summary>
            Gets the planet rings data.
            </summary>
            <value>
            The planet rings data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.RingsData">
            <summary>
            Gets or sets the planet rings data.
            </summary>
            <value>
            The planet rings data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Scale">
            <summary>
            Gets the celestial body scale data.
            </summary>
            <value>The celestial body scale data.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.ScaleDefaults">
            <summary>
            Gets the default celestial body scale data.
            </summary>
            <value>
            The default celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SeaLevel">
            <summary>
            Gets or sets the sea level of the planet.
            </summary>
            <value>
            The sea level of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SkyShaderData">
            <summary>
            Gets the sky shader data.
            </summary>
            <value>
            The sky shader data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SkyShaderEnabled">
            <summary>
            Gets or sets a value indicating whether [terrain render properties master].
            </summary>
            <value>
              <c>true</c> if [terrain render properties master]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SolarSystemData">
            <summary>
            Gets the solar system data.
            </summary>
            <value>
            The solar system data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SphereOfInfluence">
            <summary>
            Gets the sphere of influence, or <c>null</c> to use the auto-calculated value.
            </summary>
            <value>
            The sphere of influence, or <c>null</c> to use the auto-calculated value.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.StructureNodes">
            <summary>
            Gets the structure nodes.
            </summary>
            <value>
            The structure nodes.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SurfaceGravity">
            <summary>
            Gets or sets the surface gravity of the planet.
            </summary>
            <value>
            The surface gravity of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.SyncPropertiesFromTerrain">
            <summary>
            Gets a value indicating whether [terrain render properties master].
            </summary>
            <value>
              <c>true</c> if [terrain render properties master]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.TerrainData">
            <summary>
            Gets the terrain data.
            </summary>
            <value>
            The terrain data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.ModApi#Planet#IPlanetData#TerrainData">
            <summary>
            Gets the terrain data.
            </summary>
            <value>
            The terrain data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.TerrainShaderData">
            <summary>
            Gets the terrain shader data.
            </summary>
            <value>
            The terrain shader data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.UniformHeight">
            <summary>
            Gets or sets a value indicating whether the planet has a uniform height.
            </summary>
            <value>
              <c>true</c> if the planet has a uniform height; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.Version">
            <summary>
            Gets or sets the version number for the celestial body.
            </summary>
            <value>The version number for the celestial body.</value>
        </member>
        <member name="P:ModApi.Planet.PlanetDataScript.VersionTag">
            <summary>
            Gets or sets the version tag for the celestial body.
            </summary>
            <value>The version tag for the celestial body.</value>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.CreateFromFile(ModApi.CelestialData.CelestialFile,ModApi.Planet.CelestialBodyPlanetarySystemDefinedData,ModApi.Planet.PlanetDataScript,ModApi.Planet.SolarSystemDataScript,System.Boolean,System.Boolean)">
            <summary>
            Creates a celestial body data object from the specified file.
            </summary>
            <param name="file">The file from which to create the celestial body data object.</param>
            <param name="planetarySystemDefinedData">The planetary system defined data for the celestial body.</param>
            <param name="parentCelestialBody">The parent celestial body.</param>
            <param name="planetarySystem">The planetary system to which the celestial body belongs.</param>
            <param name="createTerrainData">If set to <c>true</c>, terrain data will be created as well.</param>
            <param name="applyScaleAndOverrides">
            If set to <c>true</c>, the celestial body data will be scaled based on the scale settings and
            planetary level overrides will be applied to the celestial body (if any).</param>
            <returns>
            The celestial body data object represented by the file.
            </returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.LoadXml(ModApi.CelestialData.CelestialFile)">
            <summary>
            Loads the celestial body XML for the specified celestial file.
            This will run upgrade code if necessary.
            </summary>
            <param name="file">The celestial file for the celestial body XML to load.</param>
            <returns>The loaded XML.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.CalculateMass">
            <summary>
            Calculates the mass from the surface gravity and the radius.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.GetRequiredMods">
            <summary>
            Gets the collection of mods required for the celestial body.
            </summary>
            <returns>
            The collection of mods required for the celestial body.
            </returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.LoadTerrainData">
            <summary>
            Loads the terrain data objects.
            </summary>
            <returns>A reference to the loaded terrain data.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.ModApi#Planet#IPlanetData#LoadTerrainData">
            <summary>
            Loads the terrain data objects.
            </summary>
            <returns>
            A reference to the loaded terrain data.
            </returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.Save(System.Collections.Generic.IReadOnlyList{ModApi.CelestialData.CelestialFileReference})">
            <summary>
            Saves the planet data as XML.
            </summary>
            <param name="supportFileReferences">The list of support file references to include in the XML.</param>
            <returns>The XML document representing the planet data.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.UnloadTerrainData">
            <summary>
            Unloads the terrain data objects if currently loaded.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.CalculateEscapeVelocity(System.Double,System.Double)">
            <summary>
            Calculates the escape velocity.
            </summary>
            <param name="mass">The mass.</param>
            <param name="radius">The radius.</param>
            <returns>The escape velocity.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetDataScript.Initialize">
            <summary>
            Initializes the planet data script.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetMap">
            <summary>
            Provides methods to read and write to data stored in a cube map.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetMap.Padding">
            <summary>
            The amount of padding, which makes it easier to run bicubic interpolation without worrying about edge cases.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetMap._faces">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetMap"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:ModApi.Planet.PlanetMap.Size">
            <summary>
            Gets the size of the map's edge. All planet maps are cube maps with all sides
            having Size * Size values.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.Load(System.IO.BinaryReader,System.Int32)">
            <summary>
            Loads the map from the binary reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="size">The size.</param>
            <returns>The planet map.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.WrapCoordinates(UnityEngine.CubemapFace@,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Handles edge cases with face coordinates. If the coordinate is out of bounds for a cube face, it
            wraps the coordinates onto the adjacent face.
            </summary>
            <param name="face">The face.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="size">The size of the map.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.Get(UnityEngine.CubemapFace,System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified coordinates.
            </summary>
            <param name="face">The face.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The value at the position.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.GetCoordinates(UnityEngine.Vector3d,UnityEngine.CubemapFace@,System.Int32@,System.Int32@)">
            <summary>
            Gets the cube face and 2D coordinates in that face from the 3D normalized position.
            </summary>
            <param name="position">The position.</param>
            <param name="outFace">The cube face.</param>
            <param name="outX">The x coordinate in the cube face.</param>
            <param name="outY">The y coordinate in the cube face.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.Sample(UnityEngine.Vector3d,System.Single[][])">
            <summary>
            Gets the vector.
            </summary>
            <param name="position">The position.</param>
            <param name="preallocatedArray">An optional, preallocated 4x4 float array to use, which can help speed up multiple calls.</param>
            <returns>The result of the sample.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.Set(UnityEngine.CubemapFace,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the specified value at the specified coordinates.
            </summary>
            <param name="face">The face.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the map to the writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.BicubicInterpolate(System.Single[][],System.Single,System.Single)">
            <summary>
            Bicubics the interpolate.
            </summary>
            <param name="p">The p.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.CubicInterpolate(System.Single[],System.Single)">
            <summary>
            Cubics the interpolate.
            </summary>
            <param name="p">The p.</param>
            <param name="x">The x.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMap.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The index.</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetMapSet">
            <summary>
            Contains a set of maps used on a planet. This includes a height map and any number of biome maps.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetMapSet._biomeMaps">
            <summary>
            The biome maps.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetMapSet._heightMap">
            <summary>
            The height map.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetMapSet" /> class.
            </summary>
            <param name="heightMapSize">Size of one edge of the height map. All maps are square.</param>
            <param name="biomeMapSize">Size of one edge of a biome map. All maps are square.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.#ctor(ModApi.Planet.PlanetMap,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetMapSet"/> class.
            </summary>
            <param name="heightMap">The height map.</param>
            <param name="biomeMapSize">Size of the biome map.</param>
        </member>
        <member name="P:ModApi.Planet.PlanetMapSet.BiomeMapSize">
            <summary>
            Gets the size of the biome map.
            </summary>
            <value>
            The size of the biome map.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetMapSet.HeightMap">
            <summary>
            Gets the height map.
            </summary>
            <value>
            The height map.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetMapSet.NumBiomes">
            <summary>
            Gets the number biomes.
            </summary>
            <value>
            The number biomes.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.Load(System.String)">
            <summary>
            Loads the planet map set from the specified file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The new planet map.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.AddBiomeMap">
            <summary>
            Adds a new biome map.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.CreateSampleResult">
            <summary>
            Creates the sample result, which can be used in subsequent SampleMaps calls.
            </summary>
            <returns>Newly created MapSampleResult object.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.GetBiomeMap(System.Int32)">
            <summary>
            Gets the biome map with the specified biome index.
            </summary>
            <param name="biome">The biome.</param>
            <returns>
            The biome map.
            </returns>
            <exception cref="T:System.ArgumentException">Cannot get biome map at index 0. That is the default biome and does not have a dedicated map.</exception>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.RemoveBiomeMap(System.Int32)">
            <summary>
            Removes the biome map. Note, the default biome (index 0) cannot be removed.
            </summary>
            <param name="biome">The biome.</param>
            <exception cref="T:System.Exception">Cannot remove default biome</exception>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.SampleMaps(UnityEngine.Vector3d,ModApi.Planet.PlanetMapSet.MapSampleResult,System.Single[][])">
            <summary>
            Samples the maps at the position and stores the results in the result object.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
            <param name="preallocatedArray">The preallocated array, which is a 4x4 float array
            which can improve performance if this method is called many times in a row.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.Save(System.String)">
            <summary>
            Saves the planet map set to the specified file.
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="T:ModApi.Planet.PlanetMapSet.MapSampleResult">
            <summary>
            The result from a map sample.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetMapSet.MapSampleResult._values">
            <summary>
            The values samples from map data. The first value is the height channel. Each channel after that are the biomes.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.MapSampleResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetMapSet.MapSampleResult"/> class.
            </summary>
            <param name="numBiomes">The number biomes.</param>
        </member>
        <member name="P:ModApi.Planet.PlanetMapSet.MapSampleResult.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetMapSet.MapSampleResult.NumBiomes">
            <summary>
            Gets the number biomes.
            </summary>
            <value>
            The number biomes.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.MapSampleResult.GetBiomeStrength(System.Int32)">
            <summary>
            Gets a value from 0 to 1 to indicate the strength of the biome at this sample point.
            </summary>
            <param name="biomeIndex">Index of the biome.</param>
            <returns>The biome strength.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.MapSampleResult.SetDefaultValues">
            <summary>
            Sets all the result values to their defaults.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetMapSet.MapSampleResult.SetValue(System.Int32,System.Single)">
            <summary>
            Sets the value.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ModApi.Planet.IPlanetRingsData">
            <summary>
            Interface for planet rings data.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IPlanetRingsData.HasRings">
            <summary>
            Gets a value indicating whether this planet has rings.
            </summary>
            <value>
              <c>true</c> if this planet has rings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetRingsData.InnerRadius">
            <summary>
            Gets the inner radius of the rings in meters.
            </summary>
            <value>
            The inner radius of the rings in meters.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetRingsData.OuterRadius">
            <summary>
            Gets the outer radius of the rings in meters.
            </summary>
            <value>
            The outer radius of the rings in meters.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetRingsData.Rotation">
            <summary>
            Gets the rotation of the rings in degrees for each axis.
            </summary>
            <value>
            The rotation in degrees for each axis.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetRingsData.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="T:ModApi.Planet.PlanetRingsData">
            <summary>
            Data about a planet's rings.
            </summary>
            <seealso cref="T:ModApi.Planet.IPlanetRingsData" />
        </member>
        <member name="F:ModApi.Planet.PlanetRingsData._planetRadius">
            <summary>
            The planet radius in meters.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetRingsData.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetRingsData"/> class.
            </summary>
            <param name="planetRadius">The planet radius in meters.</param>
        </member>
        <member name="P:ModApi.Planet.PlanetRingsData.HasRings">
            <summary>
            Gets a value indicating whether this planet has rings.
            </summary>
            <value>
              <c>true</c> if this planet has rings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetRingsData.InnerRadius">
            <summary>
            Gets the inner radius of the rings in meters.
            </summary>
            <value>
            The inner radius of the rings in meters.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetRingsData.OuterRadius">
            <summary>
            Gets the outer radius of the rings in meters.
            </summary>
            <value>
            The outer radius of the rings in meters.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetRingsData.Rotation">
            <summary>
            Gets the rotation of the rings in degrees for each axis.
            </summary>
            <value>
            The rotation in degrees for each axis.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetRingsData.Texture">
            <summary>
            Gets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetRingsData.CreateFromXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetDataScript)">
            <summary>
            Creates from XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="script">The script.</param>
            <returns>The planet rings data.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetRingsData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the rings data as XML.
            </summary>
            <param name="xml">The XML element to which to save the data.</param>
            <returns>The XML element representing the data (same instance as was passed in to the class).</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetShaderData">
            <summary>
            Class that holds planet shader related data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._ambientLightAltitudeRange">
            <summary>
            The ambient light altitude range.
            At the min altitude value, ambient light is at its strongest.
            At the max altitude value, ambient light fades to nothing.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._ambientLightDay">
            <summary>
            The ambient light during the day.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._ambientLightNight">
            <summary>
            The ambient light during the night.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._atmosScale">
            <summary>
            The static atmosphere scale (if auto-scale is disabled).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._atmosScaleSpace">
            <summary>
            The atmosphere scale in space (outside the atmosphere).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._atmosScaleSurface">
            <summary>
            The atmosphere scale at the planet's surface.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._debugScaler">
            <summary>
            A scaler used for debug purposes.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._duskColor">
            <summary>
            The dusk color
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._eSun">
            <summary>
            The e sun
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._g">
            <summary>
            The g
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._km">
            <summary>
            The km
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._kr">
            <summary>
            The kr
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._noonColor">
            <summary>
            The noon color
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._samples">
            <summary>
            The samples
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._scaleDepth">
            <summary>
            The scale depth
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._scaleDepthMax">
            <summary>
            The scale depth maximum
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._scaleDepthMin">
            <summary>
            The scale depth minimum
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._waveLength">
            <summary>
            The wave length
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData._waveLengthMag">
            <summary>
            The wave length mag
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetShaderData.Type">
            <summary>
            Identifies the general shader types.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData.Type.Surface">
            <summary>
            A surface (ground/part/etc.) shader...really anything other than sky.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderData.Type.Sky">
            <summary>
            A sky shader.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.AmbientLightAltitudeRange">
            <summary>
            Gets or sets the ambient light altitude range.
            </summary>
            <value>
            The ambient light altitude range.
            At the min altitude value, ambient light is at its strongest.
            At the max altitude value, ambient light fades to nothing.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.AmbientLightDay">
            <summary>
            Gets or sets the ambient light during the day.
            </summary>
            <value>
            The ambient light during the day.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.AmbientLightNight">
            <summary>
            Gets or sets the ambient light during the night.
            </summary>
            <value>
            The ambient light during the night.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.AtmosScale">
            <summary>
            Gets or sets the static atmosphere scale (if auto-scale is disabled).
            </summary>
            <value>
            The static atmosphere scale (if auto-scale is disabled).
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.AtmosScaleSpace">
            <summary>
            Gets or sets the atmosphere scale in space (outside the atmosphere).  Used if auto-scale is enabled.
            </summary>
            <value>
            The atmosphere scale in space (outside the atmosphere).
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.AtmosScaleSurface">
            <summary>
            Gets or sets the atmosphere scale at the planet's surface. Used if auto-scale is enabled.
            </summary>
            <value>
            The atmosphere scale at the planet's surface.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.DebugScaler">
            <summary>
            Gets or sets the scaler used for debug purposes.
            </summary>
            <value>
            The scaler used for debug purposes.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.DuskColor">
            <summary>
            Gets or sets the dusk color.
            </summary>
            <value>
            The dusk color.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.ESun">
            <summary>
            Gets or sets the e sun.
            </summary>
            <value>
            The e sun.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.G">
            <summary>
            Gets or sets the g.
            </summary>
            <value>
            The g.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.Km">
            <summary>
            Gets or sets the km.
            </summary>
            <value>
            The km.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.Kr">
            <summary>
            Gets or sets the kr.
            </summary>
            <value>
            The kr.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.NoonColor">
            <summary>
            Gets or sets the noon color.
            </summary>
            <value>
            The noon color.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.Samples">
            <summary>
            Gets or sets the samples.
            </summary>
            <value>
            The samples.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.ScaleDepth">
            <summary>
            Gets or sets the scale depth (the altitude at which the atmosphere's average density is found).
            </summary>
            <value>
            The scale depth.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.ScaleDepthMax">
            <summary>
            Gets or sets the scale depth maximum.
            </summary>
            <value>
            The scale depth maximum.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.ScaleDepthMin">
            <summary>
            Gets or sets the scale depth minimum.
            </summary>
            <value>
            The scale depth minimum.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.WaveLength">
            <summary>
            Gets or sets the length of the wave.
            </summary>
            <value>
            The length of the wave.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderData.WaveLengthMag">
            <summary>
            Gets or sets the wave length mag.
            </summary>
            <value>
            The wave length mag.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetShaderData.Clone(ModApi.Planet.PlanetShaderData)">
            <summary>
            Clones the specified source planet shader data.
            </summary>
            <param name="source">The source data to clone.</param>
            <returns>A new instance of a PlanetShaderData object matching the specified source object.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetShaderData.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates an instance of the object from its XML representation.
            </summary>
            <param name="xml">The XML representing the object to create.</param>
            <returns>The requested instance of the object.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetShaderData.CopyFrom(ModApi.Planet.PlanetShaderData)">
            <summary>
            Copies data from the source to this instance.
            </summary>
            <param name="source">The source terrain shader data.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetShaderData.SaveXml">
            <summary>
            Saves the XML representing this instance.
            </summary>
            <returns>The XML representing this instance.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetShaderData.SetDefaults(ModApi.Planet.PlanetShaderData.Type)">
            <summary>
            Sets the defaults.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetShaderOptionsData">
            <summary>
            Class that holds planet shader related options.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderOptionsData._atmosScaleAuto">
            <summary>
            The value indicating whether AtmosScale should be automatically calculated based on
            height within the atmosphere, using AtmosScaleSurface/Space, or whether AtmosScale should be statically used.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetShaderOptionsData._scaleDepthAuto">
            <summary>
            The value indicating whether ScaleDepth should be automatically calculated based on
            height within the atmosphere, using ScaleDepthMin/Max, or whether ScaleDepth should be statically used.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderOptionsData.AtmosScaleAuto">
            <summary>
            Gets or sets a value indicating whether AtmosScale should be automatically calculated based on
            height within the atmosphere, using AtmosScaleSurface/Space, or whether AtmosScale should be statically used.
            </summary>
            <value>
            The value indicating whether AtmosScale should be automatically calculated based on
            height within the atmosphere, using AtmosScaleSurface/Space, or whether AtmosScale should be statically used.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetShaderOptionsData.ScaleDepthAuto">
            <summary>
            Gets or sets a value indicating whether ScaleDepth should be automatically calculated based on
            height within the atmosphere, using ScaleDepthMin/Max, or whether ScaleDepth should be statically used.
            </summary>
            <value>
            The value indicating whether ScaleDepth should be automatically calculated.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetShaderOptionsData.CopyFrom(ModApi.Planet.PlanetShaderOptionsData)">
            <summary>
            Copies from the source to this instance.
            </summary>
            <param name="source">The terrain shader data.</param>
        </member>
        <member name="T:ModApi.Planet.IPlanetTerrainData">
            <summary>
            Data about a planet's terrain.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.Biomes">
            <summary>
            Gets the biomes for the planet.
            </summary>
            <value>
            The biomes for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.ConditionalSymbols">
            <summary>
            Gets the conditional symbols defined for the terrain data.
            This can enable/disable terrain modifiers based on these symbols.
            </summary>
            <value>
            The conditional symbols defined for the terrain data.
            This can enable/disable terrain modifiers based on these symbols.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.MapSet">
            <summary>
            Gets the map set for the planet.
            </summary>
            <value>
            The map set for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.Modifiers">
            <summary>
            Gets the planet modifiers for the planet.
            </summary>
            <value>
            The planet modifiers for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.PlanetData">
            <summary>
            Gets the planet data.
            </summary>
            <value>
            The planet data.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.Quality">
            <summary>
            Gets the current quality settings for the terrain.
            </summary>
            <value>
            The current quality settings for the terrain.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.UVSizeExponent">
            <summary>
            Gets the UV size exponent for the planet.
            This defines the range of UV coordinates across a cube face of the planet (from 0 to Math.Pow(2, UVSize)).
            </summary>
            <value>
            The UV size for the planet.
            This defines the range of UV coordinates across a cube face of the planet (from 0 to UVSize).
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainData.WaterGradient">
            <summary>
            Gets the water gradient.
            </summary>
            <value>
            The water gradient.
            </value>
        </member>
        <member name="M:ModApi.Planet.IPlanetTerrainData.Initialize">
            <summary>
            Initializes the terrain data.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetTerrainDataScript">
            <summary>
            Data about a planet's terrain.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._stringSplitComma">
            <summary>
            A string split array with a comma.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._biomesReadOnly">
            <summary>
            The read only list of biomes.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._conditionalSymbols">
            <summary>
            The conditional symbols defined for the terrain data.
            This can enable/disable terrain modifiers based on these symbols.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._mapSetPath">
            <summary>
            The path to the map set for the planet if it has one.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._modifiersReadOnly">
            <summary>
            The read only list of modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._qualitySettings">
            <summary>
            The quality settings for the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._randomizationIgnoreList">
            <summary>
            The randomization ignore list.
            This is used to ignore certain modifiers when randomizing a planet (preventing unwanted changes).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._randomizationOptions">
            <summary>
            The randomization option flags.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._uvSizeExponent">
            <summary>
            The UV size exponent for the planet.
            This defines the range of UV coordinates across a cube face of the planet (from 0 to Math.Pow(2, UVSize)).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._waterGradient">
            <summary>
            The water gradient.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainDataScript._waterGradientLinear">
            <summary>
            The water gradient in linear color space.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.Biomes">
            <summary>
            Gets the biomes for the planet.
            </summary>
            <value>
            The biomes for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.ModApi#Planet#IPlanetTerrainData#Biomes">
            <summary>
            Gets the biomes for the planet.
            </summary>
            <value>
            The biomes for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.ConditionalSymbols">
            <summary>
            Gets the conditional symbols defined for the terrain data.
            This can enable/disable terrain modifiers based on these symbols.
            </summary>
            <value>
            The conditional symbols defined for the terrain data.
            This can enable/disable terrain modifiers based on these symbols.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.Initialized">
            <summary>
            Gets a value indicating whether the terrain data has been initialized.
            </summary>
            <value>
              <c>true</c> if the terrain data has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.MapSet">
            <summary>
            Gets or sets the map set for the planet.
            </summary>
            <value>
            The map set for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.Modifiers">
            <summary>
            Gets the planet modifiers for the planet.
            </summary>
            <value>
            The planet modifiers for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.ModApi#Planet#IPlanetTerrainData#Modifiers">
            <summary>
            Gets the planet modifiers for the planet.
            </summary>
            <value>
            The planet modifiers for the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.PlanetData">
            <summary>
            Gets the planet data.
            </summary>
            <value>
            The planet data.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.Quality">
            <summary>
            Gets the current quality settings for the terrain.
            </summary>
            <value>
            The current quality settings for the terrain.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.UVSizeExponent">
            <summary>
            Gets the UV size exponent for the planet.
            This defines the range of UV coordinates across a cube face of the planet (from 0 to Math.Pow(2, UVSize)).
            </summary>
            <value>
            The UV size for the planet.
            This defines the range of UV coordinates across a cube face of the planet (from 0 to UVSize).
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.WaterGradient">
            <summary>
            Gets the water gradient.
            </summary>
            <value>
            The water gradient.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.WaterGradientGamma">
            <summary>
            Gets the water gradient in gamma space, which is the gradient that is serialized.
            </summary>
            <value>
            The water gradient in gamma space.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.RandomizationIgnoreList">
            <summary>
            Gets the randomization ignore list.
            This is used to ignore certain modifiers when randomizing a planet (preventing unwanted changes).
            </summary>
            <value>
            The randomization ignore list.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.RandomizationOptions">
            <summary>
            Gets the randomization options.
            </summary>
            <value>
            The randomization options.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainDataScript.MapSetPath">
            <summary>
            Gets or sets the altitude slope table path.
            </summary>
            <value>
            The altitude slope table path.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.CreateFromXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetDataScript)">
            <summary>
            Creates a terrain data object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the terrain data.</param>
            <param name="planet">The planet script associated with this terrain data object.</param>
            <returns>A reference to the created terrain data.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.GetModifiers``1">
            <summary>
            Gets the modifiers of the type.
            </summary>
            <typeparam name="T">The modifier type.</typeparam>
            <returns>The list of modifiers of the type.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.Initialize">
            <summary>
            Initializes the terrain data.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.Save(System.Xml.Linq.XElement)">
            <summary>
            Saves the terrain data as XML.
            </summary>
            <param name="xml">The to which to save the terrain data XML.</param>
            <returns>The XML to which the terrain data was saved.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.GetModifiers(System.Collections.Generic.List{ModApi.Planet.Modifiers.PlanetModifier},System.Collections.Generic.List{ModApi.Planet.Modifiers.PlanetModifier},UnityEngine.Transform)">
            <summary>
            Gets the planet modifiers associated with the terrain.
            </summary>
            <param name="modifierList">The list of planet modifiers to be populated.</param>
            <param name="tempList">The temporary list used to get components and avoid garbage generation.</param>
            <param name="obj">The object from which to get planet modifiers.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.InitializeBiomes">
            <summary>
            Initializes the biomes.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.InitializeModifiers">
            <summary>
            Initializes the modifiers.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.RefreshBiomeList">
            <summary>
            Refreshes the biome list.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainDataScript.RefreshModifiersList">
            <summary>
            Refreshes the modifiers list.
            </summary>
        </member>
        <member name="T:ModApi.Planet.IPlanetTerrainQuality">
            <summary>
            A collection of quality settings related to a planet's terrain.
            </summary>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainQuality.MaxSubdivisionLevel">
            <summary>
            Gets the maximum subdivision level of the planet.
            </summary>
            <value>
            The maximum subdivision level of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainQuality.MinSubdivisionLevel">
            <summary>
            Gets the minimum subdivision level of the planet.
            </summary>
            <value>
            The minimum subdivision level of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainQuality.TerrainQuadEdgeVertexCount">
            <summary>
            Gets the number of vertices along the edge of a terrain quad (not counting the skirt).
            </summary>
            <value>
            The number of vertices along the edge of a terrain quad (not counting the skirt).
            </value>
        </member>
        <member name="P:ModApi.Planet.IPlanetTerrainQuality.WaterQuadEdgeVertexCount">
            <summary>
            Gets the number of vertices along the edge of a water quad.
            </summary>
            <value>
            The number of vertices along the edge of a water quad.
            </value>
        </member>
        <member name="T:ModApi.Planet.PlanetTerrainQuality">
            <summary>
            A collection of quality settings related to a planet's terrain.
            </summary>
            <seealso cref="T:ModApi.Planet.IPlanetTerrainQuality" />
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality.DefaultMaxSubdivisionLevel">
            <summary>
            The default maximum subdivision level of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality.DefaultMinSubdivisionLevel">
            <summary>
            The default minimum subdivision level of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality.DefaultTerrainQuadEdgeVertexCount">
            <summary>
            The default number of vertices along the edge of a terrain quad (not counting the skirt).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality.DefaultWaterQuadEdgeVertexCount">
            <summary>
            The default number of vertices along the edge of a water quad.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality.Default">
            <summary>
            The default quality settings.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality._maxSubdivisionLevel">
            <summary>
            The maximum subdivision level of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality._minSubdivisionLevel">
            <summary>
            The minimum subdivision level of the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality._terrainQuadEdgeVertexCount">
            <summary>
            The number of vertices along the edge of a terrain quad (not counting the skirt).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQuality._waterQuadEdgeVertexCount">
            <summary>
            The number of vertices along the edge of a water quad.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQuality.MaxSubdivisionLevel">
            <summary>
            Gets or sets the maximum subdivision level of the planet.
            </summary>
            <value>
            The maximum subdivision level of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQuality.MinSubdivisionLevel">
            <summary>
            Gets or sets the minimum subdivision level of the planet.
            </summary>
            <value>
            The minimum subdivision level of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQuality.TerrainQuadEdgeVertexCount">
            <summary>
            Gets or sets the number of vertices along the edge of a terrain quad (not counting the skirt).
            </summary>
            <value>
            The number of vertices along the edge of a terrain quad (not counting the skirt).
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQuality.WaterQuadEdgeVertexCount">
            <summary>
            Gets or sets the number of vertices along the edge of a water quad.
            </summary>
            <value>
            The number of vertices along the edge of a water quad.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQuality.CreateFromXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetTerrainQuality,System.Int32)">
            <summary>
            Creates the quality settings object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the quality settings object.</param>
            <param name="defaults">The default quality settings.</param>
            <param name="maxSubdivisionAdjustment">The maximum subdivision adjustment.</param>
            <returns>The quality settings object created from the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQuality.SaveXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetTerrainQuality)">
            <summary>
            Saves the XML for the quality settings.
            </summary>
            <param name="xml">The XML element to which to save the quality settings.</param>
            <param name="defaults">The default quality settings.</param>
            <returns>The XML to which the quality settings have been saved.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQuality.CreateDefault">
            <summary>
            Creates the default quality settings.
            </summary>
            <returns>The default quality settings.</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetTerrainQualityConfiguration">
            <summary>
            A collection of planet terrain quality settings tied to a given quality configuration.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQualityConfiguration._mobileOnly">
            <summary>
            A value indicating if this quality level is for mobile only.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQualityConfiguration._qualityLevel">
            <summary>
            The quality level associated with this configuration.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQualityConfiguration._quality">
            <summary>
            The quality settings.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQualityConfiguration.MobileOnly">
            <summary>
            Gets or sets a value indicating whether these quality settings are for mobile only.
            </summary>
            <value>
              <c>true</c> if these quality settings are for mobile only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQualityConfiguration.Quality">
            <summary>
            Gets or sets the quality settings.
            </summary>
            <value>
            The quality settings.
            </value>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQualityConfiguration.QualityLevel">
            <summary>
            Gets or sets the quality level.
            </summary>
            <value>
            The quality level.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQualityConfiguration.CreateFromXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetTerrainQuality,System.Int32)">
            <summary>
            Creates a quality settings configuration object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the object.</param>
            <param name="defaults">The default quality settings.</param>
            <param name="maxSubdivisionAdjustment">The maximum subdivision adjustment.</param>
            <returns>A quality settings configuration object created from the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQualityConfiguration.SaveXml(System.Xml.Linq.XElement,ModApi.Planet.PlanetTerrainQuality)">
            <summary>
            Saves the XML for the quality settings configuration.
            </summary>
            <param name="xml">The XML to which the quality settings configuration should be saved.</param>
            <param name="defaults">The default quality settings.</param>
            <returns>The XML for the quality settings configuration.</returns>
        </member>
        <member name="T:ModApi.Planet.PlanetTerrainQualitySettings">
            <summary>
            A class containing the quality settings for a planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQualitySettings._current">
            <summary>
            The current quality settings for the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQualitySettings._default">
            <summary>
            The default quality settings for the planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetTerrainQualitySettings._qualityConfigurations">
            <summary>
            The quality configurations.
            </summary>
        </member>
        <member name="P:ModApi.Planet.PlanetTerrainQualitySettings.Current">
            <summary>
            Gets the current quality settings for the planet.
            </summary>
            <value>
            The current quality settings for the planet.
            </value>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQualitySettings.CreateFromXml(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Creates the quality settings object from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the quality settings.</param>
            <param name="maxSubdivisionAdjustment">The maximum subdivision adjustment value.</param>
            <returns>The quality settings object represented by the XML.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQualitySettings.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the XML for the quality settings.
            </summary>
            <param name="xml">The XML element to which the quality settings should be saved.</param>
            <returns>The XML to which the quality settings were saved.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetTerrainQualitySettings.UpdateCurrentQualitySettings(ModApi.Settings.IGameQualitySettings)">
            <summary>
            Updates the current quality settings for the planet based on the current game quality settings.
            </summary>
            <param name="qualitySettings">The current game quality settings.</param>
        </member>
        <member name="T:ModApi.Planet.PlanetVertexBiomeData">
            <summary>
            Biome related data for a single vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexBiomeData.Biome">
            <summary>
            The biome script reference.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexBiomeData.PrimarySubBiome">
            <summary>
            The primary sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexBiomeData.PrimarySubBiomeStrength">
            <summary>
            The strength of the primary sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexBiomeData.SecondarySubBiome">
            <summary>
            The secondary sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexBiomeData.SecondarySubBiomeStrength">
            <summary>
            The strength of the secondary sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexBiomeData.Strength">
            <summary>
            The total strength of the biome.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetVertexData">
            <summary>
            An object containing information related to a single vertex on a planet quad.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.DataSlotCount">
            <summary>
            The number of data slots supported by planet vertex data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Biomes">
            <summary>
            The biome data for a vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.CacheData">
            <summary>
            The cached data used by the terrain generator for the thread generating the quad.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Color">
            <summary>
            The color of the planet at this vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Data">
            <summary>
            A temporary array used for storing data passed between vertex data mods (such as noise results).
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.DebugColorsOnly">
            <summary>
            A value indicating to planet vertex color modifiers, that only debug colors should be applied.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Height">
            <summary>
            The height of the planet at this vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Initialized">
            <summary>
            A value indicating whether this object was initialized by the terrain generator.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Metallicness">
            <summary>
            The metallic value for the vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.Smoothness">
            <summary>
            The smoothness value for the vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.SplatMapData">
            <summary>
            The splat map data.
            This is a 9 element array.
            The first 8 elements represent the strength of the splatmap for textures 0 through 7.
            The final element is unused and exists as a way to avoid array boundary checking when no texture should be used.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.TireTrackStrength">
            <summary>
            The tire track strength for the vertex.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexData.VertexIndex">
            <summary>
            The vertex index associated with this object.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetVertexData.#ctor(ModApi.Planet.TerrainGeneratorCacheData,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.PlanetVertexData" /> class.
            </summary>
            <param name="terrainGeneratorCacheData">The terrain generator cache data.</param>
            <param name="vertexIndex">The vertex index associated with this object.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetVertexData.Create(System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Creates an initialized array of the specified count.
            </summary>
            <param name="count">The number of elements in the array.</param>
            <param name="terrainGeneratorCacheData">The terrain generator cache data.</param>
            <returns>An initialized array of the specified count.</returns>
        </member>
        <member name="M:ModApi.Planet.PlanetVertexData.Initialize(ModApi.Planet.ITerrainGenerator)">
            <summary>
            Initializes the specified terrain generator.
            </summary>
            <param name="terrainGenerator">The terrain generator.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetVertexData.Reset">
            <summary>
            Resets this instance, preparing it for a new round of vertex data passes.
            Note that not all data related to this instance is fully reset.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetVertexDataInput">
            <summary>
            An object containing input information needed to generate data for a single vertex on a planet quad.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexDataInput.Normal">
            <summary>
            The normal for the terrain at this position.
            This is only available in the 'Final' vertex data pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexDataInput.Position">
            <summary>
            The normalized position on the planet at which to generate vertex data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetVertexDataInput.TerrainData">
            <summary>
            The planet terrain data.
            </summary>
        </member>
        <member name="T:ModApi.Planet.PlanetarySystemXmlVersionUpdater">
            <summary>
            A class used for upgrading planetary system XML from previous XML versions.
            </summary>
        </member>
        <member name="F:ModApi.Planet.PlanetarySystemXmlVersionUpdater._upgradeActions">
            <summary>
            The upgrade actions, one for each XML version.
            </summary>
        </member>
        <member name="M:ModApi.Planet.PlanetarySystemXmlVersionUpdater.Upgrade(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Upgrades the XML to the latest version.
            </summary>
            <param name="xml">The XML to upgrade.</param>
            <param name="version">The version of the XML being upgraded.</param>
        </member>
        <member name="M:ModApi.Planet.PlanetarySystemXmlVersionUpdater.UpgradeToVersion1(System.Xml.Linq.XElement)">
            <summary>
            Upgrades the XML to version 1.
            </summary>
            <param name="xml">The XML to upgrade.</param>
        </member>
        <member name="T:ModApi.Planet.QuadMeshDataFlags">
            <summary>
            An enumeration defining the different sets of data that can be required by a quad mesh.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.None">
            <summary>
            No data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.Color">
            <summary>
            The color data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.UV">
            <summary>
            The UV data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.UV2">
            <summary>
            The UV2 data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.UV3">
            <summary>
            The UV3 data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.UV4">
            <summary>
            The UV4 data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.Tangents">
            <summary>
            The tangents data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.QuadMeshDataFlags.All">
            <summary>
            All Data.
            </summary>
        </member>
        <member name="T:ModApi.Planet.SkyboxData">
            <summary>
            A class containing data for a skybox.
            </summary>
        </member>
        <member name="M:ModApi.Planet.SkyboxData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.SkyboxData"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.Exposure">
            <summary>
            Gets the skybox exposure value.
            </summary>
            <value>The skybox exposure value.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.Rotation">
            <summary>
            Gets the skybox rotation.
            </summary>
            <value>The skybox rotation.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.Tint">
            <summary>
            Gets the tint color.
            </summary>
            <value>The tint color.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.XNegativeTextureId">
            <summary>
            Gets the x negative texture identifier.
            </summary>
            <value>The x negative texture identifier.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.XPositiveTextureId">
            <summary>
            Gets the x positive texture identifier.
            </summary>
            <value>The x positive texture identifier.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.YNegativeTextureId">
            <summary>
            Gets the y negative texture identifier.
            </summary>
            <value>The y negative texture identifier.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.YPositiveTextureId">
            <summary>
            Gets the y positive texture identifier.
            </summary>
            <value>The y positive texture identifier.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.ZNegativeTextureId">
            <summary>
            Gets the z negative texture identifier.
            </summary>
            <value>The z negative texture identifier.</value>
        </member>
        <member name="P:ModApi.Planet.SkyboxData.ZPositiveTextureId">
            <summary>
            Gets the z positive texture identifier.
            </summary>
            <value>The z positive texture identifier.</value>
        </member>
        <member name="M:ModApi.Planet.SkyboxData.LoadFromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the skybox data from the specified XML.
            </summary>
            <param name="xml">The XML from which to load the skybox data.</param>
            <returns>The loaded skybox data or <c>null</c> if it could not be loaded.</returns>
        </member>
        <member name="M:ModApi.Planet.SkyboxData.GenerateXml(System.String)">
            <summary>
            Generates the XML representing this instance.
            </summary>
            <param name="xmlElementName">Name of the XML element to generate.</param>
            <returns>The XML element representing this instance.</returns>
        </member>
        <member name="T:ModApi.Planet.ISolarSystemData">
            <summary>
            Data about a planetary system and its planets.
            </summary>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Author">
            <summary>
            Gets the author of the planetary system.
            </summary>
            <value>
            The author of the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Description">
            <summary>
            Gets the description of the planetary system.
            </summary>
            <value>The description of the planetary system.</value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Id">
            <summary>
            Gets the ID of the planetary system.
            </summary>
            <value>
            The ID of the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.MapViewScale">
            <summary>
            Gets the amount to scale in-game distances by in Map View.
            </summary>
            <value>
            The amount to scale in-game distances by in Map View.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.MaximumMapViewZoom">
            <summary>
            Gets the maximum zoom level for map-view in unscaled meters.
            </summary>
            <value>
            The maximum zoom level for map-view in unscaled meters.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Name">
            <summary>
            Gets the name of the planetary system.
            </summary>
            <value>
            The name of the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Planets">
            <summary>
            Gets the collection of planets in the planetary system.
            </summary>
            <value>
            The planets collection of planets in the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Scale">
            <summary>
            Gets the global celestial body scale data.
            </summary>
            <value>
            The global celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.ScaleDefaults">
            <summary>
            Gets the default global celestial body scale data.
            </summary>
            <value>
            The default global celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.Version">
            <summary>
            Gets the version number for the planetary system.
            </summary>
            <value>The version number for the planetary system.</value>
        </member>
        <member name="P:ModApi.Planet.ISolarSystemData.VersionTag">
            <summary>
            Gets the version tag for the planetary system.
            </summary>
            <value>The version tag for the planetary system.</value>
        </member>
        <member name="M:ModApi.Planet.ISolarSystemData.ApplyCustomSkybox">
            <summary>
            Applies the custom skybox if the planetary system has one.
            </summary>
        </member>
        <member name="M:ModApi.Planet.ISolarSystemData.GetPlanetData(System.String)">
            <summary>
            Gets the planet data for the planetary body with the specified name.
            </summary>
            <param name="planetName">The name of the planetary body for which to get the data.</param>
            <returns>The planet data for the planetary body with the specified name.</returns>
        </member>
        <member name="T:ModApi.Planet.SolarSystemDataScript">
            <summary>
            Data about a solar system and its planets.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript.CurrentXmlVersion">
            <summary>
            The current XML version.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript.DefaultMapViewScale">
            <summary>
            The default value to scale map-view distances by.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript.DefaultMaxZoom">
            <summary>
            The default maximum map-view zoom distance, in unscaled meters.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._author">
            <summary>
            The author of this planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._defaultLaunchLocations">
            <summary>
            The default launch locations for the planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._defaultSkyboxMaterial">
            <summary>
            The default skybox material, set if a custom skybox has been applied.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._description">
            <summary>
            The description of the planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._id">
            <summary>
            The ID of the planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._name">
            <summary>
            The name of the planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._parentAncestryId">
            <summary>
            The parent ancestry identifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._scaleDefaults">
            <summary>
            The default global celestial body scale data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._skyboxData">
            <summary>
            The skybox data.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._skyboxMaterial">
            <summary>
            The custom skybox material if the planetary system has one and it has been loaded.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._skyboxTextures">
            <summary>
            The loaded skybox textures.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._version">
            <summary>
            The version number for the planetary system.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SolarSystemDataScript._versionTag">
            <summary>
            The version tag for the planetary system.
            </summary>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Author">
            <summary>
            Gets or sets the author of the planetary system.
            </summary>
            <value>
            The author of the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Description">
            <summary>
            Gets or sets the description of the planetary system.
            </summary>
            <value>The description of the planetary system.</value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.File">
            <summary>
            Gets the celestial file from which the planetary system was created.
            </summary>
            <value>The celestial file from which the planetary system was created.</value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.FileData">
            <summary>
            Gets the file data for the planetary system.
            </summary>
            <value>The file data for the planetary system.</value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Id">
            <summary>
            Gets or sets the ID of the planetary system.
            </summary>
            <value>
            The ID of the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.MapViewScale">
            <summary>
            Gets or sets the map view scale.
            </summary>
            <value>
            The map view scale.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.MaximumMapViewZoom">
            <summary>
            Gets or sets the maximum map view zoom.
            </summary>
            <value>
            The maximum map view zoom.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Name">
            <summary>
            Gets or sets the name of the planetary system.
            </summary>
            <value>
            The name of the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.ParentAncestryId">
            <summary>
            Gets or sets the parent ancestry ID.
            </summary>
            <value>
            The parent ancestry ID.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Planets">
            <summary>
            Gets or sets the planetary bodies in the planetary system.
            </summary>
            <value>
            The planetary bodies in the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.ModApi#Planet#ISolarSystemData#Planets">
            <summary>
            Gets the collection of planets in the planetary system.
            </summary>
            <value>
            The planets collection of planets in the planetary system.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Scale">
            <summary>
            Gets the global celestial body scale data.
            </summary>
            <value>
            The global celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.ScaleDefaults">
            <summary>
            Gets the default global celestial body scale data.
            </summary>
            <value>
            The default global celestial body scale data.
            </value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.SkyboxData">
            <summary>
            Gets the skybox data.
            </summary>
            <value>The skybox data.</value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.Version">
            <summary>
            Gets or sets the version number for the planetary system.
            </summary>
            <value>The version number for the planetary system.</value>
        </member>
        <member name="P:ModApi.Planet.SolarSystemDataScript.VersionTag">
            <summary>
            Gets or sets the version tag for the planetary system.
            </summary>
            <value>The version tag for the planetary system.</value>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.CreateFromFile(ModApi.CelestialData.CelestialFile,System.Boolean,System.Boolean)">
            <summary>
            Creates an planetary system data object and associated planets from the specified celestial file.
            </summary>
            <param name="file">The celestial file from which to create the planetary system data.</param>
            <param name="createTerrainData">If set to <c>true</c>, terrain data will be created as well.</param>
            <param name="applyScaleAndOverrides">
            If set to <c>true</c>, the planetary system data will be scaled based on the scale settings and
            planetary system level overrides will be applied to the celestial bodies.</param>
            <returns>
            The planetary system data object represented by the celestial file.
            </returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.CreateFromFile(ModApi.CelestialData.CelestialFile,UnityEngine.GameObject,System.Boolean,System.Boolean)">
            <summary>
            Creates an planetary system data object and associated planets from the specified celestial file.
            </summary>
            <param name="file">The celestial file from which to create the planetary system data.</param>
            <param name="obj">The game object on which to attach the planetary system data script.</param>
            <param name="createTerrainData">If set to <c>true</c>, terrain data will be created as well.</param>
            <param name="applyScaleAndOverrides">
            If set to <c>true</c>, the planetary system data will be scaled based on the scale settings and
            planetary system level overrides will be applied to the celestial bodies.</param>
            <returns>
            The planetary system data object represented by the celestial file.
            </returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.LoadXml(ModApi.CelestialData.CelestialFile)">
            <summary>
            Loads the planetary system XML for the specified celestial file.
            This will run upgrade code if necessary.
            </summary>
            <param name="file">The celestial file for the planetary system XML to load.</param>
            <returns>The loaded XML.</returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.ApplyCustomSkybox">
            <summary>
            Applies the custom skybox if the planetary system has one.
            </summary>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.CreateCelestialBody(ModApi.CelestialData.CelestialFile,ModApi.Planet.CelestialBodyPlanetarySystemDefinedData,ModApi.Planet.PlanetDataScript,System.Boolean,System.Boolean)">
            <summary>
            Creates the celestial body, adding it to the planetary system.
            </summary>
            <param name="file">The file for the celestial body to create.</param>
            <param name="planetarySystemDefinedData">The planetary system defined data for the celestial body.</param>
            <param name="parentCelestialBody">The parent celestial body.</param>
            <param name="createTerrainData">If set to <c>true</c>, terrain data for the body will be created as well.</param>
            <param name="applyScaleAndOverrides">
            If set to <c>true</c>, the celestial body data will be scaled based on the scale settings and
            planetary level overrides will be applied to the celestial body (if any).</param>
            <returns>The celestial body script that was created.</returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.GetDefaultLaunchLocations">
            <summary>
            Gets the default launch locations.
            </summary>
            <returns>The default launch locations.</returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.GetPlanetData(System.String)">
            <summary>
            Gets the planet data for the planetary body with the specified name.
            </summary>
            <param name="planetName">The name of the planetary body for which to get the data.</param>
            <returns>The planet data for the planetary body with the specified name.</returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.ModApi#Planet#ISolarSystemData#GetPlanetData(System.String)">
            <summary>
            Gets the planet data for the planetary body with the specified name.
            </summary>
            <param name="planetName">The name of the planetary body for which to get the data.</param>
            <returns>
            The planet data for the planetary body with the specified name.
            </returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.GetRequiredMods">
            <summary>
            Gets the collection of mods required for the celestial body.
            </summary>
            <returns>
            The collection of mods required for the celestial body.
            </returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.Save(System.Collections.Generic.IReadOnlyList{ModApi.CelestialData.CelestialFileReference})">
            <summary>
            Saves the planetary system data as XML.
            </summary>
            <param name="fileReferences">The list of file references to include in the XML.</param>
            <returns>The XML document representing the planetary system data.</returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.SetLaunchLocations(System.Collections.Generic.List{ModApi.State.LaunchLocation})">
            <summary>
            Sets the list of launch locations for the planetary system.
            </summary>
            <param name="launchLocations">The launch locations.</param>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.LoadCustomSkyboxTexture(System.String)">
            <summary>
            Loads the custom skybox texture.
            </summary>
            <param name="id">The local id of the skybox texture.</param>
            <returns>The loaded texture or <c>null</c> if it could not be loaded.</returns>
        </member>
        <member name="M:ModApi.Planet.SolarSystemDataScript.UnloadCustomSkybox">
            <summary>
            Unloads the custom skybox.
            </summary>
        </member>
        <member name="T:ModApi.Planet.StructureLaunchLocationInfoScript">
            <summary>
            Script attached to a game object in a structure's prefab that defines a launch location position.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:ModApi.Planet.StructureLaunchLocationInfoScript._heading">
            <summary>
            The heading
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureLaunchLocationInfoScript._name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:ModApi.Planet.StructureLaunchLocationInfoScript.Heading">
            <summary>
            Gets the heading.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureLaunchLocationInfoScript.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:ModApi.Planet.StructureNodeData">
            <summary>
            Data related to a structure node on a planet.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData.CurrentVersion">
            <summary>
            The current version
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._elevation">
            <summary>
            The elevation of the structure (based on elevation type).
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._elevationType">
            <summary>
            The type of the elevation.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._heading">
            <summary>
            The heading in degrees.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._latitude">
            <summary>
            The latitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._longitude">
            <summary>
            The longitude.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._name">
            <summary>
            The name of the structure node.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._prefabPath">
            <summary>
            The prefab path of the structure node.
            </summary>
        </member>
        <member name="F:ModApi.Planet.StructureNodeData._rotation">
            <summary>
            The rotation of the structure node.
            If set to null, then the rotation of the structure will be calculated based on the Heading property.
            </summary>
        </member>
        <member name="M:ModApi.Planet.StructureNodeData.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.StructureNodeData" /> class.
            </summary>
            <param name="xml">The XML element.</param>
        </member>
        <member name="M:ModApi.Planet.StructureNodeData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.StructureNodeData"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="prefabPath">The prefab path.</param>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Elevation">
            <summary>
            Gets or sets the elevation of the structure (based on elevation type).
            </summary>
            <value>
            The elevation of the structure (based on elevation type).
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.ElevationType">
            <summary>
            Gets or sets the type of the elevation.
            </summary>
            <value>
            The type of the elevation.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Heading">
            <summary>
            Gets or sets the heading in degrees. If the Rotation property is set, then this property
            will be ignored.
            </summary>
            <value>
            The heading in degrees.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>
            The latitude.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>
            The longitude.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.PrefabPath">
            <summary>
            Gets or sets the prefab path.
            </summary>
            <value>
            The prefab path.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Rotation">
            <summary>
            Gets or sets the rotation of the structure node.
            If set to null, then the rotation of the structure will be calculated based on the Heading property.
            </summary>
            <value>
            The rotation of the structure node.
            </value>
        </member>
        <member name="P:ModApi.Planet.StructureNodeData.Version">
            <summary>
            Gets the version of the structure node.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="M:ModApi.Planet.StructureNodeData.GenerateXml(System.String)">
            <summary>
            Generates the XML representing this instance.
            </summary>
            <param name="elementName">The name of the XML element to create.</param>
            <returns>The XML representing this element.</returns>
        </member>
        <member name="M:ModApi.Planet.StructureNodeData.UpgradeVersion">
            <summary>
            Upgrades the structure node based on its version number.
            </summary>
        </member>
        <member name="T:ModApi.Planet.SubBiomeData">
            <summary>
            Data related to a sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeData._name">
            <summary>
            The name of the sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeData._slopeRange">
            <summary>
            The slope range for the sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeData._primaryData">
            <summary>
            The primary data for the biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeData._slopeData">
            <summary>
            The data for the biome when the slope is greater than the minimum slope range value.
            </summary>
        </member>
        <member name="P:ModApi.Planet.SubBiomeData.Name">
            <summary>
            Gets the name of the sub-biome.
            </summary>
            <value>
            The name of the sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeData.PrimaryData">
            <summary>
            Gets the primary data for the sub-biome.
            </summary>
            <value>
            The primary data for the sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeData.SlopeData">
            <summary>
            Gets the data for the biome when the slope is greater than the minimum slope range value.
            </summary>
            <value>
            The data for the biome when the slope is greater than the minimum slope range value.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeData.SlopeRange">
            <summary>
            Gets or sets the slope range for the biome.
            Slopes below the min value use the primary data for the sub-biome.
            Slopes above the max value use the slope data for the sub-biome.
            Slopes between the min/max value use a blend of both the primary and the slope data for the sub-biome.
            </summary>
            <value>
            The slope range.
            Slopes below the min value use the primary data for the sub-biome.
            Slopes above the max value use the slope data for the sub-biome.
            Slopes between the min/max value use a blend of both the primary and the slope data for the sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeData.OneOverSlopeBlendRange">
            <summary>
            Gets the calculation that is one over slope blend range.
            </summary>
            <value>
            The calculation that is one over slope blend range.
            </value>
        </member>
        <member name="M:ModApi.Planet.SubBiomeData.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates the sub-biome data from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the sub-biome data.</param>
            <returns>The sub-biome data created from the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.SubBiomeData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the sub-biome data to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the sub-biome data.</param>
            <returns>The XML containing the saved sub-biome data (should be the same as the input XML).</returns>
        </member>
        <member name="T:ModApi.Planet.SubBiomeTerrainData">
            <summary>
            Terrain data related to a sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeTerrainData._color">
            <summary>
            The color of the terrain in this sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeTerrainData._metallicness">
            <summary>
            The metallicness of the terrain in this sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeTerrainData._smoothness">
            <summary>
            The smoothness of the terrain in this sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeTerrainData._textureIndex">
            <summary>
            The index of the texture used for the terrain in this sub-biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.SubBiomeTerrainData._tireTrackStrength">
            <summary>
            The tire track strength on the terrain in this sub-biome.
            </summary>
        </member>
        <member name="P:ModApi.Planet.SubBiomeTerrainData.Color">
            <summary>
            Gets or sets the color of the terrain in this sub-biome.
            </summary>
            <value>
            The color of the terrain in this sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeTerrainData.ColorLinear">
            <summary>
            Gets the color of the terrain (in linear color space) in this sub-biome.
            </summary>
            <value>
            The color of the terrain (in linear color space) in this sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeTerrainData.Metallicness">
            <summary>
            Gets or sets the metallicness of the terrain in this sub-biome.
            </summary>
            <value>
            The metallicness of the terrain in this sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeTerrainData.Smoothness">
            <summary>
            Gets or sets the smoothness of the terrain in this sub-biome.
            </summary>
            <value>
            The smoothness of the terrain in this sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeTerrainData.TextureIndex">
            <summary>
            Gets or sets the index of the texture used for the terrain in this sub-biome.
            </summary>
            <value>
            The index of the texture used for the terrain in this sub-biome.
            </value>
        </member>
        <member name="P:ModApi.Planet.SubBiomeTerrainData.TireTrackStrength">
            <summary>
            Gets or sets the tire track strength on the terrain in this sub-biome.
            </summary>
            <value>
            The tire track strength on the terrain in this sub-biome.
            </value>
        </member>
        <member name="M:ModApi.Planet.SubBiomeTerrainData.CreateFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates the sub-biome terrain data from the specified XML.
            </summary>
            <param name="xml">The XML from which to create the sub-biome terrain data.</param>
            <returns>The sub-biome terrain data created from the specified XML.</returns>
        </member>
        <member name="M:ModApi.Planet.SubBiomeTerrainData.SaveXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the sub-biome terrain data to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the data.</param>
            <returns>The XML containing the sub-biome terrain data (should be the same as the input XML).</returns>
        </member>
        <member name="T:ModApi.Planet.TerrainGenerator">
            <summary>
            Generates procedural data for a terrain.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._conditionalSymbols">
            <summary>
            The conditional symbols used for this terrain generator.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._hasBiomeModifiersBiomePass">
            <summary>
            A value indicating whether there are any biome specific modifiers in the 'Biome' vertex data pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._hasBiomeModifiersFinalPass">
            <summary>
            A value indicating whether there are any biome specific modifiers in the 'Final' vertex data pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._hasBiomeModifiersHeightFinalPass">
            <summary>
            A value indicating whether there are any biome specific modifiers in the 'HeightFinal' vertex data pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._hasBiomeModifiersHeightPass">
            <summary>
            A value indicating whether there are any biome specific modifiers in the 'Height' vertex data pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._hasBiomeModifiersWaterPass">
            <summary>
            A value indicating whether there are any biome specific modifiers in the 'Water' vertex data pass.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._mainThreadCacheData">
            <summary>
            The terrain generator cache data object used by the main thread only.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainBiomeBiomeModifiers">
            <summary>
            The list of biome specific vertex data 'Biome' pass modifiers.
            The list is indexed by biome index and contains an ordered list of modifiers that run for that biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainBiomeCommonModifiers">
            <summary>
            The 'common' terrain vertex data 'Biome' pass modifiers.
            This is the set of vertex data modifiers that run first and apply to all biomes.
            Additional biome modifiers run on top of and after these modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainFinalBiomeModifiers">
            <summary>
            The list of biome specific vertex data 'Final' pass modifiers.
            The list is indexed by biome index and contains an ordered list of modifiers that run for that biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainFinalCommonModifiers">
            <summary>
            The 'common' terrain vertex data 'Final' pass modifiers.
            This is the set of vertex data modifiers that run first and apply to all biomes.
            Additional biome modifiers run on top of and after these modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainHeightBiomeModifiers">
            <summary>
            The list of biome specific vertex data 'Height' pass modifiers.
            The list is indexed by biome index and contains an ordered list of modifiers that run for that biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainHeightCommonModifiers">
            <summary>
            The 'common' terrain vertex data 'Height' pass modifiers.
            This is the set of vertex data modifiers that run first and apply to all biomes.
            Additional biome modifiers run on top of and after these modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainHeightFinalBiomeModifiers">
            <summary>
            The list of biome specific vertex data 'HeightFinal' pass modifiers.
            The list is indexed by biome index and contains an ordered list of modifiers that run for that biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainHeightFinalCommonModifiers">
            <summary>
            The 'common' terrain vertex data 'HeightFinal' pass modifiers.
            This is the set of vertex data modifiers that run first and apply to all biomes.
            Additional biome modifiers run on top of and after these modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._terrainMaterialModifier">
            <summary>
            The terrain material modifier.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._waterBiomeModifiers">
            <summary>
            The list of biome specific vertex data 'Water' pass modifiers.
            The list is indexed by biome index and contains an ordered list of modifiers that run for that biome.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._waterCommonModifiers">
            <summary>
            The 'common' terrain vertex data 'Water' pass modifiers.
            This is the set of vertex data modifiers that run first and apply to all biomes.
            Additional biome modifiers run on top of and after these modifiers.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGenerator._waterMaterialModifier">
            <summary>
            The water material modifier.
            </summary>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.#ctor(ModApi.Planet.IPlanetTerrainData,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.TerrainGenerator" /> class.
            </summary>
            <param name="terrainData">The planet terrain data.</param>
            <param name="additionalConditionalSymbols">The additional conditional symbols to define.</param>
            <param name="conditionalSymbolsToIgnore">The conditional symbols to ignore (un-define).</param>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.BiomeCount">
            <summary>
            Gets the number of biomes on the planet.
            </summary>
            <value>
            The number of biomes on the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.HeightMax">
            <summary>
            Gets the maximum height of the planet.
            </summary>
            <value>
            The maximum height of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.HeightMin">
            <summary>
            Gets the minimum height of the planet.
            </summary>
            <value>
            The minimum height of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.SeaLevel">
            <summary>
            Gets the sea level.
            </summary>
            <value>
            The sea level.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.TerrainData">
            <summary>
            Gets the terrain data.
            </summary>
            <value>
            The terrain data.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.TerrainMaterialModifier">
            <summary>
            Gets the terrain material modifier.
            </summary>
            <value>
            The terrain material modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.TerrainQuadVertexCount">
            <summary>
            Gets the terrain quad vertex count.
            </summary>
            <value>
            The terrain quad vertex count.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGenerator.WaterMaterialModifier">
            <summary>
            Gets the water material modifier.
            </summary>
            <value>
            The water material modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetCacheData">
            <summary>
            Gets the terrain generator cache data for the current thread.
            </summary>
            <returns>
            The terrain generator cache data for the current thread.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetHeight(UnityEngine.Vector3d)">
            <summary>
            Gets the height at the specified normalized position.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <returns>The height of the terrain at the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetHeight(UnityEngine.Vector3d,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the height at the specified normalized position.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>The height of the terrain at the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetRequiredWaterMeshData">
            <summary>
            Gets the required water mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetTerrainMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the terrain material.
            </summary>
            <param name="quad">The quad for which to get the terrain material.</param>
            <returns>The requested material.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexData(UnityEngine.Vector3d,System.Boolean)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            The vertex data will assume a surface normal based on the planet position only.
            This should only be called from the main thread.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexData(UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            The vertex data will assume a surface normal based on the planet position only.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            This should only be called from the main thread.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataBiomeAndHeightPass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Biome' pass and the 'Height'/'HeightFinal' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataBiomePass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Biome' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataFinalPass(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Final' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataHeightPass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Height' and 'HeightFinal' passes at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataWaterPass(ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Water' pass.
            This assumes previous passes have previously been invoked for a single vertex with the specified cache data
            (<see cref="M:ModApi.Planet.TerrainGenerator.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)"/>).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataWaterPass(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Water' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetWaterMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the water material.
            </summary>
            <param name="quad">The quad for which to get the water material.</param>
            <returns>The requested material.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.InitializeQuadSphere(ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes the terrain generator for the quad sphere.
            </summary>
            <param name="quadSphere">The planet quad sphere.</param>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GenerateWaterColor(UnityEngine.Vector3d,System.Single)">
            <summary>
            Generates the color of the water at the position and height.
            </summary>
            <param name="position">The position.</param>
            <param name="height">The height.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetConditionalSymbols(ModApi.Planet.IPlanetTerrainData)">
            <summary>
            Gets the conditional symbols for the terrain generator.
            </summary>
            <param name="terrainData">The terrain data.</param>
            <returns>The list of conditional symbols.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.GetVertexDataModifiers(System.Collections.Generic.IEnumerable{ModApi.Planet.Modifiers.PlanetModifier},ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType)">
            <summary>
            Gets the ordered list of vertex data modifiers of the given pass type from the specified list of modifiers.
            </summary>
            <param name="modifiers">The modifiers from which to select the requested data.</param>
            <param name="pass">The pass type for which to select.</param>
            <returns>The ordered list of vertex data modifiers of the given pass type from the specified list of modifiers.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.RefreshMaterialModifiers">
            <summary>
            Refreshes the material modifiers.
            </summary>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.RefreshMinMaxHeight">
            <summary>
            Refreshes the minimum and maximum height values for the terrain.
            </summary>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.RefreshVertexDataModifiers(ModApi.Planet.IPlanetTerrainData,ModApi.Planet.Modifiers.VertexDataPlanetModifierPassType,System.Collections.Generic.List{ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier}@,System.Collections.Generic.List{System.Collections.Generic.List{ModApi.Planet.Modifiers.VertexData.VertexDataPlanetModifier}}@,System.Boolean@)">
            <summary>
            Refreshes the lists of terrain vertex data modifiers.
            </summary>
            <param name="terrainData">The terrain data.</param>
            <param name="pass">The pass type for which to refresh modifiers.</param>
            <param name="commonModifiers">The common modifiers.</param>
            <param name="biomeModifiers">The biome specific modifiers.</param>
            <param name="hasBiomeModifiers">A value indicating if biome specific modifiers exist.</param>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.UpdateVertexDataBiomePass(ModApi.Planet.TerrainGeneratorCacheData,ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Updates the vertex data for the 'Biome' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <param name="input">The vertex data input object.</param>
            <param name="output">The vertex data result object .</param>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.UpdateVertexDataFinalPass(ModApi.Planet.TerrainGeneratorCacheData,ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Updates the vertex data for the 'Final' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <param name="input">The vertex data input object.</param>
            <param name="output">The vertex data result object .</param>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.UpdateVertexDataHeightPass(ModApi.Planet.TerrainGeneratorCacheData,ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Updates the vertex data for the 'Height' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <param name="input">The vertex data input object.</param>
            <param name="output">The vertex data result object .</param>
        </member>
        <member name="M:ModApi.Planet.TerrainGenerator.UpdateVertexDataWaterPass(ModApi.Planet.TerrainGeneratorCacheData,ModApi.Planet.PlanetVertexDataInput,ModApi.Planet.PlanetVertexData)">
            <summary>
            Updates the vertex data for the 'Water' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <param name="input">The vertex data input object.</param>
            <param name="output">The vertex data result object .</param>
        </member>
        <member name="T:ModApi.Planet.TerrainGeneratorCacheData">
            <summary>
            A reusable data object used by the terrain generator that should be unique per thread.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGeneratorCacheData._Lock">
            <summary>
            The synchronization lock;
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGeneratorCacheData._threadLocalData">
            <summary>
            The dictionary of cached objects keyed by thread id to simulate thread local storage.
            </summary>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorCacheData.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.TerrainGeneratorCacheData" /> class.
            </summary>
            <param name="biomeCount">The biome count of the current terrain.</param>
            <param name="terrainQuadVertexCount">The terrain quad vertex count.</param>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.BiomeCount">
            <summary>
            Gets the number of biomes for the terrain.
            </summary>
            <value>
            The number of biomes for the terrain.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.BiomeTempData">
            <summary>
            Gets the temporary biome data.
            </summary>
            <value>
            The temporary biome data.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.BiomeVertexData">
            <summary>
            Gets the biome vertex data object.
            </summary>
            <value>
            The biome vertex data object.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.MapSampleArray">
            <summary>
            Gets the map sample pre-allocated array.
            </summary>
            <value>
            The map sample pre-allocated array.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.MapSampleResult">
            <summary>
            Gets the map sample result.
            </summary>
            <value>
            The map sample result.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.TerrainQuadVertexCount">
            <summary>
            Gets the terrain quad vertex count.
            </summary>
            <value>
            The terrain quad vertex count.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.ThreadId">
            <summary>
            Gets the thread identifier of the thread associated with this object.
            </summary>
            <value>
            The thread identifier of the thread associated with this object.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.VertexDataInput">
            <summary>
            Gets the vertex data input object.
            </summary>
            <value>
            The vertex data input object.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorCacheData.VertexDataResults">
            <summary>
            Gets the vertex data result.
            </summary>
            <value>
            The vertex data result.
            </value>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorCacheData.GetCurrent(System.Int32,System.Int32)">
            <summary>
            Gets the cached terrain generator data object unique to the current thread.
            </summary>
            <param name="biomeCount">The biome count of the current terrain.</param>
            <param name="terrainQuadVertexCount">The terrain quad vertex count.</param>
            <returns>The cached terrain generator data object unique to the current thread.</returns>
        </member>
        <member name="T:ModApi.Planet.TerrainGeneratorDisposed">
            <summary>
            A wrapper for a terrain generator that is going away.
            The purpose of this class is for it to be hot-swapped during quadsphere disposal to protected
            background threads from calling native noise methods after they have been disposed (and thus crashing the app).
            All native noise calls to this terrain generator return dummy data (as do some non-noise calls).
            </summary>
            <seealso cref="T:ModApi.Planet.ITerrainGenerator" />
        </member>
        <member name="F:ModApi.Planet.TerrainGeneratorDisposed._source">
            <summary>
            The source terrain generator that is being disposed.
            </summary>
        </member>
        <member name="F:ModApi.Planet.TerrainGeneratorDisposed._vertexData">
            <summary>
            The vertex data returned by all API calls to this terrain generator.
            </summary>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.#ctor(ModApi.Planet.ITerrainGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Planet.TerrainGeneratorDisposed"/> class.
            </summary>
            <param name="terrainGenerator">The disposed terrain generator.</param>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.BiomeCount">
            <summary>
            Gets the number of biomes on the planet.
            </summary>
            <value>
            The number of biomes on the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.HeightMax">
            <summary>
            Gets the maximum height of the planet.
            </summary>
            <value>
            The maximum height of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.HeightMin">
            <summary>
            Gets the minimum height of the planet.
            </summary>
            <value>
            The minimum height of the planet.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.SeaLevel">
            <summary>
            Gets the sea level.
            </summary>
            <value>
            The sea level.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.TerrainData">
            <summary>
            Gets the terrain data.
            </summary>
            <value>
            The terrain data.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.TerrainMaterialModifier">
            <summary>
            Gets the terrain material modifier.
            </summary>
            <value>
            The terrain material modifier.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.TerrainQuadVertexCount">
            <summary>
            Gets the terrain quad vertex count.
            </summary>
            <value>
            The terrain quad vertex count.
            </value>
        </member>
        <member name="P:ModApi.Planet.TerrainGeneratorDisposed.WaterMaterialModifier">
            <summary>
            Gets the water material modifier.
            </summary>
            <value>
            The water material modifier.
            </value>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetCacheData">
            <summary>
            Gets the terrain generator cache data for the current thread.
            </summary>
            <returns>
            The terrain generator cache data for the current thread.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetHeight(UnityEngine.Vector3d)">
            <summary>
            Gets the height at the specified normalized position.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <returns>
            The height of the terrain at the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetHeight(UnityEngine.Vector3d,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the height at the specified normalized position.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>
            The height of the terrain at the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetRequiredTerrainMeshData">
            <summary>
            Gets the required terrain mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetRequiredWaterMeshData">
            <summary>
            Gets the required water mesh data flags.
            </summary>
            <returns>
            The required terrain mesh data flags.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetTerrainMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the terrain material.
            </summary>
            <param name="quad">The quad for which to get the terrain material.</param>
            <returns>
            The requested terrain material.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexData(UnityEngine.Vector3d,System.Boolean)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            The vertex data will assume a surface normal based on the planet position only.
            This should only be called from the main thread.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            This should only be called from the main thread.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexData(UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            The vertex data will assume a surface normal based on the planet position only.
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="allPasses"><c>true</c> if all vertex data passes should be ran. <c>false</c> if only height data is required.</param>
            <param name="cacheData">The terrain generator cache data to use with this request. This should not be shared between threads.</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexDataBiomeAndHeightPass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Biome' pass and the 'Height' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexDataBiomePass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Biome' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexDataFinalPass(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Final' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexDataHeightPass(UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Height' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>
            The vertex data for the specified position.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexDataWaterPass(ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Water' pass.
            This assumes previous passes have previously been invoked for a single vertex with the specified cache data
            (<see cref="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexData(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Boolean,ModApi.Planet.TerrainGeneratorCacheData)" />).
            </summary>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetVertexDataWaterPass(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32,ModApi.Planet.TerrainGeneratorCacheData)">
            <summary>
            Gets the vertex data for the 'Water' pass at the specified position.
            The position must be normalized (magnitude = 1).
            </summary>
            <param name="normalizedPosition">The normalized position.</param>
            <param name="normal">The normal for the terrain at the specified position.</param>
            <param name="quadVertexIndex">Index of the vertex in the quad (or zero if not generating quad data).</param>
            <param name="cacheData">The cache data used by the terrain generator for the current thread.
            If <c>null</c> is used, it will assume it is running on the main thread and use its cached data (no safety checks!).</param>
            <returns>The vertex data for the specified position.</returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.GetWaterMaterial(ModApi.Planet.IQuadSphereQuad)">
            <summary>
            Gets the water material.
            </summary>
            <param name="quad">The quad for which to get the water material.</param>
            <returns>
            The requested water material.
            </returns>
        </member>
        <member name="M:ModApi.Planet.TerrainGeneratorDisposed.InitializeQuadSphere(ModApi.Planet.IQuadSphere)">
            <summary>
            Initializes the terrain generator for the quad sphere.
            </summary>
            <param name="quadSphere">The planet quad sphere.</param>
        </member>
        <member name="T:ModApi.Planet.Utility">
            <summary>
            Utility class for terrain stuff.
            </summary>
        </member>
        <member name="M:ModApi.Planet.Utility.CubemapDirectionToTextureCoordinates(UnityEngine.Vector3d,UnityEngine.CubemapFace@,System.Double@,System.Double@)">
            <summary>
            Converts the direction into a cubemap face and u/v coordinates. The inverse of the
            CubemapTextureCoordinatesToDirection method.
            </summary>
            <param name="direction">The normalized direction.</param>
            <param name="face">The corresponding face.</param>
            <param name="u">The corresponding u coordinate (-1 to 1).</param>
            <param name="v">The corresponding v coordinate (-1 to 1).</param>
        </member>
        <member name="M:ModApi.Planet.Utility.CubemapTextureCoordinatesToDirection(UnityEngine.CubemapFace,System.Double,System.Double)">
            <summary>
            Converts from cubemap texture coordinates to a normalized direction vector. The inverse of the
            CubemapDirectionToTextureCoordinates method.
            </summary>
            <param name="face">The face.</param>
            <param name="u">The u texture coordinate of the face (-1 to 1).</param>
            <param name="v">The v texture coordinate of the face (-1 to 1).</param>
            <returns>The normalized direction vector.</returns>
        </member>
        <member name="M:ModApi.Planet.Utility.SpherePositionToCubePosition(UnityEngine.Vector3d)">
            <summary>
            Extends the sphere position to intersect with a unit cube and returns that intersection point.
            </summary>
            <param name="spherePosition">The normalized sphere position.</param>
            <returns>The position on a unit cube (-1 to 1 in all dimensions).</returns>
        </member>
        <member name="T:ModApi.PlanetStudio.CelestialFileDesignerInfo">
            <summary>
            A class containing information relevant to the celestial body or planetary system designer regarding a celestial database file.
            </summary>
        </member>
        <member name="F:ModApi.PlanetStudio.CelestialFileDesignerInfo._id">
            <summary>
            The ID used for the file.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.CelestialFileDesignerInfo.#ctor(ModApi.CelestialData.CelestialFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.PlanetStudio.CelestialFileDesignerInfo"/> class.
            </summary>
            <param name="file">The celestial database file.</param>
            <param name="id">The ID used for the file.</param>
        </member>
        <member name="P:ModApi.PlanetStudio.CelestialFileDesignerInfo.File">
            <summary>
            Gets the celestial database file.
            </summary>
            <value>The celestial database file.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.CelestialFileDesignerInfo.Id">
            <summary>
            Gets or sets the ID used for the file.
            </summary>
            <value>The ID used for the file.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.CelestialFileDesignerInfo.Thumbnail">
            <summary>
            Gets the thumbnail (<c>null</c> if unavailable).
            </summary>
            <value>The thumbnail (<c>null</c> if unavailable).</value>
        </member>
        <member name="T:ModApi.PlanetStudio.ICelestialBodyDesigner">
            <summary>
            The interface for the celestial body designer.
            </summary>
        </member>
        <member name="P:ModApi.PlanetStudio.ICelestialBodyDesigner.CurrentCelestialBody">
            <summary>
            Gets the currently loaded celestial body.
            </summary>
            <value>The currently loaded celestial body.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.ICelestialBodyDesigner.GameObject">
            <summary>
            Gets the game object.
            </summary>
            <value>
            The game object.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.ICelestialBodyDesigner.RegenOnRandomize">
            <summary>
            Gets or sets a value indicating whether the celestial body should be regenerated when one or more modifiers are randomized.
            </summary>
        </member>
        <member name="P:ModApi.PlanetStudio.ICelestialBodyDesigner.SupportFiles">
            <summary>
            Gets the support files for the currently loaded celestial body.
            </summary>
            <value>The support files for the currently loaded celestial body.</value>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.AddSupportFile(System.String)">
            <summary>
            Adds the file at the specified path as a support file for the current celestial object.
            The file will first be added to the celestial database if it doesn't already exist.
            </summary>
            <param name="filePath">The file path of the file to add.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.AddSupportFile(ModApi.CelestialData.CelestialFileReference)">
            <summary>
            Adds the specified file reference as a support file for the current celestial object.
            </summary>
            <param name="fileReference">The file reference to add.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.AddSupportFile(ModApi.CelestialData.CelestialFile,System.String)">
            <summary>
            Adds the specified file as a support file for the current celestial object.
            </summary>
            <param name="file">The file to add.</param>
            <param name="localId">The local identifier for the support file for this celestial body.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.LoadCelestialBody(ModApi.CelestialData.CelestialFile)">
            <summary>
            Loads the specified celestial body.
            </summary>
            <param name="celestialBodyFile">The celestial body file to load.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.RemoveSupportFile(System.String)">
            <summary>
            Removes the support file with the specified local ID from the celestial body.
            </summary>
            <param name="localId">The local identifier of the support file to remove.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.SaveCelestialBody(System.String,System.Boolean)">
            <summary>
            Saves the currently loaded celestial body.
            </summary>
            <param name="filePath">The file path to which to save the celestial body.</param>
            <param name="useFilePaths"><c>true</c> to save file references using file paths; <c>false</c> to use file IDs.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.UnloadCelestialBody">
            <summary>
            Unloads the currently loaded celestial body.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.ICelestialBodyDesigner.ViewCelestialBody(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Opens the loaded celestial body in the celestial body viewer.
            </summary>
            <param name="cleanGeneratedData">If set to <c>true</c>, the celestial body's generated data will be cleaned prior to opening it (causing it to be regenerated).</param>
            <param name="resetView">If set to <c>true</c>, the camera view will be reset. Use <c>null</c> for the default behavior.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:ModApi.PlanetStudio.PlanetStudioEditMode">
            <summary>
            The current edit mode of planet studio.
            </summary>
        </member>
        <member name="F:ModApi.PlanetStudio.PlanetStudioEditMode.None">
            <summary>
            Planet studio is currently not editing anything.
            </summary>
        </member>
        <member name="F:ModApi.PlanetStudio.PlanetStudioEditMode.CelestialBody">
            <summary>
            Planet studio is currently editing a celestial body.
            </summary>
        </member>
        <member name="F:ModApi.PlanetStudio.PlanetStudioEditMode.PlanetarySystem">
            <summary>
            Planet studio is currently editing a planetary system.
            </summary>
        </member>
        <member name="T:ModApi.PlanetStudio.IPlanetStudio">
            <summary>
            Interface for the Planet Studio.
            </summary>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudio.CelestialBodyDesigner">
            <summary>
            Gets the celestial body designer.
            </summary>
            <value>
            The celestial body designer.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudio.PlanetarySystemDesigner">
            <summary>
            Gets the planetary system designer.
            </summary>
            <value>
            The planetary system designer.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudio.PlanetStudioUI">
            <summary>
            Gets the planet studio UI.
            </summary>
            <value>
            The planet studio UI.
            </value>
        </member>
        <member name="T:ModApi.PlanetStudio.IPlanetStudioUI">
            <summary>
            Interface for the Planet Studio UI.
            </summary>
        </member>
        <member name="E:ModApi.PlanetStudio.IPlanetStudioUI.EditModeChanged">
            <summary>
            Occurs when the edit mode has changed.
            </summary>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudioUI.EditMode">
            <summary>
            Gets or sets the current edit mode of Planet Studio.
            </summary>
            <value>
            The edit mode of Planet Studio.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudioUI.IsLoading">
            <summary>
            Gets or sets a value indicating whether to display the Loading message.
            </summary>
            <value>
              <c>true</c> if this instance is displaying the Loading message; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudioUI.PlanetStudio">
            <summary>
            Gets the planet studio.
            </summary>
            <value>
            The planet studio.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudioUI.SelectedFlyout">
            <summary>
            Gets or sets the selected flyout.
            </summary>
            <value>
            The selected flyout.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudioUI.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetStudioUI.Visible">
            <summary>
            Gets or sets a value indicating whether this UI is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ModApi.PlanetStudio.IPlanetarySystemDesigner">
            <summary>
            The interface for the planetary system designer.
            </summary>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetarySystemDesigner.CelestialBodyFiles">
            <summary>
            Gets the celestial body files for the currently loaded planetary system.
            </summary>
            <value>The celestial body files for the currently loaded planetary system.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetarySystemDesigner.CurrentPlanetarySystem">
            <summary>
            Gets the currently loaded planetary system.
            </summary>
            <value>The currently loaded planetary system.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.IPlanetarySystemDesigner.GameObject">
            <summary>
            Gets the game object.
            </summary>
            <value>
            The game object.
            </value>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.AddCelestialBody(ModApi.CelestialData.CelestialFile,System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Adds the specified celestial body to the specified parent celestial body.
            </summary>
            <param name="celestialBodyFile">The celestial body to be added.</param>
            <param name="localId">The local identifier for the file for this planetary system (using <c>null</c> will use the celestial body name).</param>
            <param name="parentCelestialBodyLocalId">The parent celestial body local ID.</param>
            <param name="orbitXml">The orbit XML for the orbit at which to initialize the new celestial body (use <c>null</c> for defaults).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.AddCelestialBodyFile(ModApi.CelestialData.CelestialFileReference)">
            <summary>
            Adds the specified file reference as a celestial body file for the current planetary system.
            </summary>
            <param name="fileReference">The file reference to add.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.AddCelestialBodyFile(ModApi.CelestialData.CelestialFile,System.String)">
            <summary>
            Adds the specified file as a celestial body file for the current planetary system.
            </summary>
            <param name="file">The file to add.</param>
            <param name="localId">The local identifier for the file for this planetary system.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.LoadPlanetarySystem(ModApi.CelestialData.CelestialFile)">
            <summary>
            Loads the specified planetary system.
            </summary>
            <param name="planetarySystemFile">The planetary system file to load.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.RemoveCelestialBody(System.String)">
            <summary>
            Removes the celestial body with the specified local ID.
            </summary>
            <param name="celestialBodyLocalId">The local ID of the celestial body to remove.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.ReplaceCelestialBody(ModApi.CelestialData.CelestialFile,System.String)">
            <summary>
            Replaces the specified celestial body with the other specified celestial body for the current planetary system.
            </summary>
            <param name="file">The celestial body file to to add as a replacement.</param>
            <param name="localId">The local identifier of the celestial body being replaced.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.SavePlanetarySystem(System.String,System.Boolean)">
            <summary>
            Saves the currently loaded planetary system.
            </summary>
            <param name="filePath">The file path to which to save the planetary system.</param>
            <param name="useFilePaths"><c>true</c> to save file references using file paths; <c>false</c> to use file IDs.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.UnloadPlanetarySystem">
            <summary>
            Unloads the currently loaded planetary system.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.IPlanetarySystemDesigner.ViewPlanetarySystem(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Opens the loaded planetary system in the planetary system viewer.
            </summary>
            <param name="cleanGeneratedData">If set to <c>true</c>, the planetary system's generated data will be cleaned prior to opening it (causing it to be regenerated).</param>
            <param name="resetView">If set to <c>true</c>, the camera view will be reset. Use <c>null</c> for the default behavior.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:ModApi.PlanetStudio.OperationResult">
            <summary>
            An object representing the result of a operation.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.OperationResult.#ctor(System.Boolean,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.PlanetStudio.OperationResult"/> class.
            </summary>
            <param name="success"><c>true</c> if successful; otherwise <c>false</c>.</param>
            <param name="infoMessage">The informational message (if any)</param>
            <param name="warningMessage">The warning message (if any).</param>
            <param name="errorMessage">The error message (if any).</param>
            <param name="exception">The exception (if any).</param>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.ErrorMessage">
            <summary>
            Gets the error message associated with the result (if any).
            </summary>
            <value>The error message associated with the result (if any).</value>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.Exception">
            <summary>
            Gets the exception associated with the operation (if any).
            </summary>
            <value>The exception associated with the operation (if any).</value>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.InfoMessage">
            <summary>
            Gets the informational message associated with the result (if any).
            </summary>
            <value>The informational message associated with the result (if any).</value>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.IsCanceled">
            <summary>
            Gets a value indicating whether the operation was canceled.
            </summary>
            <value><c>true</c> if the operation was canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.IsSuccess">
            <summary>
            Gets a value indicating whether the operation was a success.
            </summary>
            <value><c>true</c> if the operation was a success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.Message">
            <summary>
            Gets a message w/all exception, error, and warning messages.
            </summary>
            <value>
            A message w/all exception, error, and warning messages.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.OperationResult.WarningMessage">
            <summary>
            Gets the warning message associated with the result (if any).
            </summary>
            <value>The warning message associated with the result (if any).</value>
        </member>
        <member name="M:ModApi.PlanetStudio.OperationResult.Cancel">
            <summary>
            Creates a canceled operation result.
            </summary>
            <returns>The operation result.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.OperationResult.Failure(System.String,System.String)">
            <summary>
            Creates a failure operation result.
            </summary>
            <param name="errorMessage">The error message (if any).</param>
            <param name="warningMessage">The warning message (if any).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.OperationResult.Failure(System.Exception,System.String,System.String)">
            <summary>
            Creates a failure operation result.
            </summary>
            <param name="exception">The exception associated with the failure.</param>
            <param name="errorMessage">The error message (if any).</param>
            <param name="warningMessage">The warning message (if any).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.OperationResult.Success(System.String,System.String)">
            <summary>
            Creates a success operation result.
            </summary>
            <param name="infoMessage">The informational message (if any).</param>
            <param name="warningMessage">The warning message (if any).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:ModApi.PlanetStudio.OperationResult.Log">
            <summary>
            Logs any messages and/or exceptions to the Unity log.
            </summary>
        </member>
        <member name="T:ModApi.PlanetStudio.PlanetStudioBase">
            <summary>
            Base class for the Planet Studio.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
            <seealso cref="T:ModApi.PlanetStudio.IPlanetStudio" />
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioBase.Instance">
            <summary>
            Gets the static instance of the planetary system designer.
            </summary>
            <value>The static instance of the planetary system designer.</value>
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioBase.CelestialBodyDesigner">
            <summary>
            Gets the celestial body designer.
            </summary>
            <value>
            The celestial body designer.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioBase.PlanetarySystemDesigner">
            <summary>
            Gets the planetary system designer.
            </summary>
            <value>
            The planetary system designer.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioBase.PlanetStudioUI">
            <summary>
            Gets the planet studio UI.
            </summary>
            <value>
            The planet studio UI.
            </value>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioBase.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioBase.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="T:ModApi.PlanetStudio.PlanetStudioTool">
            <summary>
            Base class for a planet studio tool.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.#ctor(ModApi.PlanetStudio.ICelestialBodyDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.PlanetStudio.PlanetStudioTool"/> class.
            </summary>
            <param name="designer">The designer script.</param>
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioTool.Active">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.PlanetStudio.PlanetStudioTool"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioTool.Designer">
            <summary>
            Gets the designer script.
            </summary>
            <value>
            The designer script.
            </value>
        </member>
        <member name="P:ModApi.PlanetStudio.PlanetStudioTool.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.Activate">
            <summary>
            Called when the planet studio has started using this tool.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.Deactivate">
            <summary>
            Called when the planet studio has stopped using this tool. It may be used again.
            </summary>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the pointer is being dragged.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>
              <c>true</c> if the event is considered handled (and should not propagate to other responders) otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the pointer is pressed.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>
              <c>true</c> if the event is considered handled (and should not propagate to other responders) otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the pointer is released.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>
              <c>true</c> if the event is considered handled (and should not propagate to other responders) otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.PlanetStudio.PlanetStudioTool.Update(System.Single)">
            <summary>
            Called every frame when the planet studio is using this tool.
            </summary>
            <param name="deltaTime">The delta time.</param>
        </member>
        <member name="T:ModApi.PreprocessorSymbols">
            <summary>
            A class used to accessing information related to any preprocessor symbols that were used in compiling this assembly.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.AllSymbols">
            <summary>
            A list of all the known preprocessor symbols that may have or may not have been defined.
            </summary>
        </member>
        <member name="T:ModApi.PreprocessorSymbols.PreprocessorSymbolBuildBehaviorType">
            <summary>
            An enumeration defining the different build behaviors that could be related to a preprocessor symbol.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.PreprocessorSymbolBuildBehaviorType.Default">
            <summary>
            The default build behavior.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.PreprocessorSymbolBuildBehaviorType.WarningIfDefined">
            <summary>
            If the symbol is defined, a warning message will be logged when a build occurs.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.PreprocessorSymbolBuildBehaviorType.ErrorIfDefined">
            <summary>
            If the symbol is defined, an error message will be logged when a build occurs and the build will break.
            </summary>
        </member>
        <member name="T:ModApi.PreprocessorSymbols.PERFORMANCE_METRICS_QUAD_GENERATION">
            <summary>
            The preprocessor symbol used to collect performance metrics related to the generation of quads for quad spheres.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.PERFORMANCE_METRICS_QUAD_GENERATION.BuildBehavior">
            <summary>
            The build behavior related to this symbol.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.PERFORMANCE_METRICS_QUAD_GENERATION.Id">
            <summary>
            The identifier of the symbol.
            </summary>
        </member>
        <member name="F:ModApi.PreprocessorSymbols.PERFORMANCE_METRICS_QUAD_GENERATION.IsDefined">
            <summary>
            A value indicating whether or not the symbol has been defined.
            </summary>
        </member>
        <member name="T:ModApi.PreprocessorSymbols.PreprocessorSymbol">
            <summary>
            A class representing a preprocessor symbol.
            </summary>
        </member>
        <member name="M:ModApi.PreprocessorSymbols.PreprocessorSymbol.#ctor(System.String,System.Boolean,ModApi.PreprocessorSymbols.PreprocessorSymbolBuildBehaviorType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.PreprocessorSymbols.PreprocessorSymbol"/> class.
            </summary>
            <param name="id">The identifier of the symbol.</param>
            <param name="isDefined">If set to <c>true</c>, the symbol has been defined.</param>
            <param name="buildBehavior">The build behavior related to the symbol.</param>
        </member>
        <member name="P:ModApi.PreprocessorSymbols.PreprocessorSymbol.BuildBehavior">
            <summary>
            Gets the build behavior related to this symbol.
            </summary>
            <value>
            The build behavior related to this symbol.
            </value>
        </member>
        <member name="P:ModApi.PreprocessorSymbols.PreprocessorSymbol.Id">
            <summary>
            Gets the identifier of the symbol.
            </summary>
            <value>
            The identifier of the symbol.
            </value>
        </member>
        <member name="P:ModApi.PreprocessorSymbols.PreprocessorSymbol.IsDefined">
            <summary>
            Gets a value indicating whether this symbol is defined.
            </summary>
            <value>
            <c>true</c> if this symbol is defined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Project">
            <summary>
            A static class containing project level constants.
            </summary>
        </member>
        <member name="F:ModApi.Project.ExecutableName">
            <summary>
            The executable name of the project (without the file extension).
            </summary>
        </member>
        <member name="F:ModApi.Project.Name">
            <summary>
            The name of the project.
            </summary>
        </member>
        <member name="F:ModApi.Project.UnityVersion">
            <summary>
            The unity version that the game was built with.
            </summary>
        </member>
        <member name="F:ModApi.Project._mainAssembly">
            <summary>
            The main assembly for the game.
            </summary>
        </member>
        <member name="P:ModApi.Project.IsEditorModProject">
            <summary>
            Gets a value indicating whether the code is currently executing in the Unity editor of a mod project.
            </summary>
            <value>
            <c>true</c> if the code is currently executing in the Unity editor of a mod project; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Project.MainAssembly">
            <summary>
            Gets the main assembly for the game.
            </summary>
            <value>
            The main assembly for the game.
            </value>
        </member>
        <member name="T:ModApi.Project.FileExtensions">
            <summary>
            The file extensions used by the project.
            </summary>
        </member>
        <member name="F:ModApi.Project.FileExtensions.Craft">
            <summary>
            The craft file extension
            </summary>
        </member>
        <member name="F:ModApi.Project.FileExtensions.Generic">
            <summary>
            The generic file extension for SimpleRockets 2 content.
            </summary>
        </member>
        <member name="F:ModApi.Project.FileExtensions.Mod">
            <summary>
            The file extension used for mods.
            </summary>
        </member>
        <member name="F:ModApi.Project.FileExtensions.Sandbox">
            <summary>
            The file extension used for sandboxes.
            </summary>
        </member>
        <member name="T:ModApi.Scenes.Events.SceneEventArgs">
            <summary>
            Event arguments for an event associated with a scene.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Scenes.Events.SceneEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Scenes.Events.SceneEventArgs"/> class.
            </summary>
            <param name="scene">The name of the scene associated with the event.</param>
        </member>
        <member name="P:ModApi.Scenes.Events.SceneEventArgs.Scene">
            <summary>
            Gets the name of the scene associated with the event.
            </summary>
            <value>
            The name of the scene associated with the event.
            </value>
        </member>
        <member name="T:ModApi.Scenes.Events.SceneTransitionEventArgs">
            <summary>
            Event args for a scene transition event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Scenes.Events.SceneTransitionEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Scenes.Events.SceneTransitionEventArgs"/> class.
            </summary>
            <param name="transitionFromScene">The transition from scene.</param>
            <param name="transitionToScene">The transition to scene.</param>
        </member>
        <member name="P:ModApi.Scenes.Events.SceneTransitionEventArgs.TransitionFromScene">
            <summary>
            Gets the transition from scene name.
            </summary>
            <value>
            The transition from scene name.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Events.SceneTransitionEventArgs.TransitionToScene">
            <summary>
            Gets the transition to scene name.
            </summary>
            <value>
            The transition to scene name.
            </value>
        </member>
        <member name="T:ModApi.Scenes.ILoadingScreenTextureProvider">
            <summary>
            An interface for a class that provides loading screen textures.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.ILoadingScreenTextureProvider.GetLoadingScreenTexture(System.String,System.String,System.String)">
            <summary>
            Gets the loading screen texture for the specified scene.
            </summary>
            <param name="scene">The name of the scene being loaded.</param>
            <param name="previousScene">The name of the scene being unloaded.</param>
            <param name="flightSceneActivePlanet">The last known name of the active planet when entering the flight scene.</param>
            <returns>The loading screen texture used for loading the specified screen. <c>null</c> if no texture was provided.</returns>
        </member>
        <member name="T:ModApi.Scenes.ISceneManager">
            <summary>
            An interface for a class that handles scene related functionality.
            </summary>
        </member>
        <member name="E:ModApi.Scenes.ISceneManager.SceneLoaded">
            <summary>
            Occurs when a scene is loaded.
            </summary>
        </member>
        <member name="E:ModApi.Scenes.ISceneManager.SceneLoading">
            <summary>
            Occurs when a scene is about to be loaded.
            </summary>
        </member>
        <member name="E:ModApi.Scenes.ISceneManager.SceneTransitionCompleted">
            <summary>
            Occurs when a scene transition from the current scene to a new scene has completed.
            </summary>
        </member>
        <member name="E:ModApi.Scenes.ISceneManager.SceneTransitionStarted">
            <summary>
            Occurs when a scene transition from the current scene to a new scene has started.
            </summary>
        </member>
        <member name="E:ModApi.Scenes.ISceneManager.SceneUnloaded">
            <summary>
            Occurs when a scene is unloaded.
            </summary>
        </member>
        <member name="E:ModApi.Scenes.ISceneManager.SceneUnloading">
            <summary>
            Occurs when a scene is about to be unloaded.
            </summary>
        </member>
        <member name="P:ModApi.Scenes.ISceneManager.CurrentScene">
            <summary>
            Gets the current scene name.
            </summary>
            <value>
            The current scene name.
            </value>
        </member>
        <member name="P:ModApi.Scenes.ISceneManager.FlightSceneLoadParameters">
            <summary>
            Gets the current flight scene parameters.
            </summary>
            <value>
            The current flight scene parameters.
            </value>
        </member>
        <member name="P:ModApi.Scenes.ISceneManager.InDesignerScene">
            <summary>
            Gets a value indicating whether the game is currently in the designer scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the designer scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scenes.ISceneManager.InFlightScene">
            <summary>
            Gets a value indicating whether the game is currently in the flight scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the flight scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scenes.ISceneManager.InMenuScene">
            <summary>
            Gets a value indicating whether the game is currently in the menu scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the menu scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scenes.ISceneManager.InPlanetStudioScene">
            <summary>
            Gets a value indicating whether the game is currently in the planet studio scene.
            </summary>
            <value>
              <c>true</c> if the game is currently in the planet studio scene; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.DeactivateCurrentScene">
            <summary>
            Deactivates all game objects in the the current scene.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.LoadDesigner">
            <summary>
            Loads the designer scene.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.LoadFlight(ModApi.Scenes.Parameters.FlightSceneLoadParameters)">
            <summary>
            Loads the flight scene.
            </summary>
            <param name="loadParameters">The flight scene load parameters. If <c>null</c>, the current parameters will remain unchanged.</param>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.LoadMenu">
            <summary>
            Loads the menu scene.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.LoadPlanetStudio">
            <summary>
            Loads the planet studio scene.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.LoadScene(System.String)">
            <summary>
            Loads the specified scene.
            </summary>
            <param name="sceneName">The name of the scene to load.</param>
        </member>
        <member name="M:ModApi.Scenes.ISceneManager.RegisterLoadingScreenTextureProvider(ModApi.Scenes.ILoadingScreenTextureProvider,System.Int32)">
            <summary>
            Registers the specified loading screen texture provider.
            </summary>
            <param name="provider">The loading screen texture provider.</param>
            <param name="priority">The priority of the provider. Providers are queried in ascending priority order.</param>
        </member>
        <member name="T:ModApi.Scenes.LoadingScreenTextureDisposalMethod">
            <summary>
            An enumeration defining the disposal methods for loading screen textures.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.LoadingScreenTextureDisposalMethod.None">
            <summary>
            Do nothing with the loading screen texture when finished.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.LoadingScreenTextureDisposalMethod.UnloadAsset">
            <summary>
            Unload the loading screen texture via Resources.UnloadAsset() when finished.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.LoadingScreenTextureDisposalMethod.Destroy">
            <summary>
            Destroy the loading screen texture via Texture.Destroy() when finished.
            </summary>
        </member>
        <member name="T:ModApi.Scenes.LoadingScreenTextureData">
            <summary>
            The loading screen texture data.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.LoadingScreenTextureData.#ctor(UnityEngine.Texture,ModApi.Scenes.LoadingScreenTextureDisposalMethod,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Scenes.LoadingScreenTextureData" /> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="disposalMethod">The texture disposal method.</param>
            <param name="showLoadingText">If set to <c>true</c> the loading text will be shown.</param>
        </member>
        <member name="P:ModApi.Scenes.LoadingScreenTextureData.DisposalMethod">
            <summary>
            Gets the loading screen texture disposal method.
            </summary>
            <value>
            The loading screen texture disposal method.
            </value>
        </member>
        <member name="P:ModApi.Scenes.LoadingScreenTextureData.ShowLoadingText">
            <summary>
            Gets a value indicating whether the loading text should be shown.
            </summary>
            <value>
              <c>true</c> if the loading text should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scenes.LoadingScreenTextureData.Texture">
            <summary>
            Gets the loading screen texture.
            </summary>
            <value>
            The loading screen texture.
            </value>
        </member>
        <member name="T:ModApi.Scenes.Parameters.FlightSceneLoadParameters">
            <summary>
            A collection of parameters passed to the flight scene while loading.
            Most importantly, these parameters affect which craft is loaded and where.
            </summary>
        </member>
        <member name="M:ModApi.Scenes.Parameters.FlightSceneLoadParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Scenes.Parameters.FlightSceneLoadParameters"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.FlightStateDataLoader">
            <summary>
            Gets or sets the flight state data loader method.
            This will override the current flight state.
            Set to <c>null</c> to use the flight state from the current game state.
            </summary>
            <value>
            The flight state data.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.HeatDamage">
            <summary>
            Gets or sets a value indicating whether or not heat damage is enabled during the flight.
            If <c>null</c>, the game setting for heat damage will detemine whether or not it is enabled.
            </summary>
            <value>
            A value indicating whether or not heat damage is enabled during the flight.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.LaunchCraftId">
            <summary>
            Gets or sets the launch craft identifier.
            This is the ID of the craft which will be loaded from the craft designs folder.
            Set to <c>null</c> if not launching a new craft.
            </summary>
            <value>
            The launch craft identifier.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.LaunchCraftNodeName">
            <summary>
            Gets or sets the node name for the craft if launching a new craft.
            This will be ignored if not launching a new craft.
            </summary>
            <value>
            The name of the launch craft node.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.LaunchLocation">
            <summary>
            Gets or sets the launch location used when launching a new craft.
            This will be ignored if not launching a new craft.
            </summary>
            <value>
            The launch location.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.LoadingScreen">
            <summary>
            Gets or sets the loading screen hint.
            This may help determine which loading screen is used when loading the flight scene.
            </summary>
            <value>
            The loading screen hint.
            </value>
        </member>
        <member name="P:ModApi.Scenes.Parameters.FlightSceneLoadParameters.ResumeCraftNodeId">
            <summary>
            Gets or sets the ID of the craft for which to resume flight.
            If not launching a new craft and this is set to <c>null</c>, that last craft used according to the flight state will be resumed.
            </summary>
            <value>
            The resume craft node identifier.
            </value>
        </member>
        <member name="M:ModApi.Scenes.Parameters.FlightSceneLoadParameters.NewCraft(System.String,System.String,ModApi.State.LaunchLocation)">
            <summary>
            Creates flight scene parameters used for launching a new craft.
            </summary>
            <param name="craftId">The craft identifier.</param>
            <param name="craftNodeName">The name of the craft node.</param>
            <param name="launchLocation">The launch location.</param>
            <returns>The requested flight scene parameters.</returns>
        </member>
        <member name="M:ModApi.Scenes.Parameters.FlightSceneLoadParameters.RestorePreflightData(System.Xml.Linq.XElement,ModApi.State.IGameState)">
            <summary>
            Restores the preflight data.
            </summary>
            <param name="xml">The XML from which to load the data.</param>
            <param name="gameState">The current game state.</param>
            <returns>
            The flight scene load parameters for the preflight state.
            </returns>
        </member>
        <member name="M:ModApi.Scenes.Parameters.FlightSceneLoadParameters.ResumeCraft(System.Nullable{System.Int32},System.String)">
            <summary>
            Creates flight scene parameters used for resuming flight of an existing craft.
            </summary>
            <param name="craftNodeId">The craft node identifier.</param>
            <param name="loadingScreen">The loading screen hint used when determining the loading screen to display.</param>
            <returns>The requested flight scene parameters.</returns>
        </member>
        <member name="M:ModApi.Scenes.Parameters.FlightSceneLoadParameters.SavePreflightData(System.String)">
            <summary>
            Saves the preflight data.
            </summary>
            <param name="elementName">Name of the XML element to create.</param>
            <returns>The XML element containing the preflight flight scene load parameter data.</returns>
        </member>
        <member name="T:ModApi.Scenes.SceneNames">
            <summary>
            A constants class containing the names of the various scenes used by the game.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.SceneNames.Designer">
            <summary>
            The name of the designer scene.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.SceneNames.Flight">
            <summary>
            The name of the flight scene.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.SceneNames.Menu">
            <summary>
            The name of the menu scene.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.SceneNames.PlanetStudio">
            <summary>
            The name of the planet studio scene.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.SceneNames.Startup">
            <summary>
            The name of the startup scene.
            </summary>
        </member>
        <member name="F:ModApi.Scenes.SceneNames.Transition">
            <summary>
            The name of the transition scene.
            </summary>
        </member>
        <member name="T:ModApi.Settings.AudioSettings">
            <summary>
            Audio settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.AudioSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.AudioSettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.AudioSettings.MusicLevel">
            <summary>
            The music quality.
            </summary>
        </member>
        <member name="F:ModApi.Settings.AudioSettings.MusicLevel.Low">
            <summary>
            No secondary layer. Used for low memory devices.
            </summary>
        </member>
        <member name="F:ModApi.Settings.AudioSettings.MusicLevel.High">
            <summary>
            Both layers.
            </summary>
        </member>
        <member name="P:ModApi.Settings.AudioSettings.MasterVolume">
            <summary>
            Gets the master volume.
            </summary>
            <value>
            The master volume.
            </value>
        </member>
        <member name="P:ModApi.Settings.AudioSettings.MusicQuality">
            <summary>
            Gets the music quality.
            </summary>
            <value>
            The music quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.AudioSettings.MusicVolume">
            <summary>
            Gets the music volume.
            </summary>
            <value>
            The music volume.
            </value>
        </member>
        <member name="P:ModApi.Settings.AudioSettings.SoundVolume">
            <summary>
            Gets the sound volume.
            </summary>
            <value>
            The sound volume.
            </value>
        </member>
        <member name="M:ModApi.Settings.AudioSettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.BoolSetting">
            <summary>
            A boolean based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1" />
        </member>
        <member name="F:ModApi.Settings.Core.BoolSetting._displayText">
            <summary>
            The display text for the false and true values.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.#ctor(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.BoolSetting"/> class.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.Create(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Creates a boolean based game setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.GetDisplayValue(System.Boolean)">
            <summary>
            Gets the display value for the specified value of the setting.
            </summary>
            <param name="value">The value for which to get a display value.</param>
            <returns>
            The requested display value.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the setting from the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the setting.</param>
        </member>
        <member name="T:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder">
            <summary>
            A setting builder object for a boolean based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2" />
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.#ctor(ModApi.Settings.Core.BoolSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder"/> class.
            </summary>
            <param name="setting">The setting associated with the builder.</param>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.op_Implicit(ModApi.Settings.Core.BoolSetting.BoolSettingBuilder)~ModApi.Settings.Core.BoolSetting">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder"/> to <see cref="T:ModApi.Settings.Core.BoolSetting"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.AddWarningOnDisabled(System.String)">
            <summary>
            Adds specified warning to be applied to the setting when its value is <c>false</c>.
            </summary>
            <param name="warning">The warning to be applied.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.AddWarningOnDisabled(ModApi.Settings.Core.DeviceFlags,System.String)">
            <summary>
            Adds specified warning to be applied to the setting when its value is <c>false</c>.
            </summary>
            <param name="devices">The devices on which the warning is applicable.</param>
            <param name="warning">The warning to be applied.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.AddWarningOnEnabled(System.String)">
            <summary>
            Adds specified warning to be applied to the setting when its value is <c>true</c>.
            </summary>
            <param name="warning">The warning to be applied.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.AddWarningOnEnabled(ModApi.Settings.Core.DeviceFlags,System.String)">
            <summary>
            Adds specified warning to be applied to the setting when its value is <c>true</c>.
            </summary>
            <param name="devices">The devices on which the warning is applicable.</param>
            <param name="warning">The warning to be applied.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.SetDisplayText(System.String,System.String)">
            <summary>
            Sets the display text for the boolean values.
            </summary>
            <param name="disabledDisplayText">The disabled display text.</param>
            <param name="enabledDisplayText">The enabled display text.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.BoolSetting.BoolSettingBuilder.SetDisplayText(ModApi.Settings.Core.DeviceFlags,System.String,System.String)">
            <summary>
            Sets the display text for the boolean values.
            </summary>
            <param name="devices">The devices on which to set the display text.</param>
            <param name="disabledDisplayText">The disabled display text.</param>
            <param name="enabledDisplayText">The enabled display text.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="T:ModApi.Settings.Core.CurrentDevice">
            <summary>
            A utility class containing information about the current device on which the game is running.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ModApi.Settings.Core.CurrentDevice"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Settings.Core.CurrentDevice.Flags">
            <summary>
            Gets the devices flags for the current device.
            </summary>
            <value>
            The devices flags for the current device.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.GetCurrentFlagsAsString">
            <summary>
            Gets the current flags as string.
            </summary>
            <returns>The string with all flags.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.HasAnyFlag(ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Determines whether the current device has any of the specified device flags.
            </summary>
            <param name="flags">The flags for which to check the current device.</param>
            <returns>
              <c>true</c> if the current device has any of the specified device flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.GetDeviceDesktopTiers(ModApi.IDevice)">
            <summary>
            Gets the desktop device tier flags.
            </summary>
            <param name="device">The device.</param>
            <returns>The flags.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.GetDeviceMobileTiers(ModApi.IDevice)">
            <summary>
            Gets the mobile device tier flags.
            </summary>
            <param name="device">The device.</param>
            <returns>The flags.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.GetAndroidTiers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the device tier for an Android device.
            </summary>
            <param name="gpuName">Name of the graphics device.</param>
            <param name="gpuMemory">Size of the graphics memory.</param>
            <param name="shaderLevel">The graphics shader level.</param>
            <param name="maxRenderTargetCount">The supported render target count.</param>
            <returns>The flags.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.CurrentDevice.GetAndroidGpuModelNumber(System.String,System.String)">
            <summary>
            Gets the model number of the Android GPU with the specified prefix.
            </summary>
            <param name="gpuName">Name of the GPU.</param>
            <param name="prefix">The prefix.</param>
            <returns>The model number, of 0 if it could not be determined.</returns>
        </member>
        <member name="T:ModApi.Settings.Core.SettingChangedEventHandler`1">
            <summary>
            A simple setting changed event handler delegate.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="setting">The setting that was changed.</param>
        </member>
        <member name="T:ModApi.Settings.Core.DeviceFlags">
            <summary>
            An enumeration defining flags that can be associated with the current device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.Default">
            <summary>
            No specific device flags.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.Desktop">
            <summary>
            A flag indicating the game is running on a desktop device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.Mobile">
            <summary>
            A flag indicating the game is running on a mobile device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.Android">
            <summary>
            A flag indicating the game is running on an android device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.IOS">
            <summary>
            A flag indicating the game is running on an iOS device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.Windows">
            <summary>
            A flag indicating the game is running on a windows device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.OSX">
            <summary>
            A flag indicating the game is running on a OSX device.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.HighEnd">
            <summary>
            A flag indicating the game is running on a high-end device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.MidRange">
            <summary>
            A flag indicating the game is running on a midrange device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.LowEnd">
            <summary>
            A flag indicating the game is running on a low-end device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.HighEndGraphics">
            <summary>
            A flag indicating the game is running on a high-end device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.MidRangeGraphics">
            <summary>
            A flag indicating the game is running on a midrange device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.LowEndGraphics">
            <summary>
            A flag indicating the game is running on a low-end device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.HighEndProcessor">
            <summary>
            A flag indicating the game is running on a high-end device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.MidRangeProcessor">
            <summary>
            A flag indicating the game is running on a midrange device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.LowEndProcessor">
            <summary>
            A flag indicating the game is running on a low-end device relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.LowRam">
            <summary>
            A flag indicating the game is running on a device with a low amount of RAM relative to its hardware category (desktop / mobile).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.DebugBuild">
            <summary>
            A flag indicating if a debug build of the game is running.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.DeviceFlags.All">
            <summary>
            All flags.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.EnumOptionAttribute">
            <summary>
            An attribute to add to enumeration options to define various bits of data used by a game setting for the enumeration.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:ModApi.Settings.Core.EnumOptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.EnumOptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.EnumOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.EnumOptionAttribute"/> class.
            </summary>
            <param name="description">The description of the setting option.</param>
        </member>
        <member name="M:ModApi.Settings.Core.EnumOptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.EnumOptionAttribute"/> class.
            </summary>
            <param name="displayName">The display name of the setting option.</param>
            <param name="description">The description of the setting option.</param>
        </member>
        <member name="M:ModApi.Settings.Core.EnumOptionAttribute.#ctor(System.UInt32,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.EnumOptionAttribute"/> class.
            </summary>
            <param name="priority">The attribute priority that defines the evaluation order.</param>
            <param name="devices">The devices on which the attribute applies.</param>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.AttributePriority">
            <summary>
            Gets the attribute priority.
            Attributes are evaluated based on ascending order of their priority.
            If more than one attribute that applies to the current device defines the same setting,
            then the last one evaluated (highest priority) takes precedence.
            </summary>
            <value>
            The attribute priority.
            Attributes are evaluated based on ascending order of their priority.
            If more than one attribute that applies to the current device defines the same setting,
            then the last one evaluated (highest priority) takes precedence.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.Description">
            <summary>
            Gets or sets the description of the setting option.
            </summary>
            <value>
            The description of the setting option.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.Devices">
            <summary>
            Gets the devices on which the attribute applies.
            </summary>
            <value>
            The devices on which the attribute applies.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.DisplayName">
            <summary>
            Gets or sets the display name of the setting option.
            </summary>
            <value>
            The display name of the setting option.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.DisplayOrder">
            <summary>
            Gets or sets the display order of the enumeration option.
            </summary>
            <value>
            The order display order of the enumeration option.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.State">
            <summary>
            Gets or sets the state of the setting option.
            </summary>
            <value>
            The state of the setting option.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumOptionAttribute.Warning">
            <summary>
            Gets or sets the warning applied when the setting option is selected.
            </summary>
            <value>
            The warning applied when the setting option is selected.
            </value>
        </member>
        <member name="T:ModApi.Settings.Core.IEnumSetting">
            <summary>
            Interface to make it easier to work with an EnumSetting and to not have to know its enumeration type.
            </summary>
        </member>
        <member name="P:ModApi.Settings.Core.IEnumSetting.AvailableStringValues">
            <summary>
            Gets the available values, as strings.
            </summary>
            <value>
            The available values.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.IEnumSetting.DisplayValue">
            <summary>
            Gets the display value.
            </summary>
            <value>
            The display value.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.IEnumSetting.GetDisplayValue(System.String)">
            <summary>
            Gets the display value for the specified value of the setting.
            </summary>
            <param name="value">The value for which to get a display value.</param>
            <returns>
            The requested display value.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.IEnumSetting.SetInternalValueFromDisplayValue(System.String)">
            <summary>
            Sets the internal value from a display value.
            </summary>
            <param name="displayValue">The display value.</param>
        </member>
        <member name="M:ModApi.Settings.Core.IEnumSetting.SetStringValue(System.String)">
            <summary>
            Sets the value with a string that this setting will then parse to the appropriate enum type.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ModApi.Settings.Core.EnumSetting`1">
            <summary>
            An enumeration based game setting.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <seealso cref="T:ModApi.Settings.Core.Setting`1" />
        </member>
        <member name="F:ModApi.Settings.Core.EnumSetting`1._description">
            <summary>
            The description of the setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.EnumSetting`1._descriptions">
            <summary>
            The descriptions for the enumeration values.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.EnumSetting`1._displayNames">
            <summary>
            The display names for the enumeration values.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.#ctor(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.EnumSetting`1"/> class.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
        </member>
        <member name="P:ModApi.Settings.Core.EnumSetting`1.AvailableStringValues">
            <summary>
            Gets the available values, as strings.
            </summary>
            <value>
            The available values.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumSetting`1.AvailableValues">
            <summary>
            Gets the available enumeration values.
            </summary>
            <value>
            The available enumeration values.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumSetting`1.Description">
            <summary>
            Gets or sets the description of the setting.
            </summary>
            <value>
            The description of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumSetting`1.DisabledValues">
            <summary>
            Gets the disabled enumeration values.
            </summary>
            <value>
            The disabled enumeration values.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.EnumSetting`1.HiddenValues">
            <summary>
            Gets the hidden enumeration values.
            </summary>
            <value>
            The hidden enumeration values.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.Create(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Creates an enumeration based game setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.GetDisplayValue(`0)">
            <summary>
            Gets the display value for the specified value of the setting.
            </summary>
            <param name="value">The value for which to get a display value.</param>
            <returns>
            The requested display value.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.GetDisplayValue(System.String)">
            <summary>
            Gets the display value for the specified value of the setting.
            </summary>
            <param name="value">The value for which to get a display value.</param>
            <returns>
            The requested display value.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the setting from the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.SetInternalValueFromDisplayValue(System.String)">
            <summary>
            Sets the internal value from a display value.
            </summary>
            <param name="displayValue">The display value.</param>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.SetStringValue(System.String)">
            <summary>
            Sets the value with a string that this setting will then parse to the appropriate enum type.
            </summary>
            <param name="value">The enum value as a string.</param>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.Validate(`0)">
            <summary>
            Validates the specified value for the setting, returning the actual value to be used in place of the requested value.
            </summary>
            <param name="value">The requested value of the setting to validate.</param>
            <returns>
            The actual value of the setting to be used in place of the requested value.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.EnumSetting`1.EnumSettingBuilder">
            <summary>
            A setting builder object for an enumeration based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2" />
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.EnumSettingBuilder.#ctor(ModApi.Settings.Core.EnumSetting{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.EnumSetting`1.EnumSettingBuilder"/> class.
            </summary>
            <param name="setting">The setting associated with the builder.</param>
        </member>
        <member name="M:ModApi.Settings.Core.EnumSetting`1.EnumSettingBuilder.op_Implicit(ModApi.Settings.Core.EnumSetting{`0}.EnumSettingBuilder)~ModApi.Settings.Core.EnumSetting{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.EnumSetting`1.EnumSettingBuilder"/> to <see cref="T:ModApi.Settings.Core.EnumSetting`1"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1">
            <summary>
            Event arguments used when a setting changed event is raised.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Settings.Core.Events.SettingChangedEventArgs`1.#ctor(ModApi.Settings.Core.Setting{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> class.
            </summary>
            <param name="setting">The setting that changed.</param>
        </member>
        <member name="P:ModApi.Settings.Core.Events.SettingChangedEventArgs`1.Setting">
            <summary>
            Gets the setting that changed.
            </summary>
            <value>
            The setting that changed.
            </value>
        </member>
        <member name="T:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1">
            <summary>
            Event arguments that are used when one or more settings in a setting category change.
            </summary>
            <typeparam name="T">The type of the settings category.</typeparam>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1"/> class.
            </summary>
            <param name="category">The category in which one or more settings changed.</param>
        </member>
        <member name="P:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1.Category">
            <summary>
            Gets the category in which one or more settings changed.
            </summary>
            <value>
            The category in which one or more settings changed.
            </value>
        </member>
        <member name="T:ModApi.Settings.Core.NumericSetting`1">
            <summary>
            A numeric based game setting.
            </summary>
            <typeparam name="T">The type of the number used for the game setting.</typeparam>
            <seealso cref="T:ModApi.Settings.Core.Setting`1" />
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.#ctor(System.String,ModApi.Settings.Core.SettingsCategory,`0,`0,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.NumericSetting`1"/> class.
            </summary>
            <param name="displayName">The display name.</param>
            <param name="category">The category.</param>
            <param name="min">The minimum value for the setting.</param>
            <param name="max">The maximum value for the setting.</param>
            <param name="step">The step value for the setting.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.EnforcedMax">
            <summary>
            Gets the enforced maximum value for the setting.
            This value is not used by the UI for determining the value range.
            It is used for clamping values manually set via XML editing.
            </summary>
            <value>
            The enforced maximum value for the setting.
            This value is not used by the UI for determining the value range.
            It is used for clamping values manually set via XML editing.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.EnforcedMin">
            <summary>
            Gets the enforced minimum value for the setting.
            This value is not used by the UI for determining the value range.
            It is used for clamping values manually set via XML editing.
            </summary>
            <value>
            The enforced minimum value for the setting.
            This value is not used by the UI for determining the value range.
            It is used for clamping values manually set via XML editing.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.Max">
            <summary>
            Gets the maximum value for the setting.
            </summary>
            <value>
            The maximum value for the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.Min">
            <summary>
            Gets the minimum value for the setting.
            </summary>
            <value>
            The minimum value for the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.ReverseSpinnerUIValues">
            <summary>
            Gets or sets a value indicating whether to reverse the order of the values in the spinner UI.
            </summary>
            <value>
              <c>true</c> if the reverse order of values in the spinner UI; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.Step">
            <summary>
            Gets the step value for the setting.
            This is used for creating a UI slider between the min and max range with a given step value.
            </summary>
            <value>
            The step value for the setting.
            This is used for creating a UI slider between the min and max range with a given step value.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.UseSpinnerUI">
            <summary>
            Gets or sets a value indicating whether to use a spinner for this setting in the settings UI.
            </summary>
            <value>
              <c>true</c> if a spinner control should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.NumericSetting`1.DisplayFormatter">
            <summary>
            Gets or sets the display formatter function.
            This is used to format a value and display it in the UI.
            </summary>
            <value>
            The display formatter function.
            This is used to format a value and display it in the UI.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.Create(System.String,ModApi.Settings.Core.SettingsCategory,`0,`0,`0,System.String)">
            <summary>
            Creates a numeric based game setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="min">The minimum value of the setting.</param>
            <param name="max">The maximum value of the setting.</param>
            <param name="step">The step value of the setting.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.GetDisplayValue(`0)">
            <summary>
            Gets the display value for the specified value of the setting.
            </summary>
            <param name="value">The value for which to get a display value.</param>
            <returns>
            The requested display value.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the setting from the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.Validate(`0)">
            <summary>
            Validates the specified value for the setting, returning the actual value to be used in place of the requested value.
            </summary>
            <param name="value">The requested value of the setting to validate.</param>
            <returns>
            The actual value of the setting to be used in place of the requested value.
            </returns>
        </member>
        <member name="T:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder">
            <summary>
            A setting builder object for a numeric based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2" />
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder.#ctor(ModApi.Settings.Core.NumericSetting{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder"/> class.
            </summary>
            <param name="setting">The setting associated with the builder.</param>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder.op_Implicit(ModApi.Settings.Core.NumericSetting{`0}.NumericSettingBuilder)~ModApi.Settings.Core.NumericSetting{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder"/> to <see cref="T:ModApi.Settings.Core.NumericSetting`1"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder.SetDisplayFormatter(System.Func{`0,System.String})">
            <summary>
            Sets the display formatter.
            This is the function that will take the setting value and format it for display in the UI.
            </summary>
            <param name="formatter">The formatter function.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder.SetEnforcedRange(`0,`0)">
            <summary>
            Sets the enforced range of the setting.
            Used for clamping settings manually set via XML editing.
            </summary>
            <param name="min">The minimum value of the setting.</param>
            <param name="max">The maximum value of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder.SetEnforcedRange(ModApi.Settings.Core.DeviceFlags,`0,`0)">
            <summary>
            Sets the enforced range of the setting.
            Used for clamping settings manually set via XML editing.
            </summary>
            <param name="devices">The devices to which the range applies.</param>
            <param name="min">The minimum value of the setting.</param>
            <param name="max">The maximum value of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.NumericSetting`1.NumericSettingBuilder.SetRange(ModApi.Settings.Core.DeviceFlags,`0,`0,`0)">
            <summary>
            Sets the range of the setting (used by the UI).
            </summary>
            <param name="devices">The devices to which the range applies.</param>
            <param name="min">The minimum value of the setting.</param>
            <param name="max">The maximum value of the setting.</param>
            <param name="step">The step value of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="T:ModApi.Settings.Core.ResolutionSetting">
            <summary>
            A game setting for the device resolution based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1" />
        </member>
        <member name="M:ModApi.Settings.Core.ResolutionSetting.#ctor(System.String,ModApi.Settings.Core.SettingsCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.ResolutionSetting"/> class.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
        </member>
        <member name="M:ModApi.Settings.Core.ResolutionSetting.Create(System.String,ModApi.Settings.Core.SettingsCategory)">
            <summary>
            Creates a resolution based game setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.ResolutionSetting.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the setting from the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.ResolutionSetting.SaveToXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the setting to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the setting.</param>
        </member>
        <member name="T:ModApi.Settings.Core.ResolutionSetting.ResolutionSettingBuilder">
            <summary>
            A setting builder object for a resolution based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2" />
        </member>
        <member name="M:ModApi.Settings.Core.ResolutionSetting.ResolutionSettingBuilder.#ctor(ModApi.Settings.Core.ResolutionSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.ResolutionSetting.ResolutionSettingBuilder"/> class.
            </summary>
            <param name="setting">The setting associated with the builder.</param>
        </member>
        <member name="M:ModApi.Settings.Core.ResolutionSetting.ResolutionSettingBuilder.op_Implicit(ModApi.Settings.Core.ResolutionSetting.ResolutionSettingBuilder)~ModApi.Settings.Core.ResolutionSetting">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.ResolutionSetting.ResolutionSettingBuilder"/> to <see cref="T:ModApi.Settings.Core.ResolutionSetting"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:ModApi.Settings.Core.Setting">
            <summary>
            The base class for a game setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.Setting._categoryCounts">
            <summary>
            The number of settings created for each category (keyed by category type).
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting.#ctor(System.Type,System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.Setting" /> class.
            </summary>
            <param name="type">The underlying type of the setting.</param>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.ApplyType">
            <summary>
            Gets or sets the apply type of the setting, indicating if the scene or game needs restarted for it to take effect.
            </summary>
            <value>
            The apply type of the setting, indicating if the scene or game needs restarted for it to take effect.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.Category">
            <summary>
            Gets the category to which the setting belongs.
            </summary>
            <value>
            The category to which the setting belongs.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.Description">
            <summary>
            Gets or sets the description of the setting.
            </summary>
            <value>
            The description of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.DisplayName">
            <summary>
            Gets or sets the display name of the setting.
            </summary>
            <value>
            The display name of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.DisplayOrder">
            <summary>
            Gets or sets the display order for the setting.
            </summary>
            <value>
            The display order for the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.PendingChange">
            <summary>
            Gets or sets a value indicating whether the setting has a pending change and needs to be committed.
            </summary>
            <value>
              <c>true</c> if the setting has a pending change and needs to be committed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.State">
            <summary>
            Gets or sets the state of the setting, which indicates if it should be hidden or fully disabled.
            </summary>
            <value>
            The state of the setting, which indicates if it should be hidden or fully disabled.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.ValueType">
            <summary>
            Gets the underlying type of the setting value.
            </summary>
            <value>
            The underlying type of the setting value.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.Visibility">
            <summary>
            Gets the visibility of the setting.
            </summary>
            <value>
            The visibility of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.Warning">
            <summary>
            Gets or sets the warning (if any) for the current value of the setting.
            </summary>
            <value>
            The warning (if any) for the current value of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.XmlName">
            <summary>
            Gets or sets the XML name of the setting (used when saving settings to XML).
            </summary>
            <value>
            The XML name of the setting (used when saving settings to XML).
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting.VisibilityCheck">
            <summary>
            Gets or sets the function to run to determine whether or not the setting is visible.
            </summary>
            <value>
            The function to run to determine whether or not the setting is visible.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.Setting.CommitChanges">
            <summary>
            Commit a pending change to the setting.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the setting from the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting.RevertChanges">
            <summary>
            Reverts a pending change, updating the setting value to its original value.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting.SaveToXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the setting to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting.CommitChanges(System.Boolean)">
            <summary>
            Commit a pending change to the setting.
            </summary>
            <param name="suppressCategoryChangedEvent">If set to <c>true</c>, setting category changed events will be suppressed.</param>
        </member>
        <member name="T:ModApi.Settings.Core.SettingApplyType">
            <summary>
            An enumeration defining the different ways in which settings can be applied.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingApplyType.Immediate">
            <summary>
            The setting is applied immediately.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingApplyType.RequiresQuadsphereReload">
            <summary>
            The setting will be applied to the next quadsphere that is loaded.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingApplyType.RequiresSceneRestart">
            <summary>
            The scene requires a restart before changes can take effect.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingApplyType.RequiresGameRestart">
            <summary>
            The game requires a restart before changes can take effect.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.SettingState">
            <summary>
            An enumeration defining the different states for a setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingState.Enabled">
            <summary>
            The default state. The setting is enabled.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingState.Disabled">
            <summary>
            The setting is disabled and is not saved or loaded.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingState.Hidden">
            <summary>
            The setting is hidden, meaning it is fully functionally but not visible in the UI.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingState.HiddenReadOnly">
            <summary>
            The setting is hidden, meaning it is fully functionally but not visible in the UI.
            The setting is also read-only, meaning the value will loaded but never saved.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.SettingVisibility">
            <summary>
            An enumeration defining the different visibility levels of settings.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingVisibility.Default">
            <summary>
            The default visibility level (visible).
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingVisibility.ReadOnly">
            <summary>
            The setting is visible but it is read only.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingVisibility.Hidden">
            <summary>
            The setting is hidden.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.SettingWarnings">
            <summary>
            A class containing common warning messages related to settings.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingWarnings.StandardPerformanceWarning">
            <summary>
            The standard performance warning when a setting is selected that is
            too performance intensive for the current device and not officially supported.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.SettingsCategory">
            <summary>
            A base class for setting categories.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategory._initialized">
            <summary>
            A value indicating whether the category has been initialized.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategory._originalPreset">
            <summary>
            The original preset. This is the last preset to have been committed.
            If this differs from the current preset, the category should have pending changes that need committed or reverted.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.SettingsCategory"/> class.
            </summary>
            <param name="categoryName">The name of the category.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.#ctor(System.String,ModApi.Settings.Core.SettingState)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.SettingsCategory"/> class.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <param name="state">The state of the category.</param>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.AvailablePresets">
            <summary>
            Gets the available presets for the category.
            </summary>
            <value>
            The available presets for the category.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.CategoryName">
            <summary>
            Gets the name of the category.
            </summary>
            <value>
            The name of the category.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.CategoryXmlName">
            <summary>
            Gets or sets the XML name of the category used when saving or loading settings to/from XML.
            </summary>
            <value>
            The XML name of the category used when saving or loading settings to/from XML.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.Expanded">
            <summary>
            Gets or sets a value indicating whether or not this category is expanded.
            </summary>
            <value>
            The expanded.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.HasUnsavedChanges">
            <summary>
            Gets or sets a value indicating whether this settings category has unsaved changes.
            </summary>
            <value>
              <c>true</c> if this settings category has unsaved changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.Order">
            <summary>
            Gets the order in which this category should be displayed.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.PendingChanges">
            <summary>
            Gets a value indicating whether any of the settings in the category have pending changes.
            </summary>
            <value>
              <c>true</c> if any of the settings in the category have pending changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.Preset">
            <summary>
            Gets the current preset value for the category.
            </summary>
            <value>
            The current preset value for the category.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.Settings">
            <summary>
            Gets the list of settings in the category.
            </summary>
            <value>
            The list of settings in the category.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.State">
            <summary>
            Gets or sets the state of the category.
            </summary>
            <value>
            The state of the category.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.SubSettingsVisibility">
            <summary>
            Gets the visibility for all the settings in this category.
            </summary>
            <value>
            The visibility for all the settings in this category.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.SettingsCategory.SubSettingVisibilityCheck">
            <summary>
            Gets the sub setting visibility check.
            </summary>
            <value>
            The sub setting visibility check.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.InitializeCategoryProperties``1(``0,System.Xml.Linq.XElement)">
            <summary>
            Initializes all settings category properties on the specified object, loading from the XML if available.
            </summary>
            <typeparam name="T">The type of the object on which the settings category properties are on.</typeparam>
            <param name="obj">The object containing settings category properties to initialize.</param>
            <param name="xml">The XML from which to load the settings.</param>
            <returns>The list of settings categories that were initialized.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.InitializeCategoryProperties(System.Collections.Generic.List{ModApi.Settings.Core.SettingsCategory},System.Xml.Linq.XElement)">
            <summary>
            Initializes the specified settings category properties if they have not already been initialized, loading from the XML if available.
            </summary>
            <param name="categories">The categories to be initialized.</param>
            <param name="xml">The XML from which to load the settings.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.CommitChanges">
            <summary>
            Commits any pending changes to all settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>The default preset for the category.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.Initialize">
            <summary>
            Initializes the settings category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RaiseSettingsChangedEvent">
            <summary>
            Raises the settings changed event.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the settings from the specified XML.
            </summary>
            <param name="settingsXml">The XML from which to restore the settings.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RevertChanges">
            <summary>
            Reverts pending changes for all settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.SaveToXml(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Saves the settings in the category to the specified XML.
            </summary>
            <param name="settingsXml">The XML to which to save the settings.</param>
            <param name="preserveUnsavedChangesFlag">If <c>true</c>, the unsaved changes flag will be preserved (rather than being set to <c>false</c>).</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.SetPreset(ModApi.Settings.Core.SettingsCategoryPreset)">
            <summary>
            Sets the preset for the category.
            </summary>
            <param name="preset">The new preset.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.OnSettingChanged(ModApi.Settings.Core.Setting)">
            <summary>
            Called when a setting in the category changes.
            </summary>
            <param name="setting">The setting that changed.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.OnSettingCommitted(ModApi.Settings.Core.Setting,System.Boolean)">
            <summary>
            Called when a pending change on a setting in the category is committed.
            </summary>
            <param name="setting">The setting that had a committed change.</param>
            <param name="suppressCategoryChangedEvent">If set to <c>true</c>, category changed events will be suppressed.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.CreateBool(System.String,System.String)">
            <summary>
            Creates a boolean setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder which uses a fluent API to configure the setting.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.CreateEnum``1(System.String,System.String)">
            <summary>
            Creates an enumeration based setting.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="displayName">The display name of the setting.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder which uses a fluent API to configure the setting.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.CreateNumeric``1(System.String,``0,``0,``0,System.String)">
            <summary>
            Creates a numeric setting.
            </summary>
            <typeparam name="T">The type of the numeric value.</typeparam>
            <param name="displayName">The display name of the setting.</param>
            <param name="min">The minimum value of the setting.</param>
            <param name="max">The maximum value of the setting.</param>
            <param name="step">The step value of the setting range.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder which uses a fluent API to configure the setting.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.CreateString(System.String,System.String)">
            <summary>
            Creates a string setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder which uses a fluent API to configure the setting.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RegisterPresetList(ModApi.Settings.Core.SettingsCategoryPreset[])">
            <summary>
            Registers the list of presets as presets that are available to be used for this category.
            </summary>
            <param name="presets">The presets to register.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RegisterPresetList(ModApi.Settings.Core.DeviceFlags,ModApi.Settings.Core.SettingsCategoryPreset[])">
            <summary>
            Registers the list of presets as presets that are available to be used for this category.
            </summary>
            <param name="devices">The devices on which these presets should be registered.</param>
            <param name="presets">The presets to register.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RegisterSubSettingsVisibilityCheck(System.Func{ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.SettingVisibility})">
            <summary>
            Registers the sub settings visibility check, allowing the category to be configured to adjust setting visibility
            based on presets (for instance, showing all settings as read only unless the preset is set to custom).
            </summary>
            <param name="visibilityCheck">The visibility check function.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory.RegisterSubSettingsVisibilityCheck(ModApi.Settings.Core.DeviceFlags,System.Func{ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.SettingVisibility})">
            <summary>
            Registers the sub settings visibility check, allowing the category to be configured to adjust setting visibility
            based on presets (for instance, showing all settings as read only unless the preset is set to custom).
            </summary>
            <param name="devices">The devices on which the visibility check function should apply.</param>
            <param name="visibilityCheck">The visibility check function.</param>
        </member>
        <member name="T:ModApi.Settings.Core.SettingsCategoryPreset">
            <summary>
            An enumeration defining the different presets for a settings category.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.None">
            <summary>
            The preset that indicates that the setting category does not use presets.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.Off">
            <summary>
            The off preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.On">
            <summary>
            The on preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.VeryLow">
            <summary>
            The very low preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.Low">
            <summary>
            The low preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.Medium">
            <summary>
            The medium preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.High">
            <summary>
            The high preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.VeryHigh">
            <summary>
            The very high preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.Custom">
            <summary>
            The custom preset.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategoryPreset.Default">
            <summary>
            The default preset.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.SettingsCategory`1">
            <summary>
            A base class for setting categories.
            </summary>
            <typeparam name="T">The type of the settings category.</typeparam>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory" />
        </member>
        <member name="F:ModApi.Settings.Core.SettingsCategory`1._changedEventArgs">
            <summary>
            The event arguments object that is reused every time a changed event is raised.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.SettingsCategory`1"/> class.
            </summary>
            <param name="categoryName">The name of the category.</param>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory`1.#ctor(System.String,ModApi.Settings.Core.SettingState)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.SettingsCategory`1"/> class.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <param name="state">The state of the category.</param>
        </member>
        <member name="E:ModApi.Settings.Core.SettingsCategory`1.Changed">
            <summary>
            Occurs when one or more settings in the category have committed changes.
            </summary>
        </member>
        <member name="E:ModApi.Settings.Core.SettingsCategory`1._changed">
            <summary>
            Occurs when one or more settings in the category have committed changes.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsCategory`1.RaiseSettingsChangedEvent">
            <summary>
            Raises the settings changed event.
            </summary>
        </member>
        <member name="T:ModApi.Settings.Core.SettingsExtensions">
            <summary>
            A class containing extension methods related to the settings framework.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.SettingsExtensions.HasUnsavedChanges``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether any of the categories have unsaved changes.
            </summary>
            <typeparam name="T">The type of setting categories.</typeparam>
            <param name="categories">The setting categories for which to check for unsaved changes.</param>
            <returns>
              <c>true</c> if any of the categories have unsaved changes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ModApi.Settings.Core.Setting`1">
            <summary>
            A base class for a game setting.
            </summary>
            <typeparam name="T">The underlying value type of the setting.</typeparam>
            <seealso cref="T:ModApi.Settings.Core.Setting" />
        </member>
        <member name="F:ModApi.Settings.Core.Setting`1._changedEventArgs">
            <summary>
            The changed event arguments cached object.
            This event argument object is reused for all changed events.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.Setting`1._originalValue">
            <summary>
            The original value of the setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.Core.Setting`1._value">
            <summary>
            The value of the setting.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.#ctor(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.Setting`1" /> class.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
        </member>
        <member name="E:ModApi.Settings.Core.Setting`1.Changed">
            <summary>
            Occurs when a change to the setting has been committed.
            </summary>
        </member>
        <member name="E:ModApi.Settings.Core.Setting`1.ValueUpdated">
            <summary>
            Occurs when the setting value is updated.
            </summary>
        </member>
        <member name="E:ModApi.Settings.Core.Setting`1._changed">
            <summary>
            Occurs when a change to the setting has been committed.
            </summary>
        </member>
        <member name="P:ModApi.Settings.Core.Setting`1.DisplayValue">
            <summary>
            Gets the display value for the current value of the setting.
            </summary>
            <value>
            The display value for the current value of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting`1.Value">
            <summary>
            Gets or sets the value of the setting.
            </summary>
            <value>
            The value of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting`1.OriginalValue">
            <summary>
            Gets the original value of the setting.
            </summary>
            <value>
            The original value of the setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.Core.Setting`1.WarningChecks">
            <summary>
            Gets the warning checks that are invoked when the setting changes.
            </summary>
            <value>
            The warning checks that are invoked when the setting changes.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.op_Implicit(ModApi.Settings.Core.Setting{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.Setting`1"/> to its underlying type."/>.
            </summary>
            <param name="setting">The setting.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.GetDisplayValue(`0)">
            <summary>
            Gets the display value for the specified value of the setting.
            </summary>
            <param name="value">The value for which to get a display value.</param>
            <returns>The requested display value.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.RaiseSettingChangedEvent">
            <summary>
            Raises the setting changed event.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.RevertChanges">
            <summary>
            Reverts a pending change, updating the setting value to its original value.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SaveToXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the setting to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.UpdateAndCommit(`0)">
            <summary>
            Updates the value of the setting and commits the change.
            </summary>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.CommitChanges(System.Boolean)">
            <summary>
            Commit a pending change to the setting.
            </summary>
            <param name="suppressCategoryChangedEvent">If set to <c>true</c>, setting category changed events will be suppressed.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.OnValueChanged(`0,`0,`0,`0)">
            <summary>
            Called when the setting value changes.
            </summary>
            <param name="lastCommittedValue">The last committed value.</param>
            <param name="previousValue">The previous value.</param>
            <param name="requestedNewValue">The requested new value.</param>
            <param name="actualNewValue">The actual new value.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.RefreshWarnings">
            <summary>
            Refreshes the warnings for the setting.
            </summary>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SetValue(`0)">
            <summary>
            Sets the value of the setting.
            </summary>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.Validate(`0)">
            <summary>
            Validates the specified value for the setting, returning the actual value to be used in place of the requested value.
            </summary>
            <param name="value">The requested value of the setting to validate.</param>
            <returns>The actual value of the setting to be used in place of the requested value.</returns>
        </member>
        <member name="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2">
            <summary>
            The base class for a fluent API based setting builder object.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TSetting">The type of the setting.</typeparam>
            <seealso cref="T:ModApi.Settings.Core.Setting" />
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2"/> class.
            </summary>
            <param name="setting">The setting associated with the builder.</param>
        </member>
        <member name="P:ModApi.Settings.Core.Setting`1.SettingBuilder`2.Setting">
            <summary>
            Gets the setting associated with this builder.
            </summary>
            <value>
            The setting associated with this builder.
            </value>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.AddWarning(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Adds a conditional warning to the setting.
            </summary>
            <param name="condition">The condition under which the warning is applied.</param>
            <param name="warning">The warning content.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.AddWarning(ModApi.Settings.Core.DeviceFlags,System.Func{`0,System.Boolean},System.String)">
            <summary>
            Adds a conditional warning to the setting.
            </summary>
            <param name="devices">The devices to which to apply the warning.</param>
            <param name="condition">The condition under which the warning is applied.</param>
            <param name="warning">The warning content.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.OnChanged``1(ModApi.Settings.Core.Setting{``0},System.Action{`2,``0})">
            <summary>
            Registers a callback that is invoked when the specified setting changes.
            </summary>
            <typeparam name="TOther">The type of the setting to be watched for changes.</typeparam>
            <param name="setting">The setting to watch for changes.</param>
            <param name="action">The action to take when the setting changes.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.OnChanged``1(ModApi.Settings.Core.DeviceFlags,ModApi.Settings.Core.Setting{``0},System.Action{`2,``0})">
            <summary>
            Registers a callback that is invoked when the specified setting changes.
            </summary>
            <typeparam name="TOther">The type of the setting to be watched for changes.</typeparam>
            <param name="devices">The devices on which to watch the setting for changes.</param>
            <param name="setting">The setting to watch for changes.</param>
            <param name="action">The action to take when the setting changes.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetApplyType(ModApi.Settings.Core.SettingApplyType)">
            <summary>
            Sets the apply type of the setting.
            </summary>
            <param name="applyType">The apply type of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetApplyType(ModApi.Settings.Core.DeviceFlags,ModApi.Settings.Core.SettingApplyType)">
            <summary>
            Sets the apply type of the setting.
            </summary>
            <param name="devices">The devices to which to apply this apply type.</param>
            <param name="applyType">The apply type of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetDefault(`0)">
            <summary>
            Sets the default value of the setting.
            </summary>
            <param name="value">The default value of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetDefault(ModApi.Settings.Core.DeviceFlags,`0)">
            <summary>
            Sets the default value of the setting.
            </summary>
            <param name="devices">The device to which to apply this default value.</param>
            <param name="value">The default value of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetDescription(System.String)">
            <summary>
            Sets the description of the setting.
            </summary>
            <param name="description">The description of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetDescription(ModApi.Settings.Core.DeviceFlags,System.String)">
            <summary>
            Sets the description of the setting.
            </summary>
            <param name="devices">The device to which to apply this description.</param>
            <param name="description">The description of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetDisplayOrder(System.Int32)">
            <summary>
            Sets the display order of the setting.
            </summary>
            <param name="order">The display order of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetDisplayOrder(ModApi.Settings.Core.DeviceFlags,System.Int32)">
            <summary>
            Sets the display order of the setting.
            </summary>
            <param name="devices">The device to which to apply this display order.</param>
            <param name="order">The display order of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetState(ModApi.Settings.Core.SettingState)">
            <summary>
            Sets the state of the setting.
            </summary>
            <param name="state">The state of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetState(ModApi.Settings.Core.DeviceFlags,ModApi.Settings.Core.SettingState)">
            <summary>
            Sets the state of the setting.
            </summary>
            <param name="devices">The devices to which to apply this state.</param>
            <param name="state">The state of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetVisibility(System.Func{ModApi.Settings.Core.SettingVisibility})">
            <summary>
            Sets the visibility check function for the setting, which helps determine whether or not the setting is visible.
            </summary>
            <param name="visibilityCheck">The visibility check function for the setting, which helps determine whether or not the setting is visible.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetVisibility(ModApi.Settings.Core.DeviceFlags,System.Func{ModApi.Settings.Core.SettingVisibility})">
            <summary>
            Sets the visibility check function for the setting, which helps determine whether or not the setting is visible.
            </summary>
            <param name="devices">The devices on which to use this visibility check.</param>
            <param name="visibilityCheck">The visibility check function for the setting, which helps determine whether or not the setting is visible.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.Setting`1.SettingBuilder`2.SetXmlName(System.String)">
            <summary>
            Sets the XML name of the setting.
            </summary>
            <param name="xmlName">The XML name of the setting.</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="T:ModApi.Settings.Core.StringSetting">
            <summary>
            A string based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1" />
        </member>
        <member name="M:ModApi.Settings.Core.StringSetting.#ctor(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.StringSetting"/> class.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
        </member>
        <member name="M:ModApi.Settings.Core.StringSetting.op_Implicit(ModApi.Settings.Core.StringSetting)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.StringSetting"/> to its underlying type."/>.
            </summary>
            <param name="setting">The setting.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:ModApi.Settings.Core.StringSetting.Create(System.String,ModApi.Settings.Core.SettingsCategory,System.String)">
            <summary>
            Creates a string based game setting.
            </summary>
            <param name="displayName">The display name of the setting.</param>
            <param name="category">The category to which the setting belongs.</param>
            <param name="xmlName">The XML name of the setting. If this is null, then the display name will be used
            as the XML name for the setting (after spaces are removed and its first character is changed to lower case).</param>
            <returns>The setting builder.</returns>
        </member>
        <member name="M:ModApi.Settings.Core.StringSetting.RestoreFromXml(System.Xml.Linq.XElement)">
            <summary>
            Restores the setting from the specified XML.
            </summary>
            <param name="xml">The XML from which to restore the setting.</param>
        </member>
        <member name="T:ModApi.Settings.Core.StringSetting.StringSettingBuilder">
            <summary>
            A setting builder object for a string based game setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.Setting`1.SettingBuilder`2" />
        </member>
        <member name="M:ModApi.Settings.Core.StringSetting.StringSettingBuilder.#ctor(ModApi.Settings.Core.StringSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.Core.StringSetting.StringSettingBuilder"/> class.
            </summary>
            <param name="setting">The setting associated with the builder.</param>
        </member>
        <member name="M:ModApi.Settings.Core.StringSetting.StringSettingBuilder.op_Implicit(ModApi.Settings.Core.StringSetting.StringSettingBuilder)~ModApi.Settings.Core.StringSetting">
            <summary>
            Performs an implicit conversion from <see cref="T:ModApi.Settings.Core.StringSetting.StringSettingBuilder"/> to <see cref="T:ModApi.Settings.Core.StringSetting"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:ModApi.Settings.CraftQualitySettings">
            <summary>
            Craft quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.CraftQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.CraftQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.CraftQualitySettings.CraftReflectionsQuality">
            <summary>
            An enumeration defining the different quality levels for craft reflections.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.CraftReflectionsQuality.None">
            <summary>
            No reflections.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.CraftReflectionsQuality.Static">
            <summary>
            Static cubemap reflections.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.CraftReflectionsQuality.Realtime">
            <summary>
            Real-time reflections.
            </summary>
        </member>
        <member name="T:ModApi.Settings.CraftQualitySettings.DetailTextureQuality">
            <summary>
            An enumeration defining the different quality levels for craft part detail texturing.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.DetailTextureQuality.Disabled">
            <summary>
            Detail textures will not be used for craft parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.DetailTextureQuality.Low">
            <summary>
            Low resolution textures will be used for the detail texturing on craft parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.DetailTextureQuality.Medium">
            <summary>
            Medium resolution textures will be used for the detail texturing on craft parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.DetailTextureQuality.High">
            <summary>
            High resolution textures will be used for the detail texturing on craft parts.
            </summary>
        </member>
        <member name="T:ModApi.Settings.CraftQualitySettings.MaxCraftLights">
            <summary>
            An enumeration defining the maximum number of craft lights allowed at any given time.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Zero">
            <summary>
            Zero maximum craft lights.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.One">
            <summary>
            One maximum craft light.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Two">
            <summary>
            Two maximum craft lights.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Four">
            <summary>
            Four maximum craft lights.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Six">
            <summary>
            Six maximum craft lights.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Eight">
            <summary>
            Eight maximum craft lights.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Sixteen">
            <summary>
            Sixteen maximum craft lights.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.MaxCraftLights.Unlimited">
            <summary>
            No limit on the maximum number of craft lights.
            </summary>
        </member>
        <member name="T:ModApi.Settings.CraftQualitySettings.NormalMapQuality">
            <summary>
            An enumeration defining the different quality levels for craft part normal maps.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.NormalMapQuality.Disabled">
            <summary>
            Normal maps will not be used for craft parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.NormalMapQuality.Low">
            <summary>
            Low resolution textures will be used for the normal maps on craft parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.NormalMapQuality.Medium">
            <summary>
            Medium resolution textures will be used for the normal maps on craft parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.CraftQualitySettings.NormalMapQuality.High">
            <summary>
            High resolution textures will be used for the normal maps on craft parts.
            </summary>
        </member>
        <member name="P:ModApi.Settings.CraftQualitySettings.CraftLightsLimit">
            <summary>
            Gets the maximum number of active craft lights at any given time.
            </summary>
            <value>
            The maximum number of active craft lights at any given time.
            </value>
        </member>
        <member name="P:ModApi.Settings.CraftQualitySettings.DetailTextures">
            <summary>
            Gets the craft part detail texturing quality setting.
            </summary>
            <value>
            The craft part detail texturing quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.CraftQualitySettings.NormalMaps">
            <summary>
            Gets the craft part normal maps quality setting.
            </summary>
            <value>
            The craft part normal maps quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.CraftQualitySettings.Reflections">
            <summary>
            Gets the craft reflections quality.
            </summary>
            <value>
            The craft reflections quality.
            </value>
        </member>
        <member name="M:ModApi.Settings.CraftQualitySettings.ConfigurePartRenderer(UnityEngine.Renderer)">
            <summary>
            Configures the part renderer based on the current quality settings.
            </summary>
            <param name="renderer">The part renderer.</param>
        </member>
        <member name="M:ModApi.Settings.CraftQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.CraftQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.CraftQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.DesignerSettings">
            <summary>
            Designer settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.DesignerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.DesignerSettings"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.AngleSnap">
            <summary>
            Gets the angle snap setting.
            </summary>
            <value>
            The angle snap setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.EnableAutoResize">
            <summary>
            Gets a setting indicating whether to enable automatic resize of fuselage parts when they are connected.
            </summary>
            <value>
            A setting indicating whether to enable automatic resize of fuselage parts when they are connected.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.EnableAutoRotation">
            <summary>
            Gets a setting indicating whether to enable automatic rotation of parts when connecting.
            </summary>
            <value>
            A setting indicating whether to enable automatic rotation of parts when connecting.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.EnableGizmos">
            <summary>
            Gets a setting indicating whether tools with gizmos for a part are automatically selected when a part is selected.
            </summary>
            <value>
            A setting indicating whether tools with gizmos for a part are automatically selected when a part is selected.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.EnableTinkerPanel">
            <summary>
            Gets a setting indicating whether to enable the tinker panel in the part properties.
            </summary>
            <value>
            A setting indicating whether to enable the tinker panel in the part properties.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.GridSize">
            <summary>
            Gets the setting defining the size of the grid.
            </summary>
            <value>
            The setting defining the size of the grid.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.OptimizeCraftXml">
            <summary>
            Gets a setting indicating whether craft XML should be optimized where possible.
            </summary>
            <value>
            A setting indicating whether craft XML should be optimized where possible.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.PanSensitivity">
            <summary>
            Gets the camera pan sensitivity.
            </summary>
            <value>
            The camera pan sensitivity.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.RotateSensitivity">
            <summary>
            Gets the camera rotate sensitivity.
            </summary>
            <value>
            The camera rotate sensitivity.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.ShowAttachPoints">
            <summary>
            Gets a setting indicating whether to show attach points when the player is moving parts around.
            </summary>
            <value>
            A setting indicating whether to show attach points when the player is moving parts around.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.ShowHiddenPartProperties">
            <summary>
            Gets a setting indicating whether hidden part properties are show in the designer.
            </summary>
            <value>
            A setting indicating whether hidden part properties are show in the designer.
            </value>
        </member>
        <member name="P:ModApi.Settings.DesignerSettings.ZoomSensitivity">
            <summary>
            Gets the camera zoom sensitivity.
            </summary>
            <value>
            The camera zoom sensitivity.
            </value>
        </member>
        <member name="M:ModApi.Settings.DesignerSettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.DisplayQualitySettings">
            <summary>
            Display related quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.DisplayQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.DisplayQualitySettings.AntiAliasingType">
            <summary>
            An enumeration defining the different types of anti-aliasing
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.None">
            <summary>
            No AA.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.MSAA2">
            <summary>
            Multi-sample AA x2.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.MSAA4">
            <summary>
            Multi-sample AA x4.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.MSAA8">
            <summary>
            Multi-sample AA x8.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.FXAA1">
            <summary>
            Fast Approximate AA 1.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.FXAA2">
            <summary>
            Fast Approximate AA 2.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.FXAA3">
            <summary>
            Fast Approximate AA 3.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.AntiAliasingType.DLAA">
            <summary>
            Directionally Localized AA.
            </summary>
        </member>
        <member name="T:ModApi.Settings.DisplayQualitySettings.MobileDeviceEmulationMode">
            <summary>
            The mobile device emulation modes.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.MobileDeviceEmulationMode.None">
            <summary>
            No mobile device emulation.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.MobileDeviceEmulationMode.Phone">
            <summary>
            The phone device emulation mode.
            </summary>
        </member>
        <member name="F:ModApi.Settings.DisplayQualitySettings.MobileDeviceEmulationMode.Tablet">
            <summary>
            The tablet device emulation mode.
            </summary>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.AntiAliasing">
            <summary>
            Gets the anti-aliasing setting.
            </summary>
            <value>
            The anti-aliasing setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.Fullscreen">
            <summary>
            Gets a value indicating whether the game should run in full-screen mode.
            </summary>
            <value>
            A value indicating whether the game should run in full-screen mode.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.MobileEmulation">
            <summary>
            Gets a value indicating if the the game should emulate the mobile UI.
            This is only available to be changed in the Unity editor.
            </summary>
            <value>
            A value indicating whether the game should emulate the mobile UI.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.MobileResolutionScale">
            <summary>
            Gets the mobile resolution scale setting.
            </summary>
            <value>
            The mobile resolution scale setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.Order">
            <summary>
            Gets the order in which this category should be displayed.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.Resolution">
            <summary>
            Gets the game resolution setting.
            </summary>
            <value>
            The game resolution setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.ResolutionScale">
            <summary>
            Gets the resolution scale setting.
            </summary>
            <value>
            The resolution scale setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.DisplayQualitySettings.VsyncCount">
            <summary>
            Gets the vsync count.
            </summary>
            <value>
            The vsync count.
            </value>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.DoFullscreenCheck">
            <summary>
            Checks to see if Screen.fullScreen has changed (and updates our Fullscreen setting if it has).
            </summary>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.GetMaxScreenRefreshRate">
            <summary>
            Gets the screen's maximum refresh rate.
            </summary>
            <returns>The screen refresh rate.</returns>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.GetVsyncRefreshRateString(System.Int32)">
            <summary>
            Gets the refresh rate for the specified vsync count.
            </summary>
            <param name="vsyncCount">The vsync count.</param>
            <returns>
            The refresh rate.
            </returns>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.FullscreenChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{System.Boolean})">
            <summary>
            Handles the Changed event of the Fullscreen control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1" /> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.OnSceneLoaded(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Callback when the scene manager loaded a scene.
            </summary>
            <param name="scene">The scene.</param>
            <param name="loadMode">The load mode.</param>
        </member>
        <member name="M:ModApi.Settings.DisplayQualitySettings.VSyncChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{System.Int32})">
            <summary>
            Handles the Changed event of the VSync control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="T:ModApi.Settings.EnabledMod">
            <summary>
            A settings object representing a mod that has been enabled.
            </summary>
        </member>
        <member name="M:ModApi.Settings.EnabledMod.#ctor(System.String,System.Version,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.EnabledMod"/> class.
            </summary>
            <param name="name">The name of the mod.</param>
            <param name="version">The version of the mod.</param>
            <param name="lastUpdated">The last updated date time of the mod.</param>
            <param name="path">The path of the mod.</param>
        </member>
        <member name="P:ModApi.Settings.EnabledMod.LastUpdated">
            <summary>
            Gets the last updated date time of the mod.
            </summary>
            <value>
            The last updated date time of the mod.
            </value>
        </member>
        <member name="P:ModApi.Settings.EnabledMod.Name">
            <summary>
            Gets the name of the mod.
            </summary>
            <value>
            The name of the mod.
            </value>
        </member>
        <member name="P:ModApi.Settings.EnabledMod.Path">
            <summary>
            Gets the path of the mod.
            </summary>
            <value>
            The path of the mod.
            </value>
        </member>
        <member name="P:ModApi.Settings.EnabledMod.Version">
            <summary>
            Gets the version of the mod.
            </summary>
            <value>
            The version of the mod.
            </value>
        </member>
        <member name="M:ModApi.Settings.EnabledMod.ReadXml(System.Xml.Linq.XElement)">
            <summary>
            Reads the XML element and returns the enabled mod object represented by the XML.
            </summary>
            <param name="xml">The XML element to read.</param>
            <returns>The enabled mod object represented by the XML.</returns>
        </member>
        <member name="M:ModApi.Settings.EnabledMod.GenerateXml">
            <summary>
            Generates XML representing this instance.
            </summary>
            <returns>The generated xml.</returns>
        </member>
        <member name="M:ModApi.Settings.EnabledMod.IsExactMatch(Jundroo.ModTools.ModInfo,System.Boolean)">
            <summary>
            Determines whether the specified mod is an exact match for this instance.
            </summary>
            <param name="mod">The mod to check for a match.</param>
            <param name="ignoreVersionAndDate">If set to <c>true</c> mismatches between the version and dates are ignored.</param>
            <returns><c>true</c> if the mod is an exact match.</returns>
        </member>
        <member name="T:ModApi.Settings.ExplosionsQualitySettings">
            <summary>
            The explosions quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.ExplosionsQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ExplosionsQualitySettings.CollidersQuality">
            <summary>
            An enumeration defining the rag-doll physics quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.CollidersQuality.Off">
            <summary>
            Collider quality - Off setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.CollidersQuality.On">
            <summary>
            Collider quality - Normal setting.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ExplosionsQualitySettings.DebrisRetentionQuality">
            <summary>
            An enumeration defining the aggressiveness of discarding explosion debris based on their size.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.DebrisRetentionQuality.Low">
            <summary>
            Debris retention - Low setting. Debris are aggressively discarded, including medium and some larger pieces.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.DebrisRetentionQuality.Medium">
            <summary>
            Debris retention - Medium setting. Fewer large debris are discarded, but some medium pieces still are.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.DebrisRetentionQuality.High">
            <summary>
            Debris retention - High setting. Only the smaller debris will be discarded.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.DebrisRetentionQuality.Ultra">
            <summary>
            Debris retention - Ultra setting. Similar to high setting except some parts which would never have debris will have it now.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ExplosionsQualitySettings.PartFracturingSizeQuality">
            <summary>
            An enumeration defining the size and number of pieces a part's mesh will be fractured into.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.PartFracturingSizeQuality.Off">
            <summary>
            PartFracturing - Off setting. Exploded parts will not fracture into smaller pieces.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.PartFracturingSizeQuality.Large">
            <summary>
            PartFracturing - Large setting. Parts will fracture into fewer, large parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.PartFracturingSizeQuality.Medium">
            <summary>
            PartFracturing - Medium setting. Parts will fracture into more, smaller parts.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.PartFracturingSizeQuality.Small">
            <summary>
            PartFracturing - Small setting. Parts will fracture into many, even smaller parts.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ExplosionsQualitySettings.ParticleEffectQuality">
            <summary>
            An enumeration defining the particle quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.ParticleEffectQuality.Medium">
            <summary>
            Particle quality - Medium setting. A less taxing particle effect shader
            </summary>
        </member>
        <member name="F:ModApi.Settings.ExplosionsQualitySettings.ParticleEffectQuality.High">
            <summary>
            Particle quality - High setting. Higher quality shader that responds to light conditions and have volumetric effects.
            </summary>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.Colliders">
            <summary>
            Gets the collider quality.
            </summary>
            <value>
            The collider quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.DebrisLifeTime">
            <summary>
            Gets the lifetime in seconds of debris pieces.
            </summary>
            <value>
            The lifetime in seconds of debris pieces.
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.DebrisRetention">
            <summary>
            Gets the debris retention quality setting.  High retention means fewer meshes/debris pieces are discarded.
            </summary>
            <value>
            The debris retention quality setting.  High retention means fewer meshes/debris pieces are discarded.
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.EnableExplosionEffects">
            <summary>
            Gets the setting that determines if explosion effects are enabled.
            </summary>
            <value>
            The setting that determines if explosion effects are enabled.
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.PartFracturing">
            <summary>
            Gets the size of fracture pieces from exploded parts.
            </summary>
            <value>
            The size of fracture pieces from exploded parts.
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.ParticleEffect">
            <summary>
            Gets the particle quality.
            </summary>
            <value>
            The particle quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.ParticleEffectFrequency">
            <summary>
            Gets the frequency at which particle effects are added to debris pieces.
            </summary>
            <value>
            The frequency at which particle effects are added to debris pieces
            </value>
        </member>
        <member name="P:ModApi.Settings.ExplosionsQualitySettings.ParticleEffectLightFrequency">
            <summary>
            Gets the setting that determines how frequently lights are added to particle effect debris.
            </summary>
            <value>
            The setting that determines how frequently lights are added to particle effect debris.
            </value>
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.OnParticleEffectFrequencyChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{System.Single})">
            <summary>
            Called when [particle count changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Settings.ExplosionsQualitySettings.SetParticleEffectSettingsEnabled(System.Boolean)">
            <summary>
            Sets the particle effect settings enabled.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="T:ModApi.Settings.FlightSettings">
            <summary>
            Flight settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.FlightSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.FlightSettings"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.AmbientLightAtNightStrength">
            <summary>
            Gets the ambient light at night strength setting.
            </summary>
            <value>
            The ambient light at night strength setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.AmbientLightAttenuation">
            <summary>
            Gets the ambient light attenuation setting.
            </summary>
            <value>
            The ambient light attenuation setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.AmbientLightInSpaceStrength">
            <summary>
            Gets the ambient light in space strength setting.
            </summary>
            <value>
            The ambient light in space strength setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.AstronautFollowCamera">
            <summary>
            Gets the setting to dictate if the astronaut should follow the camera direction.
            </summary>
            <value>
            The setting to dictate if the astronaut should follow the camera direction.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.CameraSensitivity">
            <summary>
            Gets the flight camera sensitivity.
            </summary>
            <value>
            The flight camera sensitivity.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.CameraSensitivityFps">
            <summary>
            Gets the FPS camera sensitivity setting.
            </summary>
            <value>
            The FPS camera sensitivity setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.CameraSmoothingFps">
            <summary>
            Gets the FPS camera smoothing setting.
            </summary>
            <value>
            The FPS camera smoothing setting
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.CameraSpeed">
            <summary>
            Gets the flight camera speed.
            </summary>
            <value>
            The flight camera speed.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.FastForwardSpeed">
            <summary>
            Gets the slow motion speed.
            </summary>
            <value>
            The slow motion speed.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.HeatDamage">
            <summary>
            Gets or sets the heat damage setting. True indicates that parts will take damage from
            heat on re-entry.
            </summary>
            <value>
            The heat damage setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.ShowFlightViewInspector">
            <summary>
            Gets the show flight view inspector setting.
            </summary>
            <value>
            The show flight view inspector setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.ShowNavSphere">
            <summary>
            Gets the show nav sphere setting.
            </summary>
            <value>
            The show nav sphere.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.ShowNavSphereInMapView">
            <summary>
            Gets the show nav sphere in map view setting.
            </summary>
            <value>
            The show nav sphere in map view setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.SlowMotionSpeed">
            <summary>
            Gets the slow motion speed.
            </summary>
            <value>
            The the slow motion speed.
            </value>
        </member>
        <member name="P:ModApi.Settings.FlightSettings.VisibleFlightInputSliders">
            <summary>
            Gets the open flight input sliders.
            </summary>
            <value>
            The open flight input sliders.
            </value>
        </member>
        <member name="M:ModApi.Settings.FlightSettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.GeneralSettings">
            <summary>
            General game settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.GeneralSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.GeneralSettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.GeneralSettings.MobileFileLoggingType">
            <summary>
            An enumeration defining the different mobile file logging settings.
            </summary>
        </member>
        <member name="F:ModApi.Settings.GeneralSettings.MobileFileLoggingType.None">
            <summary>
            No file logging will occur after the game is initialized.
            </summary>
        </member>
        <member name="F:ModApi.Settings.GeneralSettings.MobileFileLoggingType.Minimal">
            <summary>
            Errors and warnings will be recorded and logged to a file during loading screens.
            </summary>
        </member>
        <member name="F:ModApi.Settings.GeneralSettings.MobileFileLoggingType.Full">
            <summary>
            All log messages will be recorded and logged to a file during loading screens.
            </summary>
        </member>
        <member name="F:ModApi.Settings.GeneralSettings.MobileFileLoggingType.Realtime">
            <summary>
            All log messages will be recorded and logged to a file as they are received.
            </summary>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.FieldOfView">
            <summary>
            Gets the field of view setting.
            </summary>
            <value>
            The field of view setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.MobileFileLogging">
            <summary>
            Gets the mobile file logging setting.
            </summary>
            <value>The mobile file logging setting.</value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.Order">
            <summary>
            Gets the order in which this category should be displayed.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.RunInBackground">
            <summary>
            Gets the run in background setting.
            </summary>
            <value>
            The run in background setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.ScreenMarginLeftRight">
            <summary>
            Gets the screen margins for the left and right sides of the screen.
            </summary>
            <value>
            The screen margins for the left and right sides of the screen.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.ScreenMarginTopBottom">
            <summary>
            Gets the screen margins for the top and and bottom edges of the screen.
            </summary>
            <value>
            The screen margins for the top and and bottom edges of the screen.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.SkipMainMenu">
            <summary>
            Gets the setting that determines whether the main menu animation should be skipped.
            </summary>
            <value>The setting that determines whether the main menu animation should be skipped..</value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.SupportUnknownGamepadsOnAndroid">
            <summary>
            Gets the support unknown gamepads on android.
            </summary>
            <value>
            The support unknown gamepads on android.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.UseDirectInput">
            <summary>
            Gets the use direct input.
            </summary>
            <value>
            The use direct input.
            </value>
        </member>
        <member name="P:ModApi.Settings.GeneralSettings.UserInterfaceScale">
            <summary>
            Gets the UI scale.
            </summary>
            <value>
            The UI scale.
            </value>
        </member>
        <member name="M:ModApi.Settings.GeneralSettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.IApplicationSettings">
            <summary>
            The settings for the application.
            </summary>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.AppVersionLastRun">
            <summary>
            Gets the application version last run.
            </summary>
            <value>
            The application version last run.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.CurrentXmlVersion">
            <summary>
            Gets the current XML version.
            </summary>
            <value>
            The current XML version.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
            <value>
            The device identifier.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.EnabledMods">
            <summary>
            Gets the enabled mods.
            </summary>
            <value>
            The enabled mods.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.Game">
            <summary>
            Gets the game settings.
            </summary>
            <value>
            The game settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.GameStateId">
            <summary>
            Gets the ID of the most recent Game State that the player was using.
            </summary>
            <value>
            The game state ID.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.ModSettings">
            <summary>
            Gets the mod settings.
            </summary>
            <value>
            The mod settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.NumberOfApplicationRuns">
            <summary>
            Gets the number of application runs.
            </summary>
            <value>
            The number of application runs.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.Quality">
            <summary>
            Gets the game quality settings.
            </summary>
            <value>
            The game quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.ShowWhatsNew">
            <summary>
            Gets or sets a value indicating whether to show the whats new panel in the main menu.
            </summary>
            <value>
              <c>true</c> if it should show the whats new; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.IApplicationSettings.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="M:ModApi.Settings.IApplicationSettings.Save">
            <summary>
            Saves the settings to file.
            </summary>
        </member>
        <member name="M:ModApi.Settings.IApplicationSettings.SaveIfNecessary">
            <summary>
            Saves the settings to file if there are any pending unsaved changes.
            </summary>
        </member>
        <member name="M:ModApi.Settings.IApplicationSettings.SaveXml">
            <summary>
            Saves the XML.
            </summary>
            <returns>The settings XML.</returns>
        </member>
        <member name="T:ModApi.Settings.IGameQualitySettings">
            <summary>
            Quality settings for the game.
            </summary>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Categories">
            <summary>
            Gets the quality setting categories.
            </summary>
            <value>
            The quality setting categories.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Crafts">
            <summary>
            Gets the craft quality settings.
            </summary>
            <value>
            The craft quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Display">
            <summary>
            Gets the display quality settings.
            </summary>
            <value>
            The display quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.ImageEffects">
            <summary>
            Gets the image effects quality settings.
            </summary>
            <value>
            The image effects quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Map">
            <summary>
            Gets the map quality setting.
            </summary>
            <value>
            The map quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Physics">
            <summary>
            Gets the physics quality settings.
            </summary>
            <value>
            The physics quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Shadows">
            <summary>
            Gets the shadow quality settings.
            </summary>
            <value>
            The shadow quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Terrain">
            <summary>
            Gets the terrain quality settings.
            </summary>
            <value>
            The terrain quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.VisualEffects">
            <summary>
            Gets the visual effects quality settings.
            </summary>
            <value>
            The visual effects quality settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameQualitySettings.Water">
            <summary>
            Gets the water quality settings.
            </summary>
            <value>
            The water quality settings.
            </value>
        </member>
        <member name="M:ModApi.Settings.IGameQualitySettings.ApplySettings">
            <summary>
            Applies the current quality settings.
            </summary>
        </member>
        <member name="M:ModApi.Settings.IGameQualitySettings.SaveToXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the quality settings to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the quality settings.</param>
        </member>
        <member name="T:ModApi.Settings.IGameSettings">
            <summary>
            The settings for the game.
            </summary>
        </member>
        <member name="P:ModApi.Settings.IGameSettings.Audio">
            <summary>
            Gets the audio settings.
            </summary>
            <value>
            The audio settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameSettings.Categories">
            <summary>
            Gets the quality setting categories.
            </summary>
            <value>
            The quality setting categories.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameSettings.Designer">
            <summary>
            Gets the designer game settings.
            </summary>
            <value>
            The designer game settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameSettings.Flight">
            <summary>
            Gets the flight game settings.
            </summary>
            <value>
            The flight game settings.
            </value>
        </member>
        <member name="P:ModApi.Settings.IGameSettings.General">
            <summary>
            Gets the general game settings.
            </summary>
            <value>
            The general game settings.
            </value>
        </member>
        <member name="M:ModApi.Settings.IGameSettings.SaveToXml(System.Xml.Linq.XElement)">
            <summary>
            Saves the game settings to the specified XML.
            </summary>
            <param name="xml">The XML to which to save the game settings.</param>
        </member>
        <member name="T:ModApi.Settings.IModSettings">
            <summary>
            A interface for a class used for interacting with the settings categories for loaded mods.
            </summary>
        </member>
        <member name="P:ModApi.Settings.IModSettings.Categories">
            <summary>
            Gets the list of settings categories for currently enabled mods.
            </summary>
            <value>
            The list of settings categories for currently enabled mods.
            </value>
        </member>
        <member name="M:ModApi.Settings.IModSettings.GetCategory``1">
            <summary>
            Gets the settings category by type.
            </summary>
            <typeparam name="T">The type of the settings category to get.</typeparam>
            <returns>The requested settings category or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Settings.IModSettings.GetCategoryByName(System.String)">
            <summary>
            Gets the settings category by category name.
            </summary>
            <param name="categoryName">The name of the settings category to get.</param>
            <returns>The requested settings category or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Settings.IModSettings.LoadSettings">
            <summary>
            Loads the mod settings categories.
            </summary>
        </member>
        <member name="M:ModApi.Settings.IModSettings.RegisterCategory(ModApi.Settings.Core.SettingsCategory)">
            <summary>
            Registers the specified settings category.
            </summary>
            <param name="category">The category to register.</param>
        </member>
        <member name="M:ModApi.Settings.IModSettings.SaveSettings">
            <summary>
            Saves the mod settings categories.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ImageEffectsQualitySettings">
            <summary>
            VFX quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.ImageEffectsQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.ImageEffectsQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ImageEffectsQualitySettings.ReEntryQuality">
            <summary>
            An enumeration defining the re-entry/drag rendering quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ImageEffectsQualitySettings.ReEntryQuality.Off">
            <summary>
            Re-entry effects are disabled.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ImageEffectsQualitySettings.ReEntryQuality.On">
            <summary>
            High quality re-entry rendering.
            </summary>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.BloomIntensity">
            <summary>
            Gets the bloom intensity setting. Zero is off.
            </summary>
            <value>
            The bloom intensity setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.Contrast">
            <summary>
            Gets the contrast setting.
            </summary>
            <value>
            The contrast setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.Enabled">
            <summary>
            Gets the image effects enabled setting.
            </summary>
            <value>
            The image effects enabled setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.HdrEnabled">
            <summary>
            Gets the HDR enabled setting.
            </summary>
            <value>
            The HDR enabled setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.ReEntry">
            <summary>
            Gets the re-entry effects quality.
            </summary>
            <value>
            The re-entry effects quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.Saturation">
            <summary>
            Gets the saturation setting.
            </summary>
            <value>
            The saturation setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.Sharpness">
            <summary>
            Gets the sharpness setting.
            </summary>
            <value>
            The sharpness setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.SunFlareIntensity">
            <summary>
            Gets the sun flare intensity setting. Zero is off.
            </summary>
            <value>
            The sun flare intensity setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ImageEffectsQualitySettings.SupportsHdr">
            <summary>
            Gets a value indicating whether the current device supports HDR rendering.
            </summary>
        </member>
        <member name="M:ModApi.Settings.ImageEffectsQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.ImageEffectsQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.ImageEffectsQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.MapQualitySettings">
            <summary>
            Map settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.MapQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.MapQualitySettings"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Settings.MapQualitySettings.MapLineResolution">
            <summary>
            Gets the map view orbit line resolution factor.  This is a value between >0...1 where 1 is "full" resolution  (whatever that is defined as).  Zero is not valid.
            </summary>
            <value>
            The map view orbit line resolution factor.
            </value>
        </member>
        <member name="M:ModApi.Settings.MapQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.MapQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.MapQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Settings.OverallQualitySetting">
            <summary>
            Overal quality setting.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="F:ModApi.Settings.OverallQualitySetting.CategoryDisplayName">
            <summary>
            The setting display name. Public const because some hard coding elsewhere is required to make this category work properly, and we don't want mistakes.
            </summary>
        </member>
        <member name="M:ModApi.Settings.OverallQualitySetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.OverallQualitySetting"/> class.
            </summary>
        </member>
        <member name="P:ModApi.Settings.OverallQualitySetting.Order">
            <summary>
            Gets the order in which this category should be displayed.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="M:ModApi.Settings.OverallQualitySetting.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.OverallQualitySetting.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.OverallQualitySetting.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.OverallQualitySetting.GetNearestAvailablePreset(ModApi.Settings.Core.SettingsCategory,ModApi.Settings.Core.SettingsCategoryPreset)">
            <summary>
            Gets the nearests the available preset.
            </summary>
            <param name="category">The category.</param>
            <param name="targetPreset">The target preset.</param>
            <returns>Nearest available preset.</returns>
        </member>
        <member name="T:ModApi.Settings.PhysicsQualitySettings">
            <summary>
            The physics quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.PhysicsQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.PhysicsQualitySettings.FramerateSpikeReductionQuality">
            <summary>
            Gets the value which determines whether we will slow the physics simulation down instead of dropping the frame-rate.
            </summary>
            <value>
            The frame-rate spike reduction quality setting.
            </value>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.FramerateSpikeReductionQuality.Off">
            <summary>
            Frame-rate spike reduction off setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.FramerateSpikeReductionQuality.Default">
            <summary>
            Default frame-rate spike reduction setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.FramerateSpikeReductionQuality.Agressive">
            <summary>
            Agressive frame-rate spike reduction setting.
            </summary>
        </member>
        <member name="T:ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality">
            <summary>
            An defining the frequency of physics updates, quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality.Low">
            <summary>
            Low physics update frequency.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality.Medium">
            <summary>
            Medium physics update frequency.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality.High">
            <summary>
            High physics update frequency.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality.Ultra">
            <summary>
            High physics update frequency.
            </summary>
        </member>
        <member name="T:ModApi.Settings.PhysicsQualitySettings.RagdollPhysicsQuality">
            <summary>
            An enumeration defining the rag-doll physics quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.RagdollPhysicsQuality.High">
            <summary>
            High rag-doll physics.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.RagdollPhysicsQuality.Ultra">
            <summary>
            Ultra rag-doll physics.
            </summary>
        </member>
        <member name="T:ModApi.Settings.PhysicsQualitySettings.WaterPhysicsQuality">
            <summary>
            An enumeration defining the water physics quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.WaterPhysicsQuality.Low">
            <summary>
            Low quality water physics.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.WaterPhysicsQuality.Medium">
            <summary>
            Medium quality water physics.
            </summary>
        </member>
        <member name="F:ModApi.Settings.PhysicsQualitySettings.WaterPhysicsQuality.High">
            <summary>
            High quality water physics.
            </summary>
        </member>
        <member name="P:ModApi.Settings.PhysicsQualitySettings.EnableDragLift">
            <summary>
            Gets the setting that determines if lift forces are applied to bodies
            during flight in addition to drag forces.
            </summary>
            <value>
            The lifting bodies setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.PhysicsQualitySettings.FramerateSpikeReduction">
            <summary>
            Gets the frame-rate spike reduction quality setting.
            </summary>
            <value>
            The frame-rate spike reduction quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequency">
            <summary>
            Gets the physics update frequency quality setting.
            </summary>
            <value>
            The physics update frequency quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.PhysicsQualitySettings.RagdollPhysics">
            <summary>
            Gets the rag-doll physics quality.
            </summary>
            <value>
            The rag-doll physics quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.PhysicsQualitySettings.WaterPhysics">
            <summary>
            Gets the water physics quality.
            </summary>
            <value>
            The water physics quality.
            </value>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.GetFixedDeltaTime(ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality)">
            <summary>
            Gets the fixed delta time for the quality setting supplied.
            </summary>
            <param name="quality">The quality.</param>
            <returns>The fixed delta time for the quality setting supplied.</returns>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.GetSolverIterations(ModApi.Settings.PhysicsQualitySettings.PhysicsUpdateFrequencyQuality)">
            <summary>
            Gets the solver iteration count for the quality setting supplied.
            </summary>
            <param name="quality">The quality.</param>
            <returns>The solver iteration count for the quality setting supplied.</returns>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.ApplyUnityPhysicsSettings">
            <summary>
            Applies the Unity physics settings.
            </summary>
        </member>
        <member name="M:ModApi.Settings.PhysicsQualitySettings.SetFramerateSpikeReduction(ModApi.Settings.PhysicsQualitySettings.FramerateSpikeReductionQuality,System.Single)">
            <summary>
            Sets the frame-rate spike reduction.
            </summary>
            <param name="framerateSpikeReduction">The frame-rate spike reduction.</param>
            <param name="fixedDeltaTime">The fixed delta time.</param>
        </member>
        <member name="T:ModApi.Settings.PlayerPrefsEnumHelper`1">
            <summary>
            Utility class to help store/retrieve enum values from player-prefs.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="F:ModApi.Settings.PlayerPrefsEnumHelper`1._defaultValue">
            <summary>
            The default value
            </summary>
        </member>
        <member name="F:ModApi.Settings.PlayerPrefsEnumHelper`1._playerPrefsKey">
            <summary>
            The player prefs key
            </summary>
        </member>
        <member name="M:ModApi.Settings.PlayerPrefsEnumHelper`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.PlayerPrefsEnumHelper`1"/> class.
            </summary>
            <param name="playerPrefsKey">The player prefs key where the values should be stored.</param>
            <param name="defaultValue">The default value for when the key is not present, or filled with an unknown value.</param>
        </member>
        <member name="M:ModApi.Settings.PlayerPrefsEnumHelper`1.GetDefault">
            <summary>
            Gets the default enum stored in player-prefs.
            </summary>
            <returns>The default enum stored in player-prefs.</returns>
        </member>
        <member name="M:ModApi.Settings.PlayerPrefsEnumHelper`1.SetDefault(`0)">
            <summary>
            Sets the default for the player-pref.
            </summary>
            <param name="newDefault">The new default value.</param>
        </member>
        <member name="M:ModApi.Settings.PlayerPrefsEnumHelper`1.GetDefaultValueFromPlayerPrefs">
            <summary>
            Gets the default value stored in player-prefs.
            </summary>
            <returns>The default value stored iin player-prefs.</returns>
        </member>
        <member name="M:ModApi.Settings.PlayerPrefsEnumHelper`1.GetType(System.String)">
            <summary>
            Sets the type of the reference plane.
            </summary>
            <param name="playerPrefValue">The reference plane.</param>
        </member>
        <member name="T:ModApi.Settings.ShadowQualitySettings">
            <summary>
            The shadow quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.ShadowQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ShadowQualitySettings.LightType">
            <summary>
            An enumeration defining different light types.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.LightType.Other">
            <summary>
            An unknown or miscellaneous light type.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.LightType.PrimaryLight">
            <summary>
            The primary light for the scene.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.LightType.CraftPartLight">
            <summary>
            A craft part light.
            </summary>
        </member>
        <member name="T:ModApi.Settings.ShadowQualitySettings.ShadowDistanceQuality">
            <summary>
            An enumeration that defines the different shadow distance quality settings.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.ShadowDistanceQuality.Low">
            <summary>
            Low quality shadow distance.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.ShadowDistanceQuality.Medium">
            <summary>
            Medium quality shadow distance.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.ShadowDistanceQuality.High">
            <summary>
            High quality shadow distance.
            </summary>
        </member>
        <member name="F:ModApi.Settings.ShadowQualitySettings.ShadowDistanceQuality.VeryHigh">
            <summary>
            Very high quality shadow distance.
            </summary>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.CraftLightsCastShadows">
            <summary>
            Gets a setting indicating whether the craft lights cast shadows.
            </summary>
            <value>
            A setting indicating whether the craft lights cast shadows.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.Enabled">
            <summary>
            Gets a value indicating whether shadows are enabled.
            </summary>
            <value>
              <c>true</c> if shadows are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.MaxShadowDistance">
            <summary>
            Gets the maximum shadow distance in meters.
            </summary>
            <value>
            The maximum shadow distance in meters.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.MinShadowDistance">
            <summary>
            Gets the minimum shadow distance in meters.
            </summary>
            <value>
            The minimum shadow distance in meters.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.PartsReceiveShadows">
            <summary>
            Gets a setting indicating whether parts receive shadows.
            </summary>
            <value>
            A setting indicating whether parts receive shadows.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.ShadowDistance">
            <summary>
            Gets the shadow distance quality setting.
            </summary>
            <value>
            The shadow distance quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.SoftShadows">
            <summary>
            Gets a setting indicating whether soft shadows are enabled.
            </summary>
            <value>
            A setting indicating whether soft shadows are enabled.
            </value>
        </member>
        <member name="P:ModApi.Settings.ShadowQualitySettings.TerrainReceivesShadows">
            <summary>
            Gets a setting indicating whether terrain and water receive shadows.
            </summary>
            <value>
            A setting indicating whether terrain and water receive shadows.
            </value>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.ConfigureLight(UnityEngine.Light,ModApi.Settings.ShadowQualitySettings.LightType)">
            <summary>
            Configures the light based on the current quality settings.
            </summary>
            <param name="light">The light.</param>
            <param name="type">The type of the light.</param>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.ConfigurePartRenderer(UnityEngine.Renderer)">
            <summary>
            Configures the part renderer based on the current quality settings.
            </summary>
            <param name="renderer">The part renderer.</param>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.ShadowQualitySettings.OnSettingsChanged(System.Object,ModApi.Settings.Core.Events.SettingsChangedEventArgs{ModApi.Settings.ShadowQualitySettings})">
            <summary>
            Called when any of the shadow settings change.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingsChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="T:ModApi.Settings.TerrainQualitySettings">
            <summary>
            The terrain quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.TerrainQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.TerrainQualitySettings.GeometryDetailQuality">
            <summary>
            An enumeration defining the different quality levels for geometric detail for terrain quads.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.GeometryDetailQuality.Low">
            <summary>
            The low detail setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.GeometryDetailQuality.Medium">
            <summary>
            The medium detail setting.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.GeometryDetailQuality.High">
            <summary>
            The high detail setting.
            </summary>
        </member>
        <member name="T:ModApi.Settings.TerrainQualitySettings.PlanetCubemapQuality">
            <summary>
            An enumeration defining the different quality levels for planet cubemaps.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.PlanetCubemapQuality.Low">
            <summary>
            The low quality setting for planet cubemaps.
            Low resolution textures will be used for distant planets, map view planets, and the main menu planet. Normal mapping will not be used.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.PlanetCubemapQuality.Medium">
            <summary>
            The medium quality setting for planet cubemaps.
            Low resolution textures and normal maps will be used for distant planets, map view planets, and the main menu planet.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.PlanetCubemapQuality.High">
            <summary>
            The high quality setting for planet cubemaps.
            Low resolution textures and normal maps will be used for distant planets and map view planets.
            Higher resolutions textures will be used for the current planet (in flight and map view) as well as on the main menu.
            </summary>
        </member>
        <member name="T:ModApi.Settings.TerrainQualitySettings.StructureNormalMapQuality">
            <summary>
            An enumeration defining the different quality levels for normal mapping on terrain related structures (like launchpads and buildings).
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.StructureNormalMapQuality.Off">
            <summary>
            Terrain related structures (like launchpads, runways, and buildings) will not be normal mapped.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.StructureNormalMapQuality.On">
            <summary>
            Terrain related structures (like launchpads, runways, and buildings) will use normal mapping whenever possible.
            </summary>
        </member>
        <member name="T:ModApi.Settings.TerrainQualitySettings.TextureQuality">
            <summary>
            An enumeration defining the different texture quality levels for the planet's surface.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.TextureQuality.Off">
            <summary>
            Textures will not be applied to planet surfaces.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.TextureQuality.BlendedFast">
            <summary>
            Use 'fast' distance blended textures.
            More work is pushed off to the vertex shader at the cost of visual artifacts between blending levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.TerrainQualitySettings.TextureQuality.Blended">
            <summary>
            Use distance blended textures.
            </summary>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.Cubemaps">
            <summary>
            Gets the planet cubemaps quality setting.
            </summary>
            <value>
            The planet cubemaps quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapSettings">
            <summary>
            Gets the current cubemap quality settings.
            </summary>
            <value>The current cubemap quality settings.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.GeometryDetail">
            <summary>
            Gets the geometry detail setting.
            </summary>
            <value>
            The geometry detail setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.LodDistance">
            <summary>
            Gets the LOD distance setting.
            </summary>
            <value>
            The LOD distance setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.StructureNormalMaps">
            <summary>
            Gets the structure normal maps quality setting.
            </summary>
            <value>
            The structure normal maps quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.Textures">
            <summary>
            Gets the texture quality setting.
            </summary>
            <value>
            The texture quality setting.
            </value>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.CubemapSettingsChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{ModApi.Settings.TerrainQualitySettings.PlanetCubemapQuality})">
            <summary>
            Called when the cubemaps quality setting is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.OnStructureNormalMapsChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{ModApi.Settings.TerrainQualitySettings.StructureNormalMapQuality})">
            <summary>
            Called when the structure normal maps quality setting is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="T:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings">
            <summary>
            A class containing the cubemap quality settings.
            </summary>
        </member>
        <member name="M:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.#ctor(ModApi.Settings.TerrainQualitySettings.PlanetCubemapQuality)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings"/> class.
            </summary>
            <param name="quality">The quality setting.</param>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.ColorMapHighDetailSize">
            <summary>
            Gets the size of the high detail color cubemap.
            </summary>
            <value>The size of the high detail color cubemap.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.ColorMapLowDetailSize">
            <summary>
            Gets the size of the low detail color cubemap.
            </summary>
            <value>The size of the low detail color cubemap.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.ColorMapMaxSize">
            <summary>
            Gets the maximum size of the color cubemap.
            </summary>
            <value>The maximum size of the color cubemap.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.GenerationDownsampleCount">
            <summary>
            Gets the downsample count used in the cubemap generation algorithm.
            </summary>
            <value>The downsample count used in the cubemap generation algorithm.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.GenerationMaxSize">
            <summary>
            Gets the maximum size used in the cubemap generation algorithm.
            </summary>
            <value>The maximum size used in the cubemap generation algorithm.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.NormalMapHighDetailSize">
            <summary>
            Gets the size of the high detail normals cubemap.
            </summary>
            <value>The size of the high detail normals cubemap.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.NormalMapLowDetailSize">
            <summary>
            Gets the size of the low detail normals cubemap.
            </summary>
            <value>The size of the low detail normals cubemap.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.NormalMapMaxSize">
            <summary>
            Gets the maximum size of the normals cubemap.
            </summary>
            <value>The maximum size of the normals cubemap.</value>
        </member>
        <member name="P:ModApi.Settings.TerrainQualitySettings.CubemapQualitySettings.NormalMapsEnabled">
            <summary>
            Gets a value indicating whether normals cubemaps are enabled.
            </summary>
            <value><c>true</c> if normals cubemaps are enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings">
            <summary>
            VFX quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.VisualEffectsQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFilteringMode">
            <summary>
            An enumeration defining the different anisotropic filtering modes used by the game.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFilteringMode.Disabled">
            <summary>
            Anisotropic filtering will never be used. Textures can look blurry at steep viewing angles.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFilteringMode.PerTexture">
            <summary>
            Anisotropic filtering will be used for some textures but not all textures.
            For those textures that use it, this improves the look of the textures at steep viewing angles.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFilteringMode.ForcedOn">
            <summary>
            Anisotropic filtering will always be used. This improves the look of textures at steep viewing angles.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.AtmosphereQuality">
            <summary>
            An enumeration defining the atmosphere quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.AtmosphereQuality.Off">
            <summary>
            Atmosphere rendering effects are not applied.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.AtmosphereQuality.Low">
            <summary>
            Low quality atmosphere rendering effects are applied.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.AtmosphereQuality.High">
            <summary>
            High quality atmosphere rendering effects are applied.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.ExplosionQuality">
            <summary>
            An enumeration defining the explosion effects quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.ExplosionQuality.Low">
            <summary>
            Low quality explosions.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.ExplosionQuality.Medium">
            <summary>
            Medium quality explosions.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.ExplosionQuality.High">
            <summary>
            High quality explosions.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.HeatDistortionQuality">
            <summary>
            An enumeration defining the heat distortion rendering quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.HeatDistortionQuality.Off">
            <summary>
            Heat distortion effects are disabled.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.HeatDistortionQuality.On">
            <summary>
            Heat distortion effects are enabled.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.LightingQualitySettingType">
            <summary>
            The lighting quality type.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.LightingQualitySettingType.Low">
            <summary>
            The low quality lighting type.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.LightingQualitySettingType.Medium">
            <summary>
            The medium quality lighting type.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.LightingQualitySettingType.High">
            <summary>
            The high quality lighting type.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.MenuSunQuality">
            <summary>
            An enumeration defining the explosion effects quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.MenuSunQuality.Low">
            <summary>
            Low quality main menu sun.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.MenuSunQuality.High">
            <summary>
            High quality main menu sun.
            </summary>
        </member>
        <member name="T:ModApi.Settings.VisualEffectsQualitySettings.TireTrackQuality">
            <summary>
            Enum for tire track quality
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.TireTrackQuality.Off">
            <summary>
            Tire tracks are disabled.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.TireTrackQuality.Low">
            <summary>
            Low quality tire tracks.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.TireTrackQuality.Medium">
            <summary>
            Medium quality tire tracks.
            </summary>
        </member>
        <member name="F:ModApi.Settings.VisualEffectsQualitySettings.TireTrackQuality.High">
            <summary>
            High quality tire tracks.
            </summary>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFiltering">
            <summary>
            Gets the anisotropic filtering mode quality setting.
            </summary>
            <value>
            The anisotropic filtering mode quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.Atmosphere">
            <summary>
            Gets the atmosphere quality setting.
            </summary>
            <value>
            The atmosphere quality setting.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.CameraShake">
            <summary>
            Gets the settings that defines whether camera shake should be enabled.
            </summary>
            <value>
            The setting that defines whether camera shake should be enabled.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.Explosions">
            <summary>
            Gets the explosions quality.
            </summary>
            <value>
            The explosions quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.HeatDistortion">
            <summary>
            Gets the heat distortion quality.
            </summary>
            <value>
            The heat distortion quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.LaunchSteam">
            <summary>
            Gets the setting that defines whether launch steam (from the sound suppression water system) should be enabled.
            </summary>
            <value>
            The setting that defines whether launch steam (from the sound suppression water system) should be enabled.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.Lighting">
            <summary>
            Gets the lighting quality type.
            </summary>
            <value>
            The lighting quality type.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.MainMenuSun">
            <summary>
            Gets the main menu sun quality.
            </summary>
            <value>
            The main menu sun quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.VisualEffectsQualitySettings.TireTracks">
            <summary>
            Gets the tire tracks quality.
            </summary>
            <value>
            The tire tracks quality.
            </value>
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.OnInitializationComplete">
            <summary>
            Called when all settings categories (that are loaded as part of the same group) have been initialized, loaded, and committed.
            </summary>
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFilteringChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{ModApi.Settings.VisualEffectsQualitySettings.AnisotropicFilteringMode})">
            <summary>
            Called when the anisotropic filtering setting is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Settings.VisualEffectsQualitySettings.LightingQualityChanged(System.Object,ModApi.Settings.Core.Events.SettingChangedEventArgs{ModApi.Settings.VisualEffectsQualitySettings.LightingQualitySettingType})">
            <summary>
            Called when the lighting quality has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ModApi.Settings.Core.Events.SettingChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="T:ModApi.Settings.WaterQualitySettings">
            <summary>
            The water quality settings.
            </summary>
            <seealso cref="T:ModApi.Settings.Core.SettingsCategory`1" />
        </member>
        <member name="M:ModApi.Settings.WaterQualitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Settings.WaterQualitySettings"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Settings.WaterQualitySettings.NormalMapQuality">
            <summary>
            An enumeration defining the different normal map quality levels for the water.
            </summary>
        </member>
        <member name="F:ModApi.Settings.WaterQualitySettings.NormalMapQuality.Basic">
            <summary>
            Very basic normal mapping will be used for the water's surface.
            </summary>
        </member>
        <member name="F:ModApi.Settings.WaterQualitySettings.NormalMapQuality.BlendedFast">
            <summary>
            The normal maps will use 'fast' distance blending.
            This pushes more work off to the vertex shader at the cost of some visual artifacts between blending levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.WaterQualitySettings.NormalMapQuality.Blended">
            <summary>
            The normal maps will use distance blending.
            </summary>
        </member>
        <member name="T:ModApi.Settings.WaterQualitySettings.ReflectionQuality">
            <summary>
            An enumeration defining the different reflection quality levels.
            </summary>
        </member>
        <member name="F:ModApi.Settings.WaterQualitySettings.ReflectionQuality.None">
            <summary>
            The water will not reflect anything.
            </summary>
        </member>
        <member name="F:ModApi.Settings.WaterQualitySettings.ReflectionQuality.CraftOnly">
            <summary>
            The water will only reflect the craft and particle effects.
            </summary>
        </member>
        <member name="F:ModApi.Settings.WaterQualitySettings.ReflectionQuality.CraftAndTerrain">
            <summary>
            The water will reflect the craft, particle effects, and the surrounding terrain.
            </summary>
        </member>
        <member name="P:ModApi.Settings.WaterQualitySettings.NormalMaps">
            <summary>
            Gets the normal maps quality setting for the water.
            </summary>
            <value>
            The normal maps quality setting for the water.
            </value>
        </member>
        <member name="P:ModApi.Settings.WaterQualitySettings.Reflections">
            <summary>
            Gets the water reflections quality.
            </summary>
            <value>
            The water reflections quality.
            </value>
        </member>
        <member name="P:ModApi.Settings.WaterQualitySettings.Transparency">
            <summary>
            Gets a setting indicating whether the water supports transparency.
            </summary>
            <value>
            A setting indicating whether the water supports transparency.
            </value>
        </member>
        <member name="M:ModApi.Settings.WaterQualitySettings.GetDefaultPreset">
            <summary>
            Gets the default preset for the category.
            </summary>
            <returns>
            The default preset for the category.
            </returns>
        </member>
        <member name="M:ModApi.Settings.WaterQualitySettings.ApplyPreset(ModApi.Settings.Core.SettingsCategoryPreset,ModApi.Settings.Core.DeviceFlags)">
            <summary>
            Applies the current preset to all settings.
            </summary>
            <param name="preset">The current preset.</param>
            <param name="devices">The device flags for the current device.</param>
        </member>
        <member name="M:ModApi.Settings.WaterQualitySettings.InitializeSettings">
            <summary>
            Initializes the settings in the category.
            </summary>
        </member>
        <member name="T:ModApi.Scripts.State.CraftNodeData">
            <summary>
            The craft node data, which contains the serializable properties of the craft node.
            </summary>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.CraftMass">
            <summary>
            Gets the craft's scaled mass.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's mass.
            </summary>
            <value>
            The craft mass.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.CraftPartCount">
            <summary>
            Gets the craft's part count.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's part count.
            </summary>
            <value>
            The number crafts parts.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.HasCommandPod">
            <summary>
            Gets a value indicating whether this instance has command pod. All craft's have a command
            pod except for when they break apart and new craft nodes are created from their debris.
            </summary>
            <value>
              <c>true</c> if this instance has command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.Heading">
            <summary>
            Gets the heading.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.InContactWithPlanet">
            <summary>
            Gets a value indicating whether this craft is touching the ground.
            </summary>
            <value>
              <c>true</c> if grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
            <value>
            The node identifier.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.OrbitData">
            <summary>
            Gets the orbit data.
            </summary>
            <value>
            The orbit data.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.ParentName">
            <summary>
            Gets the name of the parent.
            </summary>
            <value>
            The name of the parent.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.Position">
            <summary>
            Gets the planet(orbital) position.
            </summary>
            <value>
            The the planet(orbital) position.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.RequiredMods">
            <summary>
            Gets or sets the data about the required mods for this craft node.
            </summary>
            <value>
            The data about the required mods for this craft node.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.SurfacePosition">
            <summary>
            Gets the surface position, or null if not currently touching the ground.
            </summary>
            <value>
            The surface position.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.SurfaceRotation">
            <summary>
            Gets the surface rotation, or null if not currently touching the ground.
            </summary>
            <value>
            The surface rotation.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.SurfaceVelocity">
            <summary>
            Gets the surface velocity, or null if not currently touching the ground.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.CraftNodeData.Velocity">
            <summary>
            Gets the planet(orbital) velocity.
            </summary>
            <value>
            The the planet(orbital) velocity.
            </value>
        </member>
        <member name="M:ModApi.Scripts.State.CraftNodeData.GenerateXml">
            <summary>
            Generates XML from the <see cref="T:ModApi.Scripts.State.ICraftNodeData" />'s state.
            </summary>
            <returns>
            The XML generated from the craft node.
            </returns>
        </member>
        <member name="T:ModApi.Scripts.State.ICraftNodeData">
            <summary>
            Provides access to data regarding about a specific CraftNode.
            </summary>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.CraftMass">
            <summary>
            Gets the craft's scaled mass.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's mass.
            </summary>
            <value>
            The craft mass.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.CraftPartCount">
            <summary>
            Gets the craft's part count.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's part count.
            </summary>
            <value>
            The number crafts parts.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.HasCommandPod">
            <summary>
            Gets a value indicating whether this instance has command pod. All craft's have a command
            pod except for when they break apart and new craft nodes are created from their debris.
            </summary>
            <value>
              <c>true</c> if this instance has command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.Heading">
            <summary>
            Gets the heading.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.InContactWithPlanet">
            <summary>
            Gets a value indicating whether this craft is touching the ground.
            </summary>
            <value>
              <c>true</c> if grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
            <value>
            The node identifier.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.OrbitData">
            <summary>
            Gets the orbit data.
            </summary>
            <value>
            The orbit data.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.ParentName">
            <summary>
            Gets the name of the parent.
            </summary>
            <value>
            The name of the parent.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.Position">
            <summary>
            Gets the planet(orbital) position.
            </summary>
            <value>
            The the planet(orbital) position.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.RequiredMods">
            <summary>
            Gets or sets the data about the required mods for this craft node.
            </summary>
            <value>
            The data about the required mods for this craft node.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.SurfacePosition">
            <summary>
            Gets the surface position, or null if not currently touching the ground.
            </summary>
            <value>
            The surface position.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.SurfaceRotation">
            <summary>
            Gets the surface rotation, or null if not currently touching the ground.
            </summary>
            <value>
            The surface rotation.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.SurfaceVelocity">
            <summary>
            Gets the surface velocity, or null if not currently touching the ground.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.Scripts.State.ICraftNodeData.Velocity">
            <summary>
            Gets the planet(orbital) velocity.
            </summary>
            <value>
            The the planet(orbital) velocity.
            </value>
        </member>
        <member name="M:ModApi.Scripts.State.ICraftNodeData.GenerateXml">
            <summary>
            Generates XML from the <see cref="T:ModApi.Scripts.State.ICraftNodeData"/>'s state.
            </summary>
            <returns>The XML generated from the craft node.</returns>
        </member>
        <member name="T:ModApi.State.CraftNodeDataDynamic">
            <summary>
            Provides access to continuously updated CraftNodeData.
            </summary>
            <seealso cref="T:ModApi.Scripts.State.CraftNodeData" />
        </member>
        <member name="M:ModApi.State.CraftNodeDataDynamic.#ctor(ModApi.Craft.ICraftNode,ModApi.Scripts.State.ICraftNodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.CraftNodeDataDynamic"/> class.
            </summary>
            <param name="craftNode">The craft node.</param>
            <param name="craftNodeData">If converting this node from another type of craft node data object, this will be the previous object.</param>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.CraftMass">
            <summary>
            Gets the craft's scaled mass.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's mass.
            </summary>
            <value>
            The craft mass.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.CraftNode">
            <summary>
            Gets the craft node.
            </summary>
            <value>
            The craft node.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.CraftPartCount">
            <summary>
            Gets the craft's part count.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's part count.
            </summary>
            <value>
            The number crafts parts.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.HasCommandPod">
            <summary>
            Gets a value indicating whether this instance has command pod. All craft's have a command
            pod except for when they break apart and new craft nodes are created from their debris.
            </summary>
            <value>
              <c>true</c> if this instance has command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.Heading">
            <summary>
            Gets the heading.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.InContactWithPlanet">
            <summary>
            Gets a value indicating whether this craft is touching the ground.
            </summary>
            <value>
              <c>true</c> if grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
            <value>
            The node identifier.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.OrbitData">
            <summary>
            Gets the orbit data.
            </summary>
            <value>
            The orbit data.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.ParentName">
            <summary>
            Gets the name of the parent.
            </summary>
            <value>
            The name of the parent.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.Position">
            <summary>
            Gets the planet(orbital) position.
            </summary>
            <value>
            The the planet(orbital) position.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.SurfacePosition">
            <summary>
            Gets the surface position, or null if not currently touching the ground.
            </summary>
            <value>
            The surface position.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.SurfaceRotation">
            <summary>
            Gets the surface rotation, or null if not currently touching the ground.
            </summary>
            <value>
            The surface rotation.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.SurfaceVelocity">
            <summary>
            Gets the surface velocity, or null if not currently touching the ground.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataDynamic.Velocity">
            <summary>
            Gets the planet(orbital) velocity.
            </summary>
            <value>
            The the planet(orbital) velocity.
            </value>
        </member>
        <member name="T:ModApi.State.CraftNodeDataStatic">
            <summary>
            A static snapshot of CraftNodeData.  Primarily used to load initial state of a CraftNode, or when data about a node is required outside the Flight scene (where node structure isn't present).
            </summary>
            <seealso cref="T:ModApi.Scripts.State.CraftNodeData" />
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._craftMass">
            <summary>
            The craft mass
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._craftPartCount">
            <summary>
            The craft part count
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._hasCommandPod">
            <summary>
            The has command pod
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._heading">
            <summary>
            The heading
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._inContactWithPlanet">
            <summary>
            The in contact with planet
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._nodeId">
            <summary>
            The node identifier
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._orbitData">
            <summary>
            The orbit data
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._parentName">
            <summary>
            The parent name
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._surfacePosition">
            <summary>
            The surface position
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._surfaceRotation">
            <summary>
            The surface rotation
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._surfaceVelocity">
            <summary>
            The surface velocity
            </summary>
        </member>
        <member name="F:ModApi.State.CraftNodeDataStatic._velocity">
            <summary>
            The velocity
            </summary>
        </member>
        <member name="M:ModApi.State.CraftNodeDataStatic.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.CraftNodeDataStatic"/> class from a previously saved <see cref="T:ModApi.Scripts.State.ICraftNodeData"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:ModApi.State.CraftNodeDataStatic.#ctor(ModApi.Craft.ICraftNode,ModApi.Scripts.State.ICraftNodeData)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.CraftNodeDataStatic" /> class from an <see cref="T:ModApi.Craft.ICraftNode"/>
            </summary>
            <param name="craftNode">The craft node to generate a snapshot of.</param>
            <param name="craftNodeData">If converting this node from another type of craft node data object, this will be the previous object.</param>
        </member>
        <member name="M:ModApi.State.CraftNodeDataStatic.#ctor(System.String,UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Quaterniond,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.CraftNodeDataStatic"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="velocity">The velocity.</param>
            <param name="heading">The heading.</param>
            <param name="hasCommandPod">if set to <c>true</c> [has command pod].</param>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.CraftMass">
            <summary>
            Gets the craft's scaled mass.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's mass.
            </summary>
            <value>
            The craft mass.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.CraftPartCount">
            <summary>
            Gets the craft's part count.
            NOTE: This is only updated periodically and may be inconsistent with the actual craft's part count.
            </summary>
            <value>
            The number crafts parts.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.HasCommandPod">
            <summary>
            Gets a value indicating whether this instance has command pod. All craft's have a command
            pod except for when they break apart and new craft nodes are created from their debris.
            </summary>
            <value>
              <c>true</c> if this instance has command pod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.Heading">
            <summary>
            Gets the heading.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.InContactWithPlanet">
            <summary>
            Gets a value indicating whether this craft is touching the ground.
            </summary>
            <value>
              <c>true</c> if grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
            <value>
            The node identifier.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.OrbitData">
            <summary>
            Gets the orbit data.
            </summary>
            <value>
            The orbit data.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.ParentName">
            <summary>
            Gets the name of the parent.
            </summary>
            <value>
            The name of the parent.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.Position">
            <summary>
            Gets the planet(orbital) position.
            </summary>
            <value>
            The planet(orbital) position.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.SurfacePosition">
            <summary>
            Gets the surface position, or null if not currently touching the ground.
            </summary>
            <value>
            The surface position.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.SurfaceRotation">
            <summary>
            Gets the surface rotation, or null if not currently touching the ground.
            </summary>
            <value>
            The surface rotation.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.SurfaceVelocity">
            <summary>
            Gets the surface velocity, or null if not currently touching the ground.
            </summary>
            <value>
            The surface velocity.
            </value>
        </member>
        <member name="P:ModApi.State.CraftNodeDataStatic.Velocity">
            <summary>
            Gets the planet(orbital) velocity.
            </summary>
            <value>
            The planet(orbital) velocity.
            </value>
        </member>
        <member name="T:ModApi.State.GameStateMode">
            <summary>
            The game state modes.
            </summary>
        </member>
        <member name="F:ModApi.State.GameStateMode.Career">
            <summary>
            The career mode.
            </summary>
        </member>
        <member name="F:ModApi.State.GameStateMode.Sandbox">
            <summary>
            The sandbox mode.
            </summary>
        </member>
        <member name="T:ModApi.State.IFlightStateData">
            <summary>
            An interface for the flight state data, which contains the serializable properties of the flight state.
            </summary>
        </member>
        <member name="P:ModApi.State.IFlightStateData.CraftNodes">
            <summary>
            Gets the craft nodes.
            </summary>
            <value>
            The craft nodes.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.DirectoryPath">
            <summary>
            Gets the full path of the directory containing the flight state XML file.
            </summary>
            <value>
            The directory path.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.FlightStateRequiredMods">
            <summary>
            Gets the required mods.
            </summary>
            <value>
            The required mods.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.MapView">
            <summary>
            Gets the map view data.
            </summary>
            <value>
            The map view data.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.NextNodeId">
            <summary>
            Gets or sets the next node identifier.
            </summary>
            <value>
            The next node identifier.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.Path">
            <summary>
            Gets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.PlanetarySystem">
            <summary>
            Gets the planetary system for this flight state.
            </summary>
            <value>The planetary system for this flight state.</value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.PlanetNodes">
            <summary>
            Gets the planet nodes.
            </summary>
            <value>
            The planet nodes.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.PlayerNodeId">
            <summary>
            Gets or sets the player node identifier.
            </summary>
            <value>
            The player node identifier.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.PreventSave">
            <summary>
            Gets a value indicating whether saving of the flight state is prevented (i.e. readonly).
            </summary>
            <value>
              <c>true</c> if saving of the flight state is prevented (i.e. readonly); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.IFlightStateData.Time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="M:ModApi.State.IFlightStateData.AddCraftNode(ModApi.Scripts.State.ICraftNodeData)">
            <summary>
            Adds the craft node.
            </summary>
            <param name="craftNodeData">The craft node data.</param>
        </member>
        <member name="M:ModApi.State.IFlightStateData.CheckCraftXmlExists(System.Int32)">
            <summary>
            Checks if the craft XML exists.
            </summary>
            <param name="nodeId">The node ID.</param>
            <returns>True if it exists, otherwise false.</returns>
        </member>
        <member name="M:ModApi.State.IFlightStateData.GenerateXml">
            <summary>
            Generates an XML document from the current flight data.
            </summary>
            <returns>The XML document generated from the current flight data.</returns>
        </member>
        <member name="M:ModApi.State.IFlightStateData.GetCraftNodeData(System.Int32)">
            <summary>
            Gets the craft node data.
            </summary>
            <param name="id">The craft node identifier.</param>
            <returns>The requested craft node data or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.State.IFlightStateData.GetPlanetNodeData(System.String)">
            <summary>
            Gets the planet node data.
            </summary>
            <param name="name">The name.</param>
            <returns>The data or null if it is not in the list.</returns>
        </member>
        <member name="M:ModApi.State.IFlightStateData.LoadCraftXml(System.Int32)">
            <summary>
            Loads the craft XML.
            </summary>
            <param name="nodeId">The node ID.</param>
            <returns>The craft XML.</returns>
        </member>
        <member name="M:ModApi.State.IFlightStateData.RemoveCraftNode(ModApi.Scripts.State.ICraftNodeData)">
            <summary>
            Removes the craft node data from the flight state.
            </summary>
            <param name="craftNodeData">The craft node data.</param>
        </member>
        <member name="M:ModApi.State.IFlightStateData.Save">
            <summary>
            Saves the flight state data.
            </summary>
        </member>
        <member name="M:ModApi.State.IFlightStateData.SaveCraftXml(System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Saves the craft XML.
            </summary>
            <param name="nodeId">The craft node identifier.</param>
            <param name="craftXml">The craft XML.</param>
        </member>
        <member name="T:ModApi.State.IGameState">
            <summary>
            An interface for a game state.
            </summary>
        </member>
        <member name="P:ModApi.State.IGameState.AvailableFunds">
            <summary>
            Gets or sets the currently available funds for the company.
            </summary>
            <value>
            The available funds.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.CompanyName">
            <summary>
            Gets or sets the name of the company.
            </summary>
            <value>
            The name of the company.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.CreatedDateTime">
            <summary>
            Gets or sets the created date time.
            </summary>
            <value>
            The created date time.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.LastModifiedDateTime">
            <summary>
            Gets or sets the last modified date time.
            </summary>
            <value>
            The last modified date time.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.LaunchLocations">
            <summary>
            Gets the launch locations.
            </summary>
            <value>
            The launch locations.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.Mode">
            <summary>
            Gets or sets the current game state mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.Parent">
            <summary>
            Gets or sets the parent game state, or null if it is OC.
            </summary>
            <value>
            The parent game state if this was originally downloaded from the website, or null if it is original.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.PreflightLoadParameters">
            <summary>
            Gets or sets the flight scene load parameters for the preflight state (if any).
            </summary>
            <value>
            The flight scene load parameters for the preflight state (if any).
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.SelectedCraftDesignId">
            <summary>
            Gets or sets the currently selected craft ID.
            </summary>
            <value>
            The selected craft ID.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.SelectedCraftNodeId">
            <summary>
            Gets or sets the selected craft node identifier. Used when the player is
            resuming an active craft in flight.
            </summary>
            <value>
            The selected craft node identifier.
            </value>
        </member>
        <member name="P:ModApi.State.IGameState.SelectedLaunchLocation">
            <summary>
            Gets or sets the currently selected launch location.
            </summary>
            <value>
            The selected launch location.
            </value>
        </member>
        <member name="T:ModApi.State.LaunchLocation">
            <summary>
            Contains information about a launch location.
            </summary>
        </member>
        <member name="F:ModApi.State.LaunchLocation.CurrentVersion">
            <summary>
            The current version
            </summary>
        </member>
        <member name="F:ModApi.State.LaunchLocation._headingSimple">
            <summary>
            The heading for this launch location, in degrees. Zero is North, 180 is South.
            </summary>
        </member>
        <member name="M:ModApi.State.LaunchLocation.#ctor(System.String,ModApi.State.LaunchLocationType,System.String,System.Double,System.Double,UnityEngine.Vector3d,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.LaunchLocation" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The launch location type.</param>
            <param name="planetName">Name of the planet.</param>
            <param name="latitude">The latitude in degrees.</param>
            <param name="longitude">The longitude in degrees.</param>
            <param name="velocity">The velocity of the craft at the launch location.</param>
            <param name="heading">The rotation around the Y-axis in degrees.</param>
            <param name="altitudeAboveGroundLevel">The altitude above ground level.</param>
        </member>
        <member name="M:ModApi.State.LaunchLocation.#ctor(System.String,ModApi.State.LaunchLocationType,System.String,System.Double,System.Double,UnityEngine.Vector3d,UnityEngine.Quaterniond,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.LaunchLocation" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The launch location type.</param>
            <param name="planetName">Name of the planet.</param>
            <param name="latitude">The latitude in degrees.</param>
            <param name="longitude">The longitude in degrees.</param>
            <param name="velocity">The velocity of the craft at the launch location.</param>
            <param name="heading">The rotation of the launch location.</param>
            <param name="altitudeAboveGroundLevel">The altitude above ground level.</param>
        </member>
        <member name="M:ModApi.State.LaunchLocation.#ctor(System.String,System.String,UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Quaterniond,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.LaunchLocation" /> class.
            The location will be initialized as an orbital launch location.
            </summary>
            <param name="name">The name.</param>
            <param name="planetName">Name of the planet.</param>
            <param name="orbitalPosition">The position for the launch location if it is an orbital launch location.</param>
            <param name="velocity">The velocity of the craft at the launch location.</param>
            <param name="heading">The rotation of the launch location.</param>
            <param name="altitudeAboveGroundLevel">The altitude above ground level.</param>
        </member>
        <member name="M:ModApi.State.LaunchLocation.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.LaunchLocation"/> class.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:ModApi.State.LaunchLocation.#ctor(ModApi.State.LaunchLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.LaunchLocation"/> class.
            </summary>
            <param name="launchLocation">The launch location.</param>
        </member>
        <member name="P:ModApi.State.LaunchLocation.AltitudeAboveGroundLevel">
            <summary>
            Gets or sets the altitude above ground level.
            </summary>
            <value>
            The altitude above ground level.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Heading">
            <summary>
            Gets or sets the heading for this launch location.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.HeadingSimple">
            <summary>
            Gets or sets the heading for this launch location, in degrees. Zero is North, 180 is South.
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Latitude">
            <summary>
            Gets or sets the latitude in degrees.
            </summary>
            <value>
            The latitude.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.LocationType">
            <summary>
            Gets the type of the launch location.
            </summary>
            <value>
            The type of the launch location.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Longitude">
            <summary>
            Gets or sets the longitude in degrees.
            </summary>
            <value>
            The longitude.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.OrbitalPosition">
            <summary>
            Gets the position for the launch location if it is an orbital launch location.
            </summary>
            <value>
            The position for the launch location if it is an orbital launch location.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.PlanetName">
            <summary>
            Gets or sets the name of the planet.
            </summary>
            <value>
            The name of the planet.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Rotation">
            <summary>
            Gets the rotation that takes a craft from the designer orientation to the
            orientation for this launch location, taking the specified heading into account.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.UserCreated">
            <summary>
            Gets or sets a value indicating whether this is a user created launch location.
            </summary>
            <value>
              <c>true</c> if this is a user created launch location; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Velocity">
            <summary>
            Gets the velocity of the craft at the launch location.
            </summary>
            <value>
            The velocity of the craft at the launch location.
            </value>
        </member>
        <member name="P:ModApi.State.LaunchLocation.Version">
            <summary>
            Gets the version of the launch location.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="M:ModApi.State.LaunchLocation.CalculateHeading(System.Double,System.Single,System.Single)">
            <summary>
            Calculates the heading quaternion from the simple heading rotation in degrees.
            </summary>
            <param name="headingSimple">The simple heading rotation in degrees.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The calculated heading quaternion.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.CreateLaunchLocation(System.String,ModApi.Flight.Sim.IPlanetNode,UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double,ModApi.Flight.GameView.IReferenceFrame,ModApi.State.LaunchLocationType)">
            <summary>
            Creates the launch location.
            </summary>
            <param name="name">The name.</param>
            <param name="planetNode">The planet node.</param>
            <param name="position">The planet position.</param>
            <param name="velocity">The velocity of the craft at the launch location.</param>
            <param name="heading">The heading.</param>
            <param name="referenceFrame">The reference frame.</param>
            <param name="type">The type of the launch location.</param>
            <returns>The launch location.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.CreateLaunchLocation(System.String,ModApi.Flight.Sim.IPlanetNode,UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Quaterniond,ModApi.Flight.GameView.IReferenceFrame,ModApi.State.LaunchLocationType)">
            <summary>
            Creates the launch location.
            </summary>
            <param name="name">The name.</param>
            <param name="planetNode">The planet node.</param>
            <param name="position">The planet position.</param>
            <param name="velocity">The velocity of the craft at the launch location.</param>
            <param name="heading">The heading.</param>
            <param name="referenceFrame">The reference frame.</param>
            <param name="type">The type of the launch location.</param>
            <returns>The launch location.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.AreEqual(ModApi.State.LaunchLocation)">
            <summary>
            Determines if this launch location is equal to the specified launch location.
            </summary>
            <param name="launchLocation">The launch location.</param>
            <returns><c>true</c> if this launch location is equal to the specified launch location, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.GenerateXml(System.Boolean)">
            <summary>
            Generates the XML.
            </summary>
            <param name="savePlanetName">If set to <c>true</c>, the planet name will be saved in the XML.</param>
            <returns>The XElement.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.CalculateAgl(ModApi.Flight.Sim.IPlanetNode,UnityEngine.Vector3d,ModApi.Flight.GameView.IReferenceFrame,ModApi.State.LaunchLocationType)">
            <summary>
            Calculates the altitude above ground level for the launch location.
            </summary>
            <param name="planetNode">The planet node.</param>
            <param name="position">The planet position.</param>
            <param name="referenceFrame">The reference frame.</param>
            <param name="type">The type of the launch location.</param>
            <returns>The altitude above ground level for the launch location.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.CalculateHeading(System.Double)">
            <summary>
            Calculates the heading quaternion from the simple heading rotation in degrees.
            </summary>
            <param name="headingSimple">The simple heading rotation in degrees.</param>
            <returns>The calculated heading quaternion.</returns>
        </member>
        <member name="M:ModApi.State.LaunchLocation.UpgradeLaunchLocation">
            <summary>
            Upgrades the launch location based on its version number.
            </summary>
        </member>
        <member name="T:ModApi.State.LaunchLocationType">
            <summary>
            An enumeration defining different types of launch locations.
            </summary>
        </member>
        <member name="F:ModApi.State.LaunchLocationType.SurfaceLockedGround">
            <summary>
            A surface locked ground launch location.
            </summary>
        </member>
        <member name="F:ModApi.State.LaunchLocationType.SurfaceLockedAir">
            <summary>
            A surface locked air launch location.
            </summary>
        </member>
        <member name="F:ModApi.State.LaunchLocationType.Orbital">
            <summary>
            An orbital launch location.
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.AnyPropertyChangedHandler">
            <summary>
            Delegate to handle when properties change.
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.PropertyChangedHandler`1">
            <summary>
            Delegate to handle when properties change.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="newVal">The new value.</param>
        </member>
        <member name="T:ModApi.State.MapView.MapItemType">
            <summary>
            The map item type for a <see cref="T:ModApi.State.MapView.MapItemData"/> item.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemType.Craft">
            <summary>
            Represents a craft MapItem.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemType.Planet">
            <summary>
            Represents a planet MapItem.
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.MapItemData">
            <summary>
            Contains data/options for a node in Map View.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData._craftNode">
            <summary>
            The craft node this item is associated with, or null if it is not associated with a craft.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData._defaults">
            <summary>
            The MapItem defaults
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData._showIconsRaw">
            <summary>
            A value indicating whether to show the icons.  <c>null</c> means use default.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData._showOrbitLineRaw">
            <summary>
            A value indicating whether to show the orbit line.  <c>null</c> means use default.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.#ctor(ModApi.State.MapView.MapItemDataDefaults,ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapItemData" /> class.
            </summary>
            <param name="defaults">The defaults.</param>
            <param name="orbitNode">The orbit node.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.#ctor(ModApi.State.MapView.MapItemDataDefaults,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapItemData" /> class.
            </summary>
            <param name="defaults">The defaults.</param>
            <param name="nodeState">State of the node.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.#ctor(ModApi.State.MapView.MapItemDataDefaults,System.String,ModApi.State.MapView.MapItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapItemData" /> class.
            </summary>
            <param name="defaults">The defaults.</param>
            <param name="id">The identifier.</param>
            <param name="type">The type.</param>
        </member>
        <member name="E:ModApi.State.MapView.MapItemData.AnyPropertyChanged">
            <summary>
            Occurs when any property has changed.
            </summary>
        </member>
        <member name="E:ModApi.State.MapView.MapItemData.ShowIconsChanged">
            <summary>
            Occurs when ShowIcons has changed.
            </summary>
        </member>
        <member name="E:ModApi.State.MapView.MapItemData.ShowIconsRawChanged">
            <summary>
            Occurs when ShowIconsRaw has changed.
            </summary>
        </member>
        <member name="E:ModApi.State.MapView.MapItemData.ShowOrbitLineChanged">
            <summary>
            Occurs when ShowOrbitLine has changed.
            </summary>
        </member>
        <member name="E:ModApi.State.MapView.MapItemData.ShowOrbitLineRawChanged">
            <summary>
            Occurs when ShowOrbitLineRaw has changed.
            </summary>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.ShowIcons">
            <summary>
            Gets a value indicating whether to show icons for the orbit node.
            </summary>
            <value>
              <c>true</c> if icons should be shown for the orbit node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.ShowIconsRaw">
            <summary>
            Gets or sets the show icons raw.
            </summary>
            <value>
            The show icons raw.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.ShowOrbitLine">
            <summary>
            Gets a value indicating whether to show the orbit line.
            </summary>
            <value>
              <c>true</c> if the orbit line should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.ShowOrbitLineRaw">
            <summary>
            Gets or sets a value indicating whether to show the orbit line, or null if it is set to the default value.
            </summary>
            <value>
            A value indicating whether to show the orbit line, or null if it is set to the default value.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemData.IsPlayerCraft">
            <summary>
            Gets a value indicating whether this instance holds data for the player craft.
            </summary>
            <value>
              <c>true</c> if this this instance holds data for the player craft; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.GetType(System.Xml.Linq.XElement)">
            <summary>
            Gets the type.
            </summary>
            <param name="nodeElement">The node element.</param>
            <returns>the type.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.GetType(ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Gets the type for the orbitNode.
            </summary>
            <param name="orbitNode">The orbit node.</param>
            <returns>The type for the orbitNode.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.IsMatch(ModApi.State.MapView.MapItemData,ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Determines whether the specified <see cref="T:ModApi.State.MapView.MapItemData"/> matches the supplied data.
            </summary>
            <param name="itemData">The item data to check.</param>
            <param name="node">The node to compare against the item.</param>
            <returns>
              <c>true</c> if the specified item data is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.IsMatch(ModApi.State.MapView.MapItemData,System.String,ModApi.State.MapView.MapItemType)">
            <summary>
            Determines whether the specified <see cref="T:ModApi.State.MapView.MapItemData"/> matches the supplied data.
            </summary>
            <param name="itemData">The item data to check.</param>
            <param name="nodeId">The node identifier to compare against the item.</param>
            <param name="type">The type to compare against the item.</param>
            <returns>
              <c>true</c> if the specified item data is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The XML representing this <see cref="T:ModApi.State.MapView.MapItemData"/></returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.SetNode(ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Sets the IOrbitNode associated with this instance.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.GetId(ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Gets the id of the specified node of the given type.
            </summary>
            <param name="orbitNode">The orbit node.</param>
            <returns>
            The id of the specified node.
            </returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.Create(ModApi.State.MapView.MapItemDataDefaults,System.String,ModApi.State.MapView.MapItemType,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates this <see cref="T:ModApi.State.MapView.MapItemData" /> from the supplied parameters.
            </summary>
            <param name="defaults">The defaults.</param>
            <param name="id">The identifier.</param>
            <param name="type">The type.</param>
            <param name="showOrbitLine">The show orbit line.</param>
            <param name="showIcons">The show icons.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.HasOnlyDefaultData">
            <summary>
            Determines whether this instance only has default data.
            </summary>
            <returns>
              <c>true</c> if this instance only has default data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.OnDefaultShowIconsChanged(System.Boolean)">
            <summary>
            Called when the default ShowIcons value has changed.
            </summary>
            <param name="newVal">The new value.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.OnDefaultShowOrbitLineChanged(System.Boolean)">
            <summary>
            Called when the default ShowOrbitLine value has changed.
            </summary>
            <param name="newVal">The new value.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.SetType(ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Sets the type.
            </summary>
            <param name="orbitNode">The orbit node.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemData.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.MapItemData.XNodeNames">
            <summary>
            The names of the XNode items (elements/attributes).
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData.XNodeNames.Id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData.XNodeNames.ShowIconsAttribute">
            <summary>
            The show icons attribute
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData.XNodeNames.ShowOrbitAttribute">
            <summary>
            The show orbit attribute
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemData.XNodeNames.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.MapItemDataDefaults">
            <summary>
            Contains current default values for MapItemData
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataDefaults._defaultShowIcons">
            <summary>
            The default show icons
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataDefaults._defaultShowOrbitLines">
            <summary>
            The default show orbit lines
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataDefaults._showIcons">
            <summary>
            The show icons default value.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataDefaults._showOrbitLines">
            <summary>
            The show orbit lines default value.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataDefaults.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapItemDataDefaults" /> class.
            </summary>
            <param name="defaultShowOrbitLines">If set to <c>true</c> the orbit lines will be enabled for this default.</param>
            <param name="defaultShowIcons">If set to <c>true</c> icons will be enabled for this default.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataDefaults.#ctor(System.Xml.Linq.XElement,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapItemDataDefaults" /> class.
            </summary>
            <param name="defaultsElement">The defaults element.</param>
            <param name="defaultShowOrbitLines">If set to <c>true</c> the orbit lines will be enabled for this default.</param>
            <param name="defaultShowIcons">If set to <c>true</c> icons will be enabled for this default.</param>
        </member>
        <member name="E:ModApi.State.MapView.MapItemDataDefaults.AnyDefaultValueChanged">
            <summary>
            Occurs when any default value has changed.
            </summary>
        </member>
        <member name="E:ModApi.State.MapView.MapItemDataDefaults.ShowIconsChanged">
            <summary>
            Occurs when ShowIcons has changed.
            </summary>
        </member>
        <member name="E:ModApi.State.MapView.MapItemDataDefaults.ShowOrbitLineChanged">
            <summary>
            Occurs when ShowOrbitLine has changed.
            </summary>
        </member>
        <member name="P:ModApi.State.MapView.MapItemDataDefaults.ShowIcons">
            <summary>
            Gets or sets a value indicating whether the default setting is to show icons.
            </summary>
            <value>
              <c>true</c> if the default setting is to show icons; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemDataDefaults.ShowOrbitLines">
            <summary>
            Gets or sets a value indicating whether the default setting is to show orbit lines.
            </summary>
            <value>
              <c>true</c> if the default setting is to show orbit lines; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataDefaults.GenerateXml(System.String)">
            <summary>
            Generates the XML for this default settings.
            </summary>
            <param name="defaultsElementName">The craft defaults.</param>
            <returns>The XML for this default.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataDefaults.ResetToDefault">
            <summary>
            Resets to default.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataDefaults.Initialize(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="showOrbitLines">if set to <c>true</c> the orbit lines will be enabled for this default.</param>
            <param name="showIcons">if set to <c>true</c> icons will be enabled for this default.</param>
            <param name="defaultShowOrbitLines">The default value for showOrbitLines when ressetting back to default.</param>
            <param name="defaultShowIcons">The default value for showIcons when ressetting back to default.</param>
        </member>
        <member name="T:ModApi.State.MapView.MapItemDataDefaults.XNodeNames">
            <summary>
            Defines XNode names for <see cref="T:ModApi.State.MapView.MapItemDataDefaults"/>
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataDefaults.XNodeNames.ShowIconsAttribute">
            <summary>
            The show icons attribute
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataDefaults.XNodeNames.ShowOrbitLinesAttribute">
            <summary>
            The show orbit lines attribute
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.MapItemDataSet">
            <summary>
            Provides means to save/load/access a set of <see cref="T:ModApi.State.MapView.MapItemData"/>
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataSet._getDataItems">
            <summary>
            Function which returns the list of currently active data items.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataSet._itemsFromXml">
            <summary>
            The items originally loaded from XML.  This is a list of items which were saved in the state xml file: ie. they had non-default values.
            It does not contain up-to-date values for all nodes and isn't used beyond the initial settings loading.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapItemDataSet"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:ModApi.State.MapView.MapItemDataSet.CraftDefaults">
            <summary>
            Gets the default values to be used for craft <see cref="T:ModApi.State.MapView.MapItemData"/> unless the user has overridden.
            </summary>
            <value>
            The default values to be used for craft <see cref="T:ModApi.State.MapView.MapItemData"/> unless the user has overridden.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapItemDataSet.PlanetDefaults">
            <summary>
            Gets the default values to be used for planet <see cref="T:ModApi.State.MapView.MapItemData"/> unless the user has overridden.
            </summary>
            <value>
            The default values to be used for planet <see cref="T:ModApi.State.MapView.MapItemData"/> unless the user has overridden.
            </value>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The XML representing this <see cref="T:ModApi.State.MapView.MapItemDataSet"/></returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.GetItem(ModApi.Flight.Sim.IOrbitNode,System.Boolean)">
            <summary>
            Gets the settings data item associated with the specified orbit node.
            </summary>
            <param name="node">The node to get the settings data item for.</param>
            <param name="createIfNecessary">If set to <c>true</c> a default item will be created/returned if one cannot be found.</param>
            <returns>
            The requested <see cref="T:ModApi.State.MapView.MapItemData" />
            </returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.ResetAllNodesToDefaults">
            <summary>
            Resets all item's visibilities to their defaults.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.ResetDefaults">
            <summary>
            Resets the defaults.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.SetDataItemsAccessor(System.Func{System.Collections.Generic.IEnumerable{ModApi.State.MapView.MapItemData}})">
            <summary>
            Sets an accessor function to provide a list of currently active data items.
            This class does not keep an up-to-date list of data item references b/c it rarely needs them, and keeping an up-to-date list is overkill.
            </summary>
            <param name="getDataItems">Function which returns the list of currently active data items.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.GetDefaults(ModApi.Flight.Sim.IOrbitNode)">
            <summary>
            Gets the proper defaults (craft/planet) for the item.
            </summary>
            <param name="node">The node to get the defaults for.</param>
            <returns>The defaults for the item.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.GetDefaults(System.Xml.Linq.XElement)">
            <summary>
            Gets the proper defaults (craft/planet) for the item.
            </summary>
            <param name="nodeState">The node to get the defaults for.</param>
            <returns>The defaults for the item.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapItemDataSet.GetDefaults(ModApi.State.MapView.MapItemType)">
            <summary>
            Gets the defaults (craft/planet) for the item.
            </summary>
            <param name="type">The type to get the defaults for.</param>
            <returns>The defaults for the item.</returns>
        </member>
        <member name="T:ModApi.State.MapView.MapItemDataSet.XNodeNames">
            <summary>
            XNodeNames for MapItem state related data.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataSet.XNodeNames.CraftDefaultsElement">
            <summary>
            The craft defaults
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataSet.XNodeNames.MapItemElement">
            <summary>
            The xml element name for a <see cref="T:ModApi.State.MapView.MapItemData"/>.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataSet.XNodeNames.MapItemsElement">
            <summary>
            The xml elment name for a <see cref="T:ModApi.State.MapView.MapItemDataSet"/>.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapItemDataSet.XNodeNames.PlanetDefaultsElement">
            <summary>
            The planet defaults
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.MapViewData">
            <summary>
            Map view data stored in the flight state.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData.MapViewDataElementName">
            <summary>
            The XML element name of map view data in the flight state document.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData._iocGetter">
            <summary>
            A function which returns the IOC container.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData._maneuverNodes">
            <summary>
            The maneuver nodes
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.#ctor(System.Func{ModApi.Ioc.IIocContainer},System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.State.MapView.MapViewData" /> class.
            </summary>
            <param name="iocGetter">A function which returns the ioc container.</param>
            <param name="mapViewElement">The map view element.</param>
        </member>
        <member name="T:ModApi.State.MapView.MapViewData.MapViewDataHandler">
            <summary>
            Handler for MapViewData related events.
            </summary>
            <param name="source">The source MapViewData instance.</param>
        </member>
        <member name="E:ModApi.State.MapView.MapViewData.GeneratingXml">
            <summary>
            Occurs right before MapViewData generates XML for its current state.
            </summary>
        </member>
        <member name="P:ModApi.State.MapView.MapViewData.IsDirty">
            <summary>
            Gets a value indicating whether this instance has been changed since being loaded.
            </summary>
            <value>
              <c>true</c> if this instance has been changed since being loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapViewData.MapItemDataSet">
            <summary>
            Gets the <see cref="P:ModApi.State.MapView.MapViewData.MapItemDataSet"/> containing data/options for MapItems in MapView.
            </summary>
            <value>
            The <see cref="P:ModApi.State.MapView.MapViewData.MapItemDataSet"/> containing data/options for MapItems in MapView.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapViewData.MapOptionsContainerElement">
            <summary>
            Gets the map options container element.
            </summary>
            <value>
            The map options container element.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapViewData.ManeuverNodesContainerElement">
            <summary>
            Gets or sets the maneuver nodes container element.
            </summary>
            <value>
            The maneuver nodes container element.
            </value>
        </member>
        <member name="P:ModApi.State.MapView.MapViewData.MapItemsContainerElement">
            <summary>
            Gets or sets the map items container element.
            </summary>
            <value>
            The map items container element.
            </value>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.GenerateXml">
            <summary>
            Generates the XML.
            </summary>
            <returns>The map view data XML.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.GetManeuverNodesElement(ModApi.Craft.ICraftNode)">
            <summary>
            Gets the maneuver nodes element.
            </summary>
            <param name="craftNode">The orbit node.</param>
            <returns>The maneuver node XML element for the specified craft.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.RemoveManeuverNodesNotIn(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes maneuver node states which are not in the supplied list.
            </summary>
            <param name="nodeIdsToKeep">The node ids to keep.  All others will be removed.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.SetDirty">
            <summary>
            Sets the dirty flag fro MapViewData.
            </summary>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.UpdateManeuverNodeData(ModApi.Craft.ICraftNode,System.Xml.Linq.XElement)">
            <summary>
            Updates the maneuver node data for the specified craft.
            </summary>
            <param name="craftNode">The craft node to update maneuver node data for.</param>
            <param name="maneuverNodeData">The maneuver node data.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.GenerateXmlForManeuverNodeData">
            <summary>
            Generates the XML for maneuver node data.
            </summary>
            <returns>The maneuver node XML data.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.GenerateXmlForMapOptions">
            <summary>
            Generates the XML for map options.
            </summary>
            <returns>The XML for map options.</returns>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.LoadManeuverNodeData(System.Xml.Linq.XElement)">
            <summary>
            Loads the maneuver node data.
            </summary>
            <param name="maneuverNodesContainerElement">The container XML element for maneuver nodes.</param>
        </member>
        <member name="M:ModApi.State.MapView.MapViewData.LoadNodeData(System.Xml.Linq.XElement)">
            <summary>
            Loads the node data.
            </summary>
            <param name="mapItemsContainerElement">The container XML element for map items.</param>
        </member>
        <member name="T:ModApi.State.MapView.MapViewData.ManeuverNodeStateConstants">
            <summary>
            Constants for maneuver node related data.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData.ManeuverNodeStateConstants.ChainRoot">
            <summary>
            The root xml element name for a maneuver node chain.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData.ManeuverNodeStateConstants.CraftId">
            <summary>
            The craft identifier
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData.ManeuverNodeStateConstants.ManeuverNodes">
            <summary>
            The XML element name for the maneuver nodes section of MapView data.
            </summary>
        </member>
        <member name="T:ModApi.State.MapView.MapViewData.MapOptionsConstants">
            <summary>
            Constants for map options related data.
            </summary>
        </member>
        <member name="F:ModApi.State.MapView.MapViewData.MapOptionsConstants.MapOptions">
            <summary>
            The root xml element name for a map options.
            </summary>
        </member>
        <member name="T:ModApi.Tags">
            <summary>
            Tags used in the game.
            </summary>
        </member>
        <member name="T:ModApi.Ui.BuildUserInterfaceXmlRequest">
            <summary>
            An object representing a request for XML that defines a user interface.
            </summary>
        </member>
        <member name="F:ModApi.Ui.BuildUserInterfaceXmlRequest._onLayoutRebuilt">
            <summary>
            The actions to execute when the layout for the UI created by this request is rebuilt.
            </summary>
        </member>
        <member name="F:ModApi.Ui.BuildUserInterfaceXmlRequest._xdoc">
            <summary>
            The XML document.
            </summary>
        </member>
        <member name="F:ModApi.Ui.BuildUserInterfaceXmlRequest._xml">
            <summary>
            The XML string.
            </summary>
        </member>
        <member name="M:ModApi.Ui.BuildUserInterfaceXmlRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.BuildUserInterfaceXmlRequest"/> class.
            </summary>
            <param name="id">The user interface identifier.</param>
            <param name="xml">The XML string.</param>
        </member>
        <member name="P:ModApi.Ui.BuildUserInterfaceXmlRequest.OnLayoutRebuilt">
            <summary>
            Gets the layout rebuilt action.
            </summary>
            <value>
            The layout rebuilt action.
            </value>
        </member>
        <member name="P:ModApi.Ui.BuildUserInterfaceXmlRequest.UserInterfaceId">
            <summary>
            Gets the user interface identifier.
            </summary>
            <value>
            The user interface identifier.
            </value>
        </member>
        <member name="P:ModApi.Ui.BuildUserInterfaceXmlRequest.Xml">
            <summary>
            Gets or sets the XML text string.
            </summary>
            <value>
            The XML text string.
            </value>
        </member>
        <member name="P:ModApi.Ui.BuildUserInterfaceXmlRequest.XmlDocument">
            <summary>
            Gets or sets the XML document.
            </summary>
            <value>
            The XML document.
            </value>
        </member>
        <member name="M:ModApi.Ui.BuildUserInterfaceXmlRequest.CreateFromResource(System.String,System.String)">
            <summary>
            Creates a user interface XML request for the XML at the specified path in the resource database.
            </summary>
            <param name="xmlPath">The path of the XML in the resource database.</param>
            <param name="userInterfaceId">The user interface identifier.</param>
            <returns>The requested request object.</returns>
        </member>
        <member name="M:ModApi.Ui.BuildUserInterfaceXmlRequest.CreateFromXml(System.String,System.String)">
            <summary>
            Creates a user interface XML request for the specified XML.
            </summary>
            <param name="xml">The XML for which to create the request.</param>
            <param name="userInterfaceId">The user interface identifier.</param>
            <returns>The requested request object.</returns>
        </member>
        <member name="M:ModApi.Ui.BuildUserInterfaceXmlRequest.AddOnLayoutRebuiltAction(System.Action{ModApi.Ui.IXmlLayoutController})">
            <summary>
            Adds an action to execute when the layout for the UI created by this request is rebuilt.
            </summary>
            <param name="onLayoutRebuilt">The layout rebuilt action to execute.</param>
        </member>
        <member name="T:ModApi.Ui.DialogDelegate">
            <summary>
            Delegate used by the dialog class.
            </summary>
            <param name="dialog">The dialog.</param>
        </member>
        <member name="T:ModApi.Ui.IDialog">
            <summary>
            Interface for a dialog.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IDialog.Closed">
            <summary>
            Occurs when the dialog is closed.
            </summary>
        </member>
        <member name="P:ModApi.Ui.IDialog.AllowCameraZoom">
            <summary>
            Gets a value indicating whether the dialog allows the game camera to zoom while this dialog is open.
            </summary>
            <value>
              <c>true</c> if camera zoom is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Ui.IDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="T:ModApi.Ui.DialogScript">
            <summary>
            Base class for dialogs in the game.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="E:ModApi.Ui.DialogScript.Closed">
            <summary>
            Occurs when the dialog is closed.
            </summary>
        </member>
        <member name="P:ModApi.Ui.DialogScript.AllowCameraZoom">
            <summary>
            Gets or sets a value indicating whether the dialog allows the game camera to zoom while this dialog is open.
            </summary>
            <value>
              <c>true</c> if camera zoom is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.DialogScript.FadeInUponStart">
            <summary>
            Gets or sets a value indicating whether the dialog should fade in when the dialog starts, or to show immediately.
            </summary>
            <value>
              <c>true</c> if the dialog should fade in when the dialog starts; otherwise, <c>false</c> to show immediately.
            </value>
        </member>
        <member name="P:ModApi.Ui.DialogScript.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="M:ModApi.Ui.DialogScript.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:ModApi.Ui.DialogScript.Start">
            <summary>
            Unity Start method.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Events.InspectorPanelLoadedEventArgs">
            <summary>
            An event that is raised when an inspector panel is loaded.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Ui.Events.InspectorPanelLoadedEventArgs.#ctor(ModApi.Ui.Inspector.IInspectorPanel,ModApi.Ui.Inspector.InspectorModel)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Events.InspectorPanelLoadedEventArgs"/> class.
            </summary>
            <param name="panel">The panel that was created.</param>
            <param name="model">The model for the inspector panel.</param>
        </member>
        <member name="P:ModApi.Ui.Events.InspectorPanelLoadedEventArgs.Model">
            <summary>
            Gets the model for the inspector panel.
            </summary>
            <value>
            The model for the inspector panel.
            </value>
        </member>
        <member name="P:ModApi.Ui.Events.InspectorPanelLoadedEventArgs.Panel">
            <summary>
            Gets the panel that was created.
            </summary>
            <value>
            The panel that was created.
            </value>
        </member>
        <member name="T:ModApi.Ui.Events.InspectorPanelLoadingEventArgs">
            <summary>
            An event that is raised when an inspector panel is loading.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Ui.Events.InspectorPanelLoadingEventArgs.#ctor(ModApi.Ui.Inspector.InspectorModel,ModApi.Ui.Inspector.InspectorPanelCreationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Events.InspectorPanelLoadingEventArgs"/> class.
            </summary>
            <param name="model">The model for the inspector panel.</param>
            <param name="creationInfo">The creation information for the inspector panel.</param>
        </member>
        <member name="P:ModApi.Ui.Events.InspectorPanelLoadingEventArgs.CreationInfo">
            <summary>
            Gets the creation information for the inspector panel.
            </summary>
            <value>
            The creation information for the inspector panel.
            </value>
        </member>
        <member name="P:ModApi.Ui.Events.InspectorPanelLoadingEventArgs.Model">
            <summary>
            Gets the model for the inspector panel.
            </summary>
            <value>
            The model for the inspector panel.
            </value>
        </member>
        <member name="T:ModApi.Ui.Events.UserInterfaceLoadedEventArgs">
            <summary>
            Event arguments for an event that is raised when a user interface is loaded.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Ui.Events.UserInterfaceLoadedEventArgs.#ctor(System.String,ModApi.Ui.IXmlLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Events.UserInterfaceLoadedEventArgs"/> class.
            </summary>
            <param name="userInterfaceId">The user interface identifier.</param>
            <param name="xmlLayout">The XmlLayout object associated with the user interface.</param>
        </member>
        <member name="P:ModApi.Ui.Events.UserInterfaceLoadedEventArgs.UserInterfaceId">
            <summary>
            Gets the user interface identifier.
            </summary>
            <value>
            The user interface identifier.
            </value>
        </member>
        <member name="P:ModApi.Ui.Events.UserInterfaceLoadedEventArgs.XmlLayout">
            <summary>
            Gets the XmlLayout object associated with the user interface.
            </summary>
            <value>
            The XmlLayout object associated with the user interface.
            </value>
        </member>
        <member name="T:ModApi.Ui.Events.UserInterfaceLoadingEventArgs">
            <summary>
            Event arguments for an event that is raised when a user interface is loading.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:ModApi.Ui.Events.UserInterfaceLoadingEventArgs.#ctor(ModApi.Ui.BuildUserInterfaceXmlRequest,ModApi.Ui.IXmlLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Events.UserInterfaceLoadingEventArgs"/> class.
            </summary>
            <param name="buildXmlRequest">The request object for the XML based user interface being loaded.</param>
            <param name="xmlLayout">The XmlLayout object associated with the user interface.</param>
        </member>
        <member name="P:ModApi.Ui.Events.UserInterfaceLoadingEventArgs.BuildXmlRequest">
            <summary>
            Gets the request object for the XML based user interface being loaded.
            This can be used to change the XML that defines the interface prior to being loaded.
            </summary>
            <value>
            The request object for the XML based user interface being loaded.
            This can be used to change the XML that defines the interface prior to being loaded.
            </value>
        </member>
        <member name="P:ModApi.Ui.Events.UserInterfaceLoadingEventArgs.UserInterfaceId">
            <summary>
            Gets the user interface identifier.
            </summary>
            <value>
            The user interface identifier.
            </value>
        </member>
        <member name="P:ModApi.Ui.Events.UserInterfaceLoadingEventArgs.XmlLayout">
            <summary>
            Gets the XmlLayout object associated with the user interface.
            </summary>
            <value>
            The XmlLayout object associated with the user interface.
            </value>
        </member>
        <member name="T:ModApi.Ui.FlyoutDelegate">
            <summary>
            The delegate for flyout events.
            </summary>
            <param name="flyout">The flyout associated with the event.</param>
        </member>
        <member name="T:ModApi.Ui.IFlyout">
            <summary>
            An interface for a flyout user interface element.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IFlyout.Closed">
            <summary>
            Occurs when the flyout is closed.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IFlyout.Closing">
            <summary>
            Occurs when the flyout is closing.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IFlyout.Opened">
            <summary>
            Occurs when the flyout is opened.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IFlyout.Opening">
            <summary>
            Occurs when the flyout is opening.
            </summary>
        </member>
        <member name="P:ModApi.Ui.IFlyout.IsHidden">
            <summary>
            Gets or sets a value indicating whether this flyout is hidden.
            </summary>
            <value>
              <c>true</c> if this flyout is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IFlyout.IsOpen">
            <summary>
            Gets a value indicating whether this flyout is open.
            </summary>
            <value>
              <c>true</c> if this flyout is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IFlyout.Title">
            <summary>
            Gets or sets the title of the flyout.
            </summary>
            <value>
            The title of the flyout.
            </value>
        </member>
        <member name="P:ModApi.Ui.IFlyout.Transform">
            <summary>
            Gets the root transform component of the flyout.
            </summary>
            <value>
            The root transform component of the flyout.
            </value>
        </member>
        <member name="P:ModApi.Ui.IFlyout.Width">
            <summary>
            Gets or sets the width of the flyout.
            </summary>
            <value>
            The width of the flyout.
            </value>
        </member>
        <member name="M:ModApi.Ui.IFlyout.Close(System.Boolean)">
            <summary>
            Closes this flyout.
            </summary>
            <param name="immediate">If set to <c>true</c>, the flyout will be closed immediately without animation.</param>
        </member>
        <member name="M:ModApi.Ui.IFlyout.Open(System.Boolean)">
            <summary>
            Opens this flyout.
            </summary>
            <param name="immediate">If set to <c>true</c>, the flyout will be opened immediately without animation.</param>
        </member>
        <member name="T:ModApi.Ui.IListView">
            <summary>
            Interface for a list view.
            </summary>
        </member>
        <member name="T:ModApi.Ui.IListViewModel">
            <summary>
            Interface for a list view model.
            </summary>
        </member>
        <member name="T:ModApi.Ui.IUIResourceDatabase">
            <summary>
            An interface for interacting with the UI system's resource database.
            </summary>
        </member>
        <member name="M:ModApi.Ui.IUIResourceDatabase.AddResource(System.String,UnityEngine.Object)">
            <summary>
            Adds the specified resource to the resource database.
            </summary>
            <param name="path">The path of the resource.</param>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:ModApi.Ui.IUIResourceDatabase.GetResource``1(System.String)">
            <summary>
            Gets the resource at the specified path.
            </summary>
            <typeparam name="T">The type of the resource.</typeparam>
            <param name="path">The path of the resource.</param>
            <returns>The requested resource or <c>null</c> if it could not be found or loaded.</returns>
        </member>
        <member name="T:ModApi.Ui.AnyDialogsOpenChangedHandler">
            <summary>
            Delegate for the <see cref="E:ModApi.Ui.IUserInterface.AnyDialogsOpenChanged"/> event.
            </summary>
            <param name="anyDialogsOpen">If set to <c>true</c>, we now have dialog(s) open, otherwise there a no-longer any dialogs open.</param>
        </member>
        <member name="T:ModApi.Ui.BuildInspectorPanelDelegate">
            <summary>
            A delegate used for the build action when building inspector panels.
            </summary>
            <param name="request">The build request for the inspector panel.</param>
        </member>
        <member name="T:ModApi.Ui.BuildUserInterfaceXmlDelegate">
            <summary>
            A delegate used for the build action when building user interface XML.
            </summary>
            <param name="request">The build request for user interface XML.</param>
        </member>
        <member name="T:ModApi.Ui.IUserInterface">
            <summary>
            Interface for the game user interface.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IUserInterface.AnyDialogsOpenChanged">
            <summary>
            Occurs when <see cref="P:ModApi.Ui.IUserInterface.AnyDialogsOpen"/> has changed.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IUserInterface.InspectorPanelLoaded">
            <summary>
            Occurs when an inspector panel has loaded.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IUserInterface.InspectorPanelLoading">
            <summary>
            Occurs when an inspector panel is loading.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IUserInterface.UserInterfaceLoaded">
            <summary>
            Occurs when an XML-based user interface has loaded.
            </summary>
        </member>
        <member name="E:ModApi.Ui.IUserInterface.UserInterfaceLoading">
            <summary>
            Occurs when an XML-based user interface is loading.
            </summary>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.ActiveDialog">
            <summary>
            Gets the active dialog.
            </summary>
            <value>
            The active dialog.
            </value>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.AnyDialogsOpen">
            <summary>
            Gets a value indicating whether any dialogs are currently open.
            </summary>
            <value>
              <c>true</c> if any dialogs are currently open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.IgnoreKeyboardInputs">
            <summary>
            Gets a value indicating whether keyboard inputs should be ignored
            </summary>
            <value>
              <c>true</c> if keyboard inputs should currently be ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.InspectorPanelsVisible">
            <summary>
            Gets or sets a value indicating whether inspector panels are visible.
            </summary>
            <value>
              <c>true</c> if the inspector panels are visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.IsTextInputFocused">
            <summary>
            Gets a value indicating whether a text field is currently active and
            receiving input from the keyboard.
            </summary>
            <value>
            <c>true</c> if this instance is text input focused; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.ResourceDatabase">
            <summary>
            Gets the resource database for the UI system.
            </summary>
            <value>
            The resource database for the UI system.
            </value>
        </member>
        <member name="P:ModApi.Ui.IUserInterface.Transform">
            <summary>
            Gets the main transform for the user interface for the current scene.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.AddBuildInspectorPanelAction(ModApi.Ui.BuildInspectorPanelDelegate)">
            <summary>
            Subscribes the specified action to inspector panel building for inspector panels of all types.
            This is used to modify the inspector panel model prior to the inspector panel being created.
            </summary>
            <param name="buildAction">The build action to be called when the inspector panel is being built.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.AddBuildInspectorPanelAction(System.String,ModApi.Ui.BuildInspectorPanelDelegate)">
            <summary>
            Subscribes the specified action to inspector panel building for inspector panel with the specified ID.
            This is used to modify the inspector panel model prior to the inspector panel being created.
            </summary>
            <param name="inspectorId">The inspector panel type identifier.</param>
            <param name="buildAction">The build action to be called when the inspector panel is being built.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.AddBuildUserInterfaceXmlAction(ModApi.Ui.BuildUserInterfaceXmlDelegate)">
            <summary>
            Subscribes the specified action to user interface XML building for all user interfaces.
            This is used to change or replace the XML used to build a user interface prior to the user interface being loaded.
            </summary>
            <param name="buildAction">The build action to be called when the interface is being built.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.AddBuildUserInterfaceXmlAction(System.String,ModApi.Ui.BuildUserInterfaceXmlDelegate)">
            <summary>
            Subscribes the specified action to user interface XML building for user interfaces with the specified ID.
            This is used to change or replace the XML used to build a user interface prior to the user interface being loaded.
            </summary>
            <param name="userInterfaceId">The user interface identifier.</param>
            <param name="buildAction">The build action to be called when the interface is being built.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromRequest(ModApi.Ui.BuildUserInterfaceXmlRequest,ModApi.Ui.IXmlLayout)">
            <summary>
            Builds a user interface based on the specified request.
            </summary>
            <param name="request">The request for which to build the user interface.</param>
            <param name="xmlLayout">The XML layout object associated with the user interface being built.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromRequest(ModApi.Ui.BuildUserInterfaceXmlRequest,UnityEngine.GameObject,System.Object,System.Action{ModApi.Ui.IXmlLayoutController})">
            <summary>
            Builds the XML layout user interface from the specified XML request and attaches it to the specified game object.
            The Xml Layout controller will also be created and setup to send events to the event target object and call the
            specified action when the layout is rebuilt.
            </summary>
            <param name="request">The request for which to build the user interface.</param>
            <param name="obj">The game object on which to create the XmlLayout and XmlLayoutController.</param>
            <param name="eventTarget">The object that will receive events for the controller.</param>
            <param name="layoutRebuiltAction">The action to execute when the layout is rebuilt.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromResource(System.String,ModApi.Ui.IXmlLayout)">
            <summary>
            Builds a user interface from an XML file in the resource database at the specified path.
            </summary>
            <param name="xmlPath">The path of the XML in the resource database from which to build the user interface.</param>
            <param name="xmlLayout">The XML layout object associated with the user interface to build.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromResource(System.String,UnityEngine.MonoBehaviour,System.Action{ModApi.Ui.IXmlLayoutController})">
            <summary>
            Builds the XML layout user interface from the specified XML resource and attaches it to the game object containing the specified script.
            The Xml Layout controller will also be created and setup to send events to the script and call the specified action when the layout is rebuilt.
            </summary>
            <param name="xmlPath">The path of the XML in the resource database from which to build the user interface.</param>
            <param name="script">The script that will handle events from the Xml Layout.</param>
            <param name="layoutRebuiltAction">The action to execute when the layout is rebuilt.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromResource``1(System.String,System.Action{``0,ModApi.Ui.IXmlLayoutController},UnityEngine.Transform)">
            <summary>
            Builds the XML layout user interface from the specified XML resource.
            This creates a new game object with the specified script on the specified transform or, if <c>null</c>, at the root of the main canvas for the current scene.
            The Xml Layout controller will also be created and setup to send events to the script and call the specified action when the layout is rebuilt.
            </summary>
            <typeparam name="T">The type of script to use as the root script for the user interface.</typeparam>
            <param name="xmlPath">The path of the XML in the resource database from which to build the user interface.</param>
            <param name="layoutRebuiltAction">The action to execute when the layout is rebuilt.</param>
            <param name="parentTransform">The parent transform for the user interface. If <c>null</c>, this will attempt to use main canvas for the scene as its parent.</param>
            <returns>The main script for the user interface as specified by the type parameter.</returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromXml``1(System.String,System.String,System.Action{``0,ModApi.Ui.IXmlLayoutController},UnityEngine.Transform)">
            <summary>
            Builds the XML layout user interface from the specified XML resource.
            This creates a new game object with the specified script on the specified transform or, if <c>null</c>, at the root of the main canvas for the current scene.
            The Xml Layout controller will also be created and setup to send events to the script and call the specified action when the layout is rebuilt.
            </summary>
            <typeparam name="T">The type of script to use as the root script for the user interface.</typeparam>
            <param name="xml">The XML defining the UI.</param>
            <param name="userInterfaceId">The user interface identifier.</param>
            <param name="layoutRebuiltAction">The action to execute when the layout is rebuilt.</param>
            <param name="parentTransform">The parent transform for the user interface. If <c>null</c>, this will attempt to use main canvas for the scene as its parent.</param>
            <returns>The main script for the user interface as specified by the type parameter.</returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromXml(System.String,System.String,ModApi.Ui.IXmlLayout)">
            <summary>
            Builds a user interface from the specified XML.
            </summary>
            <param name="xml">The XML from which to build the user interface.</param>
            <param name="userInterfaceId">The user interface identifier.</param>
            <param name="xmlLayout">The XML layout object associated with the user interface to build.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.BuildUserInterfaceFromXml(System.String,System.String,UnityEngine.MonoBehaviour,System.Action{ModApi.Ui.IXmlLayoutController})">
            <summary>
            Builds the XML layout user interface from the specified XML and attaches it to the game object containing the specified script.
            The Xml Layout controller will also be created and setup to send events to the script and call the specified action when the layout is rebuilt.
            </summary>
            <param name="xml">The XML defining the UI.</param>
            <param name="userInterfaceId">The user interface identifier.</param>
            <param name="script">The script that will handle events from the Xml Layout.</param>
            <param name="layoutRebuiltAction">The action to execute when the layout is rebuilt.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateColorPicker(System.Boolean,UnityEngine.Color,System.Action{UnityEngine.Color},System.Action{UnityEngine.Color})">
            <summary>
            Creates a color picker dialog
            </summary>
            <param name="allowTransparency">If set to <c>true</c> then allow transparency options for the color selection.</param>
            <param name="initialColor">The color to select initially.</param>
            <param name="onComplete">The action called when the user clicks okay.</param>
            <param name="onPreviewColorChanged">the action called when the preview color changes.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateDialog``1(UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Creates the dialog and adds the specified dialog script before returning.
            </summary>
            <typeparam name="T">The dialog type to create.</typeparam>
            <param name="parent">The parent transform for the dialog.</param>
            <param name="registerWithUserInterface">If set to <c>true</c> then the dialog will be registered with the user interface.</param>
            <param name="fadeIn">If set to <c>true</c> the dialog will fade in upon starting, otherwise <c>false</c> to immediately show it.</param>
            <returns>
            The dialog script.
            </returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateDialog``1(System.String,UnityEngine.Transform,System.Action{``0,ModApi.Ui.IXmlLayoutController},System.Action{``0},System.Boolean)">
            <summary>
            Creates a dialog based on the XML resource at the specified path and using the specified dialog script type.
            This builds the dialog based on the specified XML and automatically registers the dialog script with the user interface.
            </summary>
            <typeparam name="T">The dialog type to create.</typeparam>
            <param name="xmlResourcePath">The XML resource path.</param>
            <param name="parent">The parent transform for the dialog.</param>
            <param name="layoutRebuiltAction">The action to execute when the layout is rebuilt.</param>
            <param name="initializeAction">The one-time action that is executed after the dialog is created but before the user interface is built.</param>
            <param name="fadeIn">If set to <c>true</c> the dialog will fade in upon starting, otherwise <c>false</c> to immediately show it.</param>
            <returns>
            The dialog script.
            </returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateErrorDialog(System.String,System.Action,UnityEngine.Transform)">
            <summary>
            Creates the error message dialog.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="action">The action to invoke after the user clicks the button (or <c>null</c> for no action).</param>
            <param name="parent">The parent transform. If null is passed in, the root canvas with the highest Order in Layer will be used.</param>
            <returns>The message dialog.</returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateInputDialog(UnityEngine.Transform)">
            <summary>
            Creates the input dialog.
            </summary>
            <param name="parent">The parent transform. If null is passed in, the root canvas with the highest Order in Layer will be used.</param>
            <returns>
            The input dialog script.
            </returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateInspectorPanel(ModApi.Ui.Inspector.InspectorModel,ModApi.Ui.Inspector.InspectorPanelCreationInfo)">
            <summary>
            Creates the inspector panel from the model.
            </summary>
            <param name="model">The model.</param>
            <param name="creationInfo">Optional information used to create the inspector panel. If null is provided, then default values will be used.</param>
            <returns>
            The inspector panel.
            </returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateListView(ModApi.Ui.IListViewModel)">
            <summary>
            Creates the ListView using the specified view model.
            </summary>
            <param name="viewModel">The list view model.</param>
            <returns>The list view.</returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateMessageDialog(System.String,System.Action,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates the message dialog.
            </summary>
            <param name="message">The message.</param>
            <param name="action">The action to invoke after the user clicks the button (or <c>null</c> for no action).</param>
            <param name="parent">The parent transform. If null is passed in, the root canvas with the highest Order in Layer will be used.</param>
            <param name="fadeIn">If set to <c>true</c> the dialog will fade in upon starting, otherwise <c>false</c> to immediately show it.</param>
            <returns>
            The message dialog script.
            </returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.CreateMessageDialog(ModApi.Ui.MessageDialogType,UnityEngine.Transform,System.Boolean)">
            <summary>
            Creates the message dialog.
            </summary>
            <param name="type">The type of the message dialog.</param>
            <param name="parent">The parent transform. If null is passed in, the root canvas with the highest Order in Layer will be used.</param>
            <param name="fadeIn">If set to <c>true</c> the dialog will fade in upon starting, otherwise <c>false</c> to immediately show it.</param>
            <returns>
            The message dialog.
            </returns>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.RegisterDialog(ModApi.Ui.IDialog)">
            <summary>
            Registers the dialog with the user interface.
            </summary>
            <param name="dialog">The dialog.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.RemoveBuildInspectorPanelAction(ModApi.Ui.BuildInspectorPanelDelegate)">
            <summary>
            Unsubscribes the specified action from inspector panel building for all inspector panel types.
            </summary>
            <param name="buildAction">The build action to be unsubscribed.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.RemoveBuildInspectorPanelAction(System.String,ModApi.Ui.BuildInspectorPanelDelegate)">
            <summary>
            Unsubscribes the specified action from inspector panel building for inspector panels with the specified ID.
            </summary>
            <param name="inspectorId">The inspector panel type identifier.</param>
            <param name="buildAction">The build action to be unsubscribed.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.RemoveBuildUserInterfaceXmlAction(ModApi.Ui.BuildUserInterfaceXmlDelegate)">
            <summary>
            Unsubscribes the specified action from user interface XML building for all user interfaces.
            </summary>
            <param name="buildAction">The build action to be unsubscribed.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.RemoveBuildUserInterfaceXmlAction(System.String,ModApi.Ui.BuildUserInterfaceXmlDelegate)">
            <summary>
            Unsubscribes the specified action from user interface XML building for user interfaces with the specified ID.
            </summary>
            <param name="userInterfaceId">The user interface identifier.</param>
            <param name="buildAction">The build action to be unsubscribed.</param>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.ToggleFps">
            <summary>
            Toggles the FPS display.
            </summary>
        </member>
        <member name="M:ModApi.Ui.IUserInterface.UnregisterDialog(ModApi.Ui.IDialog)">
            <summary>
            Un-registers the dialog from the user interface.
            </summary>
            <param name="dialog">The dialog.</param>
        </member>
        <member name="T:ModApi.Ui.IXmlElement">
            <summary>
            An interface for an XmlElement which is part of the XmlLayout UI system.
            </summary>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.AllowDragging">
            <summary>
            Gets or sets a value indicating whether this element allows dragging.
            </summary>
            <value>
              <c>true</c> if this element allows dragging; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.AnimationDuration">
            <summary>
            Gets or sets the duration of the animation for the element.
            </summary>
            <value>
            The duration of the animation for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.CanvasGroup">
            <summary>
            Gets the canvas group for this element.
            </summary>
            <value>
            The canvas group for this element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.DefaultOpacity">
            <summary>
            Gets or sets the default opacity for the element.
            </summary>
            <value>
            The default opacity for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.EventTrigger">
            <summary>
            Gets the event trigger for the element.
            </summary>
            <value>
            The event trigger for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.GameObject">
            <summary>
            Gets the game object on which this element resides.
            </summary>
            <value>
            The game object on which this element resides.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.HideAnimationDelay">
            <summary>
            Gets or sets the hide animation delay for the element.
            </summary>
            <value>
            The hide animation delay for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.Id">
            <summary>
            Gets the identifier of the element.
            </summary>
            <value>
            The identifier of the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.InternalId">
            <summary>
            Gets the internal identifier of the element.
            </summary>
            <value>
            The internal identifier of the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.IsAnimating">
            <summary>
            Gets a value indicating whether this element is animating.
            </summary>
            <value>
              <c>true</c> if this element is animating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.IsDropReceiver">
            <summary>
            Gets or sets a value indicating whether this element is drop receiver.
            </summary>
            <value>
              <c>true</c> if this element is drop receiver; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.OnClickSound">
            <summary>
            Gets or sets the on click sound for the element.
            </summary>
            <value>
            The on click sound for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.OnHideSound">
            <summary>
            Gets or sets the on hide sound for the element.
            </summary>
            <value>
            The on hide sound for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.OnMouseEnterSound">
            <summary>
            Gets or sets the on mouse enter sound for the element.
            </summary>
            <value>
            The on mouse enter sound for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.OnMouseExitSound">
            <summary>
            Gets or sets the on mouse exit sound for the element.
            </summary>
            <value>
            The on mouse exit sound for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.OnShowSound">
            <summary>
            Gets or sets the on show sound for the element.
            </summary>
            <value>
            The on show sound for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.RectTransform">
            <summary>
            Gets the rect transform associated with this XML element.
            </summary>
            <value>
            The rect transform associated with this XML element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.RestrictDraggingToParentBounds">
            <summary>
            Gets or sets a value indicating whether this element is able to be dragged beyond the confines of its parent.
            </summary>
            <value>
              <c>true</c> if this element cannot be dragged beyond the confines of its parent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.ReturnToOriginalPositionWhenReleased">
            <summary>
            Gets or sets a value indicating whether this element returns to its original position when dragging is released.
            </summary>
            <value>
              <c>true</c> if this element returns to its original position when dragging is released; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.ShowAnimationDelay">
            <summary>
            Gets or sets the show animation delay for the element.
            </summary>
            <value>
            The show animation delay for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.Tooltip">
            <summary>
            Gets or sets the tooltip for the element.
            </summary>
            <value>
            The tooltip for the element.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.Visible">
            <summary>
            Gets or sets a value indicating whether this element is visible.
            </summary>
            <value>
              <c>true</c> if this element is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlElement.XmlLayout">
            <summary>
            Gets the XML layout instance associated with this XML element.
            </summary>
            <value>
            The XML layout instance associated with this XML element.
            </value>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddChildElement(ModApi.Ui.IXmlElement,System.Boolean)">
            <summary>
            Add a child XmlElement to this XmlElement
            </summary>
            <param name="child">The child element to add.</param>
            <param name="adjustRectTransform">If set to <c>true</c> the rect transform will be adjusted.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddClass(System.String)">
            <summary>
            Add the specified class to this element.
            </summary>
            <param name="name">The class to be added.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnBeginDragEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on begin drag event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnClickEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on click event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnDragEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on drag event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnElementDroppedEvent(System.Action{ModApi.Ui.IXmlElement,ModApi.Ui.IXmlElement},System.Boolean)">
            <summary>
            Adds an on element dropped event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnEndDragEvent(System.Action,System.Boolean)">
            <summary>
            Adds ab on end drag event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnHideEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on hide event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnMouseDownEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on mouse down event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnMouseEnterEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on mouse enter event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnMouseExitEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on mouse exit event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnMouseUpEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on mouse up event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnShowEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on show event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.AddOnSubmitEvent(System.Action,System.Boolean)">
            <summary>
            Adds an on submit event.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="clearExisting">If set to <c>true</c>, existing events will be cleared.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.ApplyAttributes">
            <summary>
            Applies the elements current set of attributes.
            </summary>
            <returns>This XmlElement.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.GetAttribute(System.String,System.String)">
            <summary>
            Get the value of the specified attribute.
            </summary>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">If the attribute is not set, return this value. (Default = null)</param>
            <returns>The value of the requested attribute.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.GetChildElementsWithClass(System.String)">
            <summary>
            Get a list of child elements with the specified class defined.
            </summary>
            <param name="name">The name of the class.</param>
            <returns>The list of child elements with the specified class defined.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.GetElementByInternalId(System.String)">
            <summary>
            Retrieve a child XmlElement by its internalId.
            </summary>
            <param name="internalId">The internal id of the element to get.</param>
            <returns>The requested XmlElement or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.GetElementByInternalId``1(System.String)">
            <summary>
            Get a child XmlElement by its internalId (and call GetComponent to retrieve the desired component).
            </summary>
            <typeparam name="T">The type of the component to get.</typeparam>
            <param name="internalId">The internal id of the element to get.</param>
            <returns>The requested component on the requested XmlElement or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.GetValue">
            <summary>
            Get the value of this XmlElement.
            Returns <c>null</c> if this element doesn't have a GetValue implementation.
            </summary>
            <returns>The value of this XmlElement or <c>null</c>.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.HasAttribute(System.String)">
            <summary>
            Returns <c>true</c> if this element has the specified attribute defined (regardless of its source).
            </summary>
            <param name="name">The name of the attribute to check.</param>
            <returns><c>true</c> if this element has the specified attribute defined (regardless of its source); otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.HasClass(System.String)">
            <summary>
            Gets a value indicating whether this XmlElement has the specific class?
            </summary>
            <param name="name">The name of the class.</param>
            <returns><c>true</c> if this element has the specified class; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.Hide(System.Action,System.Boolean)">
            <summary>
            Hide this XmlElement and trigger the hide animation if necessary.
            </summary>
            <param name="onCompleteCallback">Specifies an Action to be called after this XmlElement is hidden (after any animation is completed).</param>
            <param name="forceEvenIfNotVisible">If set to <c>true</c>, the show will be forced, even if the element is already hidden.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.PlaySound(UnityEngine.AudioClip)">
            <summary>
            Plays the sound.
            </summary>
            <param name="sound">The sound to play.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.PlaySoundOneShot(UnityEngine.AudioClip)">
            <summary>
            Plays the sound as a one shot.
            </summary>
            <param name="sound">The sound to play.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.RemoveAttribute(System.String)">
            <summary>
            Remove the specified attribute.
            </summary>
            <param name="name">The name of the attribute to remove.</param>
            <returns>This XmlElement.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.RemoveChildElement(ModApi.Ui.IXmlElement,System.Boolean)">
            <summary>
            Break the link between a child element and this element
            </summary>
            <param name="child">The child XmlElement.</param>
            <param name="destroyChild">If this is set to <c>true</c>, then the specified child element will be destroyed (removed from the scene entirely).</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.RemoveClass(System.String)">
            <summary>
            Remove the specified class from this element.
            </summary>
            <param name="name">The class to be removed.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.SetAndApplyAttribute(System.String,System.String)">
            <summary>
            Convenience method to set and apply a single attribute immediately.
            Use this in place of calling ApplyAttributes() when you wish to set a single attribute
            </summary>
            <param name="name">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.SetAttribute(System.String,System.String)">
            <summary>
            Set the value of the specified attribute.
            The new value will not be applied until ApplyAttributes() is called.
            </summary>
            <param name="name">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
            <returns>This XmlElement.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.SetAudioMixerGroup(UnityEngine.AudioSource,System.String)">
            <summary>
            Sets the audio mixer group.
            </summary>
            <param name="audioSource">The audio source.</param>
            <param name="path">The audio mixer resource path.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.SetClass(System.String[])">
            <summary>
            Set the class(es) of this element, replacing any existing classes.
            </summary>
            <param name="newClasses">The new classes for the element.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.SetPivot(UnityEngine.Vector2,UnityEngine.RectTransform)">
            <summary>
            Sets the pivot.
            </summary>
            <param name="pivot">The pivot point.</param>
            <param name="rectTransform">The rect transform.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlElement.Show(System.Action,System.Boolean)">
            <summary>
            Show this XmlElement and trigger its show animation (if it has one set).
            </summary>
            <param name="onCompleteCallback">Specifies an Action to be called after this XmlElement is shown (after any animation is completed).</param>
            <param name="forceEvenIfVisible">If set to <c>true</c>, the show will be forced, even if the element is already visible.</param>
        </member>
        <member name="T:ModApi.Ui.IXmlLayout">
            <summary>
            An interface for XmlLayout, part of the XML based UI framework.
            </summary>
        </member>
        <member name="P:ModApi.Ui.IXmlLayout.GameObject">
            <summary>
            Gets the game object on which the XmlLayout component resides.
            </summary>
            <value>
            The game object on which the XmlLayout component resides.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlLayout.ParentLayout">
            <summary>
            Gets the parent layout (if any).
            </summary>
            <value>
            The parent layout (if any).
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlLayout.Xml">
            <summary>
            Gets or sets the XML defining the UI.
            Changes will not take effect until the UI is rebuilt.
            </summary>
            <value>
            The XML defining the UI.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlLayout.XmlLayoutController">
            <summary>
            Gets the XML layout controller reference.
            </summary>
            <value>
            The XML layout controller reference.
            </value>
        </member>
        <member name="M:ModApi.Ui.IXmlLayout.GetElementById``1(System.String)">
            <summary>
            Returns the component of a specific element within this XmlLayout.
            Note 1: The element must have the id attribute set in order to use this function.
            Note 2 : The component must exist on the target element.
            </summary>
            <typeparam name="T">The type of the element to get.</typeparam>
            <param name="id">The id of the element to get.</param>
            <returns>The requested element or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlLayout.GetElementById(System.String)">
            <summary>
            Return a specific element within this XmlLayout
            Note: the element must have the id attribute set in order to use this function
            </summary>
            <param name="id">The id of the element to get.</param>
            <returns>The requested element or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlLayout.GetElementId(UnityEngine.RectTransform)">
            <summary>
            Get the string ID (if any) of a RectTRansform element in this XmlLayout
            </summary>
            <param name="element">The element for which to get the ID.</param>
            <returns>The requested ID or <c>null</c> if it could not be found.</returns>
        </member>
        <member name="M:ModApi.Ui.IXmlLayout.Hide(System.Action,System.Boolean)">
            <summary>
            Hides the UI.
            </summary>
            <param name="onCompleteCallback">The on complete callback.</param>
            <param name="forceEvenIfNotVisible">
            if set to <c>true</c> then force this call even if Xml Layout is confused about whether or not the
            layout is visible.
            </param>
        </member>
        <member name="M:ModApi.Ui.IXmlLayout.RebuildLayout(System.Boolean,System.Boolean)">
            <summary>
            Clear the contents of this XmlLayout and rebuild it (using the Xml value)
            Call this after changing the Xml value for changes to take effect
            </summary>
            <param name="forceEvenIfXmlUnchanged">If set to <c>true</c>, the rebuild will be forced even if the XML is unchanged.</param>
            <param name="throwExceptionIfXmlIsInvalid">If set to <c>true</c>, an exception will be thrown if the XML is invalid.</param>
        </member>
        <member name="M:ModApi.Ui.IXmlLayout.Show(System.Action,System.Boolean)">
            <summary>
            Shows the UI.
            </summary>
            <param name="onCompleteCallback">The on complete callback.</param>
            <param name="forceEvenIfVisible">
            if set to <c>true</c> then force this call even if Xml Layout is confused about whether or not the
            layout is visible.
            </param>
        </member>
        <member name="T:ModApi.Ui.IXmlLayoutController">
            <summary>
            An interface for XmlLayoutController, part of the XML based UI framework.
            </summary>
        </member>
        <member name="P:ModApi.Ui.IXmlLayoutController.LayoutRebuildInProgress">
            <summary>
            Gets or sets a value indicating whether a layout rebuild is currently in progress.
            </summary>
            <value>
              <c>true</c> if a layout rebuild is currently in progress; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlLayoutController.OnLayoutRebuilt">
            <summary>
            Gets or sets the on layout rebuilt action.
            </summary>
            <value>
            The on layout rebuilt action.
            </value>
        </member>
        <member name="P:ModApi.Ui.IXmlLayoutController.XmlLayout">
            <summary>
            Gets the XmlLayout reference.
            </summary>
            <value>
            The XmlLayout reference.
            </value>
        </member>
        <member name="T:ModApi.Ui.InputDialogResult">
            <summary>
            An enumeration defining the results of a input dialog.
            </summary>
        </member>
        <member name="F:ModApi.Ui.InputDialogResult.Okay">
            <summary>
            The okay button was clicked.
            </summary>
        </member>
        <member name="F:ModApi.Ui.InputDialogResult.Cancel">
            <summary>
            The cancel button was clicked.
            </summary>
        </member>
        <member name="T:ModApi.Ui.InputDialogScript">
            <summary>
            Input dialog script.
            </summary>
            <seealso cref="T:ModApi.Ui.DialogScript" />
        </member>
        <member name="T:ModApi.Ui.InputDialogScript.InputDialogDelegate">
            <summary>
            Delegate for input dialog events.
            </summary>
            <param name="inputDialog">The input dialog.</param>
        </member>
        <member name="E:ModApi.Ui.InputDialogScript.CancelClicked">
            <summary>
            Occurs when cancel button clicked.
            </summary>
        </member>
        <member name="E:ModApi.Ui.InputDialogScript.OkayClicked">
            <summary>
            Occurs when okay button clicked.
            </summary>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.CancelButtonText">
            <summary>
            Gets or sets the cancel button text.
            </summary>
            <value>
            The cancel button text.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.InputPlaceholderText">
            <summary>
            Gets or sets the input placeholder text.
            </summary>
            <value>
            The input placeholder text.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.InputText">
            <summary>
            Gets or sets the input text.
            </summary>
            <value>
            The input text.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.InvalidCharacters">
            <summary>
            Gets or sets the characters that will not be allowed to be entered into this
            input dialog.
            </summary>
            <value>
            The invalid characters.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.MaxLength">
            <summary>
            Gets or sets the maximum length of the allowed input string.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.MessageText">
            <summary>
            Gets or sets the message text.
            </summary>
            <value>
            The message text.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.OkayButtonText">
            <summary>
            Gets or sets the okay button text.
            </summary>
            <value>
            The okay button text.
            </value>
        </member>
        <member name="P:ModApi.Ui.InputDialogScript.Result">
            <summary>
            Gets or sets the result of the input dialog.
            </summary>
            <value>The result of the input dialog.</value>
        </member>
        <member name="M:ModApi.Ui.InputDialogScript.WaitForResult">
            <summary>
            Returns a coroutine yield instruction that waits until the dialog has a result (the user has clicked a button);
            </summary>
            <returns>The coroutine yield instruction that waits until the dialog has a result.</returns>
        </member>
        <member name="M:ModApi.Ui.InputDialogScript.RaiseCancelClickedEvent">
            <summary>
            Raises the cancel clicked event.
            </summary>
            <returns>True if the event was handled.</returns>
        </member>
        <member name="M:ModApi.Ui.InputDialogScript.RaiseOkayClickedEvent">
            <summary>
            Raises the okay clicked event.
            </summary>
            <returns>True if the event was handled.</returns>
        </member>
        <member name="T:ModApi.Ui.Inspector.BuildInspectorPanelRequest">
            <summary>
            An object representing a request for building an inspector panel.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.BuildInspectorPanelRequest.#ctor(ModApi.Ui.Inspector.InspectorModel,ModApi.Ui.Inspector.InspectorPanelCreationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.BuildInspectorPanelRequest"/> class.
            </summary>
            <param name="model">The model for the inspector panel.</param>
            <param name="creationInfo">The creation information for the inspector panel.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.BuildInspectorPanelRequest.CreationInfo">
            <summary>
            Gets the creation information for the inspector panel.
            </summary>
            <value>
            The creation information for the inspector panel.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.BuildInspectorPanelRequest.Model">
            <summary>
            Gets the model for the inspector panel.
            </summary>
            <value>
            The model for the inspector panel.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.ButtonModel">
            <summary>
            Model for a button element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.ButtonModel.#ctor(System.Action{ModApi.Ui.Inspector.ItemModel})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ButtonModel" /> class.
            </summary>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.ButtonModel.ButtonStyle">
            <summary>
            The available icon button styles.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ButtonModel.ButtonStyle.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ButtonModel.ButtonStyle.Primary">
            <summary>
            The primary style.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ButtonModel.ButtonStyle.Warning">
            <summary>
            The warning style.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.ButtonModel.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>
            The style.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.ButtonModel.OnClicked">
            <summary>
            Called when the button model is clicked.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.ColorModel">
            <summary>
            Model for a color element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.ColorModel.#ctor(System.String,System.Func{UnityEngine.Color},System.Action{UnityEngine.Color},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ColorModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueChanged">The value changed.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="allowTransparency">if set to <c>true</c> then allow transparency in the selected color.</param>
            <param name="callbackOnPreviewColorChange">A value indicating whether the value changed callback fires when the preview color changes or if it only fires when the okay button is clicked.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.ColorModel.AllowTransparency">
            <summary>
            Gets or sets a value indicating whether to allow transparency in the selected color.
            </summary>
            <value>
              <c>true</c> if transparent options are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ColorModel.CallbackOnPreviewColorChange">
            <summary>
            Gets or sets a value indicating whether the value changed callback fires when the preview color changes or if it only fires when the okay button is clicked.
            </summary>
            <value><c>true</c> if the value changed callback fires when the preview color changes; otherwise, <c>false</c> if it only fires when the okay button is clicked.</value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ColorModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ColorModel.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ColorModel.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>
            The value changed.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ColorModel.ValueGetter">
            <summary>
            Gets or sets the value getter.
            </summary>
            <value>
            The value getter.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.DropdownModel">
            <summary>
            Model for a dropdown element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.DropdownModel._action">
            <summary>
            The action to execute when clicked.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.DropdownModel._valueGetter">
            <summary>
            The value getter
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.DropdownModel.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.DropdownModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.DropdownModel.#ctor(System.String,System.Func{System.String},System.Action{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.DropdownModel"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="action">The action.</param>
            <param name="options">The options.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.DropdownModel.Label">
            <summary>
            Gets or sets the name text.
            </summary>
            <value>
            The name text.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.DropdownModel.Options">
            <summary>
            Gets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.DropdownModel.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.DropdownModel.OnChanged(System.String)">
            <summary>
            Called when the value has changed.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.DropdownModel.InitializeCallbacks(System.Func{System.String},System.Action{System.String})">
            <summary>
            Initializes the callbacks.
            </summary>
            <param name="valueGetter">The value getter.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.EnumDropdownModel`1">
            <summary>
            Dropdown model for w/enumerations.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <seealso cref="T:ModApi.Ui.Inspector.DropdownModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.EnumDropdownModel`1._value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.EnumDropdownModel`1.#ctor(System.String,System.Func{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.EnumDropdownModel`1" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="getter">The getter.</param>
            <param name="tooltip">The tool-tip.</param>
            <exception cref="T:System.ArgumentException">T must be an enum type.</exception>
        </member>
        <member name="T:ModApi.Ui.Inspector.EnumDropdownModel`1.ValueChangedHandler">
            <summary>
            Delegate for the enumeration value changing.
            </summary>
            <param name="newVal">The new value.</param>
            <param name="oldVal">The old value.</param>
        </member>
        <member name="E:ModApi.Ui.Inspector.EnumDropdownModel`1.ValueChanged">
            <summary>
            Occurs when the value has changed..
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.EnumDropdownModel`1.OnValueChanged(`0)">
            <summary>
            Called when the value has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.IGroupModel">
            <summary>
            Interface for a group model.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.IGroupModel.Add``1(``0)">
            <summary>
            Adds the specified item.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="item">The item.</param>
            <returns>The item added.</returns>
        </member>
        <member name="T:ModApi.Ui.Inspector.GroupModel">
            <summary>
            Model for a group of elements in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.GroupModel._items">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.GroupModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.GroupModel" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.GroupModel.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.GroupModel"/> is collapsed.
            </summary>
            <value>
              <c>true</c> if collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.GroupModel.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.GroupModel.Name">
            <summary>
            Gets or sets the name. Null if the group does not have a name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.GroupModel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.GroupModel"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.GroupModel.Add``1(``0)">
            <summary>
            Adds the specified item.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="item">The item.</param>
            <returns>The item added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.GroupModel.AddAndBuild``1(``0)">
            <summary>
            Adds the specified item and returns a builder class to continue building
            the item model fluently without needing to create local variables.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="item">The item.</param>
            <returns>The item added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.GroupModel.Remove(ModApi.Ui.Inspector.ItemModel)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.HeaderModel">
            <summary>
            Header model in an inspector model.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.HeaderModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.HeaderModel"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.HeaderModel.Label">
            <summary>
            Gets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.InspectorPanelDelegate">
            <summary>
            Delegate for inspector panel events.
            </summary>
            <param name="panel">The panel.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.IInspectorPanel">
            <summary>
            Interface for the inspector panel.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.IInspectorPanel.CloseButtonClicked">
            <summary>
            Occurs when the close button is clicked.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.IInspectorPanel.Closed">
            <summary>
            Occurs when the panel is closed.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.IInspectorPanel.Pinned">
            <summary>
            Occurs when the panel is pinned.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.IInspectorPanel.Unpinned">
            <summary>
            Occurs when the panel is unpinned.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.IInspectorPanel.IsPinned">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.IInspectorPanel"/> is pinned.
            </summary>
            <value>
              <c>true</c> if pinned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.IInspectorPanel.Model">
            <summary>
            Gets the inspector panel model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.IInspectorPanel.Position">
            <summary>
            Gets or sets the current position.
            </summary>
            <value>
            The current position.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.IInspectorPanel.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.IInspectorPanel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.IInspectorPanel"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.IInspectorPanel.Close">
            <summary>
            Closes the panel.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.IInspectorPanel.RebuildModelElements">
            <summary>
            Rebuilds the model elements.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.IItemElement">
            <summary>
            Interface for an item element that is created from an item model in the inspector panel.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.IItemElement.GameObject">
            <summary>
            Gets the top level game object for this item.
            </summary>
            <value>
            The top level game object.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.IconButtonModel">
            <summary>
            Model for an icon button element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ButtonModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.IconButtonModel._action">
            <summary>
            The action to execute when clicked.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.IconButtonModel.#ctor(System.String,System.Action{ModApi.Ui.Inspector.IconButtonModel},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.IconButtonModel" /> class.
            </summary>
            <param name="sprite">The sprite.</param>
            <param name="action">The action.</param>
            <param name="tooltip">The tooltip.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.IconButtonModel.Sprite">
            <summary>
            Gets the path to the sprite resource.
            </summary>
            <value>
            The sprite resource path.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.IconButtonModel.OnClicked">
            <summary>
            Called when the button model is clicked.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.IconButtonRowModel">
            <summary>
            Model for a row of icon buttons.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.IconButtonRowModel._buttons">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.IconButtonRowModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.IconButtonRowModel" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.IconButtonRowModel.Buttons">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.IconButtonRowModel.Add(ModApi.Ui.Inspector.IconButtonModel)">
            <summary>
            Adds the specified button.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.IconButtonRowModel.Remove(ModApi.Ui.Inspector.IconButtonModel)">
            <summary>
            Removes the specified button.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.InspectorPanelCreationInfo">
            <summary>
            Information used when creating an inspector panel.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorPanelCreationInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.InspectorPanelCreationInfo"/> class.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.InspectorPanelCreationInfo.InspectorStartPosition">
            <summary>
            The available start positions when creating an inspector.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorPanelCreationInfo.InspectorStartPosition.UpperLeft">
            <summary>
            The upper left of the screen
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorPanelCreationInfo.InspectorStartPosition.UpperRight">
            <summary>
            The upper right of the screen
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorPanelCreationInfo.InspectorStartPosition.Center">
            <summary>
            The center of the screen
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorPanelCreationInfo.AllowVerticalScrolling">
            <summary>
            Gets a value indicating whether vertical scrolling is allowed.
            </summary>
            <value>
              <c>true</c> if [allow vertical scrolling]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorPanelCreationInfo.PanelMaxHeight">
            <summary>
            Gets or sets the maximum height of the panel as a percentage of the screen.
            </summary>
            <value>
            The maximum height of the panel.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorPanelCreationInfo.PanelWidth">
            <summary>
            Gets or sets the width of the panel.
            </summary>
            <value>
            The width of the panel.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorPanelCreationInfo.StartOffset">
            <summary>
            Gets or sets the offset to use from the start position.
            </summary>
            <value>
            The start offset.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorPanelCreationInfo.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
            <value>
            The start position.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.InspectorIds">
            <summary>
            A class containing the inspector IDs.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorIds.FlightView">
            <summary>
            The flight view inspector ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorIds.MapView">
            <summary>
            The map view inspector ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorIds.Part">
            <summary>
            The part inspector ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorIds.PerformanceAnalyzer">
            <summary>
            The performance analyzer inspector ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.InspectorModel">
            <summary>
            Model containing data that can be displayed in an inspector UI.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.InspectorModel._groups">
            <summary>
            The groups
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.InspectorModel" /> class.
            </summary>
            <param name="id">The ID for the inspector model type.
            This should help identify the type of model but does not need to be unique among models of the same type.</param>
            <param name="title">The title.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorModel.Groups">
            <summary>
            Gets the groups.
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorModel.Id">
            <summary>
            Gets the identifier for the inspector model type.
            This should help identify the type of model but does not need to be unique among models of the same type.
            </summary>
            <value>
            The identifier for the inspector model type.
            This should help identify the type of model but does not need to be unique among models of the same type.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorModel.Panel">
            <summary>
            Gets the panel, or null if it has not been created yet.
            </summary>
            <value>
            The panel.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.InspectorModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.Add``1(``0,System.String)">
            <summary>
            Adds the specified model.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="model">The model.</param>
            <param name="groupName">Name of the group, or null if it should not be part of a named group.</param>
            <returns>The ItemModel added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.Add``1(``0)">
            <summary>
            Adds the specified item.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="item">The item.</param>
            <returns>The item added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.AddAndBuild``1(``0)">
            <summary>
            Adds the specified item and returns a builder class to continue building
            the item model fluently without needing to create local variables.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="item">The item.</param>
            <returns>The item added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.AddGroup(ModApi.Ui.Inspector.GroupModel)">
            <summary>
            Adds the group.
            </summary>
            <param name="group">The group.</param>
            <returns>The group model added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.GetOrCreateGroup(System.String)">
            <summary>
            Gets the or create group.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>The group.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.OnInspectorPanelClosed">
            <summary>
            Called when the inspector panel is closed.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.OnInspectorPanelCreated(ModApi.Ui.Inspector.IInspectorPanel)">
            <summary>
            Called when the inspector panel is created.
            </summary>
            <param name="panel">The panel.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.Remove``1(``0,System.String)">
            <summary>
            Removes the specified model.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="model">The model.</param>
            <param name="groupName">Name of the group, or null if it should not be part of a named group.</param>
            <returns>The ItemModel added.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.InspectorModel.RemoveGroup(ModApi.Ui.Inspector.GroupModel)">
            <summary>
            Removes the group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.ElementCreatedHandler">
            <summary>
            Delegate to notify when a <see cref="T:ModApi.Ui.Inspector.ItemModel"/>'s <see cref="T:ModApi.Ui.Inspector.IItemElement"/> has been created.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.ItemModel">
            <summary>
            Base class for elements in an inspector model.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.ItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ItemModel"/> class.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.ItemModel.ElementCreated">
            <summary>
            Occurs when a <see cref="T:ModApi.Ui.Inspector.ItemModel"/>'s <see cref="T:ModApi.Ui.Inspector.IItemElement"/> has been created.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.DetermineVisibility">
            <summary>
            Gets or sets a function which returns whether this item model should be visible or not.
            </summary>
            <value>
            The function to determine whether this item model should be visible or not.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.ItemModel"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.InspectorModel">
            <summary>
            Gets or sets the inspector model that this item is part of.
            </summary>
            <value>
            The inspector model.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.ItemElement">
            <summary>
            Gets the item element, or null if it has not been created yet.
            </summary>
            <value>
            The item element.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.PreferredHeight">
            <summary>
            Gets or sets the preferred height of the element created from this model. If set to
            zero then the default height will be used.
            </summary>
            <value>
            The preferred height.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.UpdateAction">
            <summary>
            Gets or sets an action to perform every update for this item model when it is visible.
            </summary>
            <value>
            The update action.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ItemModel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.ItemModel"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.ItemModel.NotifyElementCreated(ModApi.Ui.Inspector.IItemElement)">
            <summary>
            Called when the item's element has been created.
            </summary>
            <param name="element">The item element.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.ItemModel.NotifyElementDestroyed(ModApi.Ui.Inspector.IItemElement)">
            <summary>
            Called when the item's element has been destroyed.
            </summary>
            <param name="element">The item destroyed.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.ItemModel.Update">
            <summary>
            Updates the model.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.ItemModel.UpdateVisbility">
            <summary>
            Updates the visbility.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.LabelButtonModel">
            <summary>
            Model for a button which has a label to the left of it in addition to the button's label within it.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ButtonModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.LabelButtonModel._action">
            <summary>
            The action to execute when clicked.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.LabelButtonModel.#ctor(System.String,System.Action{ModApi.Ui.Inspector.LabelButtonModel},System.Action{ModApi.Ui.Inspector.ItemModel})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.LabelButtonModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="action">The action.</param>
            <param name="updateAction">The update action.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.LabelButtonModel.ButtonLabel">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.LabelButtonModel.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.LabelButtonModel.OnClicked">
            <summary>
            Called when the button model is clicked.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.ElementAlignment">
            <summary>
            The available alignments.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.Left">
            <summary>
            The left alignment.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.Center">
            <summary>
            The center alignment.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.Right">
            <summary>
            The middle alignment.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.TopLeft">
            <summary>
            The top left
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.TopCenter">
            <summary>
            The top center
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.TopRight">
            <summary>
            The top right
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.BottomLeft">
            <summary>
            The bottom left
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.BottomCenter">
            <summary>
            The bottom center
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ElementAlignment.BottomRight">
            <summary>
            The bottom right
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.LabelModel">
            <summary>
            Model for a label element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.LabelModel.#ctor(System.String,ModApi.Ui.Inspector.ElementAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.LabelModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.LabelModel.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
            <value>
            The alignment.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.LabelModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.LogModel">
            <summary>
            Model for a log element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.LogModel._logs">
            <summary>
            The logs
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.LogModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.LogModel" /> class.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.LogModel.Changed">
            <summary>
            Occurs when the log has changed
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.LogModel.Logs">
            <summary>
            Gets the logs.
            </summary>
            <value>
            The logs.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.LogModel.MaxLogs">
            <summary>
            Gets or sets the maximum logs.
            </summary>
            <value>
            The maximum logs.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.LogModel.AddMessage(System.String,System.Boolean)">
            <summary>
            Adds the log message.
            </summary>
            <param name="message">The message.</param>
            <param name="raiseChangedEvent">if set to <c>true</c> [raise changed event].</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.LogModel.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.LogModel.Update">
            <summary>
            Updates the model.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.ModelBuilder`1">
            <summary>
            Class that provide a fluent API for building ItemModel classes.
            </summary>
            <typeparam name="T">The item model type.</typeparam>
        </member>
        <member name="M:ModApi.Ui.Inspector.ModelBuilder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ModelBuilder`1" /> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.ModelBuilder`1.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.ModelBuilder`1.Build(System.Action{`0})">
            <summary>
            Builds the specified build action.
            </summary>
            <param name="buildAction">The build action.</param>
            <returns>This model builder class for API fluency.</returns>
        </member>
        <member name="T:ModApi.Ui.Inspector.NumericInputModel">
            <summary>
            Model for a numeric input element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.NumericInputModel._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.NumericInputModel.#ctor(System.String,System.Action{System.Double},System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.NumericInputModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueChanged">The value changed.</param>
            <param name="initialValue">The initial value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.DisplayFormatter">
            <summary>
            Gets or sets the display formatter, which formats the value for display.
            </summary>
            <value>
            The display formatter.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.InputParser">
            <summary>
            Gets or sets the input parser, which is used to parse the user input to the numeric value.
            </summary>
            <value>
            The input parser.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.MaxValue">
            <summary>
            Gets or sets the maximum value, or null if there is no maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.MinValue">
            <summary>
            Gets or sets the minimum value, or null if there is no minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.NumericInputModel.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>
            The value changed.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.NumericInputModel.DefaultFormatter(System.Double)">
            <summary>
            The default formatter.
            </summary>
            <param name="x">The number.</param>
            <returns>The number as a string.</returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.NumericInputModel.DefaultParser(System.String)">
            <summary>
            The default input parser.
            </summary>
            <param name="s">The string.</param>
            <returns>The numeric value of the stirng.</returns>
        </member>
        <member name="T:ModApi.Ui.Inspector.PartInspectorModel">
            <summary>
            Model containing data that can be displayed in an inspector UI for a part.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.PartInspectorModel.#ctor(System.String,ModApi.Ui.Inspector.IconButtonRowModel)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.PartInspectorModel" /> class.
            </summary>
            <param name="title">The title.</param>
            <param name="iconButtonRow">The icon button row.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.PartInspectorModel.IconButtonRow">
            <summary>
            Gets the icon button row.
            </summary>
            <value>
            The icon button row.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.ProgressBarModel">
            <summary>
            Model for a progress bar in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.ProgressBarModel._labelGetter">
            <summary>
            The label getter, or null if there is none.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ProgressBarModel._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ProgressBarModel._valueGetter">
            <summary>
            The text
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.ProgressBarModel.#ctor(System.String,System.Func{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ProgressBarModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueGetter">Optional function that returns a value to update the progress bar.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.ProgressBarModel.#ctor(System.Func{System.String},System.Func{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ProgressBarModel" /> class.
            </summary>
            <param name="labelGetter">The label getter.</param>
            <param name="valueGetter">Optional function that returns a value to update the progress bar.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.ProgressBarModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ProgressBarModel.Value">
            <summary>
            Gets or sets the current value, from 0 to 1.
            </summary>
            <value>
            The value text.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.ProgressBarModel.Update">
            <summary>
            Updates the model.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.SliderModel">
            <summary>
            Model for a slider element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.SliderModel._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.SliderModel.#ctor(System.String,System.Action{ModApi.Ui.Inspector.SliderModel},System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.SliderModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueChanged">The value changed.</param>
            <param name="minValue">The minimum slider value.</param>
            <param name="maxValue">The maximum slider value.</param>
            <param name="wholeNumbers">If set to <c>true</c> whole numbers should be used for slider values, otherwise <c>false</c>.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.SliderModel.SliderAdjustmentStartStopHandler">
            <summary>
            Delegate for <see cref="E:ModApi.Ui.Inspector.SliderModel.OnSliderAdjustmentEnded"/>
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="E:ModApi.Ui.Inspector.SliderModel.OnSliderAdjustmentEnded">
            <summary>
            Occurs when slider adjustment has ended.
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.SliderModel.OnSliderAdjustmentStarted">
            <summary>
            Occurs when slider adjustment has started.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.SliderModel.SliderStyle">
            <summary>
            The available slider styles.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.SliderModel.SliderStyle.Normal">
            <summary>
            The normal slider style.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.SliderModel.SliderStyle.Bipolar">
            <summary>
            The bipolar style of slider.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.MaxValue">
            <summary>
            Gets the maximum slider value.
            </summary>
            <value>
            The maximum slider value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.MinValue">
            <summary>
            Gets the minimum slider value.
            </summary>
            <value>
            The minimum slider value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>
            The style.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>
            The value changed.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.ValueFormatter">
            <summary>
            Gets or sets the optional value formatter. If null is provided, then the value will be formatted as a percentage
            </summary>
            <value>
            The value formatter.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SliderModel.WholeNumbers">
            <summary>
            Gets a value indicating whether whole numbers should be used.
            </summary>
            <value>
              <c>true</c> if whole numbers should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.SliderModel.SliderPointerScript">
            <summary>
            Private script to facilitate exposinig an event for when slider adjustment has ended.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
            <seealso cref="T:UnityEngine.EventSystems.IPointerUpHandler" />
        </member>
        <member name="E:ModApi.Ui.Inspector.SliderModel.SliderPointerScript.OnSliderAdjustmentEnded">
            <summary>
            Occurs when [on slider adjustment ended].
            </summary>
        </member>
        <member name="E:ModApi.Ui.Inspector.SliderModel.SliderPointerScript.OnSliderAdjustmentStarted">
            <summary>
            Occurs when [on slider adjustment started].
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.SliderModel.SliderPointerScript.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when [pointer down].
            </summary>
            <param name="eventData">The event data.</param>
        </member>
        <member name="M:ModApi.Ui.Inspector.SliderModel.SliderPointerScript.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when [pointer up].
            </summary>
            <param name="eventData">The event data.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.SpacerModel">
            <summary>
            Model for a spacer element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.SpacerModel.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.SpacerModel" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="drawImage">if set to <c>true</c> then draw the line in the spacer.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpacerModel.DrawImage">
            <summary>
            Gets a value indicating whether [draw image].
            </summary>
            <value>
              <c>true</c> if [draw image]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpacerModel.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.SpinnerModel">
            <summary>
            Model for a spinner element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.SpinnerModel._valueGetter">
            <summary>
            The text
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.SpinnerModel.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.SpinnerModel" /> class.
            </summary>
            <param name="valueGetter">The function that returns the value.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpinnerModel.NextButtonVisible">
            <summary>
            Gets or sets a value indicating whether the next button is visible.
            </summary>
            <value>
              <c>true</c> if the next button is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpinnerModel.NextClicked">
            <summary>
            Gets or sets the next clicked action.
            </summary>
            <value>
            The next clicked action.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpinnerModel.PrevButtonVisible">
            <summary>
            Gets or sets a value indicating whether the previous button is visible.
            </summary>
            <value>
              <c>true</c> if the previous button is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpinnerModel.PrevClicked">
            <summary>
            Gets or sets the previous clicked action.
            </summary>
            <value>
            The previous clicked action.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.SpinnerModel.Value">
            <summary>
            Gets the value text.
            </summary>
            <value>
            The value text.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.TableRowModel">
            <summary>
            Model for a row in a table. Items nested in a Table Row will have their column-left elements hidden
            and their column-right elements stretched to 100% width of their column in the table row.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.TableRowModel._models">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.TableRowModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.TableRowModel" /> class.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.TableRowModel.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.TableRowModel.Add``1(``0)">
            <summary>
            Adds the item model to the row.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="model">The item model.</param>
            <returns>
            The item model for API fluency.
            </returns>
        </member>
        <member name="M:ModApi.Ui.Inspector.TableRowModel.AddAndBuild``1(``0)">
            <summary>
            Adds the specified item and returns a builder class to continue building
            the item model fluently without needing to create local variables.
            </summary>
            <typeparam name="T">The ItemModel type.</typeparam>
            <param name="item">The item.</param>
            <returns>The item added.</returns>
        </member>
        <member name="T:ModApi.Ui.Inspector.TextButtonModel">
            <summary>
            Model for a text button element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ButtonModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.TextButtonModel.#ctor(System.String,System.Action{ModApi.Ui.Inspector.TextButtonModel},System.Action{ModApi.Ui.Inspector.ItemModel},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.TextButtonModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="action">The action.</param>
            <param name="updateAction">The update action.</param>
            <param name="determineVisiblity">The function to determine visiblity.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextButtonModel.Action">
            <summary>
            Gets or sets the action to execute when clicked.
            </summary>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextButtonModel.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.TextButtonModel.OnClicked">
            <summary>
            Called when the button model is clicked.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.TextInputModel">
            <summary>
            Model for a text input element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.TextInputModel.#ctor(System.String,System.Action{System.String},System.String,ModApi.Ui.Inspector.ElementAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.TextInputModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueChanged">The value changed.</param>
            <param name="initialValue">The initial value.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.EnableWordWrapping">
            <summary>
            Gets or sets a value indicating whether to enable word wrapping.
            </summary>
            <value>
              <c>true</c> if word wrapping should be enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.MultiLine">
            <summary>
            Gets or sets a value indicating whether to use a multi-line text input.
            </summary>
            <value>
              <c>true</c> if a multi-line text input should be used; otherwise, <c>false</c> for single-line.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.NavigationMode">
            <summary>
            Gets or sets the navigation mode.
            </summary>
            <value>
            The navigation mode.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextInputModel.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>
            The value changed.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.TextModel">
            <summary>
            Model for a text element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.TextModel._valueGetter">
            <summary>
            The text
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.TextModel.#ctor(System.String,System.Func{System.String},System.Action{ModApi.Ui.Inspector.ItemModel},System.String,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.TextModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueGetter">Optional function that returns a string to update the value text.</param>
            <param name="updateAction">The update action.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="determineVisibility">The determine visibility callback.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextModel.Value">
            <summary>
            Gets the value text.
            </summary>
            <value>
            The value text.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.TextModel.Update">
            <summary>
            Updates the model.
            </summary>
        </member>
        <member name="T:ModApi.Ui.Inspector.ITextureSelector">
            <summary>
            Interface for selecting a texture for a TextureModel.
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.ITextureSelector.SelectTexture(ModApi.Ui.Inspector.TextureModel,System.Action{System.String})">
            <summary>
            Called to select a texture for the texture model.
            </summary>
            <param name="model">The texture model.</param>
            <param name="onComplete">Action to execute after a texture is selected. The string parameter is the full path of the texture.</param>
        </member>
        <member name="T:ModApi.Ui.Inspector.TextureModel">
            <summary>
            Model for a texture element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="M:ModApi.Ui.Inspector.TextureModel.#ctor(System.String,ModApi.Ui.Inspector.ITextureSelector,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.TextureModel" /> class.
            </summary>
            <param name="label">The label.</param>
            <param name="textureSelector">The texture selector.</param>
            <param name="onPathChanged">The action to execute when the path has changed.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextureModel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextureModel.OnPathChanged">
            <summary>
            Gets or sets the action to execute when the path has changed.
            </summary>
            <value>
            The action to execute when the path has changed.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextureModel.Path">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.TextureModel.TextureSelector">
            <summary>
            Gets or sets the texture selector.
            </summary>
            <value>
            The texture selector.
            </value>
        </member>
        <member name="T:ModApi.Ui.Inspector.ToggleModel">
            <summary>
            Model for a toggle element in an inspector model.
            </summary>
            <seealso cref="T:ModApi.Ui.Inspector.ItemModel" />
        </member>
        <member name="F:ModApi.Ui.Inspector.ToggleModel._action">
            <summary>
            The action to execute when clicked.
            </summary>
        </member>
        <member name="F:ModApi.Ui.Inspector.ToggleModel._valueGetter">
            <summary>
            The value getter
            </summary>
        </member>
        <member name="M:ModApi.Ui.Inspector.ToggleModel.#ctor(System.String,System.Func{System.Boolean},System.Action{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.Inspector.ToggleModel"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="action">The action.</param>
            <param name="tooltip">The tool-tip.</param>
        </member>
        <member name="P:ModApi.Ui.Inspector.ToggleModel.Label">
            <summary>
            Gets or sets the name text.
            </summary>
            <value>
            The name text.
            </value>
        </member>
        <member name="P:ModApi.Ui.Inspector.ToggleModel.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:ModApi.Ui.Inspector.ToggleModel"/> is currently toggled.
            </summary>
            <value>
              <c>true</c> if value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Ui.Inspector.ToggleModel.OnClicked(System.Boolean)">
            <summary>
            Called when the toggle model is clicked.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="T:ModApi.Ui.MessageDialogResult">
            <summary>
            An enumeration defining the results of a message dialog.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogResult.Okay">
            <summary>
            The okay button was clicked.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogResult.Cancel">
            <summary>
            The cancel button was clicked.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogResult.Middle">
            <summary>
            The middle button was clicked.
            </summary>
        </member>
        <member name="T:ModApi.Ui.MessageDialogType">
            <summary>
            The types of message dialogs.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogType.Okay">
            <summary>
            The message dialog only has an Okay button.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogType.OkayCancel">
            <summary>
            The message dialog has okay and cancel buttons.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogType.ThreeButtons">
            <summary>
            The message dialog has an okay, cancel, and a third button in the middle.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MessageDialogType.NoButtons">
            <summary>
            The message dialog has no buttons...it must be closed via code.
            </summary>
        </member>
        <member name="T:ModApi.Ui.MessageDialogScript">
            <summary>
            Message dialog script.
            </summary>
            <seealso cref="T:ModApi.Ui.DialogScript" />
        </member>
        <member name="T:ModApi.Ui.MessageDialogScript.MessageDialogDelegate">
            <summary>
            Delegate for message dialog events.
            </summary>
            <param name="messageDialog">The message dialog.</param>
        </member>
        <member name="E:ModApi.Ui.MessageDialogScript.CancelClicked">
            <summary>
            Occurs when the cancel button is clicked.
            </summary>
        </member>
        <member name="E:ModApi.Ui.MessageDialogScript.MiddleClicked">
            <summary>
            Occurs when the middle button is clicked.
            </summary>
        </member>
        <member name="E:ModApi.Ui.MessageDialogScript.OkayClicked">
            <summary>
            Occurs when the okay button is clicked.
            </summary>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.CancelButtonText">
            <summary>
            Gets or sets the cancel button text.
            </summary>
            <value>
            The cancel button text.
            </value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.ExtraWide">
            <summary>
            Gets or sets a value indicating whether to make this dialog extra wide.
            </summary>
            <value>
              <c>true</c> if this dialog is extra wide; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.MessageDialogType">
            <summary>
            Gets or sets the type of message dialog.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.MessageText">
            <summary>
            Gets or sets the message text.
            </summary>
            <value>
            The message text.
            </value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.MiddleButtonText">
            <summary>
            Gets or sets the middle button text.
            </summary>
            <value>
            The middle button text.
            </value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.OkayButtonText">
            <summary>
            Gets or sets the okay button text.
            </summary>
            <value>
            The okay button text.
            </value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.Result">
            <summary>
            Gets or sets the result of the message dialog.
            </summary>
            <value>The result of the message dialog.</value>
        </member>
        <member name="P:ModApi.Ui.MessageDialogScript.UseDangerButtonStyle">
            <summary>
            Gets or sets a value indicating whether to use the danger button style.
            </summary>
            <value>
              <c>true</c> to use danger button style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Ui.MessageDialogScript.WaitForResult">
            <summary>
            Returns a coroutine yield instruction that waits until the dialog has a result (the user has clicked a button);
            </summary>
            <returns>The coroutine yield instruction that waits until the dialog has a result.</returns>
        </member>
        <member name="M:ModApi.Ui.MessageDialogScript.RaiseCancelClickedEvent">
            <summary>
            Raises the cancel clicked event.
            </summary>
            <returns>True if the event was handled.</returns>
        </member>
        <member name="M:ModApi.Ui.MessageDialogScript.RaiseMiddleClickedEvent">
            <summary>
            Raises the middle clicked event.
            </summary>
            <returns>True if the event was handled.</returns>
        </member>
        <member name="M:ModApi.Ui.MessageDialogScript.RaiseOkayClickedEvent">
            <summary>
            Raises the okay clicked event.
            </summary>
            <returns>True if the event was handled.</returns>
        </member>
        <member name="T:ModApi.Ui.MouseDrag">
            <summary>
            Class to facilitate dragging objects in world-space using screen-space input (such as mouse cursor).
            </summary>
        </member>
        <member name="F:ModApi.Ui.MouseDrag._dragDirection">
            <summary>
            The world-space drag direction.  If set to null, the drag direction is automatically calculated based on the initial mouse drag direction.
            </summary>
        </member>
        <member name="F:ModApi.Ui.MouseDrag._mouseDragVec">
            <summary>
            The drag vector
            </summary>
        </member>
        <member name="F:ModApi.Ui.MouseDrag._mouseScreenRay">
            <summary>
            The mouse screen ray
            </summary>
        </member>
        <member name="F:ModApi.Ui.MouseDrag._startMousePos">
            <summary>
            The start mouse position
            </summary>
        </member>
        <member name="M:ModApi.Ui.MouseDrag.#ctor(UnityEngine.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:ModApi.Ui.MouseDrag"/> class.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.Camera">
            <summary>
            Gets the camera.
            </summary>
            <value>
            The camera.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.DeltaMag">
            <summary>
            Gets the world-space distance from the original position and the current drag location.
            </summary>
            <value>
            The world-space distance from the original position and the current drag location.
            </value>
            <Note>Adjustment delta is</Note>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.DeltaScreenMag">
            <summary>
            Gets the screens-space distance from the original position and the current drag location.
            </summary>
            <value>
            The screens-space distance from the original position and the current drag location.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.DeltaVec">
            <summary>
            Gets the world-space delta vector to get from the current position to the drag location.
            </summary>
            <value>
            The world-space delta vector to get from the current position to the drag location.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.Direction">
            <summary>
            Gets the vector that mouse dragging occurs along.
            </summary>
            <value>
            The vector that mouse dragging occurs along.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.DirectionRaw">
            <summary>
            Gets the vector that mouse dragging occurs along.  May be <c>null</c> if the vector will be auto-calculated on the first mouse processing event which has not yet occurred.
            </summary>
            <value>
            The vector that mouse dragging occurs along.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.DragTransform">
            <summary>
            Gets or sets the selected part transform.
            </summary>
            <value>
            The selected part transform.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.MouseDragVec">
            <summary>
            Gets the mouse drag vector.
            </summary>
            <value>
            The mouse drag vector.
            </value>
        </member>
        <member name="P:ModApi.Ui.MouseDrag.MouseScreenRay">
            <summary>
            Gets the mouse screen ray.
            </summary>
            <value>
            The mouse screen ray.
            </value>
        </member>
        <member name="M:ModApi.Ui.MouseDrag.ProcessMouseBegin(ModApi.Input.Events.ClickEventArgs)">
            <summary>
            Called when the mouse button is clicked.
            </summary>
            <param name="e">The <see cref="T:ModApi.Input.Events.ClickEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Ui.MouseDrag.ProcessMouseDrag(ModApi.Input.Events.ClickEventArgs)">
            <summary>
            Called when the mouse button is being dragged (moved while button is down).
            </summary>
            <param name="e">The <see cref="T:ModApi.Input.Events.ClickEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ModApi.Ui.MouseDrag.SetDragDirection(UnityEngine.Vector3)">
            <summary>
            Sets the world-space drag direction.  If set to null, the drag direction is automatically calculated based on the initial mouse drag direction.
            </summary>
            <param name="direction">The world-space drag direction.  If set to null, the drag direction is automatically calculated based on the initial mouse drag direction.</param>
        </member>
        <member name="M:ModApi.Ui.MouseDrag.SetTransform(UnityEngine.Transform)">
            <summary>
            Sets the transform to be dragged.
            </summary>
            <param name="dragTransform">The drag transform to be dragged.</param>
        </member>
        <member name="M:ModApi.Ui.MouseDrag.Update(ModApi.Input.Events.ClickEventArgs)">
            <summary>
            Updates the stats related to the mouse (start/current position and time, screen ray, etc).
            </summary>
            <param name="mouseInfo">The <see cref="T:ModApi.Input.Events.ClickEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:ModApi.Ui.PointerNotificationScript">
            <summary>
            Allows a class to be notified when a different gameobject recieves pointer notification events.
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="T:ModApi.Ui.PointerNotificationScript.PointerEventHandler">
            <summary>
            Handler for pointer related events.
            </summary>
            <param name="source">The source <seealso cref="T:ModApi.Ui.PointerNotificationScript"/>.</param>
            <param name="eventData">The event data.</param>
        </member>
        <member name="T:ModApi.Ui.PointerNotificationScript.PointerEventHandlerNoSource">
            <summary>
            Handler for pointer related events, which matches the signature of Unity's built-in notificaitons.
            </summary>
            <param name="eventData">The event data.</param>
        </member>
        <member name="E:ModApi.Ui.PointerNotificationScript.PointerClick">
            <summary>
            Occurs when the GameObject this script is attached to has a OnPointerClick event occur.
            </summary>
        </member>
        <member name="E:ModApi.Ui.PointerNotificationScript.PointerClickNoSource">
            <summary>
            Occurs when the GameObject this script is attached to has a OnPointerClick event occur.
            </summary>
        </member>
        <member name="E:ModApi.Ui.PointerNotificationScript.PointerEnter">
            <summary>
            Occurs when the GameObject this script is attached to has a OnPointerEnter event occur.
            </summary>
        </member>
        <member name="E:ModApi.Ui.PointerNotificationScript.PointerEnterNoSource">
            <summary>
            Occurs when the GameObject this script is attached to has a OnPointerEnter event occur.
            </summary>
        </member>
        <member name="E:ModApi.Ui.PointerNotificationScript.PointerExit">
            <summary>
            Occurs when the GameObject this script is attached to has a OnPointerExit event occur.
            </summary>
        </member>
        <member name="E:ModApi.Ui.PointerNotificationScript.PointerExitNoSource">
            <summary>
            Occurs when the GameObject this script is attached to has a OnPointerExit event occur.
            </summary>
        </member>
        <member name="M:ModApi.Ui.PointerNotificationScript.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Occurs when the pointer has clicked on this UI element.
            </summary>
            <param name="eventData">Current event data.</param>
        </member>
        <member name="M:ModApi.Ui.PointerNotificationScript.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Occurs when the pointer has entered this UI element.
            </summary>
            <param name="eventData">Current event data.</param>
        </member>
        <member name="M:ModApi.Ui.PointerNotificationScript.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Occurs when the pointer has exited this UI element.
            </summary>
            <param name="eventData">Current event data.</param>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds">
            <summary>
            A class containing the user interface IDs.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.AccountDialog">
            <summary>
            The account dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.ColorPickerDialog">
            <summary>
            The color picker dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.CreateCustomVizzyNode">
            <summary>
            The create custom Vizzy node dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.InputDialog">
            <summary>
            The input dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.InspectorPanel">
            <summary>
            The inspector panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.MessageDialog">
            <summary>
            The message dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.ScenarioDialog">
            <summary>
            The scenario dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Styles">
            <summary>
            The styles XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Vizzy">
            <summary>
            The Vizzy XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Design">
            <summary>
            User interface IDs for the designer scene.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.ActivationGroupsPanel">
            <summary>
            The activation groups panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.CraftPartsPanel">
            <summary>
            The craft parts panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.DesignerUi">
            <summary>
            The designer XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.DesignStyles">
            <summary>
            The design styles XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.FuselageShapePanel">
            <summary>
            The fuselage shape panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.LevelUIDefault">
            <summary>
            The level UI default XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.LoadCraftPanel">
            <summary>
            The load craft panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.MenuPanel">
            <summary>
            The menu panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.MovePartPanel">
            <summary>
            The move part panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.NudgePartPanel">
            <summary>
            The nudge part panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.PaintPanel">
            <summary>
            The paint panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.PartListPanel">
            <summary>
            The part list panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.PartPropertiesPanel">
            <summary>
            The part properties panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.RotatePartPanel">
            <summary>
            The rotate part panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.StagingEditorPanel">
            <summary>
            The staging editor panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.SymmetryPanel">
            <summary>
            The symmetry panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.ToolPanel">
            <summary>
            The tool panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.TutorialPanel">
            <summary>
            The tutorial panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Design.ViewOptionsPanel">
            <summary>
            The view options panel XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Flight">
            <summary>
            User interface IDs for the flight scene.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.ActivationPanel">
            <summary>
            The activation panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.EndFlightDialog">
            <summary>
            The end flight dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.FlightSceneUI">
            <summary>
            The flight scene UI.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.FlightTutorialPanel">
            <summary>
            The flight tutorial panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.FuelTransferPanel">
            <summary>
            The fuel transfer panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.InputSliderPanel">
            <summary>
            The input slider panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.LevelUIDefault">
            <summary>
            The level UI default XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.NavPanel">
            <summary>
            The nav panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.RetryFlightDialog">
            <summary>
            The retry flight dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.StagingPanel">
            <summary>
            The staging panel XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Flight.TimePanel">
            <summary>
            The time panel XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.InfoPanel">
            <summary>
            User interface IDs for info panels.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.InfoPanel.InfoPanelStyles">
            <summary>
            The info panel styles XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Map">
            <summary>
            User interface IDs for the map view.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Map.MapViewUi">
            <summary>
            The map view XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Menu">
            <summary>
            User interface IDs for the main menu scene.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Menu.About">
            <summary>
            The about XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Menu.ListView">
            <summary>
            The list view XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Menu.MenuUi">
            <summary>
            The menu XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Menu.NewGameDialog">
            <summary>
            The new game dialog XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Mods">
            <summary>
            User interface IDs for mod related user interfaces.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Mods.RequiredModsDialog">
            <summary>
            The required mods dialog XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.PlanetStudio">
            <summary>
            User interface IDs for planet studio related user interfaces.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.PlanetStudio.PlanetStudioUI">
            <summary>
            The Planet Studio XML ID
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Settings">
            <summary>
            User interface IDs for settings related user interfaces.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Settings.AxisCalibratorDialog">
            <summary>
            The axis calibrator dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Settings.BindInputDialog">
            <summary>
            The bind input dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Settings.CalibrateControllerDialog">
            <summary>
            The calibrate controller dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Settings.ControlSettingsDialog">
            <summary>
            The control settings dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Settings.SettingsDialog">
            <summary>
            The settings dialog XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.UserInterfaceIds.Sharing">
            <summary>
            User interface IDs for sharing related user interfaces.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Sharing.DownloadContentDialog">
            <summary>
            The download content dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Sharing.PhotoLibraryDialog">
            <summary>
            The photo library dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Sharing.PhotoLibraryImageViewer">
            <summary>
            The photo library image viewer XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Sharing.ScreenshotDialog">
            <summary>
            The screenshot dialog XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Sharing.ScreenshotList">
            <summary>
            The screenshot list XML ID.
            </summary>
        </member>
        <member name="F:ModApi.Ui.UserInterfaceIds.Sharing.UploadContentDialog">
            <summary>
            The upload content dialog XML ID.
            </summary>
        </member>
        <member name="T:ModApi.Ui.XmlLayoutConstants">
            <summary>
            XML Layout related constants.
            </summary>
        </member>
        <member name="F:ModApi.Ui.XmlLayoutConstants.XmlNamespace">
            <summary>
            The XML namespace used by XML Layout.
            </summary>
        </member>
        <member name="T:ModApi.Utilities">
            <summary>
            Partial Utilities class to provide Input utility functionality.
            </summary>
            <summary>
            Partial class for Utilities to add color utils.
            </summary>
            <summary>
            Partial class to add enum functionality to Utilities class.
            </summary>
            <summary>
            Partial Utilities class to provide Input utility functionality.
            </summary>
            <summary>
            Utilities
            </summary>
            <summary>
            Partial class to add Physics functionality to Utilities class.
            </summary>
            <summary>
            Partial Utilities class to provide texture utility functionality.
            </summary>
            <summary>
            Partial class to add Unity Transform functionality to Utilities class.
            </summary>
            <summary>
            Utilities functions.
            </summary>
        </member>
        <member name="T:ModApi.Utilities.Assert">
            <summary>
            Assert utility methods
            </summary>
        </member>
        <member name="P:ModApi.Utilities.Assert.DisableFrameCount">
            <summary>
            Gets or sets a value indicating whether to disable frame counts in assert output.  This is used for unit tests which can't
            access certain Unity methods w/o blowing up (like Time.frameCount).
            </summary>
            <value>
              <c>true</c> if we should disable frame count in assert output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ModApi.Utilities.Assert.LogAssert(System.String,System.Object[])">
            <summary>
            Raises the assert.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The message format arguments.</param>
        </member>
        <member name="M:ModApi.Utilities.Assert.GetFrameCount">
            <summary>
            Gets the frame count, if configured to do so, otherwise returns "n/a".
            </summary>
            <returns>The current game frame-count.</returns>
        </member>
        <member name="M:ModApi.Utilities.Assert.GetUnityFrameCount">
            <summary>
            Gets the unity frame count.
            </summary>
            <returns>The current game frame-count.</returns>
        </member>
        <member name="T:ModApi.Utilities.Colors">
            <summary>
            Utilities for colors.
            </summary>
        </member>
        <member name="T:ModApi.Utilities.Enums">
            <summary>
            Utilities for enums
            </summary>
        </member>
        <member name="M:ModApi.Utilities.Enums.GetDisplayName``1(``0)">
            <summary>
            Gets the display name for an enumeration value.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="value">The value.</param>
            <returns>
            The display name for an enumeration value..
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.GetDisplayNames``1">
            <summary>
            Gets a list of all display names for an enumeration type.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <returns>
            The list of all display names for an enumeration type.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.GetNames``1">
            <summary>
            Gets the names.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <returns>
            The names.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.GetValue``1(System.String)">
            <summary>
            Gets the enumeration value which matches the supplied display name.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="displayName">The display name.</param>
            <returns>The enumeration value which matches the supplied display name.</returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.GetValues``1">
            <summary>
            Gets a list of values from an enumeration.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <returns>
            The list of values from the enumeration.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.Parse``1(System.String)">
            <summary>
            Parses the specified string into an enumeration.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="value">The value.</param>
            <returns>
            The enum value parsed from the input string.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.ParseFromDisplayName``1(System.String)">
            <summary>
            Parses the display name to an enumeration of type T.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="displayName">The display name to parse.</param>
            <returns>The display name parsed to an enumeration of type T.</returns>
        </member>
        <member name="M:ModApi.Utilities.Enums.ShouldIncludeInUi(System.Reflection.FieldInfo)">
            <summary>
            Determines whether the field should be included in UI related operations.
            </summary>
            <param name="field">The field.</param>
            <returns><c>true</c> if the field should be included in UI related operations, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Utilities.Input">
            <summary>
            Input utility methods
            </summary>
        </member>
        <member name="M:ModApi.Utilities.Input.AnyMouseButton">
            <summary>
            Returns <c>true</c> if any mouse button is down, otherwise <c>false</c>.
            </summary>
            <returns><c>true</c> if any mouse button is down, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModApi.Utilities.NameGenerator">
            <summary>
            Random name generator.
            </summary>
        </member>
        <member name="F:ModApi.Utilities.NameGenerator._names">
            <summary>
            The names
            </summary>
        </member>
        <member name="P:ModApi.Utilities.NameGenerator.JsonBoyNameCount">
            <summary>
            Gets or sets the number of boy names in the JSON resource.
            </summary>
        </member>
        <member name="P:ModApi.Utilities.NameGenerator.JsonGirlNameCount">
            <summary>
            Gets or sets the number of girl names in the JSON resource.
            </summary>
        </member>
        <member name="P:ModApi.Utilities.NameGenerator.JsonLastNameCount">
            <summary>
            Gets or sets the number of last names in the JSON resource.
            </summary>
        </member>
        <member name="P:ModApi.Utilities.NameGenerator.JsonNameResourceLocation">
            <summary>
            Gets or sets the JSON name resource location.
            </summary>
            <value>
            The JSON name resource location.
            </value>
        </member>
        <member name="P:ModApi.Utilities.NameGenerator.Names">
            <summary>
            Gets the names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:ModApi.Utilities.NameGenerator.FirstName(System.Nullable{System.Boolean})">
            <summary>
            Gets a first name.
            </summary>
            <param name="boy">If <c>true</c> a boy name will be returned, <c>false</c> for a girl name, and <c>null</c> for random.</param>
            <returns>A first name.</returns>
        </member>
        <member name="M:ModApi.Utilities.NameGenerator.FullName(System.Nullable{System.Boolean})">
            <summary>
            Gets a full name.
            </summary>
            <param name="boy">If <c>true</c> a boy name will be returned, <c>false</c> for a girl name, and <c>null</c> for random.</param>
            <returns>A full name.</returns>
        </member>
        <member name="M:ModApi.Utilities.NameGenerator.LastName">
            <summary>
            Gets a random last name.
            </summary>
            <returns>The random last name.</returns>
        </member>
        <member name="T:ModApi.Utilities.NameGenerator.NamesData">
            <summary>
            Class to hold names from the JSON file.
            </summary>
        </member>
        <member name="F:ModApi.Utilities.NameGenerator.NamesData.Boys">
            <summary>
            Gets or sets the boys.
            </summary>
            <value>
            The boys.
            </value>
        </member>
        <member name="F:ModApi.Utilities.NameGenerator.NamesData.Girls">
            <summary>
            Gets or sets the girls.
            </summary>
            <value>
            The girls.
            </value>
        </member>
        <member name="F:ModApi.Utilities.NameGenerator.NamesData.Last">
            <summary>
            Gets or sets the last.
            </summary>
            <value>
            The last.
            </value>
        </member>
        <member name="T:ModApi.Utilities.PhysicsUtils">
            <summary>
            Utilities for enums
            </summary>
        </member>
        <member name="M:ModApi.Utilities.PhysicsUtils.DepenetrateCollider(UnityEngine.CapsuleCollider,UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Moves the collider along the specified direction until it is no-longer colliding with anything.  If it isn't colliding w/anything, it won't be moved.
            </summary>
            <param name="collider">The collider to depenetrate.</param>
            <param name="transToMove">The transform to move to depenetrate the collider.  This can be the collider itself, but is normally the attached rigidbody.</param>
            <param name="depenetrationDirection">The direction to move the collider to depenetrate it.</param>
            <param name="epsilon">The maximum distance allowed between the collider and the last collider it was penetrating.  Lowering this value results in more precise placement, but takes more iterations.</param>
            <param name="layerMask">The layer mask for what we're checking collisions against.</param>
            <param name="queryTriggerInteraction">The <see cref="T:UnityEngine.QueryTriggerInteraction"/> setting.</param>
        </member>
        <member name="M:ModApi.Utilities.PhysicsUtils.GetAgl(UnityEngine.Vector3)">
            <summary>
            Gets the altitude above ground level for the specified frame position.
            </summary>
            <param name="framePos">The frame position.</param>
            <returns>The altitude above ground level.</returns>
        </member>
        <member name="M:ModApi.Utilities.PhysicsUtils.GetColliderUp(UnityEngine.CapsuleCollider)">
            <summary>
            Gets the <see cref="T:UnityEngine.CapsuleCollider"/>'s "up" direction vector.
            </summary>
            <param name="collider">The CapsuleCollider.</param>
            <returns>The <see cref="T:UnityEngine.CapsuleCollider"/>'s "up" direction vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.PhysicsUtils.OverlapCapsule(UnityEngine.CapsuleCollider,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            An easier to call wrapper for <see cref="M:UnityEngine.Physics.OverlapCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)" />
            </summary>
            <param name="collider">The collider.</param>
            <param name="layerMask">The layer mask.</param>
            <param name="queryTriggerInteraction">The <see cref="T:UnityEngine.QueryTriggerInteraction"/> setting.</param>
            <returns>
            The colliders overlapping w/the specified collider.  Will be non-null even if there are none.
            </returns>
        </member>
        <member name="T:ModApi.Utilities.Texture">
            <summary>
            Texture utility methods
            </summary>
        </member>
        <member name="M:ModApi.Utilities.Texture.CreateResizedTexture(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
            Creates a new texture at the specified width and height from the source texture.
            </summary>
            <param name="sourceTexture">The source texture.</param>
            <param name="targetWidth">The width of the new texture.</param>
            <param name="targetHeight">The height of the new texture.</param>
            <returns>The resulting texture.</returns>
        </member>
        <member name="M:ModApi.Utilities.Texture.CreateSquareThumbnail(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Creates a square thumbnail texture from the source texture.
            </summary>
            <param name="sourceTexture">The source texture.</param>
            <param name="size">The size.</param>
            <returns>
            The square thumbnail texture.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Texture.CropTexture(UnityEngine.Texture2D,UnityEngine.Vector2i,UnityEngine.Vector2i)">
            <summary>
            Creates a new texture by cropping the specified region out of the source texture.
            </summary>
            <param name="sourceTexture">The source texture.</param>
            <param name="min">The minimum point defining the subregion.</param>
            <param name="max">The maximum point defining the subregion.</param>
            <returns>The resulting texture.</returns>
        </member>
        <member name="M:ModApi.Utilities.Texture.GetDefaultRenderTextureFormat">
            <summary>
            Gets the default render texture format based on the game's current settings. If HDR is
            enabled, then RenderTextureFormat.DefaultHDR will be returned. Otherwise, RenderTextureFormat.Default
            wil be returned.
            </summary>
            <returns>The default render texture format.</returns>
        </member>
        <member name="T:ModApi.Utilities.UnityTransform">
            <summary>
            Utilities for Unity Transforms
            </summary>
        </member>
        <member name="T:ModApi.Utilities.UnityTransform.TransformAxis">
            <summary>
            Identifies an axis
            </summary>
        </member>
        <member name="F:ModApi.Utilities.UnityTransform.TransformAxis.X">
            <summary>
            The x axis.
            </summary>
        </member>
        <member name="F:ModApi.Utilities.UnityTransform.TransformAxis.Y">
            <summary>
            The y axis.
            </summary>
        </member>
        <member name="F:ModApi.Utilities.UnityTransform.TransformAxis.Z">
            <summary>
            The z axis.
            </summary>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.DestroyChildren(UnityEngine.Transform)">
            <summary>
            Destroys all children under the specified the transform...does not remove the parent transform.
            </summary>
            <param name="parent">The transform to delete all children from.</param>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.GetFirstChild(UnityEngine.Transform)">
            <summary>
            Gets the first child, or <c>null</c> if there are none.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The first child, or <c>null</c> if there are none.</returns>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.GetRotation(ModApi.Utilities.UnityTransform.TransformAxis,System.Single)">
            <summary>
            Gets the rotation.
            </summary>
            <param name="axis">The axis.</param>
            <param name="degrees">The rotation in degrees.</param>
            <returns>The rotation</returns>
            <exception cref="T:System.InvalidOperationException">Thrown whenever an unsupported axis is supplied.</exception>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.GetVector(UnityEngine.Transform,ModApi.Utilities.UnityTransform.TransformAxis,System.Boolean)">
            <summary>
            Gets the vector for the specific axis and local/world setting.
            </summary>
            <param name="trans">The transform to get local vectors from.</param>
            <param name="axis">The required axis to get the vector for.</param>
            <param name="local">If set to <c>true</c> the local orientation is used, otherwise world orientation is used.</param>
            <returns>
            The vector for the specific axis and local/world setting.
            </returns>
            <exception cref="T:System.ArgumentException">The axis is not valid.</exception>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.MoveChildren(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Moves the children between two transforms.
            </summary>
            <param name="from">The transform to move all children from.</param>
            <param name="to">The transform to move all children to.</param>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.RotateChildrenAround(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Rotates all children of the parent transform by worldEulersAngles, using the supplied pivot point, without changing the position/rotation of the parent.
            </summary>
            <param name="parent">The parent transform whose children will be rotated.</param>
            <param name="worldPivot">The world coordinates of the pivot point to rotate the children around.</param>
            <param name="worldEulersAngles">The world euler angles to rotate the children by.</param>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.ScaleAroundPivot(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            Scales the transform about a specific pivot point.
            </summary>
            <param name="scaleTrans">The transform to scale.</param>
            <param name="pivotTrans">The pivot to scale around.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:ModApi.Utilities.UnityTransform.SetLossyWorldScale(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            Sets the world (lossy) scale.
            </summary>
            <param name="trans">The trans.</param>
            <param name="worldScale">The world scale.</param>
        </member>
        <member name="F:ModApi.Utilities._vectorParseTrimChars">
            <summary>
            The characters to trim when parsing vectors.
            </summary>
        </member>
        <member name="M:ModApi.Utilities.Abs(UnityEngine.Quaternion)">
            <summary>
            Returns a quaternion with the components being the absolute values of the components of the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The absolute value representation of the specified quaternion.</returns>
        </member>
        <member name="M:ModApi.Utilities.Abs(UnityEngine.Vector3)">
            <summary>
            Returns a vector with the components being the absolute values of the components of the specified vector.
            </summary>
            <param name="vector3">The vector3.</param>
            <returns>The absolute value of the specified vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.Abs(UnityEngine.Vector2)">
            <summary>
            Returns a vector with the components being the absolute values of the components of the specified vector.
            </summary>
            <param name="vector2">The vector2.</param>
            <returns>The absolute value of the specified vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.Between(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value falls between the left and side and right hand side values.
            </summary>
            <param name="value">The value to check.</param>
            <param name="lhs">The LHS (inclusive).</param>
            <param name="rhs">The RHS (exclusive).</param>
            <returns><c>true</c> if value is between the left hand side (inclusive) and right hand side (exclusive), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Utilities.Between(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value falls between the left and side and right hand side values.
            </summary>
            <param name="value">The value to check.</param>
            <param name="lhs">The LHS (inclusive).</param>
            <param name="rhs">The RHS (exclusive).</param>
            <returns><c>true</c> if value is between the left hand side (inclusive) and right hand side (exclusive), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModApi.Utilities.CalculateBounds(UnityEngine.GameObject)">
            <summary>
            Calculates the bounds of all mesh renderers inside the game object.
            </summary>
            <param name="g">The game object.</param>
            <returns>The bounds of the game object.</returns>
        </member>
        <member name="M:ModApi.Utilities.CalculateBoundsOfGameObject(UnityEngine.GameObject)">
            <summary>
            Calculates the bounds of the game object and its children starting with the specified root game object.
            </summary>
            <param name="root">The root game object.</param>
            <returns>The bounds encapsulating the game object and its children.</returns>
        </member>
        <member name="M:ModApi.Utilities.ChangeLayersOfGameObjectAndChildrenRecursive(UnityEngine.GameObject,System.String,System.String[])">
            <summary>
            Changes the layers of game object and children recursive.
            </summary>
            <param name="objectToChange">The object to change.</param>
            <param name="layerName">Name of the layer.</param>
            <param name="layersToIgnore">The layers to ignore.</param>
        </member>
        <member name="M:ModApi.Utilities.ChangeLayersOfGameObjectAndChildrenRecursive(UnityEngine.GameObject,System.Int32,System.Int32[])">
            <summary>
            Changes the layers of game object and children recursive.
            </summary>
            <param name="objectToChange">The object to change.</param>
            <param name="layerNum">The layer number.</param>
            <param name="layersToIgnore">The layers to ignore.</param>
        </member>
        <member name="M:ModApi.Utilities.CloneList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones the list.
            </summary>
            <typeparam name="T">The type of objects in the list being cloned.</typeparam>
            <param name="list">The list.</param>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:ModApi.Utilities.ColorToHex(UnityEngine.Color32)">
            <summary>
            Converts color to a hex string.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:ModApi.Utilities.CombinePaths(System.String[])">
            <summary>
            Combines the paths and ensures all backslashes are replaced with forward slashes.
            </summary>
            <param name="paths">The paths.</param>
            <returns>
            The combined path.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareDoubles(System.Double,System.Double,System.Double)">
            <summary>
            Compares the floats and returns true if they are equal within an epsilon.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns>
            True if they are equal, otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareDoublesGte(System.Double,System.Double,System.Double)">
            <summary>
            Compares the floats and returns true lhs is >= rhs, using CompareDoubles to test for equality using the epsilon.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <param name="epsilon">The epsilon.</param>
            <returns>
            True if lhs is >= rhs, otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareDoublesLte(System.Double,System.Double,System.Double)">
            <summary>
            Compares the floats and returns true lhs is less than, or equal to rhs, using CompareDoubles to test for equality using the epsilon.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <param name="epsilon">The epsilon.</param>
            <returns>
            True if lhs is less than, or equal to rhs, otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareDoublesMany(System.Double,System.Double[])">
            <summary>
            Compares the floats and returns true if they are equal within an epsilon.
            </summary>
            <param name="value">The value to compare the rest to.</param>
            <param name="doubles">The list of other values to compare.</param>
            <returns>
            True if they are equal, otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareDoublesNanEquiv(System.Double,System.Double,System.Double)">
            <summary>
            Compares the params and returns true if they are equal within an epsilon or are both NaN.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns>
            True if they are equal, otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareFloats(System.Single,System.Single,System.Single)">
            <summary>
            Compares the floats and returns true if they are equal within an epsilon.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns>
            True if they are equal, otherwise false.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.CompareQuaternions(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <summary>
            Compares the quaternions.
            </summary>
            <param name="quat1">The quat1.</param>
            <param name="quat2">The quat2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if the two quaternions are approximately equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Utilities.CompareVector3ds(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Compares the vector3sd.
            </summary>
            <param name="vec1">The vec1.</param>
            <param name="vec2">The vec2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if the two vectors are approximately equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Utilities.CompareVector3dsNanEquiv(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Compares the vector3sd, NaN being treated as equivalent.
            </summary>
            <param name="vec1">The vec1.</param>
            <param name="vec2">The vec2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if the two vectors are approximately equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Utilities.CompareVector3s(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Compares the vector3s.
            </summary>
            <param name="vec1">The vec1.</param>
            <param name="vec2">The vec2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if the two vectors are approximately equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ModApi.Utilities.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash of the byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The hash as a string.</returns>
        </member>
        <member name="M:ModApi.Utilities.ConvertWorldAabbToLocalAabb(UnityEngine.Bounds,UnityEngine.Transform)">
            <summary>
            Converts the world AABB to local AABB relative to the specified transform. If the transform has any world rotation
            then the local AABB will be larger than the world AABB.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="transform">The transform.</param>
            <returns>The local bounds.</returns>
        </member>
        <member name="M:ModApi.Utilities.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies the files and subdirectories from the source directory to the destionation directory.
            </summary>
            <param name="sourceDirectoryPath">The source directory path.</param>
            <param name="destinationDirectoryPath">The destination directory path.</param>
            <param name="copySubDirectories">If set to <c>true</c> then copy sub directories.</param>
            <param name="overwriteFiles">if set to <c>true</c> then overwrite files that already exist in the destionation.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Source directory does not exist.</exception>
        </member>
        <member name="M:ModApi.Utilities.Delete(System.String)">
            <summary>
            Deletes the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:ModApi.Utilities.DeleteDirectory(System.String)">
            <summary>
            Depth-first recursive delete, with handling for descendant directories open in Windows Explorer.
            https://stackoverflow.com/questions/329355/cannot-delete-directory-with-directory-deletepath-true
            </summary>
            <param name="path">The path to delete.</param>
        </member>
        <member name="M:ModApi.Utilities.DeleteDirectoryFromPersistentData(System.String,System.Boolean)">
            <summary>
            Deletes the directory after first ensuring the path is within the application's
            persistent data path.
            </summary>
            <param name="path">The path.</param>
            <param name="recursive">if set to <c>true</c> then delete all sub-directories recursively.</param>
        </member>
        <member name="M:ModApi.Utilities.ExpandBounds(UnityEngine.Bounds,UnityEngine.Vector3)">
            <summary>
            Expands the bounds to include the point
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="point">The point.</param>
            <returns>
            The expanded bounds.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.ExpandBounds(UnityEngine.Bounds,UnityEngine.Bounds)">
            <summary>
            Expands the bounds to include all of bounds2.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="bounds2">The bounds2.</param>
            <returns>The expanded bounds.</returns>
        </member>
        <member name="M:ModApi.Utilities.FindFirstGameObjectMyselfOrChildren(System.String,UnityEngine.GameObject)">
            <summary>
            Finds the child of the game object with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="gameObject">The game object.</param>
            <returns>The game object, or null if it was not found.</returns>
        </member>
        <member name="M:ModApi.Utilities.FindGameObjectRelativeTo(UnityEngine.GameObject,System.String)">
            <summary>
            Finds the game object relative to.
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="path">The path.</param>
            <returns>The game object that was found.</returns>
        </member>
        <member name="M:ModApi.Utilities.FindObjectsMyselfOrChildren``1(System.String,UnityEngine.GameObject)">
            <summary>
            Finds the objects myself or children.
            </summary>
            <typeparam name="T">The type of the object to fine.</typeparam>
            <param name="name">The name.</param>
            <param name="gameObject">The game object.</param>
            <returns>The list of object found.</returns>
        </member>
        <member name="M:ModApi.Utilities.FindParentOfGameObject(System.String,UnityEngine.GameObject)">
            <summary>
            Finds the parent of game object.
            </summary>
            <param name="name">The name.</param>
            <param name="gameObject">The game object.</param>
            <returns>The specified parent game object or <c>null</c> if it couldn't be found.</returns>
        </member>
        <member name="M:ModApi.Utilities.FixUnityCanvasSortingBug(UnityEngine.Canvas)">
            <summary>
            There is currently a bug (verified in 2017.3.1p1 and 2018.2.2f1) where new canvases' sorting order are not respected until their enabled/disabled
            flags are toggled at least one time.  This method just does that to bandage the issue 'till it is fixed.
            </summary>
            <param name="canvas">The canvas to apply bandage to.</param>
        </member>
        <member name="M:ModApi.Utilities.FormatMemorySize(System.Int64)">
            <summary>
            Formats the size of the memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <returns>The formatted memory string.</returns>
        </member>
        <member name="M:ModApi.Utilities.FormatPercentage(System.Single)">
            <summary>
            Formats the percentage to the nearest smallest increment.
            </summary>
            <param name="x">The percentage.</param>
            <returns>
            The percentage as a string.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.FromXElement``1(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the supplied xElement into the supplied class.
            </summary>
            <typeparam name="T">The class to deserialize to.</typeparam>
            <param name="xElement">The x element.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:ModApi.Utilities.GameWorldToScreenPoint(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            Converts the game world position into screen position, taking into account the game's current resolution scale.
            </summary>
            <param name="camera">The camera.</param>
            <param name="position">The position.</param>
            <returns>
            The screen position.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.GetAnimationCurveAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the animation curve attribute.
            </summary>
            <param name="element">The XML element on which the attribute holding the animation curve value resides.</param>
            <param name="attributeName">The name of the attribute containing the animation curve value.</param>
            <returns>The animation curve value.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetBoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Gets the bool attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The bool attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetBoolNullableAttribute(System.Xml.Linq.XElement,System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets the bool attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The bool attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetChildren``1(System.String,UnityEngine.GameObject)">
            <summary>
            Gets the children.
            </summary>
            <typeparam name="T">The type of the child objects to find.</typeparam>
            <param name="name">The name.  If null, does not check the name...only type.</param>
            <param name="gameObject">The game object.  If null, searches root game objects.</param>
            <returns>The list of child objects found.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetColorAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Color)">
            <summary>
            Gets the color value from the specified XML attribute.
            </summary>
            <param name="element">The XML element on which the attribute holding the color value resides.</param>
            <param name="attributeName">The name of the attribute containing the color value.</param>
            <param name="defaultValue">The default color value to return if the attribute cannot be found or read.</param>
            <returns>The color value stored in the attribute if successful; otherwise the default value will be returned.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetColorAttribute(System.Xml.Linq.XAttribute,UnityEngine.Color)">
            <summary>
            Gets the color value from the specified XML attribute.
            </summary>
            <param name="attribute">The XML attribute holding the color value.</param>
            <param name="defaultValue">The default color value to return if the attribute cannot be read.</param>
            <returns>The color value stored in the attribute if successful; otherwise the default value will be returned.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetComponentInParent``1(UnityEngine.Transform)">
            <summary>
            Returns the component of Type type in the GameObject or any of its parents. Also searches inactive game objects, which
            Unity's built in GetComponentInParent does not.
            </summary>
            <typeparam name="T">The type of script to search for.</typeparam>
            <param name="transform">The transform.</param>
            <returns>The script, or null if it was not found.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetCurrentMethod">
            <summary>
            Gets the current method.
            </summary>
            <returns>The current method name.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetEnumAttribute``1(System.Xml.Linq.XElement,System.String,``0)">
            <summary>
            Gets the enumeration attribute.
            </summary>
            <typeparam name="T">THe type of the enumeration to retrieve.</typeparam>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The enumeration attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetFirstChild``1(System.String,UnityEngine.MonoBehaviour)">
            <summary>
            Finds the child game object and returns the specified component.
            </summary>
            <typeparam name="T">The component to return.</typeparam>
            <param name="name">The child game object's name.</param>
            <param name="script">The script to use as the root of the search.</param>
            <returns>The child game object's component.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetFirstChild``1(System.String,UnityEngine.GameObject)">
            <summary>
            Finds the child game object and returns the specified component.
            </summary>
            <typeparam name="T">The component to return.</typeparam>
            <param name="name">The child game object's name.</param>
            <param name="rootGameObject">The root game object.</param>
            <returns>
            The child game object's component.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.GetFloatAttribute(System.Xml.Linq.XElement,System.String,System.Single)">
            <summary>
            Gets the float attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The float attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetGradientAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Gets the gradient attribute.
            </summary>
            <param name="element">The XML element on which the attribute holding the gradient value resides.</param>
            <param name="attributeName">The name of the attribute containing the gradient value.</param>
            <param name="includeAlphaKeys">If set to <c>true</c>, both color and alpha keys will be loaded; otherwise only the color keys are loaded.</param>
            <returns>The gradient value.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetGuidAttribute(System.Xml.Linq.XElement,System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the GUID attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The float attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetGuidAttribute(System.Xml.Linq.XElement,System.String,System.Guid)">
            <summary>
            Gets the GUID attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The float attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetHeightAboveTerrain(UnityEngine.Terrain,UnityEngine.Vector3)">
            <summary>
            Gets the height above a terrain (if it is above one).
            </summary>
            <param name="terrain">The terrain to check.</param>
            <param name="floatingOriginPosition">The position to check.</param>
            <returns>The height above the specified terrain, or zero if it isn't above the terrain.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetHtmlColorAttribute(System.Xml.Linq.XElement,System.String,System.Nullable{UnityEngine.Color})">
            <summary>
            Gets the color attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The color value or the default value if did not exist or could not be parsed.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetIntAttribute(System.Xml.Linq.XElement,System.String,System.Int32)">
            <summary>
            Gets the int attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns>Gets the integer value stored in the XML element attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetIntListAttribute(System.Xml.Linq.XElement,System.String,System.Char)">
            <summary>
            Gets the int list attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="separator">The separator.</param>
            <returns>Gets the list of ingteger values stored in the XML element attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetMaximumComponentVector(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the vector that has the maximum components from both vectors.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The maximum component vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetMinimumComponentVector(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the vector that has the minimum components from both vectors.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The minimum component vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetObjectHierarchy``1(UnityEngine.GameObject)">
            <summary>
            Gets the object hierarchy relative to the specified root component in the form of game object names separated by forward slashes.
            If the object and root are the same game object, an empty string is returned.
            If the root cannot be found in the parent hierarchy, a <c>null</c> is returned.
            </summary>
            <typeparam name="TRoot">The type of the root component.</typeparam>
            <param name="obj">The object for which to get the hierarchy.</param>
            <returns>The object hierarchy relative to the specified root component in the form of game object names separated by forward slashes.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetOrCreateObjectInHierarchy(UnityEngine.Transform,System.String)">
            <summary>
            Gets or creates the game object with the specified hierarchy (specified by game object names separated by forward slashes).
            </summary>
            <param name="root">The root object from which to get or create the specified game object.</param>
            <param name="hierarchy">The hierarchy of the object to get or create.</param>
            <returns>The game object with the specified hierarchy.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetParentOrSelf``1(UnityEngine.Transform)">
            <summary>
            Gets the first parent component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="transform">The transform.</param>
            <returns>The component, or null if it was not found.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetParentWithName(UnityEngine.GameObject,System.String)">
            <summary>
            Recurses up the hierarchy starting with specified gameObjet until it finds the game object
            with the specified name.
            </summary>
            <param name="gameObject">The game object to start at.</param>
            <param name="name">The name of the parent game object to look for.</param>
            <returns>
            The parent or null if it cannot be found.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.GetPathToResource(System.String,System.String)">
            <summary>
            Gets the full path to resource.
            </summary>
            <param name="resourceFolder">The resource folder.</param>
            <param name="fileName">Name of the resource file.</param>
            <returns>The full path to a resource file.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetRemainingPercentage(ModApi.Craft.Parts.IFuelSource)">
            <summary>
            Gets the percentage of fuel remaining in the fuel source.
            </summary>
            <param name="fuelSource">The fuel source.</param>
            <returns>The percentage of fuel remaining.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetRootGameObjects">
            <summary>
            Gets the root game objects.
            </summary>
            <returns>The root game objects.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetStringAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Gets the string attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value for the attribute if it is missing.</param>
            <returns>The string attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetTargetLeadPrediction(UnityEngine.Rigidbody,UnityEngine.Rigidbody,System.Single)">
            <summary>
            Predicts where the target will be given each object's position/velocity when they meet.
            </summary>
            <param name="originator">The originator rigidbody, or "projectile" being maneuverd toward the target.</param>
            <param name="target">The target to produce a lead for.</param>
            <param name="leadAccuracy">Value between zero (where the target currently is), and 1 (where the true lead prediction is)</param>
            <returns>The world position of the lead prediction.</returns>
            <value>
            Position where the target will be given each object's position/velocity when they meet.
            </value>
        </member>
        <member name="M:ModApi.Utilities.GetTargetLeadPrediction(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Predicts where the target will be given each object's position/velocity when they meet.
            </summary>
            <param name="originatorPosition">The originator or "projectile" position being maneuverd toward the target.</param>
            <param name="originatorVelocity">The originator or "projectile" velocity being maneuverd toward the target.</param>
            <param name="targetPosition">The target position to produce a lead for.</param>
            <param name="targetVelocity">The target velocity to produce a lead for.</param>
            <param name="leadAccuracy">Value between zero (where the target currently is), and 1 (where the true lead prediction is)</param>
            <returns>The world position of the lead prediction.</returns>
            <value>
            Position where the target will be given each object's position/velocity when they meet.
            </value>
        </member>
        <member name="M:ModApi.Utilities.GetVector2Attribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector2)">
            <summary>
            Gets the vector2 attribute.
            </summary>
            <param name="element">The XML element from which to retrieve the value.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>THe vector2 value stored in the specified XML element.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetVectorAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Vector3)">
            <summary>
            Gets the vector attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The vector attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.GetVectorAttribute(System.Xml.Linq.XElement,System.String,System.Nullable{UnityEngine.Vector3})">
            <summary>
            Gets the vector attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The vector attribute.</returns>
        </member>
        <member name="M:ModApi.Utilities.HasMinimalDifference(System.Double,System.Double,System.Int32)">
            <summary>
            Determines whether the two doubles have a "minimal difference" between them using the specified digits of precision.  This is helpful to compare large numbers, which might have very little information
            after the decimal point, and thus would fail normal CompareDoubles() checks, but are otherwise extremely close with respect to their available digits of precision.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="digitsOfPrecision">The digits of precision.</param>
            <returns>
              <c>true</c> if the two doubles have a "minimal difference" between them using the specified digits of precision; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Obtained from: https://softwareengineering.stackexchange.com/a/233274/321398
            </remarks>
        </member>
        <member name="M:ModApi.Utilities.HasMinimalDifference(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Int32)">
            <summary>
            Determines whether the two Vector3ds have a "minimal difference" between them using the specified digits of precision.  This is helpful to compare large numbers, which might have very little information
            after the decimal point, and thus would fail normal CompareDoubles() checks, but are otherwise extremely close with respect to their available digits of precision.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="digitsOfPrecision">The digits of precision.</param>
            <returns>
              <c>true</c> if the two Vector3ds have a "minimal difference" between them using the specified digits of precision; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.HexToColor(System.String)">
            <summary>
            Converts a hex string to a color.
            </summary>
            <param name="hex">The hex string.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:ModApi.Utilities.IsNan(UnityEngine.Vector3)">
            <summary>
            Determines whether any component the specified vector is NAN.
            </summary>
            <param name="value">The vector to check for NAN.</param>
            <returns><c>true</c> if any component of the vector is NAN.</returns>
        </member>
        <member name="M:ModApi.Utilities.IsNan(UnityEngine.Vector3d)">
            <summary>
            Determines whether any component the specified vector is NAN.
            </summary>
            <param name="value">The vector to check for NAN.</param>
            <returns><c>true</c> if any component of the vector is NAN.</returns>
        </member>
        <member name="M:ModApi.Utilities.IsValidCraftUrlId(System.String)">
            <summary>
            Determines whether the string is a valid craft URL identifier, which must be 6 alphanumeric characters.
            </summary>
            <param name="urlId">The url id.</param>
            <returns>
            True if the ID is valid, or false otherwise.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.IsValidSandboxUrlId(System.String)">
            <summary>
            Determines whether the string is a valid sandbox URL identifier, which must be 6 alphanumeric characters.
            </summary>
            <param name="urlId">The url id.</param>
            <returns>
            True if the ID is valid, or false otherwise.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.LimitAngle180(System.Single)">
            <summary>
            Limits the angle in the range of [-180, +180].
            </summary>
            <param name="angle">The angle.</param>
            <returns>The angle limited between -180 and 180 (inclusive).</returns>
        </member>
        <member name="M:ModApi.Utilities.Max(UnityEngine.Vector2)">
            <summary>
            Determines the maximum component in the vector.
            </summary>
            <param name="vector2">The vector2.</param>
            <returns>The maximum component in the vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
            <param name="overwriteExisting">if set to <c>true</c> [overwrite existing].</param>
        </member>
        <member name="M:ModApi.Utilities.NextEnum``1(``0)">
            <summary>
            Gets the next value of an enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration</typeparam>
            <param name="src">The current enumeration value.</param>
            <returns>The next enumeration value.</returns>
        </member>
        <member name="M:ModApi.Utilities.ParseInt(System.String,System.Int32)">
            <summary>
            Parses the int from the string. If the string cannot be parsed,
            then defaultValue is returned.
            </summary>
            <param name="stringToParse">The string to parse.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The int parsed from the string, or defaultValue if it cannot be parsed.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.ParseQuaternion(System.String)">
            <summary>
            Parses the quaternion in "x,y,z,w" formatted string.
            </summary>
            <param name="stringToParse">The r string.</param>
            <returns>The quaternion.</returns>
        </member>
        <member name="M:ModApi.Utilities.ParseVector2(System.String)">
            <summary>
            Parses the vector2.
            </summary>
            <param name="stringToParse">The string to parse.</param>
            <returns>The vector represented by the comma separated string value.</returns>
        </member>
        <member name="M:ModApi.Utilities.ParseVector3(System.String)">
            <summary>
            Parses the vector3 in "x,y,z" formatted string.
            </summary>
            <param name="stringToParse">The r string.</param>
            <returns>The vector3.</returns>
        </member>
        <member name="M:ModApi.Utilities.PredictPositionInFuture(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Predicts the position in future.
            </summary>
            <param name="targetCurrentPosition">The target current position.</param>
            <param name="targetCurrentVelocity">The target current velocity.</param>
            <param name="timeInFuture">The time in future.</param>
            <returns>The predicted position.</returns>
        </member>
        <member name="M:ModApi.Utilities.QuaterniondToString(UnityEngine.Quaterniond)">
            <summary>
            Converts the Quaterniond to "x,y,z,w" formatted string.
            </summary>
            <param name="q">The Quaterniond.</param>
            <returns>
            The formatted string.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.QuaternionToString(UnityEngine.Quaternion)">
            <summary>
            Converts the Quaternion to "x,y,z,w" formatted string.
            </summary>
            <param name="q">The Quaternion.</param>
            <returns>
            The formatted string.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.RaycastComponent``1(UnityEngine.Ray)">
            <summary>
            Casts a ray searching for a specific component type.
            </summary>
            <typeparam name="T">The component type to cast for.</typeparam>
            <param name="ray">The ray to case along to find the component.</param>
            <returns>
            The component hit by the raycast, or <c>null</c> if none was hit.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.RaycastComponent``1(UnityEngine.Ray,System.Boolean,System.Single)">
            <summary>
            Casts a ray searching for a specific component type.
            </summary>
            <typeparam name="T">The component type to cast for.</typeparam>
            <param name="ray">The ray to case along to find the component.</param>
            <param name="sphereCast">If set to <c>true</c> a SphereCast will be used instead of a raycast.</param>
            <param name="sphereCastRadius">The sphere cast radius (if using a sphere cast, otherwise ignored).</param>
            <returns>
            The component hit by the raycast, or <c>null</c> if none was hit.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.RaycastComponent``1(UnityEngine.Ray,System.Boolean,System.Single,UnityEngine.RaycastHit@)">
            <summary>
            Casts a ray searching for a specific component type.
            </summary>
            <typeparam name="T">The component type to cast for.</typeparam>
            <param name="ray">The ray to case along to find the component.</param>
            <param name="sphereCast">If set to <c>true</c> a SphereCast will be used instead of a raycast.</param>
            <param name="sphereCastRadius">The sphere cast radius (if using a sphere cast, otherwise ignored).</param>
            <param name="rayHit">The <see cref="T:UnityEngine.RaycastHit"/> info.</param>
            <returns>
            The component hit by the raycast, or <c>null</c> if none was hit.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.ReadStreamingAssetsFileAsBytes(System.String)">
            <summary>
            Reads the streaming assets file at the specified path (relative to the streaming assets folder) as a byte array.
            </summary>
            <param name="path">The path (relative to the streaming assets folder).</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:ModApi.Utilities.ReadStreamingAssetsFileAsText(System.String)">
            <summary>
            Reads the streaming assets file at the specified path (relative to the streaming assets folder) as a string.
            </summary>
            <param name="path">The path (relative to the streaming assets folder).</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:ModApi.Utilities.RelativeDate(System.DateTime,System.DateTime)">
            <summary>
            Returns a string representing how long it has been since the date.
            </summary>
            <param name="d1">The first time.</param>
            <param name="d2">The second date.</param>
            <returns>
            The relative date as a string.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.RemoveFileExtension(System.String)">
            <summary>
            Removes the file extension from the filename.
            </summary>
            <param name="fileName">The filename.</param>
            <returns>The filename without the extension.</returns>
        </member>
        <member name="M:ModApi.Utilities.RotatePointAroundPivot(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates the point around the pivot by the specified angle and axis.
            </summary>
            <param name="point">The point.</param>
            <param name="pivot">The pivot.</param>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns>The rotated point.</returns>
        </member>
        <member name="M:ModApi.Utilities.RotateVector(UnityEngine.Vector2d,System.Double)">
            <summary>
            Rotates the vector around the origin by the specified angle.
            </summary>
            <param name="v">The vector.</param>
            <param name="radians">The angle in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.RotateVectorAroundYAxis(UnityEngine.Vector3d,System.Double)">
            <summary>
            Rotates the vector around Y-axis.
            </summary>
            <param name="v">The vector.</param>
            <param name="radians">The radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.RoundPercentage(System.Single)">
            <summary>
            Rounds the float percentage (0-1) to an integer (0-100). If the input percentage is outside
            the range of 0-1 then the resulting int percentage will be outside the range of 0-100.
            </summary>
            <param name="x">The percentage.</param>
            <returns>The rounded percentage.</returns>
        </member>
        <member name="M:ModApi.Utilities.RoundVector3(UnityEngine.Vector3,System.Int32)">
            <summary>
            Rounds the vector3.
            </summary>
            <param name="position">The position.</param>
            <param name="decimalPlaces">The decimal places.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.ScreenPointToRay(UnityEngine.Camera,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Screens the point to ray.
            </summary>
            <param name="camera">The camera.</param>
            <param name="screenPosition">The screen position.</param>
            <param name="useResolutionScale">if set to <c>true</c> then take the game's current resolution scale into account when
            calculating the ray..</param>
            <returns>The ray.</returns>
        </member>
        <member name="M:ModApi.Utilities.ScrubFileName(System.String)">
            <summary>
            Scrubs the name of the file of any invalid characters.
            </summary>
            <param name="name">The file name.</param>
            <returns>The scrubbed string.</returns>
        </member>
        <member name="M:ModApi.Utilities.SetAnimationCurveAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.AnimationCurve)">
            <summary>
            Sets the animation curve value as an XML attribute.
            </summary>
            <param name="element">The XML element on which to save the attribute.</param>
            <param name="attributeName">The name of the attribute to save.</param>
            <param name="curve">The animation curve to be saved.</param>
        </member>
        <member name="M:ModApi.Utilities.SetColorAttribute(System.Xml.Linq.XElement,System.String,UnityEngine.Color)">
            <summary>
            Saves the color value as an XML attribute.
            </summary>
            <param name="element">The XML element on which to save the attribute.</param>
            <param name="attributeName">The name of the attribute to save.</param>
            <param name="color">The color to be saved.</param>
        </member>
        <member name="M:ModApi.Utilities.SetGradientAttribute(System.Xml.Linq.XElement,System.String,System.Boolean,UnityEngine.Gradient)">
            <summary>
            Sets the gradient value as an XML attribute.
            </summary>
            <param name="element">The XML element on which to save the attribute.</param>
            <param name="attributeName">The name of the attribute to save.</param>
            <param name="includeAlphaKeys">If set to <c>true</c>, both color and alpha keys will be saved; otherwise only the color keys are saved.</param>
            <param name="gradient">The gradient to be saved.</param>
        </member>
        <member name="M:ModApi.Utilities.SetLayerRecursive(UnityEngine.GameObject,System.Int32)">
            <summary>
            Sets the layer for the game object and all of its children.
            </summary>
            <param name="rootGameObject">The root game object.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:ModApi.Utilities.SetToActiveForDisabledChildren(UnityEngine.GameObject)">
            <summary>
            Sets to active for disabled children.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:ModApi.Utilities.SnapToGrid(System.Single,System.Single)">
            <summary>
            Snaps to grid. Center based.
            </summary>
            <param name="value">The value.</param>
            <param name="unitSize">Size of the grid's units.</param>
            <returns>
            The snapped value.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.StepTowards(System.Single,System.Single,System.Single)">
            <summary>
            Steps from the start toward the target without blowing past it.
            </summary>
            <param name="start">The start.</param>
            <param name="step">The step.</param>
            <param name="target">The target.</param>
            <returns>The result of the step.</returns>
        </member>
        <member name="M:ModApi.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the variables.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
        </member>
        <member name="M:ModApi.Utilities.TimeToPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Times to position.
            </summary>
            <param name="startingPosition">The starting position.</param>
            <param name="targetPosition">The target position.</param>
            <param name="speed">The speed.</param>
            <returns>The time to the position.</returns>
        </member>
        <member name="M:ModApi.Utilities.ToXElement``1(System.Object)">
            <summary>
            Serializes the supplied object to an XML XElement.
            </summary>
            <typeparam name="T">The class to serialize.</typeparam>
            <param name="obj">The object.</param>
            <returns>The XElement.</returns>
        </member>
        <member name="M:ModApi.Utilities.TrimEnd(System.String,System.String)">
            <summary>
            Trims the end if it matches the specified string.
            </summary>
            <param name="s">The string to trim .</param>
            <param name="trimString">The trim string.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:ModApi.Utilities.Vector2ToString(UnityEngine.Vector2)">
            <summary>
            Vector2s to string.
            </summary>
            <param name="vector2">The vector2.</param>
            <returns>The string representation of the vector.</returns>
        </member>
        <member name="M:ModApi.Utilities.Vector3dToString(UnityEngine.Vector3d,System.String)">
            <summary>
            Converts the Vector3d to "x,y,z" formatted string.
            </summary>
            <param name="vector3">The vector3d to convert to a string.</param>
            <param name="numericFormat">The numeric format.</param>
            <returns>
            The Vector3d to "x,y,z" formatted string.
            </returns>
        </member>
        <member name="M:ModApi.Utilities.Vector3ToString(UnityEngine.Vector3)">
            <summary>
            Converts the Vector3 to "x,y,z" formatted string.
            </summary>
            <param name="vector3">The vector3 to convert to a string.</param>
            <returns>The Vector3 to "x,y,z" formatted string.</returns>
        </member>
        <member name="M:ModApi.Utilities.Vector3ToString(UnityEngine.Vector3,System.Single)">
            <summary>
            Converts the Vector3 to "x,y,z" formatted string.
            </summary>
            <param name="vector3">The vector3 to convert to a string.</param>
            <param name="epsilon">The epsilon value. values less that this will be considered zero.</param>
            <returns>The Vector3 to "x,y,z" formatted string.</returns>
        </member>
        <member name="M:ModApi.Utilities.ConvertMphToKph(System.Single)">
            <summary>
            Converts the MPH to KPH.
            </summary>
            <param name="speedInImperialUnits">The speed in imperial units.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ModApi.Utilities.ReadStreamingAssetsFile``1(System.String)">
            <summary>
            Reads the streaming assets file at the specified path (relative to the streaming assets folder).
            </summary>
            <typeparam name="T">The type of the data to read. (supports <see cref="T:System.String"/> or <see cref="T:System.Byte"/> array.</typeparam>
            <param name="path">The path (relative to the streaming assets folder).</param>
            <returns>The requested data.</returns>
        </member>
        <member name="T:ModApi.Utilities.LeadPositionResult">
            <summary>
            The position and time to target result of a lead prediction operation.
            </summary>
        </member>
        <member name="F:ModApi.Utilities.LeadPositionResult.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:ModApi.Utilities.LeadPositionResult.TimeToTarget">
            <summary>
            The time to target.
            </summary>
        </member>
        <member name="T:System.TodoException">
            <summary>
            An exception thrown for unfinished code.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:System.TodoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.TodoException"/> class.
            </summary>
            <param name="todo">The TODO string.</param>
        </member>
        <member name="P:System.TodoException.Todo">
            <summary>
            Gets the TODO string.
            </summary>
            <value>The TODO string.</value>
        </member>
        <member name="M:Math3d.RayPlaneIntersection(UnityEngine.Vector3d@,UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Gets the intersection between a ray and a plane.
            </summary>
            <param name="intersection">The intersection point.</param>
            <param name="rayOrigin">The ray's origin.</param>
            <param name="rayDirection">The ray's direction.</param>
            <param name="planeNormal">The plane normal.</param>
            <param name="planePoint">The plane point.</param>
            <returns><c>true</c> if the ray intersects the plane, otherwise false.  It will be false if the ray is parallel to the plane, or if it is pointing away.</returns>
        </member>
        <member name="M:Math3d.ProjectPointOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Projects the point on plane.
            </summary>
            <param name="planeNormal">The plane normal.</param>
            <param name="planePoint">The plane point.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Matrix4x4d">
            <summary>
            Bare minimum of Matrix 4x4 class that we need to get by. No extra flare.
            </summary>
        </member>
        <member name="P:UnityEngine.Matrix4x4d.inverse">
            <summary>
              <para>The inverse of this matrix (Read Only).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Matrix4x4d.transpose">
            <summary>
              <para>Returns the transpose of this matrix (Read Only).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Matrix4x4d.isIdentity">
            <summary>
              <para>Is this the identity matrix?</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Matrix4x4d.determinant">
            <summary>
              <para>The determinant of the matrix.</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Matrix4x4d.zero">
            <summary>
              <para>Returns a matrix with all elements set to zero (Read Only).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Matrix4x4d.identity">
            <summary>
              <para>Returns the identity matrix (Read Only).</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.GetColumn(System.Int32)">
            <summary>
              <para>Get a column of the matrix.</para>
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.GetRow(System.Int32)">
            <summary>
              <para>Returns a row of the matrix.</para>
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.SetColumn(System.Int32,UnityEngine.Vector4d)">
            <summary>
              <para>Sets a column of the matrix.</para>
            </summary>
            <param name="i"></param>
            <param name="v"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.SetRow(System.Int32,UnityEngine.Vector4d)">
            <summary>
              <para>Sets a row of the matrix.</para>
            </summary>
            <param name="i"></param>
            <param name="v"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.MultiplyMatrix(UnityEngine.Matrix4x4d)">
            <summary>
            Multiplies this matrix and the specified matrix.
            The specified matrix will be on the right hand side of the multiplication.
            </summary>
            <param name="rhs">The right hand side matrix.</param>
            <returns>A new matrix with the result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.MultiplyMatrix(UnityEngine.Matrix4x4d,UnityEngine.Matrix4x4d)">
            <summary>
            Multiplies this matrix and the specified matrix.
            The specified matrix will be on the right hand side of the multiplication.
            </summary>
            <param name="rhs">The right hand side matrix.</param>
            <param name="result">The matrix in which to store the result of the multiplication.</param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.MultiplyPoint(UnityEngine.Vector3d)">
            <summary>
              <para>Transforms a position by this matrix (generic).</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.MultiplyPoint3x4(UnityEngine.Vector3d)">
            <summary>
              <para>Transforms a position by this matrix (fast).</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.MultiplyVector(UnityEngine.Vector3d)">
            <summary>
              <para>Transforms a direction by this matrix.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.Scale(UnityEngine.Vector3d)">
            <summary>
              <para>Creates a scaling matrix.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.SetTRS(UnityEngine.Vector3d,UnityEngine.Quaterniond,UnityEngine.Vector3d)">
            <summary>
              <para>Sets this matrix to a translation, rotation and scaling matrix.</para>
            </summary>
            <param name="pos"></param>
            <param name="q"></param>
            <param name="s"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.TRS(UnityEngine.Vector3d,UnityEngine.Quaterniond,UnityEngine.Vector3d)">
            <summary>
              <para>Sets this matrix to a translation, rotation and scaling matrix.</para>
            </summary>
            <param name="pos"></param>
            <param name="q"></param>
            <param name="s"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.ToMatrix4x4">
            <summary>
            Converts the matrix to Unity's standard float-based matrix.
            </summary>
            <returns>Unity's standard float-based matrix representation for this matrix.</returns>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.ToString">
            <summary>
              <para>Returns a nicely formatted string for this matrix.</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this matrix.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates an orthogonal projection matrix.</para>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="top"></param>
            <param name="zNear"></param>
            <param name="zFar"></param>
        </member>
        <member name="M:UnityEngine.Matrix4x4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates a perspective projection matrix.</para>
            </summary>
            <param name="fov"></param>
            <param name="aspect"></param>
            <param name="zNear"></param>
            <param name="zFar"></param>
        </member>
        <member name="T:UnityEngine.Quaterniond">
            <summary>
              <para>Quaternions are used to represent rotations.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Quaterniond.x">
            <summary>
              <para>X component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Quaterniond.y">
            <summary>
              <para>Y component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Quaterniond.z">
            <summary>
              <para>Z component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Quaterniond.w">
            <summary>
              <para>W component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Quaterniond.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Constructs new Quaternion with given x,y,z,w components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:UnityEngine.Quaterniond.#ctor(UnityEngine.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Quaterniond"/> struct from
            a floating precision quaternion.
            </summary>
            <param name="q">The floating precision quaternion.</param>
        </member>
        <member name="P:UnityEngine.Quaterniond.identity">
            <summary>
              <para>The identity rotation (Read Only).</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Quaterniond.Angle(UnityEngine.Quaterniond,UnityEngine.Quaterniond)">
            <summary>
              <para>Returns the angle in degrees between two rotations a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:UnityEngine.Quaterniond.AngleAxis(System.Double,UnityEngine.Vector3d)">
            <summary>
            Creates a rotation which rotates angle degrees around axis.
            </summary>
            <param name="degress">The rotation degrees.</param>
            <param name="axis">The axis of rotation.</param>
            <returns>A rotation which rotates angle degrees around axis.</returns>
        </member>
        <member name="M:UnityEngine.Quaterniond.Dot(UnityEngine.Quaterniond,UnityEngine.Quaterniond)">
            <summary>
              <para>The dot product between two rotations.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:UnityEngine.Quaterniond.Euler(System.Double,System.Double,System.Double)">
            <summary>
              <para>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:UnityEngine.Quaterniond.Inverse(UnityEngine.Quaterniond)">
            <summary>
            Returns the Inverse of rotation.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The inverse of the quaternion.</returns>
        </member>
        <member name="M:UnityEngine.Quaterniond.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Set x, y, z and w components of an existing Quaternion.</para>
            </summary>
            <param name="new_x"></param>
            <param name="new_y"></param>
            <param name="new_z"></param>
            <param name="new_w"></param>
        </member>
        <member name="M:UnityEngine.Quaterniond.ToString">
            <summary>
              <para>Returns a nicely formatted string of the Quaternion.</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Quaterniond.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string of the Quaternion.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:UnityEngine.Ray3d">
            <summary>
            Ray3d struct.
            </summary>
        </member>
        <member name="F:UnityEngine.Ray3d.Direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="F:UnityEngine.Ray3d.Origin">
            <summary>
            The origin
            </summary>
        </member>
        <member name="M:UnityEngine.Ray3d.#ctor(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Ray3d"/> struct.
            </summary>
            <param name="direction">The direction.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:UnityEngine.Ray3d.#ctor(UnityEngine.Ray)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Ray3d"/> struct.
            </summary>
            <param name="ray">The ray.</param>
        </member>
        <member name="M:UnityEngine.Ray3d.ToRay">
            <summary>
            Converts the double-based ray to a float-based ray.
            </summary>
            <returns>The float-based ray.</returns>
        </member>
        <member name="T:UnityEngine.Vector2i">
            <summary>
            Vector2 with integer attributes.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2i.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2i.y">
            <summary>
            The y
            </summary>
        </member>
        <member name="M:UnityEngine.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector2i"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:UnityEngine.Vector2i.op_Explicit(System.Xml.Linq.XAttribute)~UnityEngine.Vector2i">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Xml.Linq.XAttribute"/> to <see cref="T:UnityEngine.Vector2i"/>.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>
            The result of the conversion.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the attribute argument is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">The expected format of the attribute should be \"int,int\".</exception>
        </member>
        <member name="M:UnityEngine.Vector2i.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{UnityEngine.Vector2i}">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Xml.Linq.XAttribute"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>
            The result of the conversion.
            </returns>
            <exception cref="T:System.FormatException">The expected format of the attribute should be \"int,int\".</exception>
        </member>
        <member name="M:UnityEngine.Vector2i.op_Subtraction(UnityEngine.Vector2i,UnityEngine.Vector2i)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.op_Inequality(UnityEngine.Vector2i,UnityEngine.Vector2i)">
            <summary>
            Implements the operator =.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.op_Addition(UnityEngine.Vector2i,UnityEngine.Vector2i)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.op_Equality(UnityEngine.Vector2i,UnityEngine.Vector2i)">
            <summary>
            Implements the operator =.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector2i.ToVector2">
            <summary>
            Converts to a Vector2.
            </summary>
            <returns>The vector 2.</returns>
        </member>
        <member name="F:UnityEngine.Vector3d._stringSplitComma">
            <summary>
            A string split array for comma separators.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d._stringTrimChars">
            <summary>
            The string array for trimming a Vector3d for parsing.
            </summary>
        </member>
        <member name="M:UnityEngine.Vector3d.TryParse(System.String,UnityEngine.Vector3d@)">
            <summary>
            Attempts to parse the string into a Vector3d. If successful,
            result is set to the vector and true is returned. If unsuccessful,
            result is set to Vector3d.zero and false is returned.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="result">The result.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="T:UnityEngine.Vector3i">
            <summary>
            Vector3 with integer attributes.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3i.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3i.y">
            <summary>
            The y
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3i.z">
            <summary>
            The z
            </summary>
        </member>
        <member name="M:UnityEngine.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnityEngine.Vector3i"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:UnityEngine.Vector3i.op_Subtraction(UnityEngine.Vector3i,UnityEngine.Vector3i)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector3i.op_Addition(UnityEngine.Vector3i,UnityEngine.Vector3i)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector3i.ToVector3">
            <summary>
            To the vector3.
            </summary>
            <returns>The vector 3.</returns>
        </member>
        <member name="T:UnityEngine.Vector4d">
            <summary>
              <para>Representation of four-dimensional vectors.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Vector4d.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Vector4d.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Vector4d.z">
            <summary>
              <para>Z component of the vector.</para>
            </summary>
        </member>
        <member name="F:UnityEngine.Vector4d.w">
            <summary>
              <para>W component of the vector.</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Vector4d.normalized">
            <summary>
              <para>Returns this vector with a magnitude of 1 (Read Only).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Vector4d.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Vector4d.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Vector4d.zero">
            <summary>
              <para>Shorthand for writing Vector4d(0,0,0,0).</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Vector4d.one">
            <summary>
              <para>Shorthand for writing Vector4d(1,1,1,1).</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y, z, w components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y, z components and sets w to zero.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.#ctor(System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y components and sets z and w to zero.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Set x, y, z and w components of an existing Vector4d.</para>
            </summary>
            <param name="new_x"></param>
            <param name="new_y"></param>
            <param name="new_z"></param>
            <param name="new_w"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Lerp(UnityEngine.Vector4d,UnityEngine.Vector4d,System.Double)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.LerpUnclamped(UnityEngine.Vector4d,UnityEngine.Vector4d,System.Double)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.MoveTowards(UnityEngine.Vector4d,UnityEngine.Vector4d,System.Double)">
            <summary>
              <para>Moves a point current towards target.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Scale(UnityEngine.Vector4d,UnityEngine.Vector4d)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Scale(UnityEngine.Vector4d)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Normalize(UnityEngine.Vector4d)">
            <summary>
              <para></para>
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Normalize">
            <summary>
              <para>Makes this vector have a magnitude of 1.</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Vector4d.ToString">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
        </member>
        <member name="M:UnityEngine.Vector4d.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Dot(UnityEngine.Vector4d,UnityEngine.Vector4d)">
            <summary>
              <para>Dot Product of two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Project(UnityEngine.Vector4d,UnityEngine.Vector4d)">
            <summary>
              <para>Projects a vector onto another vector.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Distance(UnityEngine.Vector4d,UnityEngine.Vector4d)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Min(UnityEngine.Vector4d,UnityEngine.Vector4d)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:UnityEngine.Vector4d.Max(UnityEngine.Vector4d,UnityEngine.Vector4d)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="T:UnityFS.Aerofoil">
            <summary>
            Definse airfoil related functionality for UnityFS
            </summary>
            <seealso cref="T:UnityEngine.MonoBehaviour" />
        </member>
        <member name="F:UnityFS.Aerofoil.CD">
            <summary>
            The cd
            </summary>
        </member>
        <member name="F:UnityFS.Aerofoil.CL">
            <summary>
            The cl
            </summary>
        </member>
        <member name="F:UnityFS.Aerofoil.CM">
            <summary>
            The cm
            </summary>
        </member>
    </members>
</doc>
